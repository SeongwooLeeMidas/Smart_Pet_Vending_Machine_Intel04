
final_test_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067b4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000082c  08006954  08006954  00007954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007180  08007180  00009084  2**0
                  CONTENTS
  4 .ARM          00000008  08007180  08007180  00008180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007188  08007188  00009084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007188  08007188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800718c  0800718c  0000818c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08007190  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b1c  20000084  08007214  00009084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ba0  08007214  00009ba0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d89  00000000  00000000  000090b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003623  00000000  00000000  0001de3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  00021460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e6f  00000000  00000000  00022710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019bdd  00000000  00000000  0002357f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000162c1  00000000  00000000  0003d15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009911e  00000000  00000000  0005341d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ec53b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a28  00000000  00000000  000ec580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000f1fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800693c 	.word	0x0800693c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	0800693c 	.word	0x0800693c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <esp_at_command>:
static uint8_t data;
//static cb_data_t cb_data;
cb_data_t cb_data;
extern UART_HandleTypeDef huart6;
static int esp_at_command(uint8_t *cmd, uint8_t *resp, uint16_t *length, int16_t time_out)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
 80005ac:	807b      	strh	r3, [r7, #2]
    *length = 0;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2200      	movs	r2, #0
 80005b2:	801a      	strh	r2, [r3, #0]
    memset(resp, 0x00, MAX_UART_RX_BUFFER);
 80005b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80005b8:	2100      	movs	r1, #0
 80005ba:	68b8      	ldr	r0, [r7, #8]
 80005bc:	f005 f8dc 	bl	8005778 <memset>
    memset(&cb_data, 0x00, sizeof(cb_data_t));
 80005c0:	f240 4202 	movw	r2, #1026	@ 0x402
 80005c4:	2100      	movs	r1, #0
 80005c6:	4827      	ldr	r0, [pc, #156]	@ (8000664 <esp_at_command+0xc4>)
 80005c8:	f005 f8d6 	bl	8005778 <memset>
    if(HAL_UART_Transmit(&huart6, cmd, strlen((char *)cmd), 100) != HAL_OK)
 80005cc:	68f8      	ldr	r0, [r7, #12]
 80005ce:	f7ff fe11 	bl	80001f4 <strlen>
 80005d2:	4603      	mov	r3, r0
 80005d4:	b29a      	uxth	r2, r3
 80005d6:	2364      	movs	r3, #100	@ 0x64
 80005d8:	68f9      	ldr	r1, [r7, #12]
 80005da:	4823      	ldr	r0, [pc, #140]	@ (8000668 <esp_at_command+0xc8>)
 80005dc:	f002 fb7c 	bl	8002cd8 <HAL_UART_Transmit>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d031      	beq.n	800064a <esp_at_command+0xaa>
        return -1;
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ea:	e037      	b.n	800065c <esp_at_command+0xbc>

    while(time_out > 0)
    {
        if(cb_data.length >= MAX_UART_RX_BUFFER)
 80005ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000664 <esp_at_command+0xc4>)
 80005ee:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80005f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80005f6:	d302      	bcc.n	80005fe <esp_at_command+0x5e>
            return -2;
 80005f8:	f06f 0301 	mvn.w	r3, #1
 80005fc:	e02e      	b.n	800065c <esp_at_command+0xbc>
        else if(strstr((char *)cb_data.buf, "ERROR") != NULL)
 80005fe:	491b      	ldr	r1, [pc, #108]	@ (800066c <esp_at_command+0xcc>)
 8000600:	4818      	ldr	r0, [pc, #96]	@ (8000664 <esp_at_command+0xc4>)
 8000602:	f005 f93d 	bl	8005880 <strstr>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d002      	beq.n	8000612 <esp_at_command+0x72>
            return -3;
 800060c:	f06f 0302 	mvn.w	r3, #2
 8000610:	e024      	b.n	800065c <esp_at_command+0xbc>
        else if(strstr((char *)cb_data.buf, "OK") != NULL)
 8000612:	4917      	ldr	r1, [pc, #92]	@ (8000670 <esp_at_command+0xd0>)
 8000614:	4813      	ldr	r0, [pc, #76]	@ (8000664 <esp_at_command+0xc4>)
 8000616:	f005 f933 	bl	8005880 <strstr>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d00d      	beq.n	800063c <esp_at_command+0x9c>
        {
            memcpy(resp, cb_data.buf, cb_data.length);
 8000620:	4b10      	ldr	r3, [pc, #64]	@ (8000664 <esp_at_command+0xc4>)
 8000622:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000626:	461a      	mov	r2, r3
 8000628:	490e      	ldr	r1, [pc, #56]	@ (8000664 <esp_at_command+0xc4>)
 800062a:	68b8      	ldr	r0, [r7, #8]
 800062c:	f005 fa0f 	bl	8005a4e <memcpy>
            *length = cb_data.length;
 8000630:	4b0c      	ldr	r3, [pc, #48]	@ (8000664 <esp_at_command+0xc4>)
 8000632:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	@ 0x400
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	801a      	strh	r2, [r3, #0]

            break;
 800063a:	e00a      	b.n	8000652 <esp_at_command+0xb2>
        }

        time_out -= 10;
 800063c:	887b      	ldrh	r3, [r7, #2]
 800063e:	3b0a      	subs	r3, #10
 8000640:	b29b      	uxth	r3, r3
 8000642:	807b      	strh	r3, [r7, #2]
        HAL_Delay(10);
 8000644:	200a      	movs	r0, #10
 8000646:	f001 f86b 	bl	8001720 <HAL_Delay>
    while(time_out > 0)
 800064a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800064e:	2b00      	cmp	r3, #0
 8000650:	dccc      	bgt.n	80005ec <esp_at_command+0x4c>
    }
    HAL_Delay(500);
 8000652:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000656:	f001 f863 	bl	8001720 <HAL_Delay>
    return 0;
 800065a:	2300      	movs	r3, #0
}
 800065c:	4618      	mov	r0, r3
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	200004e8 	.word	0x200004e8
 8000668:	20000cb4 	.word	0x20000cb4
 800066c:	08006954 	.word	0x08006954
 8000670:	0800695c 	.word	0x0800695c

08000674 <esp_reset>:

static int esp_reset(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
    uint16_t length = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	80fb      	strh	r3, [r7, #6]
    if(esp_at_command((uint8_t *)"AT+RST\r\n", (uint8_t *)response, &length, 1000) != 0)
 800067e:	1dba      	adds	r2, r7, #6
 8000680:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000684:	490a      	ldr	r1, [pc, #40]	@ (80006b0 <esp_reset+0x3c>)
 8000686:	480b      	ldr	r0, [pc, #44]	@ (80006b4 <esp_reset+0x40>)
 8000688:	f7ff ff8a 	bl	80005a0 <esp_at_command>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d002      	beq.n	8000698 <esp_reset+0x24>
    {
       return -1;
 8000692:	f04f 33ff 	mov.w	r3, #4294967295
 8000696:	e007      	b.n	80006a8 <esp_reset+0x34>
    }
    return esp_at_command((uint8_t *)"AT\r\n", (uint8_t *)response, &length, 1000);
 8000698:	1dba      	adds	r2, r7, #6
 800069a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800069e:	4904      	ldr	r1, [pc, #16]	@ (80006b0 <esp_reset+0x3c>)
 80006a0:	4805      	ldr	r0, [pc, #20]	@ (80006b8 <esp_reset+0x44>)
 80006a2:	f7ff ff7d 	bl	80005a0 <esp_at_command>
 80006a6:	4603      	mov	r3, r0
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	200000b0 	.word	0x200000b0
 80006b4:	08006960 	.word	0x08006960
 80006b8:	0800696c 	.word	0x0800696c

080006bc <request_ip_addr>:

    return 0;
}

static int request_ip_addr(uint8_t is_debug)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
    uint16_t length = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	817b      	strh	r3, [r7, #10]

    if(esp_at_command((uint8_t *)"AT+CIFSR\r\n", (uint8_t *)response, &length, 1000) != 0)
 80006ca:	f107 020a 	add.w	r2, r7, #10
 80006ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006d2:	492d      	ldr	r1, [pc, #180]	@ (8000788 <request_ip_addr+0xcc>)
 80006d4:	482d      	ldr	r0, [pc, #180]	@ (800078c <request_ip_addr+0xd0>)
 80006d6:	f7ff ff63 	bl	80005a0 <esp_at_command>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d003      	beq.n	80006e8 <request_ip_addr+0x2c>
        printf("request ip_addr command fail\r\n");
 80006e0:	482b      	ldr	r0, [pc, #172]	@ (8000790 <request_ip_addr+0xd4>)
 80006e2:	f004 ff49 	bl	8005578 <puts>
 80006e6:	e049      	b.n	800077c <request_ip_addr+0xc0>
    else
    {
        char *line = strtok(response, "\r\n");
 80006e8:	492a      	ldr	r1, [pc, #168]	@ (8000794 <request_ip_addr+0xd8>)
 80006ea:	4827      	ldr	r0, [pc, #156]	@ (8000788 <request_ip_addr+0xcc>)
 80006ec:	f005 f86c 	bl	80057c8 <strtok>
 80006f0:	6178      	str	r0, [r7, #20]

        if(is_debug)
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d03e      	beq.n	8000776 <request_ip_addr+0xba>
        {
            for(int i = 0 ; i < length ; i++)
 80006f8:	2300      	movs	r3, #0
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	e009      	b.n	8000712 <request_ip_addr+0x56>
                printf("%c", response[i]);
 80006fe:	4a22      	ldr	r2, [pc, #136]	@ (8000788 <request_ip_addr+0xcc>)
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	4413      	add	r3, r2
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	4618      	mov	r0, r3
 8000708:	f004 fed8 	bl	80054bc <putchar>
            for(int i = 0 ; i < length ; i++)
 800070c:	693b      	ldr	r3, [r7, #16]
 800070e:	3301      	adds	r3, #1
 8000710:	613b      	str	r3, [r7, #16]
 8000712:	897b      	ldrh	r3, [r7, #10]
 8000714:	461a      	mov	r2, r3
 8000716:	693b      	ldr	r3, [r7, #16]
 8000718:	4293      	cmp	r3, r2
 800071a:	dbf0      	blt.n	80006fe <request_ip_addr+0x42>
        }

        while(line != NULL)
 800071c:	e02b      	b.n	8000776 <request_ip_addr+0xba>
        {
            if(strstr(line, "CIFSR:STAIP") != NULL)
 800071e:	491e      	ldr	r1, [pc, #120]	@ (8000798 <request_ip_addr+0xdc>)
 8000720:	6978      	ldr	r0, [r7, #20]
 8000722:	f005 f8ad 	bl	8005880 <strstr>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d01f      	beq.n	800076c <request_ip_addr+0xb0>
            {
                char *ip;

                strtok(line, "\"");
 800072c:	491b      	ldr	r1, [pc, #108]	@ (800079c <request_ip_addr+0xe0>)
 800072e:	6978      	ldr	r0, [r7, #20]
 8000730:	f005 f84a 	bl	80057c8 <strtok>
                ip = strtok(NULL, "\"");
 8000734:	4919      	ldr	r1, [pc, #100]	@ (800079c <request_ip_addr+0xe0>)
 8000736:	2000      	movs	r0, #0
 8000738:	f005 f846 	bl	80057c8 <strtok>
 800073c:	60f8      	str	r0, [r7, #12]
                if(strcmp(ip, "0.0.0.0") != 0)
 800073e:	4918      	ldr	r1, [pc, #96]	@ (80007a0 <request_ip_addr+0xe4>)
 8000740:	68f8      	ldr	r0, [r7, #12]
 8000742:	f7ff fd4d 	bl	80001e0 <strcmp>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d00f      	beq.n	800076c <request_ip_addr+0xb0>
                {
                    memset(ip_addr, 0x00, sizeof(ip_addr));
 800074c:	2210      	movs	r2, #16
 800074e:	2100      	movs	r1, #0
 8000750:	4814      	ldr	r0, [pc, #80]	@ (80007a4 <request_ip_addr+0xe8>)
 8000752:	f005 f811 	bl	8005778 <memset>
                    memcpy(ip_addr, ip, strlen(ip));
 8000756:	68f8      	ldr	r0, [r7, #12]
 8000758:	f7ff fd4c 	bl	80001f4 <strlen>
 800075c:	4603      	mov	r3, r0
 800075e:	461a      	mov	r2, r3
 8000760:	68f9      	ldr	r1, [r7, #12]
 8000762:	4810      	ldr	r0, [pc, #64]	@ (80007a4 <request_ip_addr+0xe8>)
 8000764:	f005 f973 	bl	8005a4e <memcpy>
                    return 0;
 8000768:	2300      	movs	r3, #0
 800076a:	e009      	b.n	8000780 <request_ip_addr+0xc4>
                }
            }
            line = strtok(NULL, "\r\n");
 800076c:	4909      	ldr	r1, [pc, #36]	@ (8000794 <request_ip_addr+0xd8>)
 800076e:	2000      	movs	r0, #0
 8000770:	f005 f82a 	bl	80057c8 <strtok>
 8000774:	6178      	str	r0, [r7, #20]
        while(line != NULL)
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d1d0      	bne.n	800071e <request_ip_addr+0x62>
        }
    }

    return -1;
 800077c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000780:	4618      	mov	r0, r3
 8000782:	3718      	adds	r7, #24
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	200000b0 	.word	0x200000b0
 800078c:	080069b0 	.word	0x080069b0
 8000790:	080069bc 	.word	0x080069bc
 8000794:	080069a4 	.word	0x080069a4
 8000798:	080069dc 	.word	0x080069dc
 800079c:	080069ac 	.word	0x080069ac
 80007a0:	08006974 	.word	0x08006974
 80007a4:	200000a0 	.word	0x200000a0

080007a8 <esp_client_conn>:
int esp_client_conn()
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b092      	sub	sp, #72	@ 0x48
 80007ac:	af00      	add	r7, sp, #0
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	223c      	movs	r2, #60	@ 0x3c
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f004 ffdc 	bl	8005778 <memset>
  uint16_t length = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	80fb      	strh	r3, [r7, #6]
	sprintf(at_cmd,"AT+CIPSTART=\"TCP\",\"%s\",%d\r\n",DST_IP,DST_PORT);
 80007c4:	f107 0008 	add.w	r0, r7, #8
 80007c8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80007cc:	4a09      	ldr	r2, [pc, #36]	@ (80007f4 <esp_client_conn+0x4c>)
 80007ce:	490a      	ldr	r1, [pc, #40]	@ (80007f8 <esp_client_conn+0x50>)
 80007d0:	f004 feda 	bl	8005588 <siprintf>
	esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000);					//CONNECT
 80007d4:	1dba      	adds	r2, r7, #6
 80007d6:	f107 0008 	add.w	r0, r7, #8
 80007da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007de:	4907      	ldr	r1, [pc, #28]	@ (80007fc <esp_client_conn+0x54>)
 80007e0:	f7ff fede 	bl	80005a0 <esp_at_command>

	esp_send_data("["LOGID":"PASSWD"]");
 80007e4:	4806      	ldr	r0, [pc, #24]	@ (8000800 <esp_client_conn+0x58>)
 80007e6:	f000 f919 	bl	8000a1c <esp_send_data>
	return 0;
 80007ea:	2300      	movs	r3, #0
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3748      	adds	r7, #72	@ 0x48
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	080069e8 	.word	0x080069e8
 80007f8:	080069f8 	.word	0x080069f8
 80007fc:	200000b0 	.word	0x200000b0
 8000800:	08006a14 	.word	0x08006a14

08000804 <drv_esp_init>:

int drv_esp_init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
    huart6.Instance = USART6;
 8000808:	4b18      	ldr	r3, [pc, #96]	@ (800086c <drv_esp_init+0x68>)
 800080a:	4a19      	ldr	r2, [pc, #100]	@ (8000870 <drv_esp_init+0x6c>)
 800080c:	601a      	str	r2, [r3, #0]
    huart6.Init.BaudRate = 38400;
 800080e:	4b17      	ldr	r3, [pc, #92]	@ (800086c <drv_esp_init+0x68>)
 8000810:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000814:	605a      	str	r2, [r3, #4]
    huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b15      	ldr	r3, [pc, #84]	@ (800086c <drv_esp_init+0x68>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
    huart6.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b13      	ldr	r3, [pc, #76]	@ (800086c <drv_esp_init+0x68>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
    huart6.Init.Parity = UART_PARITY_NONE;
 8000822:	4b12      	ldr	r3, [pc, #72]	@ (800086c <drv_esp_init+0x68>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
    huart6.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b10      	ldr	r3, [pc, #64]	@ (800086c <drv_esp_init+0x68>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
    huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <drv_esp_init+0x68>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
    huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b0d      	ldr	r3, [pc, #52]	@ (800086c <drv_esp_init+0x68>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
    if(HAL_UART_Init(&huart6) != HAL_OK)
 800083a:	480c      	ldr	r0, [pc, #48]	@ (800086c <drv_esp_init+0x68>)
 800083c:	f002 f9fc 	bl	8002c38 <HAL_UART_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d002      	beq.n	800084c <drv_esp_init+0x48>
        return -1;
 8000846:	f04f 33ff 	mov.w	r3, #4294967295
 800084a:	e00c      	b.n	8000866 <drv_esp_init+0x62>

    memset(ip_addr, 0x00, sizeof(ip_addr));
 800084c:	2210      	movs	r2, #16
 800084e:	2100      	movs	r1, #0
 8000850:	4808      	ldr	r0, [pc, #32]	@ (8000874 <drv_esp_init+0x70>)
 8000852:	f004 ff91 	bl	8005778 <memset>
    HAL_UART_Receive_IT(&huart6, &data, 1);
 8000856:	2201      	movs	r2, #1
 8000858:	4907      	ldr	r1, [pc, #28]	@ (8000878 <drv_esp_init+0x74>)
 800085a:	4804      	ldr	r0, [pc, #16]	@ (800086c <drv_esp_init+0x68>)
 800085c:	f002 fac7 	bl	8002dee <HAL_UART_Receive_IT>

    return esp_reset();
 8000860:	f7ff ff08 	bl	8000674 <esp_reset>
 8000864:	4603      	mov	r3, r0
}
 8000866:	4618      	mov	r0, r3
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000cb4 	.word	0x20000cb4
 8000870:	40011400 	.word	0x40011400
 8000874:	200000a0 	.word	0x200000a0
 8000878:	200004e7 	.word	0x200004e7

0800087c <reset_func>:
void reset_func()
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	printf("esp reset... ");
 8000880:	4808      	ldr	r0, [pc, #32]	@ (80008a4 <reset_func+0x28>)
 8000882:	f004 fe09 	bl	8005498 <iprintf>
	if(esp_reset() == 0)
 8000886:	f7ff fef5 	bl	8000674 <esp_reset>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d103      	bne.n	8000898 <reset_func+0x1c>
			printf("OK\r\n");
 8000890:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <reset_func+0x2c>)
 8000892:	f004 fe71 	bl	8005578 <puts>
	else
			printf("fail\r\n");
}
 8000896:	e002      	b.n	800089e <reset_func+0x22>
			printf("fail\r\n");
 8000898:	4804      	ldr	r0, [pc, #16]	@ (80008ac <reset_func+0x30>)
 800089a:	f004 fe6d 	bl	8005578 <puts>
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	08006a28 	.word	0x08006a28
 80008a8:	08006a38 	.word	0x08006a38
 80008ac:	08006a3c 	.word	0x08006a3c

080008b0 <ap_conn_func>:
          printf("%c", response[i]);
  }
}

void ap_conn_func(char *ssid, char *passwd)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b094      	sub	sp, #80	@ 0x50
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
  uint16_t length = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	223c      	movs	r2, #60	@ 0x3c
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f004 ff53 	bl	8005778 <memset>
  if(ssid == NULL || passwd == NULL)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d002      	beq.n	80008de <ap_conn_func+0x2e>
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d103      	bne.n	80008e6 <ap_conn_func+0x36>
  {
      printf("invalid command : ap_conn <ssid> <passwd>\r\n");
 80008de:	4812      	ldr	r0, [pc, #72]	@ (8000928 <ap_conn_func+0x78>)
 80008e0:	f004 fe4a 	bl	8005578 <puts>
 80008e4:	e01c      	b.n	8000920 <ap_conn_func+0x70>
      return;
  }

  memset(at_cmd, 0x00, sizeof(at_cmd));
 80008e6:	f107 030c 	add.w	r3, r7, #12
 80008ea:	2240      	movs	r2, #64	@ 0x40
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f004 ff42 	bl	8005778 <memset>
  sprintf(at_cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid,passwd);
 80008f4:	f107 000c 	add.w	r0, r7, #12
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	490b      	ldr	r1, [pc, #44]	@ (800092c <ap_conn_func+0x7c>)
 80008fe:	f004 fe43 	bl	8005588 <siprintf>
  if(esp_at_command((uint8_t *)at_cmd, (uint8_t *)response, &length, 6000) != 0)
 8000902:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8000906:	f107 000c 	add.w	r0, r7, #12
 800090a:	f241 7370 	movw	r3, #6000	@ 0x1770
 800090e:	4908      	ldr	r1, [pc, #32]	@ (8000930 <ap_conn_func+0x80>)
 8000910:	f7ff fe46 	bl	80005a0 <esp_at_command>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d002      	beq.n	8000920 <ap_conn_func+0x70>
      printf("ap scan command fail\r\n");
 800091a:	4806      	ldr	r0, [pc, #24]	@ (8000934 <ap_conn_func+0x84>)
 800091c:	f004 fe2c 	bl	8005578 <puts>
  else
  {
//      for(int i = 0 ; i < length ; i++)
//          printf("%c", response[i]);
  }
}
 8000920:	3750      	adds	r7, #80	@ 0x50
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	08006a80 	.word	0x08006a80
 800092c:	08006aac 	.word	0x08006aac
 8000930:	200000b0 	.word	0x200000b0
 8000934:	08006a68 	.word	0x08006a68

08000938 <HAL_UART_RxCpltCallback>:

    return 0;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]

    if(huart->Instance == USART6)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a23      	ldr	r2, [pc, #140]	@ (80009d4 <HAL_UART_RxCpltCallback+0x9c>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d117      	bne.n	800097a <HAL_UART_RxCpltCallback+0x42>
    {
        if(cb_data.length < MAX_ESP_RX_BUFFER)
 800094a:	4b23      	ldr	r3, [pc, #140]	@ (80009d8 <HAL_UART_RxCpltCallback+0xa0>)
 800094c:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000950:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000954:	d20c      	bcs.n	8000970 <HAL_UART_RxCpltCallback+0x38>
        {
            cb_data.buf[cb_data.length++] = data;
 8000956:	4b20      	ldr	r3, [pc, #128]	@ (80009d8 <HAL_UART_RxCpltCallback+0xa0>)
 8000958:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 800095c:	1c5a      	adds	r2, r3, #1
 800095e:	b291      	uxth	r1, r2
 8000960:	4a1d      	ldr	r2, [pc, #116]	@ (80009d8 <HAL_UART_RxCpltCallback+0xa0>)
 8000962:	f8a2 1400 	strh.w	r1, [r2, #1024]	@ 0x400
 8000966:	461a      	mov	r2, r3
 8000968:	4b1c      	ldr	r3, [pc, #112]	@ (80009dc <HAL_UART_RxCpltCallback+0xa4>)
 800096a:	7819      	ldrb	r1, [r3, #0]
 800096c:	4b1a      	ldr	r3, [pc, #104]	@ (80009d8 <HAL_UART_RxCpltCallback+0xa0>)
 800096e:	5499      	strb	r1, [r3, r2]
        }

        HAL_UART_Receive_IT(huart, &data, 1);
 8000970:	2201      	movs	r2, #1
 8000972:	491a      	ldr	r1, [pc, #104]	@ (80009dc <HAL_UART_RxCpltCallback+0xa4>)
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f002 fa3a 	bl	8002dee <HAL_UART_Receive_IT>
    }
    if(huart->Instance == USART2)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a18      	ldr	r2, [pc, #96]	@ (80009e0 <HAL_UART_RxCpltCallback+0xa8>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d122      	bne.n	80009ca <HAL_UART_RxCpltCallback+0x92>
    {
    	static int i=0;
    	rx2Data[i] = cdata;
 8000984:	4b17      	ldr	r3, [pc, #92]	@ (80009e4 <HAL_UART_RxCpltCallback+0xac>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a17      	ldr	r2, [pc, #92]	@ (80009e8 <HAL_UART_RxCpltCallback+0xb0>)
 800098a:	7811      	ldrb	r1, [r2, #0]
 800098c:	4a17      	ldr	r2, [pc, #92]	@ (80009ec <HAL_UART_RxCpltCallback+0xb4>)
 800098e:	54d1      	strb	r1, [r2, r3]
    	if(rx2Data[i] == '\r')
 8000990:	4b14      	ldr	r3, [pc, #80]	@ (80009e4 <HAL_UART_RxCpltCallback+0xac>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a15      	ldr	r2, [pc, #84]	@ (80009ec <HAL_UART_RxCpltCallback+0xb4>)
 8000996:	5cd3      	ldrb	r3, [r2, r3]
 8000998:	b2db      	uxtb	r3, r3
 800099a:	2b0d      	cmp	r3, #13
 800099c:	d10b      	bne.n	80009b6 <HAL_UART_RxCpltCallback+0x7e>
    	{
    		rx2Data[i] = '\0';
 800099e:	4b11      	ldr	r3, [pc, #68]	@ (80009e4 <HAL_UART_RxCpltCallback+0xac>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a12      	ldr	r2, [pc, #72]	@ (80009ec <HAL_UART_RxCpltCallback+0xb4>)
 80009a4:	2100      	movs	r1, #0
 80009a6:	54d1      	strb	r1, [r2, r3]
    		rx2Flag = 1;
 80009a8:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <HAL_UART_RxCpltCallback+0xb8>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	701a      	strb	r2, [r3, #0]
    		i = 0;
 80009ae:	4b0d      	ldr	r3, [pc, #52]	@ (80009e4 <HAL_UART_RxCpltCallback+0xac>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	e004      	b.n	80009c0 <HAL_UART_RxCpltCallback+0x88>
    	}
    	else
    	{
    		i++;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	@ (80009e4 <HAL_UART_RxCpltCallback+0xac>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	3301      	adds	r3, #1
 80009bc:	4a09      	ldr	r2, [pc, #36]	@ (80009e4 <HAL_UART_RxCpltCallback+0xac>)
 80009be:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(huart, &cdata,1);
 80009c0:	2201      	movs	r2, #1
 80009c2:	4909      	ldr	r1, [pc, #36]	@ (80009e8 <HAL_UART_RxCpltCallback+0xb0>)
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f002 fa12 	bl	8002dee <HAL_UART_Receive_IT>
    }
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40011400 	.word	0x40011400
 80009d8:	200004e8 	.word	0x200004e8
 80009dc:	200004e7 	.word	0x200004e7
 80009e0:	40004400 	.word	0x40004400
 80009e4:	200008ec 	.word	0x200008ec
 80009e8:	200004e6 	.word	0x200004e6
 80009ec:	200004b4 	.word	0x200004b4
 80009f0:	200004b0 	.word	0x200004b0

080009f4 <AiotClient_Init>:


void AiotClient_Init()
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	reset_func();
 80009f8:	f7ff ff40 	bl	800087c <reset_func>
//	version_func();
	ap_conn_func(SSID,PASS);
 80009fc:	4905      	ldr	r1, [pc, #20]	@ (8000a14 <AiotClient_Init+0x20>)
 80009fe:	4806      	ldr	r0, [pc, #24]	@ (8000a18 <AiotClient_Init+0x24>)
 8000a00:	f7ff ff56 	bl	80008b0 <ap_conn_func>
//	start_esp_server();
//	ip_state_func();
	request_ip_addr(1);
 8000a04:	2001      	movs	r0, #1
 8000a06:	f7ff fe59 	bl	80006bc <request_ip_addr>
	esp_client_conn();
 8000a0a:	f7ff fecd 	bl	80007a8 <esp_client_conn>
//	ip_state_func();
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	08006e80 	.word	0x08006e80
 8000a18:	08006e14 	.word	0x08006e14

08000a1c <esp_send_data>:

void esp_send_data(char *data)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b094      	sub	sp, #80	@ 0x50
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8000a24:	2300      	movs	r3, #0
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	223c      	movs	r2, #60	@ 0x3c
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f004 fea1 	bl	8005778 <memset>
  uint16_t length = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	81fb      	strh	r3, [r7, #14]
	sprintf(at_cmd,"AT+CIPSEND=%d\r\n",strlen(data));
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f7ff fbda 	bl	80001f4 <strlen>
 8000a40:	4602      	mov	r2, r0
 8000a42:	f107 0310 	add.w	r3, r7, #16
 8000a46:	490e      	ldr	r1, [pc, #56]	@ (8000a80 <esp_send_data+0x64>)
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f004 fd9d 	bl	8005588 <siprintf>
	if(esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000) == 0)
 8000a4e:	f107 020e 	add.w	r2, r7, #14
 8000a52:	f107 0010 	add.w	r0, r7, #16
 8000a56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a5a:	490a      	ldr	r1, [pc, #40]	@ (8000a84 <esp_send_data+0x68>)
 8000a5c:	f7ff fda0 	bl	80005a0 <esp_at_command>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d107      	bne.n	8000a76 <esp_send_data+0x5a>
	{
			esp_at_command((uint8_t *)data,(uint8_t *)response, &length, 1000);
 8000a66:	f107 020e 	add.w	r2, r7, #14
 8000a6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a6e:	4905      	ldr	r1, [pc, #20]	@ (8000a84 <esp_send_data+0x68>)
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f7ff fd95 	bl	80005a0 <esp_at_command>
	}
}
 8000a76:	bf00      	nop
 8000a78:	3750      	adds	r7, #80	@ 0x50
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	08006e8c 	.word	0x08006e8c
 8000a84:	200000b0 	.word	0x200000b0

08000a88 <drv_uart_init>:

//==================uart2=========================
int drv_uart_init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8000a8c:	4b14      	ldr	r3, [pc, #80]	@ (8000ae0 <drv_uart_init+0x58>)
 8000a8e:	4a15      	ldr	r2, [pc, #84]	@ (8000ae4 <drv_uart_init+0x5c>)
 8000a90:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8000a92:	4b13      	ldr	r3, [pc, #76]	@ (8000ae0 <drv_uart_init+0x58>)
 8000a94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a98:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ae0 <drv_uart_init+0x58>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae0 <drv_uart_init+0x58>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae0 <drv_uart_init+0x58>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae0 <drv_uart_init+0x58>)
 8000aae:	220c      	movs	r2, #12
 8000ab0:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae0 <drv_uart_init+0x58>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab8:	4b09      	ldr	r3, [pc, #36]	@ (8000ae0 <drv_uart_init+0x58>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8000abe:	4808      	ldr	r0, [pc, #32]	@ (8000ae0 <drv_uart_init+0x58>)
 8000ac0:	f002 f8ba 	bl	8002c38 <HAL_UART_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d002      	beq.n	8000ad0 <drv_uart_init+0x48>
        return -1;
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ace:	e005      	b.n	8000adc <drv_uart_init+0x54>

    HAL_UART_Receive_IT(&huart2, &cdata,1);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	4905      	ldr	r1, [pc, #20]	@ (8000ae8 <drv_uart_init+0x60>)
 8000ad4:	4802      	ldr	r0, [pc, #8]	@ (8000ae0 <drv_uart_init+0x58>)
 8000ad6:	f002 f98a 	bl	8002dee <HAL_UART_Receive_IT>
    return 0;
 8000ada:	2300      	movs	r3, #0
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000c6c 	.word	0x20000c6c
 8000ae4:	40004400 	.word	0x40004400
 8000ae8:	200004e6 	.word	0x200004e6

08000aec <__io_putchar>:
        return -1;

    return 0;
}
int __io_putchar(int ch)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
    if(HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) == HAL_OK)
 8000af4:	1d39      	adds	r1, r7, #4
 8000af6:	230a      	movs	r3, #10
 8000af8:	2201      	movs	r2, #1
 8000afa:	4807      	ldr	r0, [pc, #28]	@ (8000b18 <__io_putchar+0x2c>)
 8000afc:	f002 f8ec 	bl	8002cd8 <HAL_UART_Transmit>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d101      	bne.n	8000b0a <__io_putchar+0x1e>
        return ch;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	e001      	b.n	8000b0e <__io_putchar+0x22>
    return -1;
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000c6c 	.word	0x20000c6c

08000b1c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	4a07      	ldr	r2, [pc, #28]	@ (8000b48 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	4a06      	ldr	r2, [pc, #24]	@ (8000b4c <vApplicationGetIdleTaskMemory+0x30>)
 8000b32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2280      	movs	r2, #128	@ 0x80
 8000b38:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b3a:	bf00      	nop
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	20000980 	.word	0x20000980
 8000b4c:	20000a20 	.word	0x20000a20

08000b50 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000b50:	b5b0      	push	{r4, r5, r7, lr}
 8000b52:	b08e      	sub	sp, #56	@ 0x38
 8000b54:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of IR_Task */
  osThreadDef(IR_Task, IR_Task_Function, osPriorityNormal, 0, 128);
 8000b56:	4b14      	ldr	r3, [pc, #80]	@ (8000ba8 <MX_FREERTOS_Init+0x58>)
 8000b58:	f107 041c 	add.w	r4, r7, #28
 8000b5c:	461d      	mov	r5, r3
 8000b5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b62:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b66:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IR_TaskHandle = osThreadCreate(osThread(IR_Task), NULL);
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f003 f8d6 	bl	8003d22 <osThreadCreate>
 8000b76:	4603      	mov	r3, r0
 8000b78:	4a0c      	ldr	r2, [pc, #48]	@ (8000bac <MX_FREERTOS_Init+0x5c>)
 8000b7a:	6013      	str	r3, [r2, #0]

  /* definition and creation of UART_Task */
  osThreadDef(UART_Task, UART_Task_Function, osPriorityNormal, 0, 128);
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb0 <MX_FREERTOS_Init+0x60>)
 8000b7e:	463c      	mov	r4, r7
 8000b80:	461d      	mov	r5, r3
 8000b82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b86:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART_TaskHandle = osThreadCreate(osThread(UART_Task), NULL);
 8000b8e:	463b      	mov	r3, r7
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f003 f8c5 	bl	8003d22 <osThreadCreate>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	4a06      	ldr	r2, [pc, #24]	@ (8000bb4 <MX_FREERTOS_Init+0x64>)
 8000b9c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000b9e:	bf00      	nop
 8000ba0:	3738      	adds	r7, #56	@ 0x38
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	08006ea4 	.word	0x08006ea4
 8000bac:	20000938 	.word	0x20000938
 8000bb0:	08006ecc 	.word	0x08006ecc
 8000bb4:	2000093c 	.word	0x2000093c

08000bb8 <IR_Task_Function>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_IR_Task_Function */
void IR_Task_Function(void const * argument)
{
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IR_Task_Function */

  /* Infinite loop */
	for(;;)
	{
		for (int i = 0; i < NUM_IR_PINS; i++) {
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	e061      	b.n	8000c8a <IR_Task_Function+0xd2>
				sampleValues[i][sampleIndex[i]] = HAL_GPIO_ReadPin(IR_PORT, irPins[i]);
 8000bc6:	4a34      	ldr	r2, [pc, #208]	@ (8000c98 <IR_Task_Function+0xe0>)
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000bce:	4933      	ldr	r1, [pc, #204]	@ (8000c9c <IR_Task_Function+0xe4>)
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8000bd6:	4611      	mov	r1, r2
 8000bd8:	4831      	ldr	r0, [pc, #196]	@ (8000ca0 <IR_Task_Function+0xe8>)
 8000bda:	f001 f8bd 	bl	8001d58 <HAL_GPIO_ReadPin>
 8000bde:	4603      	mov	r3, r0
 8000be0:	4618      	mov	r0, r3
 8000be2:	4930      	ldr	r1, [pc, #192]	@ (8000ca4 <IR_Task_Function+0xec>)
 8000be4:	68fa      	ldr	r2, [r7, #12]
 8000be6:	4613      	mov	r3, r2
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	4413      	add	r3, r2
 8000bec:	440b      	add	r3, r1
 8000bee:	4423      	add	r3, r4
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	701a      	strb	r2, [r3, #0]
				sampleIndex[i] = (sampleIndex[i] + 1) % SAMPLE_COUNT;
 8000bf4:	4a29      	ldr	r2, [pc, #164]	@ (8000c9c <IR_Task_Function+0xe4>)
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bfc:	1c59      	adds	r1, r3, #1
 8000bfe:	4b2a      	ldr	r3, [pc, #168]	@ (8000ca8 <IR_Task_Function+0xf0>)
 8000c00:	fb83 2301 	smull	r2, r3, r3, r1
 8000c04:	105a      	asrs	r2, r3, #1
 8000c06:	17cb      	asrs	r3, r1, #31
 8000c08:	1ad2      	subs	r2, r2, r3
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	4413      	add	r3, r2
 8000c10:	1aca      	subs	r2, r1, r3
 8000c12:	4922      	ldr	r1, [pc, #136]	@ (8000c9c <IR_Task_Function+0xe4>)
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				if (sampleIndex[i] == 0) {
 8000c1a:	4a20      	ldr	r2, [pc, #128]	@ (8000c9c <IR_Task_Function+0xe4>)
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d12e      	bne.n	8000c84 <IR_Task_Function+0xcc>
					GPIO_PinState majorityValue = majorityVote(sampleValues[i], SAMPLE_COUNT);
 8000c26:	68fa      	ldr	r2, [r7, #12]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	4413      	add	r3, r2
 8000c2e:	4a1d      	ldr	r2, [pc, #116]	@ (8000ca4 <IR_Task_Function+0xec>)
 8000c30:	4413      	add	r3, r2
 8000c32:	2105      	movs	r1, #5
 8000c34:	4618      	mov	r0, r3
 8000c36:	f000 f887 	bl	8000d48 <majorityVote>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	72fb      	strb	r3, [r7, #11]
					previousIrValues[i] = currentIrValues[i];
 8000c3e:	4a1b      	ldr	r2, [pc, #108]	@ (8000cac <IR_Task_Function+0xf4>)
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	4413      	add	r3, r2
 8000c44:	7819      	ldrb	r1, [r3, #0]
 8000c46:	4a1a      	ldr	r2, [pc, #104]	@ (8000cb0 <IR_Task_Function+0xf8>)
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	460a      	mov	r2, r1
 8000c4e:	701a      	strb	r2, [r3, #0]
					currentIrValues[i] = majorityValue;
 8000c50:	4a16      	ldr	r2, [pc, #88]	@ (8000cac <IR_Task_Function+0xf4>)
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	4413      	add	r3, r2
 8000c56:	7afa      	ldrb	r2, [r7, #11]
 8000c58:	701a      	strb	r2, [r3, #0]

					if (previousIrValues[i] == GPIO_PIN_RESET && currentIrValues[i] == GPIO_PIN_SET) {
 8000c5a:	4a15      	ldr	r2, [pc, #84]	@ (8000cb0 <IR_Task_Function+0xf8>)
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	4413      	add	r3, r2
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d10e      	bne.n	8000c84 <IR_Task_Function+0xcc>
 8000c66:	4a11      	ldr	r2, [pc, #68]	@ (8000cac <IR_Task_Function+0xf4>)
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d108      	bne.n	8000c84 <IR_Task_Function+0xcc>
						HAL_GPIO_WritePin(MOTOR_PORT, motorPins[i], GPIO_PIN_RESET);
 8000c72:	4a10      	ldr	r2, [pc, #64]	@ (8000cb4 <IR_Task_Function+0xfc>)
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	480e      	ldr	r0, [pc, #56]	@ (8000cb8 <IR_Task_Function+0x100>)
 8000c80:	f001 f882 	bl	8001d88 <HAL_GPIO_WritePin>
		for (int i = 0; i < NUM_IR_PINS; i++) {
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	3301      	adds	r3, #1
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	2b05      	cmp	r3, #5
 8000c8e:	dd9a      	ble.n	8000bc6 <IR_Task_Function+0xe>
					}
				}
			}
			//printf("IR1:%d IR2:%d IR3:%d IR4:%d IR5:%d IR6:%d \r\n", currentIrValues[0], currentIrValues[1], currentIrValues[2], currentIrValues[3], currentIrValues[4], currentIrValues[5]);  // printf ?��?�� ?��?��
			osDelay(10);
 8000c90:	200a      	movs	r0, #10
 8000c92:	f003 f892 	bl	8003dba <osDelay>
		for (int i = 0; i < NUM_IR_PINS; i++) {
 8000c96:	e793      	b.n	8000bc0 <IR_Task_Function+0x8>
 8000c98:	20000000 	.word	0x20000000
 8000c9c:	20000920 	.word	0x20000920
 8000ca0:	40020400 	.word	0x40020400
 8000ca4:	20000900 	.word	0x20000900
 8000ca8:	66666667 	.word	0x66666667
 8000cac:	200008f0 	.word	0x200008f0
 8000cb0:	200008f8 	.word	0x200008f8
 8000cb4:	2000000c 	.word	0x2000000c
 8000cb8:	40020000 	.word	0x40020000

08000cbc <UART_Task_Function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_Task_Function */
void UART_Task_Function(void const * argument)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_Task_Function */

  /* Infinite loop */
  for(;;)
  {
  	if(strstr((char *)cb_data.buf,"+IPD") && cb_data.buf[cb_data.length-1] == '\n')
 8000cc4:	491a      	ldr	r1, [pc, #104]	@ (8000d30 <UART_Task_Function+0x74>)
 8000cc6:	481b      	ldr	r0, [pc, #108]	@ (8000d34 <UART_Task_Function+0x78>)
 8000cc8:	f004 fdda 	bl	8005880 <strstr>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d01d      	beq.n	8000d0e <UART_Task_Function+0x52>
 8000cd2:	4b18      	ldr	r3, [pc, #96]	@ (8000d34 <UART_Task_Function+0x78>)
 8000cd4:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	4a16      	ldr	r2, [pc, #88]	@ (8000d34 <UART_Task_Function+0x78>)
 8000cdc:	5cd3      	ldrb	r3, [r2, r3]
 8000cde:	2b0a      	cmp	r3, #10
 8000ce0:	d115      	bne.n	8000d0e <UART_Task_Function+0x52>
		{
			strcpy(strBuff,strchr((char *)cb_data.buf,'['));
 8000ce2:	215b      	movs	r1, #91	@ 0x5b
 8000ce4:	4813      	ldr	r0, [pc, #76]	@ (8000d34 <UART_Task_Function+0x78>)
 8000ce6:	f004 fd4f 	bl	8005788 <strchr>
 8000cea:	4603      	mov	r3, r0
 8000cec:	4619      	mov	r1, r3
 8000cee:	4812      	ldr	r0, [pc, #72]	@ (8000d38 <UART_Task_Function+0x7c>)
 8000cf0:	f004 fea5 	bl	8005a3e <strcpy>
			memset(cb_data.buf,0x0,sizeof(cb_data.buf));
 8000cf4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	480e      	ldr	r0, [pc, #56]	@ (8000d34 <UART_Task_Function+0x78>)
 8000cfc:	f004 fd3c 	bl	8005778 <memset>
			cb_data.length = 0;
 8000d00:	4b0c      	ldr	r3, [pc, #48]	@ (8000d34 <UART_Task_Function+0x78>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
			esp_event(strBuff);
 8000d08:	480b      	ldr	r0, [pc, #44]	@ (8000d38 <UART_Task_Function+0x7c>)
 8000d0a:	f000 f849 	bl	8000da0 <esp_event>
		}
		if(rx2Flag)
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d3c <UART_Task_Function+0x80>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d006      	beq.n	8000d26 <UART_Task_Function+0x6a>
		{
			printf("recv2 : %s\r\n",rx2Data);
 8000d18:	4909      	ldr	r1, [pc, #36]	@ (8000d40 <UART_Task_Function+0x84>)
 8000d1a:	480a      	ldr	r0, [pc, #40]	@ (8000d44 <UART_Task_Function+0x88>)
 8000d1c:	f004 fbbc 	bl	8005498 <iprintf>
			rx2Flag =0;
 8000d20:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <UART_Task_Function+0x80>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	701a      	strb	r2, [r3, #0]
		}
    osDelay(500);
 8000d26:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d2a:	f003 f846 	bl	8003dba <osDelay>
  	if(strstr((char *)cb_data.buf,"+IPD") && cb_data.buf[cb_data.length-1] == '\n')
 8000d2e:	e7c9      	b.n	8000cc4 <UART_Task_Function+0x8>
 8000d30:	08006ee8 	.word	0x08006ee8
 8000d34:	200004e8 	.word	0x200004e8
 8000d38:	20000940 	.word	0x20000940
 8000d3c:	200004b0 	.word	0x200004b0
 8000d40:	200004b4 	.word	0x200004b4
 8000d44:	08006ef0 	.word	0x08006ef0

08000d48 <majorityVote>:
  /* USER CODE END UART_Task_Function */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
GPIO_PinState majorityVote(GPIO_PinState *samples, int count) {
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
  int highCount = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < count; i++) {
 8000d56:	2300      	movs	r3, #0
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	e00b      	b.n	8000d74 <majorityVote+0x2c>
    if (samples[i] == GPIO_PIN_SET) {
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	4413      	add	r3, r2
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d102      	bne.n	8000d6e <majorityVote+0x26>
      highCount++;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < count; i++) {
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	3301      	adds	r3, #1
 8000d72:	60bb      	str	r3, [r7, #8]
 8000d74:	68ba      	ldr	r2, [r7, #8]
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	dbef      	blt.n	8000d5c <majorityVote+0x14>
    }
  }
  return (highCount > count / 2) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	0fda      	lsrs	r2, r3, #31
 8000d80:	4413      	add	r3, r2
 8000d82:	105b      	asrs	r3, r3, #1
 8000d84:	461a      	mov	r2, r3
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	bfcc      	ite	gt
 8000d8c:	2301      	movgt	r3, #1
 8000d8e:	2300      	movle	r3, #0
 8000d90:	b2db      	uxtb	r3, r3
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3714      	adds	r7, #20
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
	...

08000da0 <esp_event>:

void esp_event(char * recvBuf)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b09c      	sub	sp, #112	@ 0x70
 8000da4:	af02      	add	r7, sp, #8
 8000da6:	6078      	str	r0, [r7, #4]
  int i=0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	667b      	str	r3, [r7, #100]	@ 0x64
  int motorNumber = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  char * pToken;
  char * pArray[ARR_CNT]={0};
 8000db0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  char sendBuf[MAX_UART_COMMAND_LEN]={0};
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	f107 030c 	add.w	r3, r7, #12
 8000dc8:	223c      	movs	r2, #60	@ 0x3c
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f004 fcd3 	bl	8005778 <memset>

	strBuff[strlen(recvBuf)-1] = '\0';	//'\n' cut
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff fa0e 	bl	80001f4 <strlen>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	4a3d      	ldr	r2, [pc, #244]	@ (8000ed4 <esp_event+0x134>)
 8000dde:	2100      	movs	r1, #0
 8000de0:	54d1      	strb	r1, [r2, r3]
	printf("\r\nDebug recv : %s\r\n",recvBuf);
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	483c      	ldr	r0, [pc, #240]	@ (8000ed8 <esp_event+0x138>)
 8000de6:	f004 fb57 	bl	8005498 <iprintf>

  pToken = strtok(recvBuf,"[@]");
 8000dea:	493c      	ldr	r1, [pc, #240]	@ (8000edc <esp_event+0x13c>)
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f004 fceb 	bl	80057c8 <strtok>
 8000df2:	6638      	str	r0, [r7, #96]	@ 0x60
  while(pToken != NULL)
 8000df4:	e011      	b.n	8000e1a <esp_event+0x7a>
  {
    pArray[i] = pToken;
 8000df6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	3368      	adds	r3, #104	@ 0x68
 8000dfc:	443b      	add	r3, r7
 8000dfe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000e00:	f843 2c20 	str.w	r2, [r3, #-32]
    if(++i >= ARR_CNT)
 8000e04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000e06:	3301      	adds	r3, #1
 8000e08:	667b      	str	r3, [r7, #100]	@ 0x64
 8000e0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000e0c:	2b04      	cmp	r3, #4
 8000e0e:	dc08      	bgt.n	8000e22 <esp_event+0x82>
      break;
    pToken = strtok(NULL,"[@]");
 8000e10:	4932      	ldr	r1, [pc, #200]	@ (8000edc <esp_event+0x13c>)
 8000e12:	2000      	movs	r0, #0
 8000e14:	f004 fcd8 	bl	80057c8 <strtok>
 8000e18:	6638      	str	r0, [r7, #96]	@ 0x60
  while(pToken != NULL)
 8000e1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d1ea      	bne.n	8000df6 <esp_event+0x56>
 8000e20:	e000      	b.n	8000e24 <esp_event+0x84>
      break;
 8000e22:	bf00      	nop
  }

  if(!strcmp(pArray[1], "MOTOR")) {
 8000e24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e26:	492e      	ldr	r1, [pc, #184]	@ (8000ee0 <esp_event+0x140>)
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff f9d9 	bl	80001e0 <strcmp>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d128      	bne.n	8000e86 <esp_event+0xe6>
      motorNumber = atoi(pArray[2]);
 8000e34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000e36:	4618      	mov	r0, r3
 8000e38:	f004 f9e4 	bl	8005204 <atoi>
 8000e3c:	65f8      	str	r0, [r7, #92]	@ 0x5c
      if(motorNumber >= 1 && motorNumber <= NUM_MOTOR_PINS) {
 8000e3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	dd10      	ble.n	8000e66 <esp_event+0xc6>
 8000e44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000e46:	2b06      	cmp	r3, #6
 8000e48:	dc0d      	bgt.n	8000e66 <esp_event+0xc6>
          HAL_GPIO_WritePin(MOTOR_PORT, motorPins[motorNumber - 1], GPIO_PIN_SET);
 8000e4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	4a25      	ldr	r2, [pc, #148]	@ (8000ee4 <esp_event+0x144>)
 8000e50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e54:	2201      	movs	r2, #1
 8000e56:	4619      	mov	r1, r3
 8000e58:	4823      	ldr	r0, [pc, #140]	@ (8000ee8 <esp_event+0x148>)
 8000e5a:	f000 ff95 	bl	8001d88 <HAL_GPIO_WritePin>
          printf("MOTOR %d ON\r\n",motorNumber);
 8000e5e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8000e60:	4822      	ldr	r0, [pc, #136]	@ (8000eec <esp_event+0x14c>)
 8000e62:	f004 fb19 	bl	8005498 <iprintf>
      }
      sprintf(sendBuf, "[%s]%s@%s\n", pArray[0], pArray[1], pArray[2]);
 8000e66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000e68:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000e6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000e6c:	f107 0008 	add.w	r0, r7, #8
 8000e70:	9300      	str	r3, [sp, #0]
 8000e72:	460b      	mov	r3, r1
 8000e74:	491e      	ldr	r1, [pc, #120]	@ (8000ef0 <esp_event+0x150>)
 8000e76:	f004 fb87 	bl	8005588 <siprintf>
      return;
  }
  else
      return;

  esp_send_data(sendBuf);
 8000e7a:	f107 0308 	add.w	r3, r7, #8
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff fdcc 	bl	8000a1c <esp_send_data>
 8000e84:	e022      	b.n	8000ecc <esp_event+0x12c>
  else if(!strncmp(pArray[1]," New conn",8))
 8000e86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e88:	2208      	movs	r2, #8
 8000e8a:	491a      	ldr	r1, [pc, #104]	@ (8000ef4 <esp_event+0x154>)
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f004 fc88 	bl	80057a2 <strncmp>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d106      	bne.n	8000ea6 <esp_event+0x106>
	   printf("Debug : %s, %s\r\n",pArray[0],pArray[1]);
 8000e98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000e9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4816      	ldr	r0, [pc, #88]	@ (8000ef8 <esp_event+0x158>)
 8000ea0:	f004 fafa 	bl	8005498 <iprintf>
     return;
 8000ea4:	e012      	b.n	8000ecc <esp_event+0x12c>
  else if(!strncmp(pArray[1]," Already log",8))
 8000ea6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ea8:	2208      	movs	r2, #8
 8000eaa:	4914      	ldr	r1, [pc, #80]	@ (8000efc <esp_event+0x15c>)
 8000eac:	4618      	mov	r0, r3
 8000eae:	f004 fc78 	bl	80057a2 <strncmp>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d108      	bne.n	8000eca <esp_event+0x12a>
 	    printf("Debug : %s, %s\r\n",pArray[0],pArray[1]);
 8000eb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000eba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	480e      	ldr	r0, [pc, #56]	@ (8000ef8 <esp_event+0x158>)
 8000ec0:	f004 faea 	bl	8005498 <iprintf>
			esp_client_conn();
 8000ec4:	f7ff fc70 	bl	80007a8 <esp_client_conn>
      return;
 8000ec8:	e000      	b.n	8000ecc <esp_event+0x12c>
      return;
 8000eca:	bf00      	nop
  //printf("Debug send : %s\r\n",sendBuf);
}
 8000ecc:	3768      	adds	r7, #104	@ 0x68
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000940 	.word	0x20000940
 8000ed8:	08006f00 	.word	0x08006f00
 8000edc:	08006f14 	.word	0x08006f14
 8000ee0:	08006f18 	.word	0x08006f18
 8000ee4:	2000000c 	.word	0x2000000c
 8000ee8:	40020000 	.word	0x40020000
 8000eec:	08006f20 	.word	0x08006f20
 8000ef0:	08006f30 	.word	0x08006f30
 8000ef4:	08006f3c 	.word	0x08006f3c
 8000ef8:	08006f48 	.word	0x08006f48
 8000efc:	08006f5c 	.word	0x08006f5c

08000f00 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	@ 0x28
 8000f04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]
 8000f14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd0 <MX_GPIO_Init+0xd0>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	4a2c      	ldr	r2, [pc, #176]	@ (8000fd0 <MX_GPIO_Init+0xd0>)
 8000f20:	f043 0304 	orr.w	r3, r3, #4
 8000f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f26:	4b2a      	ldr	r3, [pc, #168]	@ (8000fd0 <MX_GPIO_Init+0xd0>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	f003 0304 	and.w	r3, r3, #4
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	4b26      	ldr	r3, [pc, #152]	@ (8000fd0 <MX_GPIO_Init+0xd0>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	4a25      	ldr	r2, [pc, #148]	@ (8000fd0 <MX_GPIO_Init+0xd0>)
 8000f3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f42:	4b23      	ldr	r3, [pc, #140]	@ (8000fd0 <MX_GPIO_Init+0xd0>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd0 <MX_GPIO_Init+0xd0>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	4a1e      	ldr	r2, [pc, #120]	@ (8000fd0 <MX_GPIO_Init+0xd0>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <MX_GPIO_Init+0xd0>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	4b18      	ldr	r3, [pc, #96]	@ (8000fd0 <MX_GPIO_Init+0xd0>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	4a17      	ldr	r2, [pc, #92]	@ (8000fd0 <MX_GPIO_Init+0xd0>)
 8000f74:	f043 0302 	orr.w	r3, r3, #2
 8000f78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f7a:	4b15      	ldr	r3, [pc, #84]	@ (8000fd0 <MX_GPIO_Init+0xd0>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000f86:	2200      	movs	r2, #0
 8000f88:	21f3      	movs	r1, #243	@ 0xf3
 8000f8a:	4812      	ldr	r0, [pc, #72]	@ (8000fd4 <MX_GPIO_Init+0xd4>)
 8000f8c:	f000 fefc 	bl	8001d88 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000f90:	23f3      	movs	r3, #243	@ 0xf3
 8000f92:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f94:	2301      	movs	r3, #1
 8000f96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	480b      	ldr	r0, [pc, #44]	@ (8000fd4 <MX_GPIO_Init+0xd4>)
 8000fa8:	f000 fd52 	bl	8001a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13
 8000fac:	f24e 0307 	movw	r3, #57351	@ 0xe007
 8000fb0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4805      	ldr	r0, [pc, #20]	@ (8000fd8 <MX_GPIO_Init+0xd8>)
 8000fc2:	f000 fd45 	bl	8001a50 <HAL_GPIO_Init>

}
 8000fc6:	bf00      	nop
 8000fc8:	3728      	adds	r7, #40	@ 0x28
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	40020400 	.word	0x40020400

08000fdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int ret = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe6:	f000 fb59 	bl	800169c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fea:	f000 f825 	bl	8001038 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fee:	f7ff ff87 	bl	8000f00 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ff2:	f000 fa4f 	bl	8001494 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000ff6:	f000 fa77 	bl	80014e8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  ret |= drv_uart_init();
 8000ffa:	f7ff fd45 	bl	8000a88 <drv_uart_init>
 8000ffe:	4602      	mov	r2, r0
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	4313      	orrs	r3, r2
 8001004:	607b      	str	r3, [r7, #4]
  ret |= drv_esp_init();
 8001006:	f7ff fbfd 	bl	8000804 <drv_esp_init>
 800100a:	4602      	mov	r2, r0
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4313      	orrs	r3, r2
 8001010:	607b      	str	r3, [r7, #4]
  if(ret != 0) Error_Handler();
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <main+0x40>
 8001018:	f000 f885 	bl	8001126 <Error_Handler>
  printf("Start main() \r\n");
 800101c:	4805      	ldr	r0, [pc, #20]	@ (8001034 <main+0x58>)
 800101e:	f004 faab 	bl	8005578 <puts>
	AiotClient_Init();
 8001022:	f7ff fce7 	bl	80009f4 <AiotClient_Init>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001026:	f7ff fd93 	bl	8000b50 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800102a:	f002 fe73 	bl	8003d14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800102e:	bf00      	nop
 8001030:	e7fd      	b.n	800102e <main+0x52>
 8001032:	bf00      	nop
 8001034:	08006f6c 	.word	0x08006f6c

08001038 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b094      	sub	sp, #80	@ 0x50
 800103c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103e:	f107 0320 	add.w	r3, r7, #32
 8001042:	2230      	movs	r2, #48	@ 0x30
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f004 fb96 	bl	8005778 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800105c:	2300      	movs	r3, #0
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	4b27      	ldr	r3, [pc, #156]	@ (8001100 <SystemClock_Config+0xc8>)
 8001062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001064:	4a26      	ldr	r2, [pc, #152]	@ (8001100 <SystemClock_Config+0xc8>)
 8001066:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800106a:	6413      	str	r3, [r2, #64]	@ 0x40
 800106c:	4b24      	ldr	r3, [pc, #144]	@ (8001100 <SystemClock_Config+0xc8>)
 800106e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001070:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001074:	60bb      	str	r3, [r7, #8]
 8001076:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001078:	2300      	movs	r3, #0
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	4b21      	ldr	r3, [pc, #132]	@ (8001104 <SystemClock_Config+0xcc>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a20      	ldr	r2, [pc, #128]	@ (8001104 <SystemClock_Config+0xcc>)
 8001082:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	4b1e      	ldr	r3, [pc, #120]	@ (8001104 <SystemClock_Config+0xcc>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001094:	2301      	movs	r3, #1
 8001096:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001098:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800109c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109e:	2302      	movs	r3, #2
 80010a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010a2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010a8:	2304      	movs	r3, #4
 80010aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80010ac:	2364      	movs	r3, #100	@ 0x64
 80010ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010b0:	2302      	movs	r3, #2
 80010b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010b4:	2304      	movs	r3, #4
 80010b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b8:	f107 0320 	add.w	r3, r7, #32
 80010bc:	4618      	mov	r0, r3
 80010be:	f000 fe7d 	bl	8001dbc <HAL_RCC_OscConfig>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010c8:	f000 f82d 	bl	8001126 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010cc:	230f      	movs	r3, #15
 80010ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d0:	2302      	movs	r3, #2
 80010d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010e2:	f107 030c 	add.w	r3, r7, #12
 80010e6:	2103      	movs	r1, #3
 80010e8:	4618      	mov	r0, r3
 80010ea:	f001 f8df 	bl	80022ac <HAL_RCC_ClockConfig>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80010f4:	f000 f817 	bl	8001126 <Error_Handler>
  }
}
 80010f8:	bf00      	nop
 80010fa:	3750      	adds	r7, #80	@ 0x50
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40023800 	.word	0x40023800
 8001104:	40007000 	.word	0x40007000

08001108 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001118:	d101      	bne.n	800111e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800111a:	f000 fae1 	bl	80016e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800112a:	b672      	cpsid	i
}
 800112c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800112e:	bf00      	nop
 8001130:	e7fd      	b.n	800112e <Error_Handler+0x8>
	...

08001134 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	4b12      	ldr	r3, [pc, #72]	@ (8001188 <HAL_MspInit+0x54>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001142:	4a11      	ldr	r2, [pc, #68]	@ (8001188 <HAL_MspInit+0x54>)
 8001144:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001148:	6453      	str	r3, [r2, #68]	@ 0x44
 800114a:	4b0f      	ldr	r3, [pc, #60]	@ (8001188 <HAL_MspInit+0x54>)
 800114c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	603b      	str	r3, [r7, #0]
 800115a:	4b0b      	ldr	r3, [pc, #44]	@ (8001188 <HAL_MspInit+0x54>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115e:	4a0a      	ldr	r2, [pc, #40]	@ (8001188 <HAL_MspInit+0x54>)
 8001160:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001164:	6413      	str	r3, [r2, #64]	@ 0x40
 8001166:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <HAL_MspInit+0x54>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800116e:	603b      	str	r3, [r7, #0]
 8001170:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001172:	2200      	movs	r2, #0
 8001174:	210f      	movs	r1, #15
 8001176:	f06f 0001 	mvn.w	r0, #1
 800117a:	f000 fbad 	bl	80018d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800

0800118c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08e      	sub	sp, #56	@ 0x38
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001194:	2300      	movs	r3, #0
 8001196:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001198:	2300      	movs	r3, #0
 800119a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800119c:	2300      	movs	r3, #0
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	4b34      	ldr	r3, [pc, #208]	@ (8001274 <HAL_InitTick+0xe8>)
 80011a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a4:	4a33      	ldr	r2, [pc, #204]	@ (8001274 <HAL_InitTick+0xe8>)
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ac:	4b31      	ldr	r3, [pc, #196]	@ (8001274 <HAL_InitTick+0xe8>)
 80011ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011b8:	f107 0210 	add.w	r2, r7, #16
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4611      	mov	r1, r2
 80011c2:	4618      	mov	r0, r3
 80011c4:	f001 fa92 	bl	80026ec <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80011c8:	6a3b      	ldr	r3, [r7, #32]
 80011ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80011cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d103      	bne.n	80011da <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011d2:	f001 fa63 	bl	800269c <HAL_RCC_GetPCLK1Freq>
 80011d6:	6378      	str	r0, [r7, #52]	@ 0x34
 80011d8:	e004      	b.n	80011e4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011da:	f001 fa5f 	bl	800269c <HAL_RCC_GetPCLK1Freq>
 80011de:	4603      	mov	r3, r0
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011e6:	4a24      	ldr	r2, [pc, #144]	@ (8001278 <HAL_InitTick+0xec>)
 80011e8:	fba2 2303 	umull	r2, r3, r2, r3
 80011ec:	0c9b      	lsrs	r3, r3, #18
 80011ee:	3b01      	subs	r3, #1
 80011f0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80011f2:	4b22      	ldr	r3, [pc, #136]	@ (800127c <HAL_InitTick+0xf0>)
 80011f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80011fa:	4b20      	ldr	r3, [pc, #128]	@ (800127c <HAL_InitTick+0xf0>)
 80011fc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001200:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001202:	4a1e      	ldr	r2, [pc, #120]	@ (800127c <HAL_InitTick+0xf0>)
 8001204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001206:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001208:	4b1c      	ldr	r3, [pc, #112]	@ (800127c <HAL_InitTick+0xf0>)
 800120a:	2200      	movs	r2, #0
 800120c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120e:	4b1b      	ldr	r3, [pc, #108]	@ (800127c <HAL_InitTick+0xf0>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001214:	4b19      	ldr	r3, [pc, #100]	@ (800127c <HAL_InitTick+0xf0>)
 8001216:	2200      	movs	r2, #0
 8001218:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800121a:	4818      	ldr	r0, [pc, #96]	@ (800127c <HAL_InitTick+0xf0>)
 800121c:	f001 fa98 	bl	8002750 <HAL_TIM_Base_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001226:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800122a:	2b00      	cmp	r3, #0
 800122c:	d11b      	bne.n	8001266 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800122e:	4813      	ldr	r0, [pc, #76]	@ (800127c <HAL_InitTick+0xf0>)
 8001230:	f001 fae8 	bl	8002804 <HAL_TIM_Base_Start_IT>
 8001234:	4603      	mov	r3, r0
 8001236:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800123a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800123e:	2b00      	cmp	r3, #0
 8001240:	d111      	bne.n	8001266 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001242:	201c      	movs	r0, #28
 8001244:	f000 fb64 	bl	8001910 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b0f      	cmp	r3, #15
 800124c:	d808      	bhi.n	8001260 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800124e:	2200      	movs	r2, #0
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	201c      	movs	r0, #28
 8001254:	f000 fb40 	bl	80018d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001258:	4a09      	ldr	r2, [pc, #36]	@ (8001280 <HAL_InitTick+0xf4>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6013      	str	r3, [r2, #0]
 800125e:	e002      	b.n	8001266 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001266:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800126a:	4618      	mov	r0, r3
 800126c:	3738      	adds	r7, #56	@ 0x38
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40023800 	.word	0x40023800
 8001278:	431bde83 	.word	0x431bde83
 800127c:	20000c20 	.word	0x20000c20
 8001280:	2000001c 	.word	0x2000001c

08001284 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <NMI_Handler+0x4>

0800128c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <HardFault_Handler+0x4>

08001294 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <MemManage_Handler+0x4>

0800129c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <BusFault_Handler+0x4>

080012a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a8:	bf00      	nop
 80012aa:	e7fd      	b.n	80012a8 <UsageFault_Handler+0x4>

080012ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012c0:	4802      	ldr	r0, [pc, #8]	@ (80012cc <TIM2_IRQHandler+0x10>)
 80012c2:	f001 fb01 	bl	80028c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000c20 	.word	0x20000c20

080012d0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80012d4:	4802      	ldr	r0, [pc, #8]	@ (80012e0 <USART6_IRQHandler+0x10>)
 80012d6:	f001 fdaf 	bl	8002e38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000cb4 	.word	0x20000cb4

080012e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return 1;
 80012e8:	2301      	movs	r3, #1
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <_kill>:

int _kill(int pid, int sig)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012fe:	f004 fb71 	bl	80059e4 <__errno>
 8001302:	4603      	mov	r3, r0
 8001304:	2216      	movs	r2, #22
 8001306:	601a      	str	r2, [r3, #0]
  return -1;
 8001308:	f04f 33ff 	mov.w	r3, #4294967295
}
 800130c:	4618      	mov	r0, r3
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <_exit>:

void _exit (int status)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800131c:	f04f 31ff 	mov.w	r1, #4294967295
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff ffe7 	bl	80012f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001326:	bf00      	nop
 8001328:	e7fd      	b.n	8001326 <_exit+0x12>

0800132a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b086      	sub	sp, #24
 800132e:	af00      	add	r7, sp, #0
 8001330:	60f8      	str	r0, [r7, #12]
 8001332:	60b9      	str	r1, [r7, #8]
 8001334:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
 800133a:	e00a      	b.n	8001352 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800133c:	f3af 8000 	nop.w
 8001340:	4601      	mov	r1, r0
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	1c5a      	adds	r2, r3, #1
 8001346:	60ba      	str	r2, [r7, #8]
 8001348:	b2ca      	uxtb	r2, r1
 800134a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	3301      	adds	r3, #1
 8001350:	617b      	str	r3, [r7, #20]
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	429a      	cmp	r2, r3
 8001358:	dbf0      	blt.n	800133c <_read+0x12>
  }

  return len;
 800135a:	687b      	ldr	r3, [r7, #4]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	e009      	b.n	800138a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	1c5a      	adds	r2, r3, #1
 800137a:	60ba      	str	r2, [r7, #8]
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fbb4 	bl	8000aec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	3301      	adds	r3, #1
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	429a      	cmp	r2, r3
 8001390:	dbf1      	blt.n	8001376 <_write+0x12>
  }
  return len;
 8001392:	687b      	ldr	r3, [r7, #4]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <_close>:

int _close(int file)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013c4:	605a      	str	r2, [r3, #4]
  return 0;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <_isatty>:

int _isatty(int file)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013dc:	2301      	movs	r3, #1
}
 80013de:	4618      	mov	r0, r3
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b085      	sub	sp, #20
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	60f8      	str	r0, [r7, #12]
 80013f2:	60b9      	str	r1, [r7, #8]
 80013f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800140c:	4a14      	ldr	r2, [pc, #80]	@ (8001460 <_sbrk+0x5c>)
 800140e:	4b15      	ldr	r3, [pc, #84]	@ (8001464 <_sbrk+0x60>)
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001418:	4b13      	ldr	r3, [pc, #76]	@ (8001468 <_sbrk+0x64>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d102      	bne.n	8001426 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001420:	4b11      	ldr	r3, [pc, #68]	@ (8001468 <_sbrk+0x64>)
 8001422:	4a12      	ldr	r2, [pc, #72]	@ (800146c <_sbrk+0x68>)
 8001424:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001426:	4b10      	ldr	r3, [pc, #64]	@ (8001468 <_sbrk+0x64>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4413      	add	r3, r2
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	429a      	cmp	r2, r3
 8001432:	d207      	bcs.n	8001444 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001434:	f004 fad6 	bl	80059e4 <__errno>
 8001438:	4603      	mov	r3, r0
 800143a:	220c      	movs	r2, #12
 800143c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800143e:	f04f 33ff 	mov.w	r3, #4294967295
 8001442:	e009      	b.n	8001458 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001444:	4b08      	ldr	r3, [pc, #32]	@ (8001468 <_sbrk+0x64>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800144a:	4b07      	ldr	r3, [pc, #28]	@ (8001468 <_sbrk+0x64>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4413      	add	r3, r2
 8001452:	4a05      	ldr	r2, [pc, #20]	@ (8001468 <_sbrk+0x64>)
 8001454:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001456:	68fb      	ldr	r3, [r7, #12]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3718      	adds	r7, #24
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20020000 	.word	0x20020000
 8001464:	00000400 	.word	0x00000400
 8001468:	20000c68 	.word	0x20000c68
 800146c:	20004ba0 	.word	0x20004ba0

08001470 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001474:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <SystemInit+0x20>)
 8001476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800147a:	4a05      	ldr	r2, [pc, #20]	@ (8001490 <SystemInit+0x20>)
 800147c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001480:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001498:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <MX_USART2_UART_Init+0x4c>)
 800149a:	4a12      	ldr	r2, [pc, #72]	@ (80014e4 <MX_USART2_UART_Init+0x50>)
 800149c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800149e:	4b10      	ldr	r3, [pc, #64]	@ (80014e0 <MX_USART2_UART_Init+0x4c>)
 80014a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014a6:	4b0e      	ldr	r3, [pc, #56]	@ (80014e0 <MX_USART2_UART_Init+0x4c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014ac:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <MX_USART2_UART_Init+0x4c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014b2:	4b0b      	ldr	r3, [pc, #44]	@ (80014e0 <MX_USART2_UART_Init+0x4c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014b8:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <MX_USART2_UART_Init+0x4c>)
 80014ba:	220c      	movs	r2, #12
 80014bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014be:	4b08      	ldr	r3, [pc, #32]	@ (80014e0 <MX_USART2_UART_Init+0x4c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c4:	4b06      	ldr	r3, [pc, #24]	@ (80014e0 <MX_USART2_UART_Init+0x4c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014ca:	4805      	ldr	r0, [pc, #20]	@ (80014e0 <MX_USART2_UART_Init+0x4c>)
 80014cc:	f001 fbb4 	bl	8002c38 <HAL_UART_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014d6:	f7ff fe26 	bl	8001126 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000c6c 	.word	0x20000c6c
 80014e4:	40004400 	.word	0x40004400

080014e8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80014ec:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <MX_USART6_UART_Init+0x4c>)
 80014ee:	4a12      	ldr	r2, [pc, #72]	@ (8001538 <MX_USART6_UART_Init+0x50>)
 80014f0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 80014f2:	4b10      	ldr	r3, [pc, #64]	@ (8001534 <MX_USART6_UART_Init+0x4c>)
 80014f4:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80014f8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001534 <MX_USART6_UART_Init+0x4c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001500:	4b0c      	ldr	r3, [pc, #48]	@ (8001534 <MX_USART6_UART_Init+0x4c>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001506:	4b0b      	ldr	r3, [pc, #44]	@ (8001534 <MX_USART6_UART_Init+0x4c>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800150c:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <MX_USART6_UART_Init+0x4c>)
 800150e:	220c      	movs	r2, #12
 8001510:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001512:	4b08      	ldr	r3, [pc, #32]	@ (8001534 <MX_USART6_UART_Init+0x4c>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001518:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <MX_USART6_UART_Init+0x4c>)
 800151a:	2200      	movs	r2, #0
 800151c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800151e:	4805      	ldr	r0, [pc, #20]	@ (8001534 <MX_USART6_UART_Init+0x4c>)
 8001520:	f001 fb8a 	bl	8002c38 <HAL_UART_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800152a:	f7ff fdfc 	bl	8001126 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000cb4 	.word	0x20000cb4
 8001538:	40011400 	.word	0x40011400

0800153c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08c      	sub	sp, #48	@ 0x30
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001544:	f107 031c 	add.w	r3, r7, #28
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a36      	ldr	r2, [pc, #216]	@ (8001634 <HAL_UART_MspInit+0xf8>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d12c      	bne.n	80015b8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	61bb      	str	r3, [r7, #24]
 8001562:	4b35      	ldr	r3, [pc, #212]	@ (8001638 <HAL_UART_MspInit+0xfc>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001566:	4a34      	ldr	r2, [pc, #208]	@ (8001638 <HAL_UART_MspInit+0xfc>)
 8001568:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800156c:	6413      	str	r3, [r2, #64]	@ 0x40
 800156e:	4b32      	ldr	r3, [pc, #200]	@ (8001638 <HAL_UART_MspInit+0xfc>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001576:	61bb      	str	r3, [r7, #24]
 8001578:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	4b2e      	ldr	r3, [pc, #184]	@ (8001638 <HAL_UART_MspInit+0xfc>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	4a2d      	ldr	r2, [pc, #180]	@ (8001638 <HAL_UART_MspInit+0xfc>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6313      	str	r3, [r2, #48]	@ 0x30
 800158a:	4b2b      	ldr	r3, [pc, #172]	@ (8001638 <HAL_UART_MspInit+0xfc>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001596:	230c      	movs	r3, #12
 8001598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159a:	2302      	movs	r3, #2
 800159c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a2:	2303      	movs	r3, #3
 80015a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015a6:	2307      	movs	r3, #7
 80015a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015aa:	f107 031c 	add.w	r3, r7, #28
 80015ae:	4619      	mov	r1, r3
 80015b0:	4822      	ldr	r0, [pc, #136]	@ (800163c <HAL_UART_MspInit+0x100>)
 80015b2:	f000 fa4d 	bl	8001a50 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80015b6:	e038      	b.n	800162a <HAL_UART_MspInit+0xee>
  else if(uartHandle->Instance==USART6)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a20      	ldr	r2, [pc, #128]	@ (8001640 <HAL_UART_MspInit+0x104>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d133      	bne.n	800162a <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	613b      	str	r3, [r7, #16]
 80015c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001638 <HAL_UART_MspInit+0xfc>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ca:	4a1b      	ldr	r2, [pc, #108]	@ (8001638 <HAL_UART_MspInit+0xfc>)
 80015cc:	f043 0320 	orr.w	r3, r3, #32
 80015d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80015d2:	4b19      	ldr	r3, [pc, #100]	@ (8001638 <HAL_UART_MspInit+0xfc>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d6:	f003 0320 	and.w	r3, r3, #32
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
 80015e2:	4b15      	ldr	r3, [pc, #84]	@ (8001638 <HAL_UART_MspInit+0xfc>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e6:	4a14      	ldr	r2, [pc, #80]	@ (8001638 <HAL_UART_MspInit+0xfc>)
 80015e8:	f043 0304 	orr.w	r3, r3, #4
 80015ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ee:	4b12      	ldr	r3, [pc, #72]	@ (8001638 <HAL_UART_MspInit+0xfc>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	f003 0304 	and.w	r3, r3, #4
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015fa:	23c0      	movs	r3, #192	@ 0xc0
 80015fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fe:	2302      	movs	r3, #2
 8001600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001606:	2303      	movs	r3, #3
 8001608:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800160a:	2308      	movs	r3, #8
 800160c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800160e:	f107 031c 	add.w	r3, r7, #28
 8001612:	4619      	mov	r1, r3
 8001614:	480b      	ldr	r0, [pc, #44]	@ (8001644 <HAL_UART_MspInit+0x108>)
 8001616:	f000 fa1b 	bl	8001a50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	2105      	movs	r1, #5
 800161e:	2047      	movs	r0, #71	@ 0x47
 8001620:	f000 f95a 	bl	80018d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001624:	2047      	movs	r0, #71	@ 0x47
 8001626:	f000 f973 	bl	8001910 <HAL_NVIC_EnableIRQ>
}
 800162a:	bf00      	nop
 800162c:	3730      	adds	r7, #48	@ 0x30
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40004400 	.word	0x40004400
 8001638:	40023800 	.word	0x40023800
 800163c:	40020000 	.word	0x40020000
 8001640:	40011400 	.word	0x40011400
 8001644:	40020800 	.word	0x40020800

08001648 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001648:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001680 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800164c:	f7ff ff10 	bl	8001470 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001650:	480c      	ldr	r0, [pc, #48]	@ (8001684 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001652:	490d      	ldr	r1, [pc, #52]	@ (8001688 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001654:	4a0d      	ldr	r2, [pc, #52]	@ (800168c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001658:	e002      	b.n	8001660 <LoopCopyDataInit>

0800165a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800165a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800165c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165e:	3304      	adds	r3, #4

08001660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001664:	d3f9      	bcc.n	800165a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001666:	4a0a      	ldr	r2, [pc, #40]	@ (8001690 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001668:	4c0a      	ldr	r4, [pc, #40]	@ (8001694 <LoopFillZerobss+0x22>)
  movs r3, #0
 800166a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800166c:	e001      	b.n	8001672 <LoopFillZerobss>

0800166e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001670:	3204      	adds	r2, #4

08001672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001674:	d3fb      	bcc.n	800166e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001676:	f004 f9bb 	bl	80059f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800167a:	f7ff fcaf 	bl	8000fdc <main>
  bx  lr    
 800167e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001680:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001688:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 800168c:	08007190 	.word	0x08007190
  ldr r2, =_sbss
 8001690:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001694:	20004ba0 	.word	0x20004ba0

08001698 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001698:	e7fe      	b.n	8001698 <ADC_IRQHandler>
	...

0800169c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016a0:	4b0e      	ldr	r3, [pc, #56]	@ (80016dc <HAL_Init+0x40>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0d      	ldr	r2, [pc, #52]	@ (80016dc <HAL_Init+0x40>)
 80016a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016ac:	4b0b      	ldr	r3, [pc, #44]	@ (80016dc <HAL_Init+0x40>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0a      	ldr	r2, [pc, #40]	@ (80016dc <HAL_Init+0x40>)
 80016b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b8:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <HAL_Init+0x40>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a07      	ldr	r2, [pc, #28]	@ (80016dc <HAL_Init+0x40>)
 80016be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c4:	2003      	movs	r0, #3
 80016c6:	f000 f8fc 	bl	80018c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ca:	200f      	movs	r0, #15
 80016cc:	f7ff fd5e 	bl	800118c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016d0:	f7ff fd30 	bl	8001134 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40023c00 	.word	0x40023c00

080016e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016e4:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <HAL_IncTick+0x20>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b06      	ldr	r3, [pc, #24]	@ (8001704 <HAL_IncTick+0x24>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4413      	add	r3, r2
 80016f0:	4a04      	ldr	r2, [pc, #16]	@ (8001704 <HAL_IncTick+0x24>)
 80016f2:	6013      	str	r3, [r2, #0]
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	20000020 	.word	0x20000020
 8001704:	20000cfc 	.word	0x20000cfc

08001708 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  return uwTick;
 800170c:	4b03      	ldr	r3, [pc, #12]	@ (800171c <HAL_GetTick+0x14>)
 800170e:	681b      	ldr	r3, [r3, #0]
}
 8001710:	4618      	mov	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	20000cfc 	.word	0x20000cfc

08001720 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001728:	f7ff ffee 	bl	8001708 <HAL_GetTick>
 800172c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001738:	d005      	beq.n	8001746 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800173a:	4b0a      	ldr	r3, [pc, #40]	@ (8001764 <HAL_Delay+0x44>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	461a      	mov	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4413      	add	r3, r2
 8001744:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001746:	bf00      	nop
 8001748:	f7ff ffde 	bl	8001708 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	429a      	cmp	r2, r3
 8001756:	d8f7      	bhi.n	8001748 <HAL_Delay+0x28>
  {
  }
}
 8001758:	bf00      	nop
 800175a:	bf00      	nop
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000020 	.word	0x20000020

08001768 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001778:	4b0c      	ldr	r3, [pc, #48]	@ (80017ac <__NVIC_SetPriorityGrouping+0x44>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001784:	4013      	ands	r3, r2
 8001786:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001790:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001794:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800179a:	4a04      	ldr	r2, [pc, #16]	@ (80017ac <__NVIC_SetPriorityGrouping+0x44>)
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	60d3      	str	r3, [r2, #12]
}
 80017a0:	bf00      	nop
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b4:	4b04      	ldr	r3, [pc, #16]	@ (80017c8 <__NVIC_GetPriorityGrouping+0x18>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	0a1b      	lsrs	r3, r3, #8
 80017ba:	f003 0307 	and.w	r3, r3, #7
}
 80017be:	4618      	mov	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	db0b      	blt.n	80017f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	f003 021f 	and.w	r2, r3, #31
 80017e4:	4907      	ldr	r1, [pc, #28]	@ (8001804 <__NVIC_EnableIRQ+0x38>)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	095b      	lsrs	r3, r3, #5
 80017ec:	2001      	movs	r0, #1
 80017ee:	fa00 f202 	lsl.w	r2, r0, r2
 80017f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000e100 	.word	0xe000e100

08001808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001818:	2b00      	cmp	r3, #0
 800181a:	db0a      	blt.n	8001832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	b2da      	uxtb	r2, r3
 8001820:	490c      	ldr	r1, [pc, #48]	@ (8001854 <__NVIC_SetPriority+0x4c>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	0112      	lsls	r2, r2, #4
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	440b      	add	r3, r1
 800182c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001830:	e00a      	b.n	8001848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	b2da      	uxtb	r2, r3
 8001836:	4908      	ldr	r1, [pc, #32]	@ (8001858 <__NVIC_SetPriority+0x50>)
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	3b04      	subs	r3, #4
 8001840:	0112      	lsls	r2, r2, #4
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	440b      	add	r3, r1
 8001846:	761a      	strb	r2, [r3, #24]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	e000e100 	.word	0xe000e100
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800185c:	b480      	push	{r7}
 800185e:	b089      	sub	sp, #36	@ 0x24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f1c3 0307 	rsb	r3, r3, #7
 8001876:	2b04      	cmp	r3, #4
 8001878:	bf28      	it	cs
 800187a:	2304      	movcs	r3, #4
 800187c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3304      	adds	r3, #4
 8001882:	2b06      	cmp	r3, #6
 8001884:	d902      	bls.n	800188c <NVIC_EncodePriority+0x30>
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3b03      	subs	r3, #3
 800188a:	e000      	b.n	800188e <NVIC_EncodePriority+0x32>
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	f04f 32ff 	mov.w	r2, #4294967295
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43da      	mvns	r2, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	401a      	ands	r2, r3
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a4:	f04f 31ff 	mov.w	r1, #4294967295
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	fa01 f303 	lsl.w	r3, r1, r3
 80018ae:	43d9      	mvns	r1, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	4313      	orrs	r3, r2
         );
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3724      	adds	r7, #36	@ 0x24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff ff4c 	bl	8001768 <__NVIC_SetPriorityGrouping>
}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
 80018e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018ea:	f7ff ff61 	bl	80017b0 <__NVIC_GetPriorityGrouping>
 80018ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	68b9      	ldr	r1, [r7, #8]
 80018f4:	6978      	ldr	r0, [r7, #20]
 80018f6:	f7ff ffb1 	bl	800185c <NVIC_EncodePriority>
 80018fa:	4602      	mov	r2, r0
 80018fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001900:	4611      	mov	r1, r2
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff ff80 	bl	8001808 <__NVIC_SetPriority>
}
 8001908:	bf00      	nop
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff ff54 	bl	80017cc <__NVIC_EnableIRQ>
}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001938:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800193a:	f7ff fee5 	bl	8001708 <HAL_GetTick>
 800193e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d008      	beq.n	800195e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2280      	movs	r2, #128	@ 0x80
 8001950:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e052      	b.n	8001a04 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 0216 	bic.w	r2, r2, #22
 800196c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	695a      	ldr	r2, [r3, #20]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800197c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001982:	2b00      	cmp	r3, #0
 8001984:	d103      	bne.n	800198e <HAL_DMA_Abort+0x62>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800198a:	2b00      	cmp	r3, #0
 800198c:	d007      	beq.n	800199e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 0208 	bic.w	r2, r2, #8
 800199c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 0201 	bic.w	r2, r2, #1
 80019ac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019ae:	e013      	b.n	80019d8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019b0:	f7ff feaa 	bl	8001708 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b05      	cmp	r3, #5
 80019bc:	d90c      	bls.n	80019d8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2220      	movs	r2, #32
 80019c2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2203      	movs	r2, #3
 80019c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e015      	b.n	8001a04 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1e4      	bne.n	80019b0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019ea:	223f      	movs	r2, #63	@ 0x3f
 80019ec:	409a      	lsls	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001a02:	2300      	movs	r3, #0
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d004      	beq.n	8001a2a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2280      	movs	r2, #128	@ 0x80
 8001a24:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e00c      	b.n	8001a44 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2205      	movs	r2, #5
 8001a2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f022 0201 	bic.w	r2, r2, #1
 8001a40:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b089      	sub	sp, #36	@ 0x24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
 8001a6a:	e159      	b.n	8001d20 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	697a      	ldr	r2, [r7, #20]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	f040 8148 	bne.w	8001d1a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d005      	beq.n	8001aa2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d130      	bne.n	8001b04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	2203      	movs	r2, #3
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	68da      	ldr	r2, [r3, #12]
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ad8:	2201      	movs	r2, #1
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	69ba      	ldr	r2, [r7, #24]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	091b      	lsrs	r3, r3, #4
 8001aee:	f003 0201 	and.w	r2, r3, #1
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 0303 	and.w	r3, r3, #3
 8001b0c:	2b03      	cmp	r3, #3
 8001b0e:	d017      	beq.n	8001b40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 0303 	and.w	r3, r3, #3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d123      	bne.n	8001b94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	08da      	lsrs	r2, r3, #3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3208      	adds	r2, #8
 8001b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	f003 0307 	and.w	r3, r3, #7
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	220f      	movs	r2, #15
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	691a      	ldr	r2, [r3, #16]
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	08da      	lsrs	r2, r3, #3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	3208      	adds	r2, #8
 8001b8e:	69b9      	ldr	r1, [r7, #24]
 8001b90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	2203      	movs	r2, #3
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 0203 	and.w	r2, r3, #3
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	f000 80a2 	beq.w	8001d1a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60fb      	str	r3, [r7, #12]
 8001bda:	4b57      	ldr	r3, [pc, #348]	@ (8001d38 <HAL_GPIO_Init+0x2e8>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bde:	4a56      	ldr	r2, [pc, #344]	@ (8001d38 <HAL_GPIO_Init+0x2e8>)
 8001be0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001be4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001be6:	4b54      	ldr	r3, [pc, #336]	@ (8001d38 <HAL_GPIO_Init+0x2e8>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bee:	60fb      	str	r3, [r7, #12]
 8001bf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bf2:	4a52      	ldr	r2, [pc, #328]	@ (8001d3c <HAL_GPIO_Init+0x2ec>)
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	089b      	lsrs	r3, r3, #2
 8001bf8:	3302      	adds	r3, #2
 8001bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	220f      	movs	r2, #15
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4013      	ands	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a49      	ldr	r2, [pc, #292]	@ (8001d40 <HAL_GPIO_Init+0x2f0>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d019      	beq.n	8001c52 <HAL_GPIO_Init+0x202>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a48      	ldr	r2, [pc, #288]	@ (8001d44 <HAL_GPIO_Init+0x2f4>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d013      	beq.n	8001c4e <HAL_GPIO_Init+0x1fe>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a47      	ldr	r2, [pc, #284]	@ (8001d48 <HAL_GPIO_Init+0x2f8>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d00d      	beq.n	8001c4a <HAL_GPIO_Init+0x1fa>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a46      	ldr	r2, [pc, #280]	@ (8001d4c <HAL_GPIO_Init+0x2fc>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d007      	beq.n	8001c46 <HAL_GPIO_Init+0x1f6>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4a45      	ldr	r2, [pc, #276]	@ (8001d50 <HAL_GPIO_Init+0x300>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d101      	bne.n	8001c42 <HAL_GPIO_Init+0x1f2>
 8001c3e:	2304      	movs	r3, #4
 8001c40:	e008      	b.n	8001c54 <HAL_GPIO_Init+0x204>
 8001c42:	2307      	movs	r3, #7
 8001c44:	e006      	b.n	8001c54 <HAL_GPIO_Init+0x204>
 8001c46:	2303      	movs	r3, #3
 8001c48:	e004      	b.n	8001c54 <HAL_GPIO_Init+0x204>
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	e002      	b.n	8001c54 <HAL_GPIO_Init+0x204>
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e000      	b.n	8001c54 <HAL_GPIO_Init+0x204>
 8001c52:	2300      	movs	r3, #0
 8001c54:	69fa      	ldr	r2, [r7, #28]
 8001c56:	f002 0203 	and.w	r2, r2, #3
 8001c5a:	0092      	lsls	r2, r2, #2
 8001c5c:	4093      	lsls	r3, r2
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c64:	4935      	ldr	r1, [pc, #212]	@ (8001d3c <HAL_GPIO_Init+0x2ec>)
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	089b      	lsrs	r3, r3, #2
 8001c6a:	3302      	adds	r3, #2
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c72:	4b38      	ldr	r3, [pc, #224]	@ (8001d54 <HAL_GPIO_Init+0x304>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c96:	4a2f      	ldr	r2, [pc, #188]	@ (8001d54 <HAL_GPIO_Init+0x304>)
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c9c:	4b2d      	ldr	r3, [pc, #180]	@ (8001d54 <HAL_GPIO_Init+0x304>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cc0:	4a24      	ldr	r2, [pc, #144]	@ (8001d54 <HAL_GPIO_Init+0x304>)
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cc6:	4b23      	ldr	r3, [pc, #140]	@ (8001d54 <HAL_GPIO_Init+0x304>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cea:	4a1a      	ldr	r2, [pc, #104]	@ (8001d54 <HAL_GPIO_Init+0x304>)
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cf0:	4b18      	ldr	r3, [pc, #96]	@ (8001d54 <HAL_GPIO_Init+0x304>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d003      	beq.n	8001d14 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d14:	4a0f      	ldr	r2, [pc, #60]	@ (8001d54 <HAL_GPIO_Init+0x304>)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	61fb      	str	r3, [r7, #28]
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	2b0f      	cmp	r3, #15
 8001d24:	f67f aea2 	bls.w	8001a6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d28:	bf00      	nop
 8001d2a:	bf00      	nop
 8001d2c:	3724      	adds	r7, #36	@ 0x24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40013800 	.word	0x40013800
 8001d40:	40020000 	.word	0x40020000
 8001d44:	40020400 	.word	0x40020400
 8001d48:	40020800 	.word	0x40020800
 8001d4c:	40020c00 	.word	0x40020c00
 8001d50:	40021000 	.word	0x40021000
 8001d54:	40013c00 	.word	0x40013c00

08001d58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691a      	ldr	r2, [r3, #16]
 8001d68:	887b      	ldrh	r3, [r7, #2]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d002      	beq.n	8001d76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d70:	2301      	movs	r3, #1
 8001d72:	73fb      	strb	r3, [r7, #15]
 8001d74:	e001      	b.n	8001d7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d76:	2300      	movs	r3, #0
 8001d78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	807b      	strh	r3, [r7, #2]
 8001d94:	4613      	mov	r3, r2
 8001d96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d98:	787b      	ldrb	r3, [r7, #1]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d9e:	887a      	ldrh	r2, [r7, #2]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001da4:	e003      	b.n	8001dae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001da6:	887b      	ldrh	r3, [r7, #2]
 8001da8:	041a      	lsls	r2, r3, #16
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	619a      	str	r2, [r3, #24]
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
	...

08001dbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e267      	b.n	800229e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d075      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001dda:	4b88      	ldr	r3, [pc, #544]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 030c 	and.w	r3, r3, #12
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	d00c      	beq.n	8001e00 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001de6:	4b85      	ldr	r3, [pc, #532]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001dee:	2b08      	cmp	r3, #8
 8001df0:	d112      	bne.n	8001e18 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001df2:	4b82      	ldr	r3, [pc, #520]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dfa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001dfe:	d10b      	bne.n	8001e18 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e00:	4b7e      	ldr	r3, [pc, #504]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d05b      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x108>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d157      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e242      	b.n	800229e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e20:	d106      	bne.n	8001e30 <HAL_RCC_OscConfig+0x74>
 8001e22:	4b76      	ldr	r3, [pc, #472]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a75      	ldr	r2, [pc, #468]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001e28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	e01d      	b.n	8001e6c <HAL_RCC_OscConfig+0xb0>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e38:	d10c      	bne.n	8001e54 <HAL_RCC_OscConfig+0x98>
 8001e3a:	4b70      	ldr	r3, [pc, #448]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a6f      	ldr	r2, [pc, #444]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001e40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	4b6d      	ldr	r3, [pc, #436]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a6c      	ldr	r2, [pc, #432]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001e4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	e00b      	b.n	8001e6c <HAL_RCC_OscConfig+0xb0>
 8001e54:	4b69      	ldr	r3, [pc, #420]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a68      	ldr	r2, [pc, #416]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001e5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e5e:	6013      	str	r3, [r2, #0]
 8001e60:	4b66      	ldr	r3, [pc, #408]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a65      	ldr	r2, [pc, #404]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001e66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d013      	beq.n	8001e9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e74:	f7ff fc48 	bl	8001708 <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e7c:	f7ff fc44 	bl	8001708 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b64      	cmp	r3, #100	@ 0x64
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e207      	b.n	800229e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8e:	4b5b      	ldr	r3, [pc, #364]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0f0      	beq.n	8001e7c <HAL_RCC_OscConfig+0xc0>
 8001e9a:	e014      	b.n	8001ec6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9c:	f7ff fc34 	bl	8001708 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ea4:	f7ff fc30 	bl	8001708 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b64      	cmp	r3, #100	@ 0x64
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e1f3      	b.n	800229e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eb6:	4b51      	ldr	r3, [pc, #324]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f0      	bne.n	8001ea4 <HAL_RCC_OscConfig+0xe8>
 8001ec2:	e000      	b.n	8001ec6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d063      	beq.n	8001f9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001ed2:	4b4a      	ldr	r3, [pc, #296]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f003 030c 	and.w	r3, r3, #12
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00b      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ede:	4b47      	ldr	r3, [pc, #284]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001ee6:	2b08      	cmp	r3, #8
 8001ee8:	d11c      	bne.n	8001f24 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eea:	4b44      	ldr	r3, [pc, #272]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d116      	bne.n	8001f24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ef6:	4b41      	ldr	r3, [pc, #260]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d005      	beq.n	8001f0e <HAL_RCC_OscConfig+0x152>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d001      	beq.n	8001f0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e1c7      	b.n	800229e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f0e:	4b3b      	ldr	r3, [pc, #236]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	4937      	ldr	r1, [pc, #220]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f22:	e03a      	b.n	8001f9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d020      	beq.n	8001f6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f2c:	4b34      	ldr	r3, [pc, #208]	@ (8002000 <HAL_RCC_OscConfig+0x244>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f32:	f7ff fbe9 	bl	8001708 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f3a:	f7ff fbe5 	bl	8001708 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e1a8      	b.n	800229e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f4c:	4b2b      	ldr	r3, [pc, #172]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0f0      	beq.n	8001f3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f58:	4b28      	ldr	r3, [pc, #160]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	00db      	lsls	r3, r3, #3
 8001f66:	4925      	ldr	r1, [pc, #148]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	600b      	str	r3, [r1, #0]
 8001f6c:	e015      	b.n	8001f9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f6e:	4b24      	ldr	r3, [pc, #144]	@ (8002000 <HAL_RCC_OscConfig+0x244>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f74:	f7ff fbc8 	bl	8001708 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f7c:	f7ff fbc4 	bl	8001708 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e187      	b.n	800229e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d1f0      	bne.n	8001f7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d036      	beq.n	8002014 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d016      	beq.n	8001fdc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fae:	4b15      	ldr	r3, [pc, #84]	@ (8002004 <HAL_RCC_OscConfig+0x248>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb4:	f7ff fba8 	bl	8001708 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fbc:	f7ff fba4 	bl	8001708 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e167      	b.n	800229e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fce:	4b0b      	ldr	r3, [pc, #44]	@ (8001ffc <HAL_RCC_OscConfig+0x240>)
 8001fd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d0f0      	beq.n	8001fbc <HAL_RCC_OscConfig+0x200>
 8001fda:	e01b      	b.n	8002014 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fdc:	4b09      	ldr	r3, [pc, #36]	@ (8002004 <HAL_RCC_OscConfig+0x248>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe2:	f7ff fb91 	bl	8001708 <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe8:	e00e      	b.n	8002008 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fea:	f7ff fb8d 	bl	8001708 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d907      	bls.n	8002008 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e150      	b.n	800229e <HAL_RCC_OscConfig+0x4e2>
 8001ffc:	40023800 	.word	0x40023800
 8002000:	42470000 	.word	0x42470000
 8002004:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002008:	4b88      	ldr	r3, [pc, #544]	@ (800222c <HAL_RCC_OscConfig+0x470>)
 800200a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1ea      	bne.n	8001fea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	f000 8097 	beq.w	8002150 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002022:	2300      	movs	r3, #0
 8002024:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002026:	4b81      	ldr	r3, [pc, #516]	@ (800222c <HAL_RCC_OscConfig+0x470>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10f      	bne.n	8002052 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	4b7d      	ldr	r3, [pc, #500]	@ (800222c <HAL_RCC_OscConfig+0x470>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203a:	4a7c      	ldr	r2, [pc, #496]	@ (800222c <HAL_RCC_OscConfig+0x470>)
 800203c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002040:	6413      	str	r3, [r2, #64]	@ 0x40
 8002042:	4b7a      	ldr	r3, [pc, #488]	@ (800222c <HAL_RCC_OscConfig+0x470>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800204a:	60bb      	str	r3, [r7, #8]
 800204c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800204e:	2301      	movs	r3, #1
 8002050:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002052:	4b77      	ldr	r3, [pc, #476]	@ (8002230 <HAL_RCC_OscConfig+0x474>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800205a:	2b00      	cmp	r3, #0
 800205c:	d118      	bne.n	8002090 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800205e:	4b74      	ldr	r3, [pc, #464]	@ (8002230 <HAL_RCC_OscConfig+0x474>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a73      	ldr	r2, [pc, #460]	@ (8002230 <HAL_RCC_OscConfig+0x474>)
 8002064:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002068:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800206a:	f7ff fb4d 	bl	8001708 <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002072:	f7ff fb49 	bl	8001708 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e10c      	b.n	800229e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002084:	4b6a      	ldr	r3, [pc, #424]	@ (8002230 <HAL_RCC_OscConfig+0x474>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f0      	beq.n	8002072 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d106      	bne.n	80020a6 <HAL_RCC_OscConfig+0x2ea>
 8002098:	4b64      	ldr	r3, [pc, #400]	@ (800222c <HAL_RCC_OscConfig+0x470>)
 800209a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800209c:	4a63      	ldr	r2, [pc, #396]	@ (800222c <HAL_RCC_OscConfig+0x470>)
 800209e:	f043 0301 	orr.w	r3, r3, #1
 80020a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80020a4:	e01c      	b.n	80020e0 <HAL_RCC_OscConfig+0x324>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2b05      	cmp	r3, #5
 80020ac:	d10c      	bne.n	80020c8 <HAL_RCC_OscConfig+0x30c>
 80020ae:	4b5f      	ldr	r3, [pc, #380]	@ (800222c <HAL_RCC_OscConfig+0x470>)
 80020b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020b2:	4a5e      	ldr	r2, [pc, #376]	@ (800222c <HAL_RCC_OscConfig+0x470>)
 80020b4:	f043 0304 	orr.w	r3, r3, #4
 80020b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80020ba:	4b5c      	ldr	r3, [pc, #368]	@ (800222c <HAL_RCC_OscConfig+0x470>)
 80020bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020be:	4a5b      	ldr	r2, [pc, #364]	@ (800222c <HAL_RCC_OscConfig+0x470>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80020c6:	e00b      	b.n	80020e0 <HAL_RCC_OscConfig+0x324>
 80020c8:	4b58      	ldr	r3, [pc, #352]	@ (800222c <HAL_RCC_OscConfig+0x470>)
 80020ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020cc:	4a57      	ldr	r2, [pc, #348]	@ (800222c <HAL_RCC_OscConfig+0x470>)
 80020ce:	f023 0301 	bic.w	r3, r3, #1
 80020d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80020d4:	4b55      	ldr	r3, [pc, #340]	@ (800222c <HAL_RCC_OscConfig+0x470>)
 80020d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020d8:	4a54      	ldr	r2, [pc, #336]	@ (800222c <HAL_RCC_OscConfig+0x470>)
 80020da:	f023 0304 	bic.w	r3, r3, #4
 80020de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d015      	beq.n	8002114 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e8:	f7ff fb0e 	bl	8001708 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ee:	e00a      	b.n	8002106 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020f0:	f7ff fb0a 	bl	8001708 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020fe:	4293      	cmp	r3, r2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e0cb      	b.n	800229e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002106:	4b49      	ldr	r3, [pc, #292]	@ (800222c <HAL_RCC_OscConfig+0x470>)
 8002108:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0ee      	beq.n	80020f0 <HAL_RCC_OscConfig+0x334>
 8002112:	e014      	b.n	800213e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002114:	f7ff faf8 	bl	8001708 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800211a:	e00a      	b.n	8002132 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800211c:	f7ff faf4 	bl	8001708 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	f241 3288 	movw	r2, #5000	@ 0x1388
 800212a:	4293      	cmp	r3, r2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e0b5      	b.n	800229e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002132:	4b3e      	ldr	r3, [pc, #248]	@ (800222c <HAL_RCC_OscConfig+0x470>)
 8002134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1ee      	bne.n	800211c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800213e:	7dfb      	ldrb	r3, [r7, #23]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d105      	bne.n	8002150 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002144:	4b39      	ldr	r3, [pc, #228]	@ (800222c <HAL_RCC_OscConfig+0x470>)
 8002146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002148:	4a38      	ldr	r2, [pc, #224]	@ (800222c <HAL_RCC_OscConfig+0x470>)
 800214a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800214e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	2b00      	cmp	r3, #0
 8002156:	f000 80a1 	beq.w	800229c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800215a:	4b34      	ldr	r3, [pc, #208]	@ (800222c <HAL_RCC_OscConfig+0x470>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 030c 	and.w	r3, r3, #12
 8002162:	2b08      	cmp	r3, #8
 8002164:	d05c      	beq.n	8002220 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	2b02      	cmp	r3, #2
 800216c:	d141      	bne.n	80021f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800216e:	4b31      	ldr	r3, [pc, #196]	@ (8002234 <HAL_RCC_OscConfig+0x478>)
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002174:	f7ff fac8 	bl	8001708 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800217c:	f7ff fac4 	bl	8001708 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e087      	b.n	800229e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800218e:	4b27      	ldr	r3, [pc, #156]	@ (800222c <HAL_RCC_OscConfig+0x470>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f0      	bne.n	800217c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69da      	ldr	r2, [r3, #28]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	431a      	orrs	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a8:	019b      	lsls	r3, r3, #6
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b0:	085b      	lsrs	r3, r3, #1
 80021b2:	3b01      	subs	r3, #1
 80021b4:	041b      	lsls	r3, r3, #16
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021bc:	061b      	lsls	r3, r3, #24
 80021be:	491b      	ldr	r1, [pc, #108]	@ (800222c <HAL_RCC_OscConfig+0x470>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002234 <HAL_RCC_OscConfig+0x478>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ca:	f7ff fa9d 	bl	8001708 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d2:	f7ff fa99 	bl	8001708 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e05c      	b.n	800229e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021e4:	4b11      	ldr	r3, [pc, #68]	@ (800222c <HAL_RCC_OscConfig+0x470>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0f0      	beq.n	80021d2 <HAL_RCC_OscConfig+0x416>
 80021f0:	e054      	b.n	800229c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f2:	4b10      	ldr	r3, [pc, #64]	@ (8002234 <HAL_RCC_OscConfig+0x478>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f8:	f7ff fa86 	bl	8001708 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002200:	f7ff fa82 	bl	8001708 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e045      	b.n	800229e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002212:	4b06      	ldr	r3, [pc, #24]	@ (800222c <HAL_RCC_OscConfig+0x470>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1f0      	bne.n	8002200 <HAL_RCC_OscConfig+0x444>
 800221e:	e03d      	b.n	800229c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	699b      	ldr	r3, [r3, #24]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d107      	bne.n	8002238 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e038      	b.n	800229e <HAL_RCC_OscConfig+0x4e2>
 800222c:	40023800 	.word	0x40023800
 8002230:	40007000 	.word	0x40007000
 8002234:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002238:	4b1b      	ldr	r3, [pc, #108]	@ (80022a8 <HAL_RCC_OscConfig+0x4ec>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d028      	beq.n	8002298 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002250:	429a      	cmp	r2, r3
 8002252:	d121      	bne.n	8002298 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800225e:	429a      	cmp	r2, r3
 8002260:	d11a      	bne.n	8002298 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002268:	4013      	ands	r3, r2
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800226e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002270:	4293      	cmp	r3, r2
 8002272:	d111      	bne.n	8002298 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800227e:	085b      	lsrs	r3, r3, #1
 8002280:	3b01      	subs	r3, #1
 8002282:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002284:	429a      	cmp	r2, r3
 8002286:	d107      	bne.n	8002298 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002292:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002294:	429a      	cmp	r2, r3
 8002296:	d001      	beq.n	800229c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e000      	b.n	800229e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40023800 	.word	0x40023800

080022ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e0cc      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022c0:	4b68      	ldr	r3, [pc, #416]	@ (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d90c      	bls.n	80022e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ce:	4b65      	ldr	r3, [pc, #404]	@ (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d6:	4b63      	ldr	r3, [pc, #396]	@ (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d001      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e0b8      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d020      	beq.n	8002336 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002300:	4b59      	ldr	r3, [pc, #356]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	4a58      	ldr	r2, [pc, #352]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002306:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800230a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0308 	and.w	r3, r3, #8
 8002314:	2b00      	cmp	r3, #0
 8002316:	d005      	beq.n	8002324 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002318:	4b53      	ldr	r3, [pc, #332]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	4a52      	ldr	r2, [pc, #328]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800231e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002322:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002324:	4b50      	ldr	r3, [pc, #320]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	494d      	ldr	r1, [pc, #308]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002332:	4313      	orrs	r3, r2
 8002334:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d044      	beq.n	80023cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d107      	bne.n	800235a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234a:	4b47      	ldr	r3, [pc, #284]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d119      	bne.n	800238a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e07f      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b02      	cmp	r3, #2
 8002360:	d003      	beq.n	800236a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002366:	2b03      	cmp	r3, #3
 8002368:	d107      	bne.n	800237a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800236a:	4b3f      	ldr	r3, [pc, #252]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d109      	bne.n	800238a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e06f      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237a:	4b3b      	ldr	r3, [pc, #236]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e067      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800238a:	4b37      	ldr	r3, [pc, #220]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f023 0203 	bic.w	r2, r3, #3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	4934      	ldr	r1, [pc, #208]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002398:	4313      	orrs	r3, r2
 800239a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800239c:	f7ff f9b4 	bl	8001708 <HAL_GetTick>
 80023a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a2:	e00a      	b.n	80023ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a4:	f7ff f9b0 	bl	8001708 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e04f      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ba:	4b2b      	ldr	r3, [pc, #172]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 020c 	and.w	r2, r3, #12
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d1eb      	bne.n	80023a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023cc:	4b25      	ldr	r3, [pc, #148]	@ (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d20c      	bcs.n	80023f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023da:	4b22      	ldr	r3, [pc, #136]	@ (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e2:	4b20      	ldr	r3, [pc, #128]	@ (8002464 <HAL_RCC_ClockConfig+0x1b8>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d001      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e032      	b.n	800245a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0304 	and.w	r3, r3, #4
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d008      	beq.n	8002412 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002400:	4b19      	ldr	r3, [pc, #100]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	4916      	ldr	r1, [pc, #88]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	4313      	orrs	r3, r2
 8002410:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	2b00      	cmp	r3, #0
 800241c:	d009      	beq.n	8002432 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800241e:	4b12      	ldr	r3, [pc, #72]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	490e      	ldr	r1, [pc, #56]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800242e:	4313      	orrs	r3, r2
 8002430:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002432:	f000 f821 	bl	8002478 <HAL_RCC_GetSysClockFreq>
 8002436:	4602      	mov	r2, r0
 8002438:	4b0b      	ldr	r3, [pc, #44]	@ (8002468 <HAL_RCC_ClockConfig+0x1bc>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	091b      	lsrs	r3, r3, #4
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	490a      	ldr	r1, [pc, #40]	@ (800246c <HAL_RCC_ClockConfig+0x1c0>)
 8002444:	5ccb      	ldrb	r3, [r1, r3]
 8002446:	fa22 f303 	lsr.w	r3, r2, r3
 800244a:	4a09      	ldr	r2, [pc, #36]	@ (8002470 <HAL_RCC_ClockConfig+0x1c4>)
 800244c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800244e:	4b09      	ldr	r3, [pc, #36]	@ (8002474 <HAL_RCC_ClockConfig+0x1c8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe fe9a 	bl	800118c <HAL_InitTick>

  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40023c00 	.word	0x40023c00
 8002468:	40023800 	.word	0x40023800
 800246c:	08006f84 	.word	0x08006f84
 8002470:	20000018 	.word	0x20000018
 8002474:	2000001c 	.word	0x2000001c

08002478 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002478:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800247c:	b094      	sub	sp, #80	@ 0x50
 800247e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002480:	2300      	movs	r3, #0
 8002482:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002484:	2300      	movs	r3, #0
 8002486:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800248c:	2300      	movs	r3, #0
 800248e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002490:	4b79      	ldr	r3, [pc, #484]	@ (8002678 <HAL_RCC_GetSysClockFreq+0x200>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 030c 	and.w	r3, r3, #12
 8002498:	2b08      	cmp	r3, #8
 800249a:	d00d      	beq.n	80024b8 <HAL_RCC_GetSysClockFreq+0x40>
 800249c:	2b08      	cmp	r3, #8
 800249e:	f200 80e1 	bhi.w	8002664 <HAL_RCC_GetSysClockFreq+0x1ec>
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d002      	beq.n	80024ac <HAL_RCC_GetSysClockFreq+0x34>
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d003      	beq.n	80024b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80024aa:	e0db      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024ac:	4b73      	ldr	r3, [pc, #460]	@ (800267c <HAL_RCC_GetSysClockFreq+0x204>)
 80024ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80024b0:	e0db      	b.n	800266a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024b2:	4b73      	ldr	r3, [pc, #460]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x208>)
 80024b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80024b6:	e0d8      	b.n	800266a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024b8:	4b6f      	ldr	r3, [pc, #444]	@ (8002678 <HAL_RCC_GetSysClockFreq+0x200>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024c0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024c2:	4b6d      	ldr	r3, [pc, #436]	@ (8002678 <HAL_RCC_GetSysClockFreq+0x200>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d063      	beq.n	8002596 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ce:	4b6a      	ldr	r3, [pc, #424]	@ (8002678 <HAL_RCC_GetSysClockFreq+0x200>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	099b      	lsrs	r3, r3, #6
 80024d4:	2200      	movs	r2, #0
 80024d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80024da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80024e2:	2300      	movs	r3, #0
 80024e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80024e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80024ea:	4622      	mov	r2, r4
 80024ec:	462b      	mov	r3, r5
 80024ee:	f04f 0000 	mov.w	r0, #0
 80024f2:	f04f 0100 	mov.w	r1, #0
 80024f6:	0159      	lsls	r1, r3, #5
 80024f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024fc:	0150      	lsls	r0, r2, #5
 80024fe:	4602      	mov	r2, r0
 8002500:	460b      	mov	r3, r1
 8002502:	4621      	mov	r1, r4
 8002504:	1a51      	subs	r1, r2, r1
 8002506:	6139      	str	r1, [r7, #16]
 8002508:	4629      	mov	r1, r5
 800250a:	eb63 0301 	sbc.w	r3, r3, r1
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	f04f 0200 	mov.w	r2, #0
 8002514:	f04f 0300 	mov.w	r3, #0
 8002518:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800251c:	4659      	mov	r1, fp
 800251e:	018b      	lsls	r3, r1, #6
 8002520:	4651      	mov	r1, sl
 8002522:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002526:	4651      	mov	r1, sl
 8002528:	018a      	lsls	r2, r1, #6
 800252a:	4651      	mov	r1, sl
 800252c:	ebb2 0801 	subs.w	r8, r2, r1
 8002530:	4659      	mov	r1, fp
 8002532:	eb63 0901 	sbc.w	r9, r3, r1
 8002536:	f04f 0200 	mov.w	r2, #0
 800253a:	f04f 0300 	mov.w	r3, #0
 800253e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002542:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002546:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800254a:	4690      	mov	r8, r2
 800254c:	4699      	mov	r9, r3
 800254e:	4623      	mov	r3, r4
 8002550:	eb18 0303 	adds.w	r3, r8, r3
 8002554:	60bb      	str	r3, [r7, #8]
 8002556:	462b      	mov	r3, r5
 8002558:	eb49 0303 	adc.w	r3, r9, r3
 800255c:	60fb      	str	r3, [r7, #12]
 800255e:	f04f 0200 	mov.w	r2, #0
 8002562:	f04f 0300 	mov.w	r3, #0
 8002566:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800256a:	4629      	mov	r1, r5
 800256c:	024b      	lsls	r3, r1, #9
 800256e:	4621      	mov	r1, r4
 8002570:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002574:	4621      	mov	r1, r4
 8002576:	024a      	lsls	r2, r1, #9
 8002578:	4610      	mov	r0, r2
 800257a:	4619      	mov	r1, r3
 800257c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800257e:	2200      	movs	r2, #0
 8002580:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002582:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002584:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002588:	f7fd fe92 	bl	80002b0 <__aeabi_uldivmod>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	4613      	mov	r3, r2
 8002592:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002594:	e058      	b.n	8002648 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002596:	4b38      	ldr	r3, [pc, #224]	@ (8002678 <HAL_RCC_GetSysClockFreq+0x200>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	099b      	lsrs	r3, r3, #6
 800259c:	2200      	movs	r2, #0
 800259e:	4618      	mov	r0, r3
 80025a0:	4611      	mov	r1, r2
 80025a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025a6:	623b      	str	r3, [r7, #32]
 80025a8:	2300      	movs	r3, #0
 80025aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80025ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80025b0:	4642      	mov	r2, r8
 80025b2:	464b      	mov	r3, r9
 80025b4:	f04f 0000 	mov.w	r0, #0
 80025b8:	f04f 0100 	mov.w	r1, #0
 80025bc:	0159      	lsls	r1, r3, #5
 80025be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025c2:	0150      	lsls	r0, r2, #5
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	4641      	mov	r1, r8
 80025ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80025ce:	4649      	mov	r1, r9
 80025d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80025d4:	f04f 0200 	mov.w	r2, #0
 80025d8:	f04f 0300 	mov.w	r3, #0
 80025dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80025e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80025e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80025e8:	ebb2 040a 	subs.w	r4, r2, sl
 80025ec:	eb63 050b 	sbc.w	r5, r3, fp
 80025f0:	f04f 0200 	mov.w	r2, #0
 80025f4:	f04f 0300 	mov.w	r3, #0
 80025f8:	00eb      	lsls	r3, r5, #3
 80025fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025fe:	00e2      	lsls	r2, r4, #3
 8002600:	4614      	mov	r4, r2
 8002602:	461d      	mov	r5, r3
 8002604:	4643      	mov	r3, r8
 8002606:	18e3      	adds	r3, r4, r3
 8002608:	603b      	str	r3, [r7, #0]
 800260a:	464b      	mov	r3, r9
 800260c:	eb45 0303 	adc.w	r3, r5, r3
 8002610:	607b      	str	r3, [r7, #4]
 8002612:	f04f 0200 	mov.w	r2, #0
 8002616:	f04f 0300 	mov.w	r3, #0
 800261a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800261e:	4629      	mov	r1, r5
 8002620:	028b      	lsls	r3, r1, #10
 8002622:	4621      	mov	r1, r4
 8002624:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002628:	4621      	mov	r1, r4
 800262a:	028a      	lsls	r2, r1, #10
 800262c:	4610      	mov	r0, r2
 800262e:	4619      	mov	r1, r3
 8002630:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002632:	2200      	movs	r2, #0
 8002634:	61bb      	str	r3, [r7, #24]
 8002636:	61fa      	str	r2, [r7, #28]
 8002638:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800263c:	f7fd fe38 	bl	80002b0 <__aeabi_uldivmod>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	4613      	mov	r3, r2
 8002646:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002648:	4b0b      	ldr	r3, [pc, #44]	@ (8002678 <HAL_RCC_GetSysClockFreq+0x200>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	0c1b      	lsrs	r3, r3, #16
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	3301      	adds	r3, #1
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002658:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800265a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800265c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002660:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002662:	e002      	b.n	800266a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002664:	4b05      	ldr	r3, [pc, #20]	@ (800267c <HAL_RCC_GetSysClockFreq+0x204>)
 8002666:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002668:	bf00      	nop
    }
  }
  return sysclockfreq;
 800266a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800266c:	4618      	mov	r0, r3
 800266e:	3750      	adds	r7, #80	@ 0x50
 8002670:	46bd      	mov	sp, r7
 8002672:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002676:	bf00      	nop
 8002678:	40023800 	.word	0x40023800
 800267c:	00f42400 	.word	0x00f42400
 8002680:	007a1200 	.word	0x007a1200

08002684 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002688:	4b03      	ldr	r3, [pc, #12]	@ (8002698 <HAL_RCC_GetHCLKFreq+0x14>)
 800268a:	681b      	ldr	r3, [r3, #0]
}
 800268c:	4618      	mov	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	20000018 	.word	0x20000018

0800269c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026a0:	f7ff fff0 	bl	8002684 <HAL_RCC_GetHCLKFreq>
 80026a4:	4602      	mov	r2, r0
 80026a6:	4b05      	ldr	r3, [pc, #20]	@ (80026bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	0a9b      	lsrs	r3, r3, #10
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	4903      	ldr	r1, [pc, #12]	@ (80026c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026b2:	5ccb      	ldrb	r3, [r1, r3]
 80026b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40023800 	.word	0x40023800
 80026c0:	08006f94 	.word	0x08006f94

080026c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026c8:	f7ff ffdc 	bl	8002684 <HAL_RCC_GetHCLKFreq>
 80026cc:	4602      	mov	r2, r0
 80026ce:	4b05      	ldr	r3, [pc, #20]	@ (80026e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	0b5b      	lsrs	r3, r3, #13
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	4903      	ldr	r1, [pc, #12]	@ (80026e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026da:	5ccb      	ldrb	r3, [r1, r3]
 80026dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40023800 	.word	0x40023800
 80026e8:	08006f94 	.word	0x08006f94

080026ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	220f      	movs	r2, #15
 80026fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80026fc:	4b12      	ldr	r3, [pc, #72]	@ (8002748 <HAL_RCC_GetClockConfig+0x5c>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 0203 	and.w	r2, r3, #3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002708:	4b0f      	ldr	r3, [pc, #60]	@ (8002748 <HAL_RCC_GetClockConfig+0x5c>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002714:	4b0c      	ldr	r3, [pc, #48]	@ (8002748 <HAL_RCC_GetClockConfig+0x5c>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002720:	4b09      	ldr	r3, [pc, #36]	@ (8002748 <HAL_RCC_GetClockConfig+0x5c>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	08db      	lsrs	r3, r3, #3
 8002726:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800272e:	4b07      	ldr	r3, [pc, #28]	@ (800274c <HAL_RCC_GetClockConfig+0x60>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0207 	and.w	r2, r3, #7
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	601a      	str	r2, [r3, #0]
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	40023800 	.word	0x40023800
 800274c:	40023c00 	.word	0x40023c00

08002750 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e041      	b.n	80027e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d106      	bne.n	800277c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f839 	bl	80027ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2202      	movs	r2, #2
 8002780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3304      	adds	r3, #4
 800278c:	4619      	mov	r1, r3
 800278e:	4610      	mov	r0, r2
 8002790:	f000 f9b2 	bl	8002af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
	...

08002804 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b01      	cmp	r3, #1
 8002816:	d001      	beq.n	800281c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e044      	b.n	80028a6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2202      	movs	r2, #2
 8002820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68da      	ldr	r2, [r3, #12]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f042 0201 	orr.w	r2, r2, #1
 8002832:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a1e      	ldr	r2, [pc, #120]	@ (80028b4 <HAL_TIM_Base_Start_IT+0xb0>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d018      	beq.n	8002870 <HAL_TIM_Base_Start_IT+0x6c>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002846:	d013      	beq.n	8002870 <HAL_TIM_Base_Start_IT+0x6c>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a1a      	ldr	r2, [pc, #104]	@ (80028b8 <HAL_TIM_Base_Start_IT+0xb4>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d00e      	beq.n	8002870 <HAL_TIM_Base_Start_IT+0x6c>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a19      	ldr	r2, [pc, #100]	@ (80028bc <HAL_TIM_Base_Start_IT+0xb8>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d009      	beq.n	8002870 <HAL_TIM_Base_Start_IT+0x6c>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a17      	ldr	r2, [pc, #92]	@ (80028c0 <HAL_TIM_Base_Start_IT+0xbc>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d004      	beq.n	8002870 <HAL_TIM_Base_Start_IT+0x6c>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a16      	ldr	r2, [pc, #88]	@ (80028c4 <HAL_TIM_Base_Start_IT+0xc0>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d111      	bne.n	8002894 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2b06      	cmp	r3, #6
 8002880:	d010      	beq.n	80028a4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f042 0201 	orr.w	r2, r2, #1
 8002890:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002892:	e007      	b.n	80028a4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0201 	orr.w	r2, r2, #1
 80028a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	40010000 	.word	0x40010000
 80028b8:	40000400 	.word	0x40000400
 80028bc:	40000800 	.word	0x40000800
 80028c0:	40000c00 	.word	0x40000c00
 80028c4:	40014000 	.word	0x40014000

080028c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d020      	beq.n	800292c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d01b      	beq.n	800292c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f06f 0202 	mvn.w	r2, #2
 80028fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f8d2 	bl	8002abc <HAL_TIM_IC_CaptureCallback>
 8002918:	e005      	b.n	8002926 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f8c4 	bl	8002aa8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 f8d5 	bl	8002ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	f003 0304 	and.w	r3, r3, #4
 8002932:	2b00      	cmp	r3, #0
 8002934:	d020      	beq.n	8002978 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	d01b      	beq.n	8002978 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f06f 0204 	mvn.w	r2, #4
 8002948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2202      	movs	r2, #2
 800294e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 f8ac 	bl	8002abc <HAL_TIM_IC_CaptureCallback>
 8002964:	e005      	b.n	8002972 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f89e 	bl	8002aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 f8af 	bl	8002ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	2b00      	cmp	r3, #0
 8002980:	d020      	beq.n	80029c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	2b00      	cmp	r3, #0
 800298a:	d01b      	beq.n	80029c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f06f 0208 	mvn.w	r2, #8
 8002994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2204      	movs	r2, #4
 800299a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	f003 0303 	and.w	r3, r3, #3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f886 	bl	8002abc <HAL_TIM_IC_CaptureCallback>
 80029b0:	e005      	b.n	80029be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f878 	bl	8002aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 f889 	bl	8002ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	f003 0310 	and.w	r3, r3, #16
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d020      	beq.n	8002a10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f003 0310 	and.w	r3, r3, #16
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d01b      	beq.n	8002a10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f06f 0210 	mvn.w	r2, #16
 80029e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2208      	movs	r2, #8
 80029e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f860 	bl	8002abc <HAL_TIM_IC_CaptureCallback>
 80029fc:	e005      	b.n	8002a0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f852 	bl	8002aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 f863 	bl	8002ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00c      	beq.n	8002a34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d007      	beq.n	8002a34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f06f 0201 	mvn.w	r2, #1
 8002a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7fe fb6a 	bl	8001108 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00c      	beq.n	8002a58 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d007      	beq.n	8002a58 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f8e6 	bl	8002c24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00c      	beq.n	8002a7c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d007      	beq.n	8002a7c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f834 	bl	8002ae4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	f003 0320 	and.w	r3, r3, #32
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00c      	beq.n	8002aa0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f003 0320 	and.w	r3, r3, #32
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d007      	beq.n	8002aa0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f06f 0220 	mvn.w	r2, #32
 8002a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f8b8 	bl	8002c10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002aa0:	bf00      	nop
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a3a      	ldr	r2, [pc, #232]	@ (8002bf4 <TIM_Base_SetConfig+0xfc>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d00f      	beq.n	8002b30 <TIM_Base_SetConfig+0x38>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b16:	d00b      	beq.n	8002b30 <TIM_Base_SetConfig+0x38>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a37      	ldr	r2, [pc, #220]	@ (8002bf8 <TIM_Base_SetConfig+0x100>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d007      	beq.n	8002b30 <TIM_Base_SetConfig+0x38>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a36      	ldr	r2, [pc, #216]	@ (8002bfc <TIM_Base_SetConfig+0x104>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d003      	beq.n	8002b30 <TIM_Base_SetConfig+0x38>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a35      	ldr	r2, [pc, #212]	@ (8002c00 <TIM_Base_SetConfig+0x108>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d108      	bne.n	8002b42 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a2b      	ldr	r2, [pc, #172]	@ (8002bf4 <TIM_Base_SetConfig+0xfc>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d01b      	beq.n	8002b82 <TIM_Base_SetConfig+0x8a>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b50:	d017      	beq.n	8002b82 <TIM_Base_SetConfig+0x8a>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a28      	ldr	r2, [pc, #160]	@ (8002bf8 <TIM_Base_SetConfig+0x100>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d013      	beq.n	8002b82 <TIM_Base_SetConfig+0x8a>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a27      	ldr	r2, [pc, #156]	@ (8002bfc <TIM_Base_SetConfig+0x104>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d00f      	beq.n	8002b82 <TIM_Base_SetConfig+0x8a>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a26      	ldr	r2, [pc, #152]	@ (8002c00 <TIM_Base_SetConfig+0x108>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d00b      	beq.n	8002b82 <TIM_Base_SetConfig+0x8a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a25      	ldr	r2, [pc, #148]	@ (8002c04 <TIM_Base_SetConfig+0x10c>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d007      	beq.n	8002b82 <TIM_Base_SetConfig+0x8a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a24      	ldr	r2, [pc, #144]	@ (8002c08 <TIM_Base_SetConfig+0x110>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d003      	beq.n	8002b82 <TIM_Base_SetConfig+0x8a>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a23      	ldr	r2, [pc, #140]	@ (8002c0c <TIM_Base_SetConfig+0x114>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d108      	bne.n	8002b94 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68fa      	ldr	r2, [r7, #12]
 8002ba6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a0e      	ldr	r2, [pc, #56]	@ (8002bf4 <TIM_Base_SetConfig+0xfc>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d103      	bne.n	8002bc8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	691a      	ldr	r2, [r3, #16]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d105      	bne.n	8002be6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	f023 0201 	bic.w	r2, r3, #1
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	611a      	str	r2, [r3, #16]
  }
}
 8002be6:	bf00      	nop
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	40010000 	.word	0x40010000
 8002bf8:	40000400 	.word	0x40000400
 8002bfc:	40000800 	.word	0x40000800
 8002c00:	40000c00 	.word	0x40000c00
 8002c04:	40014000 	.word	0x40014000
 8002c08:	40014400 	.word	0x40014400
 8002c0c:	40014800 	.word	0x40014800

08002c10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e042      	b.n	8002cd0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d106      	bne.n	8002c64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7fe fc6c 	bl	800153c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2224      	movs	r2, #36	@ 0x24
 8002c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 fdbd 	bl	80037fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	691a      	ldr	r2, [r3, #16]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	695a      	ldr	r2, [r3, #20]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ca0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68da      	ldr	r2, [r3, #12]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002cb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2220      	movs	r2, #32
 8002cc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08a      	sub	sp, #40	@ 0x28
 8002cdc:	af02      	add	r7, sp, #8
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	603b      	str	r3, [r7, #0]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b20      	cmp	r3, #32
 8002cf6:	d175      	bne.n	8002de4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d002      	beq.n	8002d04 <HAL_UART_Transmit+0x2c>
 8002cfe:	88fb      	ldrh	r3, [r7, #6]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e06e      	b.n	8002de6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2221      	movs	r2, #33	@ 0x21
 8002d12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d16:	f7fe fcf7 	bl	8001708 <HAL_GetTick>
 8002d1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	88fa      	ldrh	r2, [r7, #6]
 8002d20:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	88fa      	ldrh	r2, [r7, #6]
 8002d26:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d30:	d108      	bne.n	8002d44 <HAL_UART_Transmit+0x6c>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	691b      	ldr	r3, [r3, #16]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d104      	bne.n	8002d44 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	61bb      	str	r3, [r7, #24]
 8002d42:	e003      	b.n	8002d4c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d4c:	e02e      	b.n	8002dac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2200      	movs	r2, #0
 8002d56:	2180      	movs	r1, #128	@ 0x80
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 fb1f 	bl	800339c <UART_WaitOnFlagUntilTimeout>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d005      	beq.n	8002d70 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2220      	movs	r2, #32
 8002d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e03a      	b.n	8002de6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10b      	bne.n	8002d8e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	881b      	ldrh	r3, [r3, #0]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	3302      	adds	r3, #2
 8002d8a:	61bb      	str	r3, [r7, #24]
 8002d8c:	e007      	b.n	8002d9e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	781a      	ldrb	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1cb      	bne.n	8002d4e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	2140      	movs	r1, #64	@ 0x40
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 faeb 	bl	800339c <UART_WaitOnFlagUntilTimeout>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d005      	beq.n	8002dd8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e006      	b.n	8002de6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002de0:	2300      	movs	r3, #0
 8002de2:	e000      	b.n	8002de6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002de4:	2302      	movs	r3, #2
  }
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3720      	adds	r7, #32
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b084      	sub	sp, #16
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	60f8      	str	r0, [r7, #12]
 8002df6:	60b9      	str	r1, [r7, #8]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b20      	cmp	r3, #32
 8002e06:	d112      	bne.n	8002e2e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d002      	beq.n	8002e14 <HAL_UART_Receive_IT+0x26>
 8002e0e:	88fb      	ldrh	r3, [r7, #6]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e00b      	b.n	8002e30 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002e1e:	88fb      	ldrh	r3, [r7, #6]
 8002e20:	461a      	mov	r2, r3
 8002e22:	68b9      	ldr	r1, [r7, #8]
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f000 fb12 	bl	800344e <UART_Start_Receive_IT>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	e000      	b.n	8002e30 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002e2e:	2302      	movs	r3, #2
  }
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b0ba      	sub	sp, #232	@ 0xe8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002e64:	2300      	movs	r3, #0
 8002e66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e6e:	f003 030f 	and.w	r3, r3, #15
 8002e72:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002e76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10f      	bne.n	8002e9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e82:	f003 0320 	and.w	r3, r3, #32
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d009      	beq.n	8002e9e <HAL_UART_IRQHandler+0x66>
 8002e8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e8e:	f003 0320 	and.w	r3, r3, #32
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 fbf2 	bl	8003680 <UART_Receive_IT>
      return;
 8002e9c:	e25b      	b.n	8003356 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 80de 	beq.w	8003064 <HAL_UART_IRQHandler+0x22c>
 8002ea8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d106      	bne.n	8002ec2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002eb8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 80d1 	beq.w	8003064 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00b      	beq.n	8002ee6 <HAL_UART_IRQHandler+0xae>
 8002ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ed2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d005      	beq.n	8002ee6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ede:	f043 0201 	orr.w	r2, r3, #1
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eea:	f003 0304 	and.w	r3, r3, #4
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00b      	beq.n	8002f0a <HAL_UART_IRQHandler+0xd2>
 8002ef2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d005      	beq.n	8002f0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f02:	f043 0202 	orr.w	r2, r3, #2
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00b      	beq.n	8002f2e <HAL_UART_IRQHandler+0xf6>
 8002f16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d005      	beq.n	8002f2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f26:	f043 0204 	orr.w	r2, r3, #4
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d011      	beq.n	8002f5e <HAL_UART_IRQHandler+0x126>
 8002f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f3e:	f003 0320 	and.w	r3, r3, #32
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d105      	bne.n	8002f52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d005      	beq.n	8002f5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f56:	f043 0208 	orr.w	r2, r3, #8
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 81f2 	beq.w	800334c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f6c:	f003 0320 	and.w	r3, r3, #32
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d008      	beq.n	8002f86 <HAL_UART_IRQHandler+0x14e>
 8002f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f78:	f003 0320 	and.w	r3, r3, #32
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d002      	beq.n	8002f86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 fb7d 	bl	8003680 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f90:	2b40      	cmp	r3, #64	@ 0x40
 8002f92:	bf0c      	ite	eq
 8002f94:	2301      	moveq	r3, #1
 8002f96:	2300      	movne	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d103      	bne.n	8002fb2 <HAL_UART_IRQHandler+0x17a>
 8002faa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d04f      	beq.n	8003052 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 fa85 	bl	80034c2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fc2:	2b40      	cmp	r3, #64	@ 0x40
 8002fc4:	d141      	bne.n	800304a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	3314      	adds	r3, #20
 8002fcc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002fd4:	e853 3f00 	ldrex	r3, [r3]
 8002fd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002fdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002fe0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fe4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	3314      	adds	r3, #20
 8002fee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002ff2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002ff6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002ffe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003002:	e841 2300 	strex	r3, r2, [r1]
 8003006:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800300a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1d9      	bne.n	8002fc6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003016:	2b00      	cmp	r3, #0
 8003018:	d013      	beq.n	8003042 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800301e:	4a7e      	ldr	r2, [pc, #504]	@ (8003218 <HAL_UART_IRQHandler+0x3e0>)
 8003020:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003026:	4618      	mov	r0, r3
 8003028:	f7fe fcf0 	bl	8001a0c <HAL_DMA_Abort_IT>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d016      	beq.n	8003060 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003036:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800303c:	4610      	mov	r0, r2
 800303e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003040:	e00e      	b.n	8003060 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 f994 	bl	8003370 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003048:	e00a      	b.n	8003060 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f990 	bl	8003370 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003050:	e006      	b.n	8003060 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f98c 	bl	8003370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800305e:	e175      	b.n	800334c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003060:	bf00      	nop
    return;
 8003062:	e173      	b.n	800334c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003068:	2b01      	cmp	r3, #1
 800306a:	f040 814f 	bne.w	800330c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800306e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003072:	f003 0310 	and.w	r3, r3, #16
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 8148 	beq.w	800330c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800307c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003080:	f003 0310 	and.w	r3, r3, #16
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 8141 	beq.w	800330c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800308a:	2300      	movs	r3, #0
 800308c:	60bb      	str	r3, [r7, #8]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	60bb      	str	r3, [r7, #8]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	60bb      	str	r3, [r7, #8]
 800309e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030aa:	2b40      	cmp	r3, #64	@ 0x40
 80030ac:	f040 80b6 	bne.w	800321c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80030bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 8145 	beq.w	8003350 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80030ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80030ce:	429a      	cmp	r2, r3
 80030d0:	f080 813e 	bcs.w	8003350 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80030da:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030e0:	69db      	ldr	r3, [r3, #28]
 80030e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030e6:	f000 8088 	beq.w	80031fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	330c      	adds	r3, #12
 80030f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80030f8:	e853 3f00 	ldrex	r3, [r3]
 80030fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003100:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003104:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003108:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	330c      	adds	r3, #12
 8003112:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003116:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800311a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800311e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003122:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003126:	e841 2300 	strex	r3, r2, [r1]
 800312a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800312e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003132:	2b00      	cmp	r3, #0
 8003134:	d1d9      	bne.n	80030ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	3314      	adds	r3, #20
 800313c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800313e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003140:	e853 3f00 	ldrex	r3, [r3]
 8003144:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003146:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003148:	f023 0301 	bic.w	r3, r3, #1
 800314c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	3314      	adds	r3, #20
 8003156:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800315a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800315e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003160:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003162:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003166:	e841 2300 	strex	r3, r2, [r1]
 800316a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800316c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1e1      	bne.n	8003136 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	3314      	adds	r3, #20
 8003178:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800317c:	e853 3f00 	ldrex	r3, [r3]
 8003180:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003182:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003184:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003188:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	3314      	adds	r3, #20
 8003192:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003196:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003198:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800319c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800319e:	e841 2300 	strex	r3, r2, [r1]
 80031a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80031a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1e3      	bne.n	8003172 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	330c      	adds	r3, #12
 80031be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031c2:	e853 3f00 	ldrex	r3, [r3]
 80031c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80031c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031ca:	f023 0310 	bic.w	r3, r3, #16
 80031ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	330c      	adds	r3, #12
 80031d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80031dc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80031de:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80031e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80031e4:	e841 2300 	strex	r3, r2, [r1]
 80031e8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80031ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1e3      	bne.n	80031b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7fe fb99 	bl	800192c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2202      	movs	r2, #2
 80031fe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003208:	b29b      	uxth	r3, r3
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	b29b      	uxth	r3, r3
 800320e:	4619      	mov	r1, r3
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 f8b7 	bl	8003384 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003216:	e09b      	b.n	8003350 <HAL_UART_IRQHandler+0x518>
 8003218:	08003589 	.word	0x08003589
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003224:	b29b      	uxth	r3, r3
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003230:	b29b      	uxth	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 808e 	beq.w	8003354 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003238:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 8089 	beq.w	8003354 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	330c      	adds	r3, #12
 8003248:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800324a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800324c:	e853 3f00 	ldrex	r3, [r3]
 8003250:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003254:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003258:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	330c      	adds	r3, #12
 8003262:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003266:	647a      	str	r2, [r7, #68]	@ 0x44
 8003268:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800326c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800326e:	e841 2300 	strex	r3, r2, [r1]
 8003272:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003274:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1e3      	bne.n	8003242 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	3314      	adds	r3, #20
 8003280:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003284:	e853 3f00 	ldrex	r3, [r3]
 8003288:	623b      	str	r3, [r7, #32]
   return(result);
 800328a:	6a3b      	ldr	r3, [r7, #32]
 800328c:	f023 0301 	bic.w	r3, r3, #1
 8003290:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	3314      	adds	r3, #20
 800329a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800329e:	633a      	str	r2, [r7, #48]	@ 0x30
 80032a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032a6:	e841 2300 	strex	r3, r2, [r1]
 80032aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80032ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1e3      	bne.n	800327a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2220      	movs	r2, #32
 80032b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	330c      	adds	r3, #12
 80032c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	e853 3f00 	ldrex	r3, [r3]
 80032ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f023 0310 	bic.w	r3, r3, #16
 80032d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	330c      	adds	r3, #12
 80032e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80032e4:	61fa      	str	r2, [r7, #28]
 80032e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e8:	69b9      	ldr	r1, [r7, #24]
 80032ea:	69fa      	ldr	r2, [r7, #28]
 80032ec:	e841 2300 	strex	r3, r2, [r1]
 80032f0:	617b      	str	r3, [r7, #20]
   return(result);
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1e3      	bne.n	80032c0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2202      	movs	r2, #2
 80032fc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003302:	4619      	mov	r1, r3
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 f83d 	bl	8003384 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800330a:	e023      	b.n	8003354 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800330c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003314:	2b00      	cmp	r3, #0
 8003316:	d009      	beq.n	800332c <HAL_UART_IRQHandler+0x4f4>
 8003318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800331c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003320:	2b00      	cmp	r3, #0
 8003322:	d003      	beq.n	800332c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 f943 	bl	80035b0 <UART_Transmit_IT>
    return;
 800332a:	e014      	b.n	8003356 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800332c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00e      	beq.n	8003356 <HAL_UART_IRQHandler+0x51e>
 8003338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800333c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003340:	2b00      	cmp	r3, #0
 8003342:	d008      	beq.n	8003356 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 f983 	bl	8003650 <UART_EndTransmit_IT>
    return;
 800334a:	e004      	b.n	8003356 <HAL_UART_IRQHandler+0x51e>
    return;
 800334c:	bf00      	nop
 800334e:	e002      	b.n	8003356 <HAL_UART_IRQHandler+0x51e>
      return;
 8003350:	bf00      	nop
 8003352:	e000      	b.n	8003356 <HAL_UART_IRQHandler+0x51e>
      return;
 8003354:	bf00      	nop
  }
}
 8003356:	37e8      	adds	r7, #232	@ 0xe8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	460b      	mov	r3, r1
 800338e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	603b      	str	r3, [r7, #0]
 80033a8:	4613      	mov	r3, r2
 80033aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033ac:	e03b      	b.n	8003426 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b4:	d037      	beq.n	8003426 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033b6:	f7fe f9a7 	bl	8001708 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	6a3a      	ldr	r2, [r7, #32]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d302      	bcc.n	80033cc <UART_WaitOnFlagUntilTimeout+0x30>
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d101      	bne.n	80033d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e03a      	b.n	8003446 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f003 0304 	and.w	r3, r3, #4
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d023      	beq.n	8003426 <UART_WaitOnFlagUntilTimeout+0x8a>
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2b80      	cmp	r3, #128	@ 0x80
 80033e2:	d020      	beq.n	8003426 <UART_WaitOnFlagUntilTimeout+0x8a>
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	2b40      	cmp	r3, #64	@ 0x40
 80033e8:	d01d      	beq.n	8003426 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0308 	and.w	r3, r3, #8
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d116      	bne.n	8003426 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80033f8:	2300      	movs	r3, #0
 80033fa:	617b      	str	r3, [r7, #20]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	617b      	str	r3, [r7, #20]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f000 f857 	bl	80034c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2208      	movs	r2, #8
 8003418:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e00f      	b.n	8003446 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	4013      	ands	r3, r2
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	429a      	cmp	r2, r3
 8003434:	bf0c      	ite	eq
 8003436:	2301      	moveq	r3, #1
 8003438:	2300      	movne	r3, #0
 800343a:	b2db      	uxtb	r3, r3
 800343c:	461a      	mov	r2, r3
 800343e:	79fb      	ldrb	r3, [r7, #7]
 8003440:	429a      	cmp	r2, r3
 8003442:	d0b4      	beq.n	80033ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800344e:	b480      	push	{r7}
 8003450:	b085      	sub	sp, #20
 8003452:	af00      	add	r7, sp, #0
 8003454:	60f8      	str	r0, [r7, #12]
 8003456:	60b9      	str	r1, [r7, #8]
 8003458:	4613      	mov	r3, r2
 800345a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	88fa      	ldrh	r2, [r7, #6]
 8003466:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	88fa      	ldrh	r2, [r7, #6]
 800346c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2222      	movs	r2, #34	@ 0x22
 8003478:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d007      	beq.n	8003494 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003492:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	695a      	ldr	r2, [r3, #20]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0201 	orr.w	r2, r2, #1
 80034a2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68da      	ldr	r2, [r3, #12]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f042 0220 	orr.w	r2, r2, #32
 80034b2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b095      	sub	sp, #84	@ 0x54
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	330c      	adds	r3, #12
 80034d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034d4:	e853 3f00 	ldrex	r3, [r3]
 80034d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80034da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	330c      	adds	r3, #12
 80034e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80034ea:	643a      	str	r2, [r7, #64]	@ 0x40
 80034ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80034f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80034f2:	e841 2300 	strex	r3, r2, [r1]
 80034f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80034f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1e5      	bne.n	80034ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	3314      	adds	r3, #20
 8003504:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003506:	6a3b      	ldr	r3, [r7, #32]
 8003508:	e853 3f00 	ldrex	r3, [r3]
 800350c:	61fb      	str	r3, [r7, #28]
   return(result);
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	f023 0301 	bic.w	r3, r3, #1
 8003514:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	3314      	adds	r3, #20
 800351c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800351e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003520:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003522:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003524:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003526:	e841 2300 	strex	r3, r2, [r1]
 800352a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800352c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1e5      	bne.n	80034fe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003536:	2b01      	cmp	r3, #1
 8003538:	d119      	bne.n	800356e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	330c      	adds	r3, #12
 8003540:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	e853 3f00 	ldrex	r3, [r3]
 8003548:	60bb      	str	r3, [r7, #8]
   return(result);
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	f023 0310 	bic.w	r3, r3, #16
 8003550:	647b      	str	r3, [r7, #68]	@ 0x44
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	330c      	adds	r3, #12
 8003558:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800355a:	61ba      	str	r2, [r7, #24]
 800355c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800355e:	6979      	ldr	r1, [r7, #20]
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	e841 2300 	strex	r3, r2, [r1]
 8003566:	613b      	str	r3, [r7, #16]
   return(result);
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1e5      	bne.n	800353a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2220      	movs	r2, #32
 8003572:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800357c:	bf00      	nop
 800357e:	3754      	adds	r7, #84	@ 0x54
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003594:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f7ff fee4 	bl	8003370 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035a8:	bf00      	nop
 80035aa:	3710      	adds	r7, #16
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b21      	cmp	r3, #33	@ 0x21
 80035c2:	d13e      	bne.n	8003642 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035cc:	d114      	bne.n	80035f8 <UART_Transmit_IT+0x48>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d110      	bne.n	80035f8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	881b      	ldrh	r3, [r3, #0]
 80035e0:	461a      	mov	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035ea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	1c9a      	adds	r2, r3, #2
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	621a      	str	r2, [r3, #32]
 80035f6:	e008      	b.n	800360a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	1c59      	adds	r1, r3, #1
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	6211      	str	r1, [r2, #32]
 8003602:	781a      	ldrb	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800360e:	b29b      	uxth	r3, r3
 8003610:	3b01      	subs	r3, #1
 8003612:	b29b      	uxth	r3, r3
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	4619      	mov	r1, r3
 8003618:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10f      	bne.n	800363e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800362c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68da      	ldr	r2, [r3, #12]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800363c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	e000      	b.n	8003644 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003642:	2302      	movs	r3, #2
  }
}
 8003644:	4618      	mov	r0, r3
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68da      	ldr	r2, [r3, #12]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003666:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2220      	movs	r2, #32
 800366c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f7ff fe73 	bl	800335c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b08c      	sub	sp, #48	@ 0x30
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b22      	cmp	r3, #34	@ 0x22
 8003692:	f040 80ae 	bne.w	80037f2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800369e:	d117      	bne.n	80036d0 <UART_Receive_IT+0x50>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d113      	bne.n	80036d0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80036a8:	2300      	movs	r3, #0
 80036aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	b29b      	uxth	r3, r3
 80036ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036be:	b29a      	uxth	r2, r3
 80036c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c8:	1c9a      	adds	r2, r3, #2
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80036ce:	e026      	b.n	800371e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80036d6:	2300      	movs	r3, #0
 80036d8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036e2:	d007      	beq.n	80036f4 <UART_Receive_IT+0x74>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10a      	bne.n	8003702 <UART_Receive_IT+0x82>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d106      	bne.n	8003702 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036fe:	701a      	strb	r2, [r3, #0]
 8003700:	e008      	b.n	8003714 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	b2db      	uxtb	r3, r3
 800370a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800370e:	b2da      	uxtb	r2, r3
 8003710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003712:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003718:	1c5a      	adds	r2, r3, #1
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003722:	b29b      	uxth	r3, r3
 8003724:	3b01      	subs	r3, #1
 8003726:	b29b      	uxth	r3, r3
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	4619      	mov	r1, r3
 800372c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800372e:	2b00      	cmp	r3, #0
 8003730:	d15d      	bne.n	80037ee <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68da      	ldr	r2, [r3, #12]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 0220 	bic.w	r2, r2, #32
 8003740:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68da      	ldr	r2, [r3, #12]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003750:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	695a      	ldr	r2, [r3, #20]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0201 	bic.w	r2, r2, #1
 8003760:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2220      	movs	r2, #32
 8003766:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003774:	2b01      	cmp	r3, #1
 8003776:	d135      	bne.n	80037e4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	330c      	adds	r3, #12
 8003784:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	e853 3f00 	ldrex	r3, [r3]
 800378c:	613b      	str	r3, [r7, #16]
   return(result);
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	f023 0310 	bic.w	r3, r3, #16
 8003794:	627b      	str	r3, [r7, #36]	@ 0x24
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	330c      	adds	r3, #12
 800379c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800379e:	623a      	str	r2, [r7, #32]
 80037a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a2:	69f9      	ldr	r1, [r7, #28]
 80037a4:	6a3a      	ldr	r2, [r7, #32]
 80037a6:	e841 2300 	strex	r3, r2, [r1]
 80037aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1e5      	bne.n	800377e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0310 	and.w	r3, r3, #16
 80037bc:	2b10      	cmp	r3, #16
 80037be:	d10a      	bne.n	80037d6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037c0:	2300      	movs	r3, #0
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	60fb      	str	r3, [r7, #12]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	60fb      	str	r3, [r7, #12]
 80037d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80037da:	4619      	mov	r1, r3
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f7ff fdd1 	bl	8003384 <HAL_UARTEx_RxEventCallback>
 80037e2:	e002      	b.n	80037ea <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7fd f8a7 	bl	8000938 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80037ea:	2300      	movs	r3, #0
 80037ec:	e002      	b.n	80037f4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80037ee:	2300      	movs	r3, #0
 80037f0:	e000      	b.n	80037f4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80037f2:	2302      	movs	r3, #2
  }
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3730      	adds	r7, #48	@ 0x30
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003800:	b0c0      	sub	sp, #256	@ 0x100
 8003802:	af00      	add	r7, sp, #0
 8003804:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	691b      	ldr	r3, [r3, #16]
 8003810:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003818:	68d9      	ldr	r1, [r3, #12]
 800381a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	ea40 0301 	orr.w	r3, r0, r1
 8003824:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800382a:	689a      	ldr	r2, [r3, #8]
 800382c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	431a      	orrs	r2, r3
 8003834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	431a      	orrs	r2, r3
 800383c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	4313      	orrs	r3, r2
 8003844:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003854:	f021 010c 	bic.w	r1, r1, #12
 8003858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003862:	430b      	orrs	r3, r1
 8003864:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003876:	6999      	ldr	r1, [r3, #24]
 8003878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	ea40 0301 	orr.w	r3, r0, r1
 8003882:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	4b8f      	ldr	r3, [pc, #572]	@ (8003ac8 <UART_SetConfig+0x2cc>)
 800388c:	429a      	cmp	r2, r3
 800388e:	d005      	beq.n	800389c <UART_SetConfig+0xa0>
 8003890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	4b8d      	ldr	r3, [pc, #564]	@ (8003acc <UART_SetConfig+0x2d0>)
 8003898:	429a      	cmp	r2, r3
 800389a:	d104      	bne.n	80038a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800389c:	f7fe ff12 	bl	80026c4 <HAL_RCC_GetPCLK2Freq>
 80038a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80038a4:	e003      	b.n	80038ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038a6:	f7fe fef9 	bl	800269c <HAL_RCC_GetPCLK1Freq>
 80038aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038b2:	69db      	ldr	r3, [r3, #28]
 80038b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038b8:	f040 810c 	bne.w	8003ad4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038c0:	2200      	movs	r2, #0
 80038c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80038c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80038ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80038ce:	4622      	mov	r2, r4
 80038d0:	462b      	mov	r3, r5
 80038d2:	1891      	adds	r1, r2, r2
 80038d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80038d6:	415b      	adcs	r3, r3
 80038d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80038de:	4621      	mov	r1, r4
 80038e0:	eb12 0801 	adds.w	r8, r2, r1
 80038e4:	4629      	mov	r1, r5
 80038e6:	eb43 0901 	adc.w	r9, r3, r1
 80038ea:	f04f 0200 	mov.w	r2, #0
 80038ee:	f04f 0300 	mov.w	r3, #0
 80038f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038fe:	4690      	mov	r8, r2
 8003900:	4699      	mov	r9, r3
 8003902:	4623      	mov	r3, r4
 8003904:	eb18 0303 	adds.w	r3, r8, r3
 8003908:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800390c:	462b      	mov	r3, r5
 800390e:	eb49 0303 	adc.w	r3, r9, r3
 8003912:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003922:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003926:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800392a:	460b      	mov	r3, r1
 800392c:	18db      	adds	r3, r3, r3
 800392e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003930:	4613      	mov	r3, r2
 8003932:	eb42 0303 	adc.w	r3, r2, r3
 8003936:	657b      	str	r3, [r7, #84]	@ 0x54
 8003938:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800393c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003940:	f7fc fcb6 	bl	80002b0 <__aeabi_uldivmod>
 8003944:	4602      	mov	r2, r0
 8003946:	460b      	mov	r3, r1
 8003948:	4b61      	ldr	r3, [pc, #388]	@ (8003ad0 <UART_SetConfig+0x2d4>)
 800394a:	fba3 2302 	umull	r2, r3, r3, r2
 800394e:	095b      	lsrs	r3, r3, #5
 8003950:	011c      	lsls	r4, r3, #4
 8003952:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003956:	2200      	movs	r2, #0
 8003958:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800395c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003960:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003964:	4642      	mov	r2, r8
 8003966:	464b      	mov	r3, r9
 8003968:	1891      	adds	r1, r2, r2
 800396a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800396c:	415b      	adcs	r3, r3
 800396e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003970:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003974:	4641      	mov	r1, r8
 8003976:	eb12 0a01 	adds.w	sl, r2, r1
 800397a:	4649      	mov	r1, r9
 800397c:	eb43 0b01 	adc.w	fp, r3, r1
 8003980:	f04f 0200 	mov.w	r2, #0
 8003984:	f04f 0300 	mov.w	r3, #0
 8003988:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800398c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003990:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003994:	4692      	mov	sl, r2
 8003996:	469b      	mov	fp, r3
 8003998:	4643      	mov	r3, r8
 800399a:	eb1a 0303 	adds.w	r3, sl, r3
 800399e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80039a2:	464b      	mov	r3, r9
 80039a4:	eb4b 0303 	adc.w	r3, fp, r3
 80039a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80039ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80039bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80039c0:	460b      	mov	r3, r1
 80039c2:	18db      	adds	r3, r3, r3
 80039c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80039c6:	4613      	mov	r3, r2
 80039c8:	eb42 0303 	adc.w	r3, r2, r3
 80039cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80039ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80039d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80039d6:	f7fc fc6b 	bl	80002b0 <__aeabi_uldivmod>
 80039da:	4602      	mov	r2, r0
 80039dc:	460b      	mov	r3, r1
 80039de:	4611      	mov	r1, r2
 80039e0:	4b3b      	ldr	r3, [pc, #236]	@ (8003ad0 <UART_SetConfig+0x2d4>)
 80039e2:	fba3 2301 	umull	r2, r3, r3, r1
 80039e6:	095b      	lsrs	r3, r3, #5
 80039e8:	2264      	movs	r2, #100	@ 0x64
 80039ea:	fb02 f303 	mul.w	r3, r2, r3
 80039ee:	1acb      	subs	r3, r1, r3
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80039f6:	4b36      	ldr	r3, [pc, #216]	@ (8003ad0 <UART_SetConfig+0x2d4>)
 80039f8:	fba3 2302 	umull	r2, r3, r3, r2
 80039fc:	095b      	lsrs	r3, r3, #5
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003a04:	441c      	add	r4, r3
 8003a06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a10:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003a14:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003a18:	4642      	mov	r2, r8
 8003a1a:	464b      	mov	r3, r9
 8003a1c:	1891      	adds	r1, r2, r2
 8003a1e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003a20:	415b      	adcs	r3, r3
 8003a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003a28:	4641      	mov	r1, r8
 8003a2a:	1851      	adds	r1, r2, r1
 8003a2c:	6339      	str	r1, [r7, #48]	@ 0x30
 8003a2e:	4649      	mov	r1, r9
 8003a30:	414b      	adcs	r3, r1
 8003a32:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a34:	f04f 0200 	mov.w	r2, #0
 8003a38:	f04f 0300 	mov.w	r3, #0
 8003a3c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003a40:	4659      	mov	r1, fp
 8003a42:	00cb      	lsls	r3, r1, #3
 8003a44:	4651      	mov	r1, sl
 8003a46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a4a:	4651      	mov	r1, sl
 8003a4c:	00ca      	lsls	r2, r1, #3
 8003a4e:	4610      	mov	r0, r2
 8003a50:	4619      	mov	r1, r3
 8003a52:	4603      	mov	r3, r0
 8003a54:	4642      	mov	r2, r8
 8003a56:	189b      	adds	r3, r3, r2
 8003a58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a5c:	464b      	mov	r3, r9
 8003a5e:	460a      	mov	r2, r1
 8003a60:	eb42 0303 	adc.w	r3, r2, r3
 8003a64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003a74:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003a78:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	18db      	adds	r3, r3, r3
 8003a80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a82:	4613      	mov	r3, r2
 8003a84:	eb42 0303 	adc.w	r3, r2, r3
 8003a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003a8e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003a92:	f7fc fc0d 	bl	80002b0 <__aeabi_uldivmod>
 8003a96:	4602      	mov	r2, r0
 8003a98:	460b      	mov	r3, r1
 8003a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad0 <UART_SetConfig+0x2d4>)
 8003a9c:	fba3 1302 	umull	r1, r3, r3, r2
 8003aa0:	095b      	lsrs	r3, r3, #5
 8003aa2:	2164      	movs	r1, #100	@ 0x64
 8003aa4:	fb01 f303 	mul.w	r3, r1, r3
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	3332      	adds	r3, #50	@ 0x32
 8003aae:	4a08      	ldr	r2, [pc, #32]	@ (8003ad0 <UART_SetConfig+0x2d4>)
 8003ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab4:	095b      	lsrs	r3, r3, #5
 8003ab6:	f003 0207 	and.w	r2, r3, #7
 8003aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4422      	add	r2, r4
 8003ac2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ac4:	e106      	b.n	8003cd4 <UART_SetConfig+0x4d8>
 8003ac6:	bf00      	nop
 8003ac8:	40011000 	.word	0x40011000
 8003acc:	40011400 	.word	0x40011400
 8003ad0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ad4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003ade:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003ae2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003ae6:	4642      	mov	r2, r8
 8003ae8:	464b      	mov	r3, r9
 8003aea:	1891      	adds	r1, r2, r2
 8003aec:	6239      	str	r1, [r7, #32]
 8003aee:	415b      	adcs	r3, r3
 8003af0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003af2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003af6:	4641      	mov	r1, r8
 8003af8:	1854      	adds	r4, r2, r1
 8003afa:	4649      	mov	r1, r9
 8003afc:	eb43 0501 	adc.w	r5, r3, r1
 8003b00:	f04f 0200 	mov.w	r2, #0
 8003b04:	f04f 0300 	mov.w	r3, #0
 8003b08:	00eb      	lsls	r3, r5, #3
 8003b0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b0e:	00e2      	lsls	r2, r4, #3
 8003b10:	4614      	mov	r4, r2
 8003b12:	461d      	mov	r5, r3
 8003b14:	4643      	mov	r3, r8
 8003b16:	18e3      	adds	r3, r4, r3
 8003b18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b1c:	464b      	mov	r3, r9
 8003b1e:	eb45 0303 	adc.w	r3, r5, r3
 8003b22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b36:	f04f 0200 	mov.w	r2, #0
 8003b3a:	f04f 0300 	mov.w	r3, #0
 8003b3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003b42:	4629      	mov	r1, r5
 8003b44:	008b      	lsls	r3, r1, #2
 8003b46:	4621      	mov	r1, r4
 8003b48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b4c:	4621      	mov	r1, r4
 8003b4e:	008a      	lsls	r2, r1, #2
 8003b50:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003b54:	f7fc fbac 	bl	80002b0 <__aeabi_uldivmod>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4b60      	ldr	r3, [pc, #384]	@ (8003ce0 <UART_SetConfig+0x4e4>)
 8003b5e:	fba3 2302 	umull	r2, r3, r3, r2
 8003b62:	095b      	lsrs	r3, r3, #5
 8003b64:	011c      	lsls	r4, r3, #4
 8003b66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b70:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003b74:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003b78:	4642      	mov	r2, r8
 8003b7a:	464b      	mov	r3, r9
 8003b7c:	1891      	adds	r1, r2, r2
 8003b7e:	61b9      	str	r1, [r7, #24]
 8003b80:	415b      	adcs	r3, r3
 8003b82:	61fb      	str	r3, [r7, #28]
 8003b84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b88:	4641      	mov	r1, r8
 8003b8a:	1851      	adds	r1, r2, r1
 8003b8c:	6139      	str	r1, [r7, #16]
 8003b8e:	4649      	mov	r1, r9
 8003b90:	414b      	adcs	r3, r1
 8003b92:	617b      	str	r3, [r7, #20]
 8003b94:	f04f 0200 	mov.w	r2, #0
 8003b98:	f04f 0300 	mov.w	r3, #0
 8003b9c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ba0:	4659      	mov	r1, fp
 8003ba2:	00cb      	lsls	r3, r1, #3
 8003ba4:	4651      	mov	r1, sl
 8003ba6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003baa:	4651      	mov	r1, sl
 8003bac:	00ca      	lsls	r2, r1, #3
 8003bae:	4610      	mov	r0, r2
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	4642      	mov	r2, r8
 8003bb6:	189b      	adds	r3, r3, r2
 8003bb8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003bbc:	464b      	mov	r3, r9
 8003bbe:	460a      	mov	r2, r1
 8003bc0:	eb42 0303 	adc.w	r3, r2, r3
 8003bc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003bd2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003bd4:	f04f 0200 	mov.w	r2, #0
 8003bd8:	f04f 0300 	mov.w	r3, #0
 8003bdc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003be0:	4649      	mov	r1, r9
 8003be2:	008b      	lsls	r3, r1, #2
 8003be4:	4641      	mov	r1, r8
 8003be6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bea:	4641      	mov	r1, r8
 8003bec:	008a      	lsls	r2, r1, #2
 8003bee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003bf2:	f7fc fb5d 	bl	80002b0 <__aeabi_uldivmod>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	4611      	mov	r1, r2
 8003bfc:	4b38      	ldr	r3, [pc, #224]	@ (8003ce0 <UART_SetConfig+0x4e4>)
 8003bfe:	fba3 2301 	umull	r2, r3, r3, r1
 8003c02:	095b      	lsrs	r3, r3, #5
 8003c04:	2264      	movs	r2, #100	@ 0x64
 8003c06:	fb02 f303 	mul.w	r3, r2, r3
 8003c0a:	1acb      	subs	r3, r1, r3
 8003c0c:	011b      	lsls	r3, r3, #4
 8003c0e:	3332      	adds	r3, #50	@ 0x32
 8003c10:	4a33      	ldr	r2, [pc, #204]	@ (8003ce0 <UART_SetConfig+0x4e4>)
 8003c12:	fba2 2303 	umull	r2, r3, r2, r3
 8003c16:	095b      	lsrs	r3, r3, #5
 8003c18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c1c:	441c      	add	r4, r3
 8003c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c22:	2200      	movs	r2, #0
 8003c24:	673b      	str	r3, [r7, #112]	@ 0x70
 8003c26:	677a      	str	r2, [r7, #116]	@ 0x74
 8003c28:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003c2c:	4642      	mov	r2, r8
 8003c2e:	464b      	mov	r3, r9
 8003c30:	1891      	adds	r1, r2, r2
 8003c32:	60b9      	str	r1, [r7, #8]
 8003c34:	415b      	adcs	r3, r3
 8003c36:	60fb      	str	r3, [r7, #12]
 8003c38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c3c:	4641      	mov	r1, r8
 8003c3e:	1851      	adds	r1, r2, r1
 8003c40:	6039      	str	r1, [r7, #0]
 8003c42:	4649      	mov	r1, r9
 8003c44:	414b      	adcs	r3, r1
 8003c46:	607b      	str	r3, [r7, #4]
 8003c48:	f04f 0200 	mov.w	r2, #0
 8003c4c:	f04f 0300 	mov.w	r3, #0
 8003c50:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c54:	4659      	mov	r1, fp
 8003c56:	00cb      	lsls	r3, r1, #3
 8003c58:	4651      	mov	r1, sl
 8003c5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c5e:	4651      	mov	r1, sl
 8003c60:	00ca      	lsls	r2, r1, #3
 8003c62:	4610      	mov	r0, r2
 8003c64:	4619      	mov	r1, r3
 8003c66:	4603      	mov	r3, r0
 8003c68:	4642      	mov	r2, r8
 8003c6a:	189b      	adds	r3, r3, r2
 8003c6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003c6e:	464b      	mov	r3, r9
 8003c70:	460a      	mov	r2, r1
 8003c72:	eb42 0303 	adc.w	r3, r2, r3
 8003c76:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c82:	667a      	str	r2, [r7, #100]	@ 0x64
 8003c84:	f04f 0200 	mov.w	r2, #0
 8003c88:	f04f 0300 	mov.w	r3, #0
 8003c8c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003c90:	4649      	mov	r1, r9
 8003c92:	008b      	lsls	r3, r1, #2
 8003c94:	4641      	mov	r1, r8
 8003c96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c9a:	4641      	mov	r1, r8
 8003c9c:	008a      	lsls	r2, r1, #2
 8003c9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003ca2:	f7fc fb05 	bl	80002b0 <__aeabi_uldivmod>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	4b0d      	ldr	r3, [pc, #52]	@ (8003ce0 <UART_SetConfig+0x4e4>)
 8003cac:	fba3 1302 	umull	r1, r3, r3, r2
 8003cb0:	095b      	lsrs	r3, r3, #5
 8003cb2:	2164      	movs	r1, #100	@ 0x64
 8003cb4:	fb01 f303 	mul.w	r3, r1, r3
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	3332      	adds	r3, #50	@ 0x32
 8003cbe:	4a08      	ldr	r2, [pc, #32]	@ (8003ce0 <UART_SetConfig+0x4e4>)
 8003cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc4:	095b      	lsrs	r3, r3, #5
 8003cc6:	f003 020f 	and.w	r2, r3, #15
 8003cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4422      	add	r2, r4
 8003cd2:	609a      	str	r2, [r3, #8]
}
 8003cd4:	bf00      	nop
 8003cd6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ce0:	51eb851f 	.word	0x51eb851f

08003ce4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	4603      	mov	r3, r0
 8003cec:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003cf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cf6:	2b84      	cmp	r3, #132	@ 0x84
 8003cf8:	d005      	beq.n	8003d06 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003cfa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	4413      	add	r3, r2
 8003d02:	3303      	adds	r3, #3
 8003d04:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003d06:	68fb      	ldr	r3, [r7, #12]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3714      	adds	r7, #20
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003d18:	f000 fafc 	bl	8004314 <vTaskStartScheduler>
  
  return osOK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003d22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d24:	b089      	sub	sp, #36	@ 0x24
 8003d26:	af04      	add	r7, sp, #16
 8003d28:	6078      	str	r0, [r7, #4]
 8003d2a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d020      	beq.n	8003d76 <osThreadCreate+0x54>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d01c      	beq.n	8003d76 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685c      	ldr	r4, [r3, #4]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	691e      	ldr	r6, [r3, #16]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7ff ffc8 	bl	8003ce4 <makeFreeRtosPriority>
 8003d54:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d5e:	9202      	str	r2, [sp, #8]
 8003d60:	9301      	str	r3, [sp, #4]
 8003d62:	9100      	str	r1, [sp, #0]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	4632      	mov	r2, r6
 8003d68:	4629      	mov	r1, r5
 8003d6a:	4620      	mov	r0, r4
 8003d6c:	f000 f8ed 	bl	8003f4a <xTaskCreateStatic>
 8003d70:	4603      	mov	r3, r0
 8003d72:	60fb      	str	r3, [r7, #12]
 8003d74:	e01c      	b.n	8003db0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685c      	ldr	r4, [r3, #4]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d82:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff ffaa 	bl	8003ce4 <makeFreeRtosPriority>
 8003d90:	4602      	mov	r2, r0
 8003d92:	f107 030c 	add.w	r3, r7, #12
 8003d96:	9301      	str	r3, [sp, #4]
 8003d98:	9200      	str	r2, [sp, #0]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	4632      	mov	r2, r6
 8003d9e:	4629      	mov	r1, r5
 8003da0:	4620      	mov	r0, r4
 8003da2:	f000 f932 	bl	800400a <xTaskCreate>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d001      	beq.n	8003db0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003dac:	2300      	movs	r3, #0
 8003dae:	e000      	b.n	8003db2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003db0:	68fb      	ldr	r3, [r7, #12]
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3714      	adds	r7, #20
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003dba <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b084      	sub	sp, #16
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d001      	beq.n	8003dd0 <osDelay+0x16>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	e000      	b.n	8003dd2 <osDelay+0x18>
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 fa68 	bl	80042a8 <vTaskDelay>
  
  return osOK;
 8003dd8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f103 0208 	add.w	r2, r3, #8
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f04f 32ff 	mov.w	r2, #4294967295
 8003dfa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f103 0208 	add.w	r2, r3, #8
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f103 0208 	add.w	r2, r3, #8
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e16:	bf00      	nop
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	689a      	ldr	r2, [r3, #8]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	1c5a      	adds	r2, r3, #1
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	601a      	str	r2, [r3, #0]
}
 8003e78:	bf00      	nop
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e9a:	d103      	bne.n	8003ea4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	60fb      	str	r3, [r7, #12]
 8003ea2:	e00c      	b.n	8003ebe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	3308      	adds	r3, #8
 8003ea8:	60fb      	str	r3, [r7, #12]
 8003eaa:	e002      	b.n	8003eb2 <vListInsert+0x2e>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	60fb      	str	r3, [r7, #12]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d2f6      	bcs.n	8003eac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	1c5a      	adds	r2, r3, #1
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	601a      	str	r2, [r3, #0]
}
 8003eea:	bf00      	nop
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr

08003ef6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b085      	sub	sp, #20
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	6892      	ldr	r2, [r2, #8]
 8003f0c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	6852      	ldr	r2, [r2, #4]
 8003f16:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d103      	bne.n	8003f2a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	689a      	ldr	r2, [r3, #8]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	1e5a      	subs	r2, r3, #1
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3714      	adds	r7, #20
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b08e      	sub	sp, #56	@ 0x38
 8003f4e:	af04      	add	r7, sp, #16
 8003f50:	60f8      	str	r0, [r7, #12]
 8003f52:	60b9      	str	r1, [r7, #8]
 8003f54:	607a      	str	r2, [r7, #4]
 8003f56:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003f58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10b      	bne.n	8003f76 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f62:	f383 8811 	msr	BASEPRI, r3
 8003f66:	f3bf 8f6f 	isb	sy
 8003f6a:	f3bf 8f4f 	dsb	sy
 8003f6e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003f70:	bf00      	nop
 8003f72:	bf00      	nop
 8003f74:	e7fd      	b.n	8003f72 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10b      	bne.n	8003f94 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f80:	f383 8811 	msr	BASEPRI, r3
 8003f84:	f3bf 8f6f 	isb	sy
 8003f88:	f3bf 8f4f 	dsb	sy
 8003f8c:	61fb      	str	r3, [r7, #28]
}
 8003f8e:	bf00      	nop
 8003f90:	bf00      	nop
 8003f92:	e7fd      	b.n	8003f90 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003f94:	23a0      	movs	r3, #160	@ 0xa0
 8003f96:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	2ba0      	cmp	r3, #160	@ 0xa0
 8003f9c:	d00b      	beq.n	8003fb6 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fa2:	f383 8811 	msr	BASEPRI, r3
 8003fa6:	f3bf 8f6f 	isb	sy
 8003faa:	f3bf 8f4f 	dsb	sy
 8003fae:	61bb      	str	r3, [r7, #24]
}
 8003fb0:	bf00      	nop
 8003fb2:	bf00      	nop
 8003fb4:	e7fd      	b.n	8003fb2 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003fb6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d01e      	beq.n	8003ffc <xTaskCreateStatic+0xb2>
 8003fbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d01b      	beq.n	8003ffc <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003fc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fc6:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003fcc:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	9303      	str	r3, [sp, #12]
 8003fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fdc:	9302      	str	r3, [sp, #8]
 8003fde:	f107 0314 	add.w	r3, r7, #20
 8003fe2:	9301      	str	r3, [sp, #4]
 8003fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	68b9      	ldr	r1, [r7, #8]
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f000 f850 	bl	8004094 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ff4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003ff6:	f000 f8ed 	bl	80041d4 <prvAddNewTaskToReadyList>
 8003ffa:	e001      	b.n	8004000 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004000:	697b      	ldr	r3, [r7, #20]
	}
 8004002:	4618      	mov	r0, r3
 8004004:	3728      	adds	r7, #40	@ 0x28
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800400a:	b580      	push	{r7, lr}
 800400c:	b08c      	sub	sp, #48	@ 0x30
 800400e:	af04      	add	r7, sp, #16
 8004010:	60f8      	str	r0, [r7, #12]
 8004012:	60b9      	str	r1, [r7, #8]
 8004014:	603b      	str	r3, [r7, #0]
 8004016:	4613      	mov	r3, r2
 8004018:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800401a:	88fb      	ldrh	r3, [r7, #6]
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4618      	mov	r0, r3
 8004020:	f000 ff02 	bl	8004e28 <pvPortMalloc>
 8004024:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00e      	beq.n	800404a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800402c:	20a0      	movs	r0, #160	@ 0xa0
 800402e:	f000 fefb 	bl	8004e28 <pvPortMalloc>
 8004032:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004040:	e005      	b.n	800404e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004042:	6978      	ldr	r0, [r7, #20]
 8004044:	f000 ffbe 	bl	8004fc4 <vPortFree>
 8004048:	e001      	b.n	800404e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800404a:	2300      	movs	r3, #0
 800404c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d017      	beq.n	8004084 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800405c:	88fa      	ldrh	r2, [r7, #6]
 800405e:	2300      	movs	r3, #0
 8004060:	9303      	str	r3, [sp, #12]
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	9302      	str	r3, [sp, #8]
 8004066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004068:	9301      	str	r3, [sp, #4]
 800406a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	68b9      	ldr	r1, [r7, #8]
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f000 f80e 	bl	8004094 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004078:	69f8      	ldr	r0, [r7, #28]
 800407a:	f000 f8ab 	bl	80041d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800407e:	2301      	movs	r3, #1
 8004080:	61bb      	str	r3, [r7, #24]
 8004082:	e002      	b.n	800408a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004084:	f04f 33ff 	mov.w	r3, #4294967295
 8004088:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800408a:	69bb      	ldr	r3, [r7, #24]
	}
 800408c:	4618      	mov	r0, r3
 800408e:	3720      	adds	r7, #32
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b088      	sub	sp, #32
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
 80040a0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80040a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80040ac:	3b01      	subs	r3, #1
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4413      	add	r3, r2
 80040b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80040b4:	69bb      	ldr	r3, [r7, #24]
 80040b6:	f023 0307 	bic.w	r3, r3, #7
 80040ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	f003 0307 	and.w	r3, r3, #7
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00b      	beq.n	80040de <prvInitialiseNewTask+0x4a>
	__asm volatile
 80040c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ca:	f383 8811 	msr	BASEPRI, r3
 80040ce:	f3bf 8f6f 	isb	sy
 80040d2:	f3bf 8f4f 	dsb	sy
 80040d6:	617b      	str	r3, [r7, #20]
}
 80040d8:	bf00      	nop
 80040da:	bf00      	nop
 80040dc:	e7fd      	b.n	80040da <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d01f      	beq.n	8004124 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040e4:	2300      	movs	r3, #0
 80040e6:	61fb      	str	r3, [r7, #28]
 80040e8:	e012      	b.n	8004110 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80040ea:	68ba      	ldr	r2, [r7, #8]
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	4413      	add	r3, r2
 80040f0:	7819      	ldrb	r1, [r3, #0]
 80040f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	4413      	add	r3, r2
 80040f8:	3334      	adds	r3, #52	@ 0x34
 80040fa:	460a      	mov	r2, r1
 80040fc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	4413      	add	r3, r2
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d006      	beq.n	8004118 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	3301      	adds	r3, #1
 800410e:	61fb      	str	r3, [r7, #28]
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	2b0f      	cmp	r3, #15
 8004114:	d9e9      	bls.n	80040ea <prvInitialiseNewTask+0x56>
 8004116:	e000      	b.n	800411a <prvInitialiseNewTask+0x86>
			{
				break;
 8004118:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800411a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800411c:	2200      	movs	r2, #0
 800411e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004122:	e003      	b.n	800412c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800412c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800412e:	2b06      	cmp	r3, #6
 8004130:	d901      	bls.n	8004136 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004132:	2306      	movs	r3, #6
 8004134:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004138:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800413a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800413c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800413e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004140:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004144:	2200      	movs	r2, #0
 8004146:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800414a:	3304      	adds	r3, #4
 800414c:	4618      	mov	r0, r3
 800414e:	f7ff fe68 	bl	8003e22 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004154:	3318      	adds	r3, #24
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff fe63 	bl	8003e22 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800415c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800415e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004160:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004164:	f1c3 0207 	rsb	r2, r3, #7
 8004168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800416a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800416c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800416e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004170:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004174:	2200      	movs	r2, #0
 8004176:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800417a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800417c:	2200      	movs	r2, #0
 800417e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004184:	334c      	adds	r3, #76	@ 0x4c
 8004186:	224c      	movs	r2, #76	@ 0x4c
 8004188:	2100      	movs	r1, #0
 800418a:	4618      	mov	r0, r3
 800418c:	f001 faf4 	bl	8005778 <memset>
 8004190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004192:	4a0d      	ldr	r2, [pc, #52]	@ (80041c8 <prvInitialiseNewTask+0x134>)
 8004194:	651a      	str	r2, [r3, #80]	@ 0x50
 8004196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004198:	4a0c      	ldr	r2, [pc, #48]	@ (80041cc <prvInitialiseNewTask+0x138>)
 800419a:	655a      	str	r2, [r3, #84]	@ 0x54
 800419c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800419e:	4a0c      	ldr	r2, [pc, #48]	@ (80041d0 <prvInitialiseNewTask+0x13c>)
 80041a0:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	68f9      	ldr	r1, [r7, #12]
 80041a6:	69b8      	ldr	r0, [r7, #24]
 80041a8:	f000 fc2a 	bl	8004a00 <pxPortInitialiseStack>
 80041ac:	4602      	mov	r2, r0
 80041ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80041b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d002      	beq.n	80041be <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80041b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041be:	bf00      	nop
 80041c0:	3720      	adds	r7, #32
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	20004a54 	.word	0x20004a54
 80041cc:	20004abc 	.word	0x20004abc
 80041d0:	20004b24 	.word	0x20004b24

080041d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80041dc:	f000 fd44 	bl	8004c68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80041e0:	4b2a      	ldr	r3, [pc, #168]	@ (800428c <prvAddNewTaskToReadyList+0xb8>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3301      	adds	r3, #1
 80041e6:	4a29      	ldr	r2, [pc, #164]	@ (800428c <prvAddNewTaskToReadyList+0xb8>)
 80041e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80041ea:	4b29      	ldr	r3, [pc, #164]	@ (8004290 <prvAddNewTaskToReadyList+0xbc>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d109      	bne.n	8004206 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80041f2:	4a27      	ldr	r2, [pc, #156]	@ (8004290 <prvAddNewTaskToReadyList+0xbc>)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80041f8:	4b24      	ldr	r3, [pc, #144]	@ (800428c <prvAddNewTaskToReadyList+0xb8>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d110      	bne.n	8004222 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004200:	f000 fad4 	bl	80047ac <prvInitialiseTaskLists>
 8004204:	e00d      	b.n	8004222 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004206:	4b23      	ldr	r3, [pc, #140]	@ (8004294 <prvAddNewTaskToReadyList+0xc0>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d109      	bne.n	8004222 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800420e:	4b20      	ldr	r3, [pc, #128]	@ (8004290 <prvAddNewTaskToReadyList+0xbc>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004218:	429a      	cmp	r2, r3
 800421a:	d802      	bhi.n	8004222 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800421c:	4a1c      	ldr	r2, [pc, #112]	@ (8004290 <prvAddNewTaskToReadyList+0xbc>)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004222:	4b1d      	ldr	r3, [pc, #116]	@ (8004298 <prvAddNewTaskToReadyList+0xc4>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	3301      	adds	r3, #1
 8004228:	4a1b      	ldr	r2, [pc, #108]	@ (8004298 <prvAddNewTaskToReadyList+0xc4>)
 800422a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004230:	2201      	movs	r2, #1
 8004232:	409a      	lsls	r2, r3
 8004234:	4b19      	ldr	r3, [pc, #100]	@ (800429c <prvAddNewTaskToReadyList+0xc8>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4313      	orrs	r3, r2
 800423a:	4a18      	ldr	r2, [pc, #96]	@ (800429c <prvAddNewTaskToReadyList+0xc8>)
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004242:	4613      	mov	r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4413      	add	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4a15      	ldr	r2, [pc, #84]	@ (80042a0 <prvAddNewTaskToReadyList+0xcc>)
 800424c:	441a      	add	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	3304      	adds	r3, #4
 8004252:	4619      	mov	r1, r3
 8004254:	4610      	mov	r0, r2
 8004256:	f7ff fdf1 	bl	8003e3c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800425a:	f000 fd37 	bl	8004ccc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800425e:	4b0d      	ldr	r3, [pc, #52]	@ (8004294 <prvAddNewTaskToReadyList+0xc0>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00e      	beq.n	8004284 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004266:	4b0a      	ldr	r3, [pc, #40]	@ (8004290 <prvAddNewTaskToReadyList+0xbc>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004270:	429a      	cmp	r2, r3
 8004272:	d207      	bcs.n	8004284 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004274:	4b0b      	ldr	r3, [pc, #44]	@ (80042a4 <prvAddNewTaskToReadyList+0xd0>)
 8004276:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800427a:	601a      	str	r2, [r3, #0]
 800427c:	f3bf 8f4f 	dsb	sy
 8004280:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004284:	bf00      	nop
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	20000e00 	.word	0x20000e00
 8004290:	20000d00 	.word	0x20000d00
 8004294:	20000e0c 	.word	0x20000e0c
 8004298:	20000e1c 	.word	0x20000e1c
 800429c:	20000e08 	.word	0x20000e08
 80042a0:	20000d04 	.word	0x20000d04
 80042a4:	e000ed04 	.word	0xe000ed04

080042a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80042b0:	2300      	movs	r3, #0
 80042b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d018      	beq.n	80042ec <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80042ba:	4b14      	ldr	r3, [pc, #80]	@ (800430c <vTaskDelay+0x64>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00b      	beq.n	80042da <vTaskDelay+0x32>
	__asm volatile
 80042c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042c6:	f383 8811 	msr	BASEPRI, r3
 80042ca:	f3bf 8f6f 	isb	sy
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	60bb      	str	r3, [r7, #8]
}
 80042d4:	bf00      	nop
 80042d6:	bf00      	nop
 80042d8:	e7fd      	b.n	80042d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80042da:	f000 f885 	bl	80043e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80042de:	2100      	movs	r1, #0
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 fb27 	bl	8004934 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80042e6:	f000 f88d 	bl	8004404 <xTaskResumeAll>
 80042ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d107      	bne.n	8004302 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80042f2:	4b07      	ldr	r3, [pc, #28]	@ (8004310 <vTaskDelay+0x68>)
 80042f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042f8:	601a      	str	r2, [r3, #0]
 80042fa:	f3bf 8f4f 	dsb	sy
 80042fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004302:	bf00      	nop
 8004304:	3710      	adds	r7, #16
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	20000e28 	.word	0x20000e28
 8004310:	e000ed04 	.word	0xe000ed04

08004314 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b08a      	sub	sp, #40	@ 0x28
 8004318:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800431a:	2300      	movs	r3, #0
 800431c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800431e:	2300      	movs	r3, #0
 8004320:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004322:	463a      	mov	r2, r7
 8004324:	1d39      	adds	r1, r7, #4
 8004326:	f107 0308 	add.w	r3, r7, #8
 800432a:	4618      	mov	r0, r3
 800432c:	f7fc fbf6 	bl	8000b1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004330:	6839      	ldr	r1, [r7, #0]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	9202      	str	r2, [sp, #8]
 8004338:	9301      	str	r3, [sp, #4]
 800433a:	2300      	movs	r3, #0
 800433c:	9300      	str	r3, [sp, #0]
 800433e:	2300      	movs	r3, #0
 8004340:	460a      	mov	r2, r1
 8004342:	4921      	ldr	r1, [pc, #132]	@ (80043c8 <vTaskStartScheduler+0xb4>)
 8004344:	4821      	ldr	r0, [pc, #132]	@ (80043cc <vTaskStartScheduler+0xb8>)
 8004346:	f7ff fe00 	bl	8003f4a <xTaskCreateStatic>
 800434a:	4603      	mov	r3, r0
 800434c:	4a20      	ldr	r2, [pc, #128]	@ (80043d0 <vTaskStartScheduler+0xbc>)
 800434e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004350:	4b1f      	ldr	r3, [pc, #124]	@ (80043d0 <vTaskStartScheduler+0xbc>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d002      	beq.n	800435e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004358:	2301      	movs	r3, #1
 800435a:	617b      	str	r3, [r7, #20]
 800435c:	e001      	b.n	8004362 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800435e:	2300      	movs	r3, #0
 8004360:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d11b      	bne.n	80043a0 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800436c:	f383 8811 	msr	BASEPRI, r3
 8004370:	f3bf 8f6f 	isb	sy
 8004374:	f3bf 8f4f 	dsb	sy
 8004378:	613b      	str	r3, [r7, #16]
}
 800437a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800437c:	4b15      	ldr	r3, [pc, #84]	@ (80043d4 <vTaskStartScheduler+0xc0>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	334c      	adds	r3, #76	@ 0x4c
 8004382:	4a15      	ldr	r2, [pc, #84]	@ (80043d8 <vTaskStartScheduler+0xc4>)
 8004384:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004386:	4b15      	ldr	r3, [pc, #84]	@ (80043dc <vTaskStartScheduler+0xc8>)
 8004388:	f04f 32ff 	mov.w	r2, #4294967295
 800438c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800438e:	4b14      	ldr	r3, [pc, #80]	@ (80043e0 <vTaskStartScheduler+0xcc>)
 8004390:	2201      	movs	r2, #1
 8004392:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004394:	4b13      	ldr	r3, [pc, #76]	@ (80043e4 <vTaskStartScheduler+0xd0>)
 8004396:	2200      	movs	r2, #0
 8004398:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800439a:	f000 fbc1 	bl	8004b20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800439e:	e00f      	b.n	80043c0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a6:	d10b      	bne.n	80043c0 <vTaskStartScheduler+0xac>
	__asm volatile
 80043a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ac:	f383 8811 	msr	BASEPRI, r3
 80043b0:	f3bf 8f6f 	isb	sy
 80043b4:	f3bf 8f4f 	dsb	sy
 80043b8:	60fb      	str	r3, [r7, #12]
}
 80043ba:	bf00      	nop
 80043bc:	bf00      	nop
 80043be:	e7fd      	b.n	80043bc <vTaskStartScheduler+0xa8>
}
 80043c0:	bf00      	nop
 80043c2:	3718      	adds	r7, #24
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	08006f7c 	.word	0x08006f7c
 80043cc:	0800477d 	.word	0x0800477d
 80043d0:	20000e24 	.word	0x20000e24
 80043d4:	20000d00 	.word	0x20000d00
 80043d8:	20000034 	.word	0x20000034
 80043dc:	20000e20 	.word	0x20000e20
 80043e0:	20000e0c 	.word	0x20000e0c
 80043e4:	20000e04 	.word	0x20000e04

080043e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80043ec:	4b04      	ldr	r3, [pc, #16]	@ (8004400 <vTaskSuspendAll+0x18>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3301      	adds	r3, #1
 80043f2:	4a03      	ldr	r2, [pc, #12]	@ (8004400 <vTaskSuspendAll+0x18>)
 80043f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80043f6:	bf00      	nop
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	20000e28 	.word	0x20000e28

08004404 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800440a:	2300      	movs	r3, #0
 800440c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800440e:	2300      	movs	r3, #0
 8004410:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004412:	4b42      	ldr	r3, [pc, #264]	@ (800451c <xTaskResumeAll+0x118>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10b      	bne.n	8004432 <xTaskResumeAll+0x2e>
	__asm volatile
 800441a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800441e:	f383 8811 	msr	BASEPRI, r3
 8004422:	f3bf 8f6f 	isb	sy
 8004426:	f3bf 8f4f 	dsb	sy
 800442a:	603b      	str	r3, [r7, #0]
}
 800442c:	bf00      	nop
 800442e:	bf00      	nop
 8004430:	e7fd      	b.n	800442e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004432:	f000 fc19 	bl	8004c68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004436:	4b39      	ldr	r3, [pc, #228]	@ (800451c <xTaskResumeAll+0x118>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	3b01      	subs	r3, #1
 800443c:	4a37      	ldr	r2, [pc, #220]	@ (800451c <xTaskResumeAll+0x118>)
 800443e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004440:	4b36      	ldr	r3, [pc, #216]	@ (800451c <xTaskResumeAll+0x118>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d161      	bne.n	800450c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004448:	4b35      	ldr	r3, [pc, #212]	@ (8004520 <xTaskResumeAll+0x11c>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d05d      	beq.n	800450c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004450:	e02e      	b.n	80044b0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004452:	4b34      	ldr	r3, [pc, #208]	@ (8004524 <xTaskResumeAll+0x120>)
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	3318      	adds	r3, #24
 800445e:	4618      	mov	r0, r3
 8004460:	f7ff fd49 	bl	8003ef6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	3304      	adds	r3, #4
 8004468:	4618      	mov	r0, r3
 800446a:	f7ff fd44 	bl	8003ef6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004472:	2201      	movs	r2, #1
 8004474:	409a      	lsls	r2, r3
 8004476:	4b2c      	ldr	r3, [pc, #176]	@ (8004528 <xTaskResumeAll+0x124>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4313      	orrs	r3, r2
 800447c:	4a2a      	ldr	r2, [pc, #168]	@ (8004528 <xTaskResumeAll+0x124>)
 800447e:	6013      	str	r3, [r2, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004484:	4613      	mov	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4413      	add	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	4a27      	ldr	r2, [pc, #156]	@ (800452c <xTaskResumeAll+0x128>)
 800448e:	441a      	add	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	3304      	adds	r3, #4
 8004494:	4619      	mov	r1, r3
 8004496:	4610      	mov	r0, r2
 8004498:	f7ff fcd0 	bl	8003e3c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044a0:	4b23      	ldr	r3, [pc, #140]	@ (8004530 <xTaskResumeAll+0x12c>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d302      	bcc.n	80044b0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80044aa:	4b22      	ldr	r3, [pc, #136]	@ (8004534 <xTaskResumeAll+0x130>)
 80044ac:	2201      	movs	r2, #1
 80044ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044b0:	4b1c      	ldr	r3, [pc, #112]	@ (8004524 <xTaskResumeAll+0x120>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1cc      	bne.n	8004452 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80044be:	f000 fa19 	bl	80048f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80044c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004538 <xTaskResumeAll+0x134>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d010      	beq.n	80044f0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80044ce:	f000 f837 	bl	8004540 <xTaskIncrementTick>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d002      	beq.n	80044de <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80044d8:	4b16      	ldr	r3, [pc, #88]	@ (8004534 <xTaskResumeAll+0x130>)
 80044da:	2201      	movs	r2, #1
 80044dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	3b01      	subs	r3, #1
 80044e2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1f1      	bne.n	80044ce <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80044ea:	4b13      	ldr	r3, [pc, #76]	@ (8004538 <xTaskResumeAll+0x134>)
 80044ec:	2200      	movs	r2, #0
 80044ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80044f0:	4b10      	ldr	r3, [pc, #64]	@ (8004534 <xTaskResumeAll+0x130>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d009      	beq.n	800450c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80044f8:	2301      	movs	r3, #1
 80044fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80044fc:	4b0f      	ldr	r3, [pc, #60]	@ (800453c <xTaskResumeAll+0x138>)
 80044fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	f3bf 8f4f 	dsb	sy
 8004508:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800450c:	f000 fbde 	bl	8004ccc <vPortExitCritical>

	return xAlreadyYielded;
 8004510:	68bb      	ldr	r3, [r7, #8]
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	20000e28 	.word	0x20000e28
 8004520:	20000e00 	.word	0x20000e00
 8004524:	20000dc0 	.word	0x20000dc0
 8004528:	20000e08 	.word	0x20000e08
 800452c:	20000d04 	.word	0x20000d04
 8004530:	20000d00 	.word	0x20000d00
 8004534:	20000e14 	.word	0x20000e14
 8004538:	20000e10 	.word	0x20000e10
 800453c:	e000ed04 	.word	0xe000ed04

08004540 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004546:	2300      	movs	r3, #0
 8004548:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800454a:	4b4f      	ldr	r3, [pc, #316]	@ (8004688 <xTaskIncrementTick+0x148>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	f040 808f 	bne.w	8004672 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004554:	4b4d      	ldr	r3, [pc, #308]	@ (800468c <xTaskIncrementTick+0x14c>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	3301      	adds	r3, #1
 800455a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800455c:	4a4b      	ldr	r2, [pc, #300]	@ (800468c <xTaskIncrementTick+0x14c>)
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d121      	bne.n	80045ac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004568:	4b49      	ldr	r3, [pc, #292]	@ (8004690 <xTaskIncrementTick+0x150>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00b      	beq.n	800458a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004576:	f383 8811 	msr	BASEPRI, r3
 800457a:	f3bf 8f6f 	isb	sy
 800457e:	f3bf 8f4f 	dsb	sy
 8004582:	603b      	str	r3, [r7, #0]
}
 8004584:	bf00      	nop
 8004586:	bf00      	nop
 8004588:	e7fd      	b.n	8004586 <xTaskIncrementTick+0x46>
 800458a:	4b41      	ldr	r3, [pc, #260]	@ (8004690 <xTaskIncrementTick+0x150>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	4b40      	ldr	r3, [pc, #256]	@ (8004694 <xTaskIncrementTick+0x154>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a3e      	ldr	r2, [pc, #248]	@ (8004690 <xTaskIncrementTick+0x150>)
 8004596:	6013      	str	r3, [r2, #0]
 8004598:	4a3e      	ldr	r2, [pc, #248]	@ (8004694 <xTaskIncrementTick+0x154>)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6013      	str	r3, [r2, #0]
 800459e:	4b3e      	ldr	r3, [pc, #248]	@ (8004698 <xTaskIncrementTick+0x158>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	3301      	adds	r3, #1
 80045a4:	4a3c      	ldr	r2, [pc, #240]	@ (8004698 <xTaskIncrementTick+0x158>)
 80045a6:	6013      	str	r3, [r2, #0]
 80045a8:	f000 f9a4 	bl	80048f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80045ac:	4b3b      	ldr	r3, [pc, #236]	@ (800469c <xTaskIncrementTick+0x15c>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d348      	bcc.n	8004648 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045b6:	4b36      	ldr	r3, [pc, #216]	@ (8004690 <xTaskIncrementTick+0x150>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d104      	bne.n	80045ca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045c0:	4b36      	ldr	r3, [pc, #216]	@ (800469c <xTaskIncrementTick+0x15c>)
 80045c2:	f04f 32ff 	mov.w	r2, #4294967295
 80045c6:	601a      	str	r2, [r3, #0]
					break;
 80045c8:	e03e      	b.n	8004648 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045ca:	4b31      	ldr	r3, [pc, #196]	@ (8004690 <xTaskIncrementTick+0x150>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d203      	bcs.n	80045ea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80045e2:	4a2e      	ldr	r2, [pc, #184]	@ (800469c <xTaskIncrementTick+0x15c>)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80045e8:	e02e      	b.n	8004648 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	3304      	adds	r3, #4
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7ff fc81 	bl	8003ef6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d004      	beq.n	8004606 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	3318      	adds	r3, #24
 8004600:	4618      	mov	r0, r3
 8004602:	f7ff fc78 	bl	8003ef6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800460a:	2201      	movs	r2, #1
 800460c:	409a      	lsls	r2, r3
 800460e:	4b24      	ldr	r3, [pc, #144]	@ (80046a0 <xTaskIncrementTick+0x160>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4313      	orrs	r3, r2
 8004614:	4a22      	ldr	r2, [pc, #136]	@ (80046a0 <xTaskIncrementTick+0x160>)
 8004616:	6013      	str	r3, [r2, #0]
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800461c:	4613      	mov	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4413      	add	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4a1f      	ldr	r2, [pc, #124]	@ (80046a4 <xTaskIncrementTick+0x164>)
 8004626:	441a      	add	r2, r3
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	3304      	adds	r3, #4
 800462c:	4619      	mov	r1, r3
 800462e:	4610      	mov	r0, r2
 8004630:	f7ff fc04 	bl	8003e3c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004638:	4b1b      	ldr	r3, [pc, #108]	@ (80046a8 <xTaskIncrementTick+0x168>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800463e:	429a      	cmp	r2, r3
 8004640:	d3b9      	bcc.n	80045b6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004642:	2301      	movs	r3, #1
 8004644:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004646:	e7b6      	b.n	80045b6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004648:	4b17      	ldr	r3, [pc, #92]	@ (80046a8 <xTaskIncrementTick+0x168>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800464e:	4915      	ldr	r1, [pc, #84]	@ (80046a4 <xTaskIncrementTick+0x164>)
 8004650:	4613      	mov	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	440b      	add	r3, r1
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d901      	bls.n	8004664 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004660:	2301      	movs	r3, #1
 8004662:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004664:	4b11      	ldr	r3, [pc, #68]	@ (80046ac <xTaskIncrementTick+0x16c>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d007      	beq.n	800467c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800466c:	2301      	movs	r3, #1
 800466e:	617b      	str	r3, [r7, #20]
 8004670:	e004      	b.n	800467c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004672:	4b0f      	ldr	r3, [pc, #60]	@ (80046b0 <xTaskIncrementTick+0x170>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	3301      	adds	r3, #1
 8004678:	4a0d      	ldr	r2, [pc, #52]	@ (80046b0 <xTaskIncrementTick+0x170>)
 800467a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800467c:	697b      	ldr	r3, [r7, #20]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	20000e28 	.word	0x20000e28
 800468c:	20000e04 	.word	0x20000e04
 8004690:	20000db8 	.word	0x20000db8
 8004694:	20000dbc 	.word	0x20000dbc
 8004698:	20000e18 	.word	0x20000e18
 800469c:	20000e20 	.word	0x20000e20
 80046a0:	20000e08 	.word	0x20000e08
 80046a4:	20000d04 	.word	0x20000d04
 80046a8:	20000d00 	.word	0x20000d00
 80046ac:	20000e14 	.word	0x20000e14
 80046b0:	20000e10 	.word	0x20000e10

080046b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80046b4:	b480      	push	{r7}
 80046b6:	b087      	sub	sp, #28
 80046b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80046ba:	4b2a      	ldr	r3, [pc, #168]	@ (8004764 <vTaskSwitchContext+0xb0>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d003      	beq.n	80046ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80046c2:	4b29      	ldr	r3, [pc, #164]	@ (8004768 <vTaskSwitchContext+0xb4>)
 80046c4:	2201      	movs	r2, #1
 80046c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80046c8:	e045      	b.n	8004756 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 80046ca:	4b27      	ldr	r3, [pc, #156]	@ (8004768 <vTaskSwitchContext+0xb4>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046d0:	4b26      	ldr	r3, [pc, #152]	@ (800476c <vTaskSwitchContext+0xb8>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	fab3 f383 	clz	r3, r3
 80046dc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80046de:	7afb      	ldrb	r3, [r7, #11]
 80046e0:	f1c3 031f 	rsb	r3, r3, #31
 80046e4:	617b      	str	r3, [r7, #20]
 80046e6:	4922      	ldr	r1, [pc, #136]	@ (8004770 <vTaskSwitchContext+0xbc>)
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	4613      	mov	r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4413      	add	r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	440b      	add	r3, r1
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10b      	bne.n	8004712 <vTaskSwitchContext+0x5e>
	__asm volatile
 80046fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046fe:	f383 8811 	msr	BASEPRI, r3
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	607b      	str	r3, [r7, #4]
}
 800470c:	bf00      	nop
 800470e:	bf00      	nop
 8004710:	e7fd      	b.n	800470e <vTaskSwitchContext+0x5a>
 8004712:	697a      	ldr	r2, [r7, #20]
 8004714:	4613      	mov	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4413      	add	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4a14      	ldr	r2, [pc, #80]	@ (8004770 <vTaskSwitchContext+0xbc>)
 800471e:	4413      	add	r3, r2
 8004720:	613b      	str	r3, [r7, #16]
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	605a      	str	r2, [r3, #4]
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	3308      	adds	r3, #8
 8004734:	429a      	cmp	r2, r3
 8004736:	d104      	bne.n	8004742 <vTaskSwitchContext+0x8e>
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	685a      	ldr	r2, [r3, #4]
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	605a      	str	r2, [r3, #4]
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	4a0a      	ldr	r2, [pc, #40]	@ (8004774 <vTaskSwitchContext+0xc0>)
 800474a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800474c:	4b09      	ldr	r3, [pc, #36]	@ (8004774 <vTaskSwitchContext+0xc0>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	334c      	adds	r3, #76	@ 0x4c
 8004752:	4a09      	ldr	r2, [pc, #36]	@ (8004778 <vTaskSwitchContext+0xc4>)
 8004754:	6013      	str	r3, [r2, #0]
}
 8004756:	bf00      	nop
 8004758:	371c      	adds	r7, #28
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	20000e28 	.word	0x20000e28
 8004768:	20000e14 	.word	0x20000e14
 800476c:	20000e08 	.word	0x20000e08
 8004770:	20000d04 	.word	0x20000d04
 8004774:	20000d00 	.word	0x20000d00
 8004778:	20000034 	.word	0x20000034

0800477c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004784:	f000 f852 	bl	800482c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004788:	4b06      	ldr	r3, [pc, #24]	@ (80047a4 <prvIdleTask+0x28>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d9f9      	bls.n	8004784 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004790:	4b05      	ldr	r3, [pc, #20]	@ (80047a8 <prvIdleTask+0x2c>)
 8004792:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	f3bf 8f4f 	dsb	sy
 800479c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80047a0:	e7f0      	b.n	8004784 <prvIdleTask+0x8>
 80047a2:	bf00      	nop
 80047a4:	20000d04 	.word	0x20000d04
 80047a8:	e000ed04 	.word	0xe000ed04

080047ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047b2:	2300      	movs	r3, #0
 80047b4:	607b      	str	r3, [r7, #4]
 80047b6:	e00c      	b.n	80047d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	4613      	mov	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4413      	add	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4a12      	ldr	r2, [pc, #72]	@ (800480c <prvInitialiseTaskLists+0x60>)
 80047c4:	4413      	add	r3, r2
 80047c6:	4618      	mov	r0, r3
 80047c8:	f7ff fb0b 	bl	8003de2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	3301      	adds	r3, #1
 80047d0:	607b      	str	r3, [r7, #4]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b06      	cmp	r3, #6
 80047d6:	d9ef      	bls.n	80047b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80047d8:	480d      	ldr	r0, [pc, #52]	@ (8004810 <prvInitialiseTaskLists+0x64>)
 80047da:	f7ff fb02 	bl	8003de2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80047de:	480d      	ldr	r0, [pc, #52]	@ (8004814 <prvInitialiseTaskLists+0x68>)
 80047e0:	f7ff faff 	bl	8003de2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80047e4:	480c      	ldr	r0, [pc, #48]	@ (8004818 <prvInitialiseTaskLists+0x6c>)
 80047e6:	f7ff fafc 	bl	8003de2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80047ea:	480c      	ldr	r0, [pc, #48]	@ (800481c <prvInitialiseTaskLists+0x70>)
 80047ec:	f7ff faf9 	bl	8003de2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80047f0:	480b      	ldr	r0, [pc, #44]	@ (8004820 <prvInitialiseTaskLists+0x74>)
 80047f2:	f7ff faf6 	bl	8003de2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80047f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004824 <prvInitialiseTaskLists+0x78>)
 80047f8:	4a05      	ldr	r2, [pc, #20]	@ (8004810 <prvInitialiseTaskLists+0x64>)
 80047fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80047fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004828 <prvInitialiseTaskLists+0x7c>)
 80047fe:	4a05      	ldr	r2, [pc, #20]	@ (8004814 <prvInitialiseTaskLists+0x68>)
 8004800:	601a      	str	r2, [r3, #0]
}
 8004802:	bf00      	nop
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	20000d04 	.word	0x20000d04
 8004810:	20000d90 	.word	0x20000d90
 8004814:	20000da4 	.word	0x20000da4
 8004818:	20000dc0 	.word	0x20000dc0
 800481c:	20000dd4 	.word	0x20000dd4
 8004820:	20000dec 	.word	0x20000dec
 8004824:	20000db8 	.word	0x20000db8
 8004828:	20000dbc 	.word	0x20000dbc

0800482c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004832:	e019      	b.n	8004868 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004834:	f000 fa18 	bl	8004c68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004838:	4b10      	ldr	r3, [pc, #64]	@ (800487c <prvCheckTasksWaitingTermination+0x50>)
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	3304      	adds	r3, #4
 8004844:	4618      	mov	r0, r3
 8004846:	f7ff fb56 	bl	8003ef6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800484a:	4b0d      	ldr	r3, [pc, #52]	@ (8004880 <prvCheckTasksWaitingTermination+0x54>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	3b01      	subs	r3, #1
 8004850:	4a0b      	ldr	r2, [pc, #44]	@ (8004880 <prvCheckTasksWaitingTermination+0x54>)
 8004852:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004854:	4b0b      	ldr	r3, [pc, #44]	@ (8004884 <prvCheckTasksWaitingTermination+0x58>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	3b01      	subs	r3, #1
 800485a:	4a0a      	ldr	r2, [pc, #40]	@ (8004884 <prvCheckTasksWaitingTermination+0x58>)
 800485c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800485e:	f000 fa35 	bl	8004ccc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 f810 	bl	8004888 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004868:	4b06      	ldr	r3, [pc, #24]	@ (8004884 <prvCheckTasksWaitingTermination+0x58>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1e1      	bne.n	8004834 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004870:	bf00      	nop
 8004872:	bf00      	nop
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	20000dd4 	.word	0x20000dd4
 8004880:	20000e00 	.word	0x20000e00
 8004884:	20000de8 	.word	0x20000de8

08004888 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	334c      	adds	r3, #76	@ 0x4c
 8004894:	4618      	mov	r0, r3
 8004896:	f001 f819 	bl	80058cc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d108      	bne.n	80048b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a8:	4618      	mov	r0, r3
 80048aa:	f000 fb8b 	bl	8004fc4 <vPortFree>
				vPortFree( pxTCB );
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 fb88 	bl	8004fc4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80048b4:	e019      	b.n	80048ea <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d103      	bne.n	80048c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 fb7f 	bl	8004fc4 <vPortFree>
	}
 80048c6:	e010      	b.n	80048ea <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d00b      	beq.n	80048ea <prvDeleteTCB+0x62>
	__asm volatile
 80048d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048d6:	f383 8811 	msr	BASEPRI, r3
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	60fb      	str	r3, [r7, #12]
}
 80048e4:	bf00      	nop
 80048e6:	bf00      	nop
 80048e8:	e7fd      	b.n	80048e6 <prvDeleteTCB+0x5e>
	}
 80048ea:	bf00      	nop
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
	...

080048f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048fa:	4b0c      	ldr	r3, [pc, #48]	@ (800492c <prvResetNextTaskUnblockTime+0x38>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d104      	bne.n	800490e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004904:	4b0a      	ldr	r3, [pc, #40]	@ (8004930 <prvResetNextTaskUnblockTime+0x3c>)
 8004906:	f04f 32ff 	mov.w	r2, #4294967295
 800490a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800490c:	e008      	b.n	8004920 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800490e:	4b07      	ldr	r3, [pc, #28]	@ (800492c <prvResetNextTaskUnblockTime+0x38>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	4a04      	ldr	r2, [pc, #16]	@ (8004930 <prvResetNextTaskUnblockTime+0x3c>)
 800491e:	6013      	str	r3, [r2, #0]
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	20000db8 	.word	0x20000db8
 8004930:	20000e20 	.word	0x20000e20

08004934 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800493e:	4b29      	ldr	r3, [pc, #164]	@ (80049e4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004944:	4b28      	ldr	r3, [pc, #160]	@ (80049e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	3304      	adds	r3, #4
 800494a:	4618      	mov	r0, r3
 800494c:	f7ff fad3 	bl	8003ef6 <uxListRemove>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10b      	bne.n	800496e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004956:	4b24      	ldr	r3, [pc, #144]	@ (80049e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495c:	2201      	movs	r2, #1
 800495e:	fa02 f303 	lsl.w	r3, r2, r3
 8004962:	43da      	mvns	r2, r3
 8004964:	4b21      	ldr	r3, [pc, #132]	@ (80049ec <prvAddCurrentTaskToDelayedList+0xb8>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4013      	ands	r3, r2
 800496a:	4a20      	ldr	r2, [pc, #128]	@ (80049ec <prvAddCurrentTaskToDelayedList+0xb8>)
 800496c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004974:	d10a      	bne.n	800498c <prvAddCurrentTaskToDelayedList+0x58>
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d007      	beq.n	800498c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800497c:	4b1a      	ldr	r3, [pc, #104]	@ (80049e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	3304      	adds	r3, #4
 8004982:	4619      	mov	r1, r3
 8004984:	481a      	ldr	r0, [pc, #104]	@ (80049f0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004986:	f7ff fa59 	bl	8003e3c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800498a:	e026      	b.n	80049da <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4413      	add	r3, r2
 8004992:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004994:	4b14      	ldr	r3, [pc, #80]	@ (80049e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d209      	bcs.n	80049b8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049a4:	4b13      	ldr	r3, [pc, #76]	@ (80049f4 <prvAddCurrentTaskToDelayedList+0xc0>)
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	4b0f      	ldr	r3, [pc, #60]	@ (80049e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	3304      	adds	r3, #4
 80049ae:	4619      	mov	r1, r3
 80049b0:	4610      	mov	r0, r2
 80049b2:	f7ff fa67 	bl	8003e84 <vListInsert>
}
 80049b6:	e010      	b.n	80049da <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049b8:	4b0f      	ldr	r3, [pc, #60]	@ (80049f8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	4b0a      	ldr	r3, [pc, #40]	@ (80049e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3304      	adds	r3, #4
 80049c2:	4619      	mov	r1, r3
 80049c4:	4610      	mov	r0, r2
 80049c6:	f7ff fa5d 	bl	8003e84 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80049ca:	4b0c      	ldr	r3, [pc, #48]	@ (80049fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d202      	bcs.n	80049da <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80049d4:	4a09      	ldr	r2, [pc, #36]	@ (80049fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	6013      	str	r3, [r2, #0]
}
 80049da:	bf00      	nop
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	20000e04 	.word	0x20000e04
 80049e8:	20000d00 	.word	0x20000d00
 80049ec:	20000e08 	.word	0x20000e08
 80049f0:	20000dec 	.word	0x20000dec
 80049f4:	20000dbc 	.word	0x20000dbc
 80049f8:	20000db8 	.word	0x20000db8
 80049fc:	20000e20 	.word	0x20000e20

08004a00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	3b04      	subs	r3, #4
 8004a10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004a18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	3b04      	subs	r3, #4
 8004a1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f023 0201 	bic.w	r2, r3, #1
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	3b04      	subs	r3, #4
 8004a2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004a30:	4a0c      	ldr	r2, [pc, #48]	@ (8004a64 <pxPortInitialiseStack+0x64>)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	3b14      	subs	r3, #20
 8004a3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004a3c:	687a      	ldr	r2, [r7, #4]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	3b04      	subs	r3, #4
 8004a46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f06f 0202 	mvn.w	r2, #2
 8004a4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	3b20      	subs	r3, #32
 8004a54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004a56:	68fb      	ldr	r3, [r7, #12]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3714      	adds	r7, #20
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr
 8004a64:	08004a69 	.word	0x08004a69

08004a68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004a72:	4b13      	ldr	r3, [pc, #76]	@ (8004ac0 <prvTaskExitError+0x58>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a7a:	d00b      	beq.n	8004a94 <prvTaskExitError+0x2c>
	__asm volatile
 8004a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a80:	f383 8811 	msr	BASEPRI, r3
 8004a84:	f3bf 8f6f 	isb	sy
 8004a88:	f3bf 8f4f 	dsb	sy
 8004a8c:	60fb      	str	r3, [r7, #12]
}
 8004a8e:	bf00      	nop
 8004a90:	bf00      	nop
 8004a92:	e7fd      	b.n	8004a90 <prvTaskExitError+0x28>
	__asm volatile
 8004a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a98:	f383 8811 	msr	BASEPRI, r3
 8004a9c:	f3bf 8f6f 	isb	sy
 8004aa0:	f3bf 8f4f 	dsb	sy
 8004aa4:	60bb      	str	r3, [r7, #8]
}
 8004aa6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004aa8:	bf00      	nop
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d0fc      	beq.n	8004aaa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004ab0:	bf00      	nop
 8004ab2:	bf00      	nop
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	20000024 	.word	0x20000024
	...

08004ad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004ad0:	4b07      	ldr	r3, [pc, #28]	@ (8004af0 <pxCurrentTCBConst2>)
 8004ad2:	6819      	ldr	r1, [r3, #0]
 8004ad4:	6808      	ldr	r0, [r1, #0]
 8004ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ada:	f380 8809 	msr	PSP, r0
 8004ade:	f3bf 8f6f 	isb	sy
 8004ae2:	f04f 0000 	mov.w	r0, #0
 8004ae6:	f380 8811 	msr	BASEPRI, r0
 8004aea:	4770      	bx	lr
 8004aec:	f3af 8000 	nop.w

08004af0 <pxCurrentTCBConst2>:
 8004af0:	20000d00 	.word	0x20000d00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004af4:	bf00      	nop
 8004af6:	bf00      	nop

08004af8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004af8:	4808      	ldr	r0, [pc, #32]	@ (8004b1c <prvPortStartFirstTask+0x24>)
 8004afa:	6800      	ldr	r0, [r0, #0]
 8004afc:	6800      	ldr	r0, [r0, #0]
 8004afe:	f380 8808 	msr	MSP, r0
 8004b02:	f04f 0000 	mov.w	r0, #0
 8004b06:	f380 8814 	msr	CONTROL, r0
 8004b0a:	b662      	cpsie	i
 8004b0c:	b661      	cpsie	f
 8004b0e:	f3bf 8f4f 	dsb	sy
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	df00      	svc	0
 8004b18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004b1a:	bf00      	nop
 8004b1c:	e000ed08 	.word	0xe000ed08

08004b20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b26:	4b47      	ldr	r3, [pc, #284]	@ (8004c44 <xPortStartScheduler+0x124>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a47      	ldr	r2, [pc, #284]	@ (8004c48 <xPortStartScheduler+0x128>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d10b      	bne.n	8004b48 <xPortStartScheduler+0x28>
	__asm volatile
 8004b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b34:	f383 8811 	msr	BASEPRI, r3
 8004b38:	f3bf 8f6f 	isb	sy
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	613b      	str	r3, [r7, #16]
}
 8004b42:	bf00      	nop
 8004b44:	bf00      	nop
 8004b46:	e7fd      	b.n	8004b44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004b48:	4b3e      	ldr	r3, [pc, #248]	@ (8004c44 <xPortStartScheduler+0x124>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a3f      	ldr	r2, [pc, #252]	@ (8004c4c <xPortStartScheduler+0x12c>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d10b      	bne.n	8004b6a <xPortStartScheduler+0x4a>
	__asm volatile
 8004b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b56:	f383 8811 	msr	BASEPRI, r3
 8004b5a:	f3bf 8f6f 	isb	sy
 8004b5e:	f3bf 8f4f 	dsb	sy
 8004b62:	60fb      	str	r3, [r7, #12]
}
 8004b64:	bf00      	nop
 8004b66:	bf00      	nop
 8004b68:	e7fd      	b.n	8004b66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b6a:	4b39      	ldr	r3, [pc, #228]	@ (8004c50 <xPortStartScheduler+0x130>)
 8004b6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	22ff      	movs	r2, #255	@ 0xff
 8004b7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b84:	78fb      	ldrb	r3, [r7, #3]
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	4b31      	ldr	r3, [pc, #196]	@ (8004c54 <xPortStartScheduler+0x134>)
 8004b90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b92:	4b31      	ldr	r3, [pc, #196]	@ (8004c58 <xPortStartScheduler+0x138>)
 8004b94:	2207      	movs	r2, #7
 8004b96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b98:	e009      	b.n	8004bae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004b9a:	4b2f      	ldr	r3, [pc, #188]	@ (8004c58 <xPortStartScheduler+0x138>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	4a2d      	ldr	r2, [pc, #180]	@ (8004c58 <xPortStartScheduler+0x138>)
 8004ba2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ba4:	78fb      	ldrb	r3, [r7, #3]
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004bae:	78fb      	ldrb	r3, [r7, #3]
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bb6:	2b80      	cmp	r3, #128	@ 0x80
 8004bb8:	d0ef      	beq.n	8004b9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004bba:	4b27      	ldr	r3, [pc, #156]	@ (8004c58 <xPortStartScheduler+0x138>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f1c3 0307 	rsb	r3, r3, #7
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	d00b      	beq.n	8004bde <xPortStartScheduler+0xbe>
	__asm volatile
 8004bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bca:	f383 8811 	msr	BASEPRI, r3
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f3bf 8f4f 	dsb	sy
 8004bd6:	60bb      	str	r3, [r7, #8]
}
 8004bd8:	bf00      	nop
 8004bda:	bf00      	nop
 8004bdc:	e7fd      	b.n	8004bda <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004bde:	4b1e      	ldr	r3, [pc, #120]	@ (8004c58 <xPortStartScheduler+0x138>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	021b      	lsls	r3, r3, #8
 8004be4:	4a1c      	ldr	r2, [pc, #112]	@ (8004c58 <xPortStartScheduler+0x138>)
 8004be6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004be8:	4b1b      	ldr	r3, [pc, #108]	@ (8004c58 <xPortStartScheduler+0x138>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004bf0:	4a19      	ldr	r2, [pc, #100]	@ (8004c58 <xPortStartScheduler+0x138>)
 8004bf2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	b2da      	uxtb	r2, r3
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004bfc:	4b17      	ldr	r3, [pc, #92]	@ (8004c5c <xPortStartScheduler+0x13c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a16      	ldr	r2, [pc, #88]	@ (8004c5c <xPortStartScheduler+0x13c>)
 8004c02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004c06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004c08:	4b14      	ldr	r3, [pc, #80]	@ (8004c5c <xPortStartScheduler+0x13c>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a13      	ldr	r2, [pc, #76]	@ (8004c5c <xPortStartScheduler+0x13c>)
 8004c0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004c12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004c14:	f000 f8da 	bl	8004dcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004c18:	4b11      	ldr	r3, [pc, #68]	@ (8004c60 <xPortStartScheduler+0x140>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004c1e:	f000 f8f9 	bl	8004e14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004c22:	4b10      	ldr	r3, [pc, #64]	@ (8004c64 <xPortStartScheduler+0x144>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a0f      	ldr	r2, [pc, #60]	@ (8004c64 <xPortStartScheduler+0x144>)
 8004c28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004c2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004c2e:	f7ff ff63 	bl	8004af8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004c32:	f7ff fd3f 	bl	80046b4 <vTaskSwitchContext>
	prvTaskExitError();
 8004c36:	f7ff ff17 	bl	8004a68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3718      	adds	r7, #24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	e000ed00 	.word	0xe000ed00
 8004c48:	410fc271 	.word	0x410fc271
 8004c4c:	410fc270 	.word	0x410fc270
 8004c50:	e000e400 	.word	0xe000e400
 8004c54:	20000e2c 	.word	0x20000e2c
 8004c58:	20000e30 	.word	0x20000e30
 8004c5c:	e000ed20 	.word	0xe000ed20
 8004c60:	20000024 	.word	0x20000024
 8004c64:	e000ef34 	.word	0xe000ef34

08004c68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c72:	f383 8811 	msr	BASEPRI, r3
 8004c76:	f3bf 8f6f 	isb	sy
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	607b      	str	r3, [r7, #4]
}
 8004c80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004c82:	4b10      	ldr	r3, [pc, #64]	@ (8004cc4 <vPortEnterCritical+0x5c>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	3301      	adds	r3, #1
 8004c88:	4a0e      	ldr	r2, [pc, #56]	@ (8004cc4 <vPortEnterCritical+0x5c>)
 8004c8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8004cc4 <vPortEnterCritical+0x5c>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d110      	bne.n	8004cb6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c94:	4b0c      	ldr	r3, [pc, #48]	@ (8004cc8 <vPortEnterCritical+0x60>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00b      	beq.n	8004cb6 <vPortEnterCritical+0x4e>
	__asm volatile
 8004c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ca2:	f383 8811 	msr	BASEPRI, r3
 8004ca6:	f3bf 8f6f 	isb	sy
 8004caa:	f3bf 8f4f 	dsb	sy
 8004cae:	603b      	str	r3, [r7, #0]
}
 8004cb0:	bf00      	nop
 8004cb2:	bf00      	nop
 8004cb4:	e7fd      	b.n	8004cb2 <vPortEnterCritical+0x4a>
	}
}
 8004cb6:	bf00      	nop
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	20000024 	.word	0x20000024
 8004cc8:	e000ed04 	.word	0xe000ed04

08004ccc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004cd2:	4b12      	ldr	r3, [pc, #72]	@ (8004d1c <vPortExitCritical+0x50>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10b      	bne.n	8004cf2 <vPortExitCritical+0x26>
	__asm volatile
 8004cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cde:	f383 8811 	msr	BASEPRI, r3
 8004ce2:	f3bf 8f6f 	isb	sy
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	607b      	str	r3, [r7, #4]
}
 8004cec:	bf00      	nop
 8004cee:	bf00      	nop
 8004cf0:	e7fd      	b.n	8004cee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8004d1c <vPortExitCritical+0x50>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	4a08      	ldr	r2, [pc, #32]	@ (8004d1c <vPortExitCritical+0x50>)
 8004cfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004cfc:	4b07      	ldr	r3, [pc, #28]	@ (8004d1c <vPortExitCritical+0x50>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d105      	bne.n	8004d10 <vPortExitCritical+0x44>
 8004d04:	2300      	movs	r3, #0
 8004d06:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004d0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	20000024 	.word	0x20000024

08004d20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004d20:	f3ef 8009 	mrs	r0, PSP
 8004d24:	f3bf 8f6f 	isb	sy
 8004d28:	4b15      	ldr	r3, [pc, #84]	@ (8004d80 <pxCurrentTCBConst>)
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	f01e 0f10 	tst.w	lr, #16
 8004d30:	bf08      	it	eq
 8004d32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004d36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d3a:	6010      	str	r0, [r2, #0]
 8004d3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004d40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004d44:	f380 8811 	msr	BASEPRI, r0
 8004d48:	f3bf 8f4f 	dsb	sy
 8004d4c:	f3bf 8f6f 	isb	sy
 8004d50:	f7ff fcb0 	bl	80046b4 <vTaskSwitchContext>
 8004d54:	f04f 0000 	mov.w	r0, #0
 8004d58:	f380 8811 	msr	BASEPRI, r0
 8004d5c:	bc09      	pop	{r0, r3}
 8004d5e:	6819      	ldr	r1, [r3, #0]
 8004d60:	6808      	ldr	r0, [r1, #0]
 8004d62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d66:	f01e 0f10 	tst.w	lr, #16
 8004d6a:	bf08      	it	eq
 8004d6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004d70:	f380 8809 	msr	PSP, r0
 8004d74:	f3bf 8f6f 	isb	sy
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	f3af 8000 	nop.w

08004d80 <pxCurrentTCBConst>:
 8004d80:	20000d00 	.word	0x20000d00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004d84:	bf00      	nop
 8004d86:	bf00      	nop

08004d88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d92:	f383 8811 	msr	BASEPRI, r3
 8004d96:	f3bf 8f6f 	isb	sy
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	607b      	str	r3, [r7, #4]
}
 8004da0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004da2:	f7ff fbcd 	bl	8004540 <xTaskIncrementTick>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d003      	beq.n	8004db4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004dac:	4b06      	ldr	r3, [pc, #24]	@ (8004dc8 <SysTick_Handler+0x40>)
 8004dae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	2300      	movs	r3, #0
 8004db6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	f383 8811 	msr	BASEPRI, r3
}
 8004dbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004dc0:	bf00      	nop
 8004dc2:	3708      	adds	r7, #8
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	e000ed04 	.word	0xe000ed04

08004dcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004dcc:	b480      	push	{r7}
 8004dce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8004e00 <vPortSetupTimerInterrupt+0x34>)
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8004e04 <vPortSetupTimerInterrupt+0x38>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8004e08 <vPortSetupTimerInterrupt+0x3c>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a0a      	ldr	r2, [pc, #40]	@ (8004e0c <vPortSetupTimerInterrupt+0x40>)
 8004de2:	fba2 2303 	umull	r2, r3, r2, r3
 8004de6:	099b      	lsrs	r3, r3, #6
 8004de8:	4a09      	ldr	r2, [pc, #36]	@ (8004e10 <vPortSetupTimerInterrupt+0x44>)
 8004dea:	3b01      	subs	r3, #1
 8004dec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004dee:	4b04      	ldr	r3, [pc, #16]	@ (8004e00 <vPortSetupTimerInterrupt+0x34>)
 8004df0:	2207      	movs	r2, #7
 8004df2:	601a      	str	r2, [r3, #0]
}
 8004df4:	bf00      	nop
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	e000e010 	.word	0xe000e010
 8004e04:	e000e018 	.word	0xe000e018
 8004e08:	20000018 	.word	0x20000018
 8004e0c:	10624dd3 	.word	0x10624dd3
 8004e10:	e000e014 	.word	0xe000e014

08004e14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004e14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004e24 <vPortEnableVFP+0x10>
 8004e18:	6801      	ldr	r1, [r0, #0]
 8004e1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004e1e:	6001      	str	r1, [r0, #0]
 8004e20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004e22:	bf00      	nop
 8004e24:	e000ed88 	.word	0xe000ed88

08004e28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b08a      	sub	sp, #40	@ 0x28
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004e30:	2300      	movs	r3, #0
 8004e32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004e34:	f7ff fad8 	bl	80043e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004e38:	4b5c      	ldr	r3, [pc, #368]	@ (8004fac <pvPortMalloc+0x184>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d101      	bne.n	8004e44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004e40:	f000 f924 	bl	800508c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004e44:	4b5a      	ldr	r3, [pc, #360]	@ (8004fb0 <pvPortMalloc+0x188>)
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f040 8095 	bne.w	8004f7c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d01e      	beq.n	8004e96 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004e58:	2208      	movs	r2, #8
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f003 0307 	and.w	r3, r3, #7
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d015      	beq.n	8004e96 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f023 0307 	bic.w	r3, r3, #7
 8004e70:	3308      	adds	r3, #8
 8004e72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f003 0307 	and.w	r3, r3, #7
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d00b      	beq.n	8004e96 <pvPortMalloc+0x6e>
	__asm volatile
 8004e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e82:	f383 8811 	msr	BASEPRI, r3
 8004e86:	f3bf 8f6f 	isb	sy
 8004e8a:	f3bf 8f4f 	dsb	sy
 8004e8e:	617b      	str	r3, [r7, #20]
}
 8004e90:	bf00      	nop
 8004e92:	bf00      	nop
 8004e94:	e7fd      	b.n	8004e92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d06f      	beq.n	8004f7c <pvPortMalloc+0x154>
 8004e9c:	4b45      	ldr	r3, [pc, #276]	@ (8004fb4 <pvPortMalloc+0x18c>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d86a      	bhi.n	8004f7c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ea6:	4b44      	ldr	r3, [pc, #272]	@ (8004fb8 <pvPortMalloc+0x190>)
 8004ea8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004eaa:	4b43      	ldr	r3, [pc, #268]	@ (8004fb8 <pvPortMalloc+0x190>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004eb0:	e004      	b.n	8004ebc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d903      	bls.n	8004ece <pvPortMalloc+0xa6>
 8004ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1f1      	bne.n	8004eb2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004ece:	4b37      	ldr	r3, [pc, #220]	@ (8004fac <pvPortMalloc+0x184>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d051      	beq.n	8004f7c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ed8:	6a3b      	ldr	r3, [r7, #32]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2208      	movs	r2, #8
 8004ede:	4413      	add	r3, r2
 8004ee0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	6a3b      	ldr	r3, [r7, #32]
 8004ee8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	1ad2      	subs	r2, r2, r3
 8004ef2:	2308      	movs	r3, #8
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d920      	bls.n	8004f3c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004efa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4413      	add	r3, r2
 8004f00:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	f003 0307 	and.w	r3, r3, #7
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00b      	beq.n	8004f24 <pvPortMalloc+0xfc>
	__asm volatile
 8004f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f10:	f383 8811 	msr	BASEPRI, r3
 8004f14:	f3bf 8f6f 	isb	sy
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	613b      	str	r3, [r7, #16]
}
 8004f1e:	bf00      	nop
 8004f20:	bf00      	nop
 8004f22:	e7fd      	b.n	8004f20 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	1ad2      	subs	r2, r2, r3
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f36:	69b8      	ldr	r0, [r7, #24]
 8004f38:	f000 f90a 	bl	8005150 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f3c:	4b1d      	ldr	r3, [pc, #116]	@ (8004fb4 <pvPortMalloc+0x18c>)
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	4a1b      	ldr	r2, [pc, #108]	@ (8004fb4 <pvPortMalloc+0x18c>)
 8004f48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8004fb4 <pvPortMalloc+0x18c>)
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	4b1b      	ldr	r3, [pc, #108]	@ (8004fbc <pvPortMalloc+0x194>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d203      	bcs.n	8004f5e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f56:	4b17      	ldr	r3, [pc, #92]	@ (8004fb4 <pvPortMalloc+0x18c>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a18      	ldr	r2, [pc, #96]	@ (8004fbc <pvPortMalloc+0x194>)
 8004f5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f60:	685a      	ldr	r2, [r3, #4]
 8004f62:	4b13      	ldr	r3, [pc, #76]	@ (8004fb0 <pvPortMalloc+0x188>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	431a      	orrs	r2, r3
 8004f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6e:	2200      	movs	r2, #0
 8004f70:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004f72:	4b13      	ldr	r3, [pc, #76]	@ (8004fc0 <pvPortMalloc+0x198>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	3301      	adds	r3, #1
 8004f78:	4a11      	ldr	r2, [pc, #68]	@ (8004fc0 <pvPortMalloc+0x198>)
 8004f7a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004f7c:	f7ff fa42 	bl	8004404 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	f003 0307 	and.w	r3, r3, #7
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00b      	beq.n	8004fa2 <pvPortMalloc+0x17a>
	__asm volatile
 8004f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f8e:	f383 8811 	msr	BASEPRI, r3
 8004f92:	f3bf 8f6f 	isb	sy
 8004f96:	f3bf 8f4f 	dsb	sy
 8004f9a:	60fb      	str	r3, [r7, #12]
}
 8004f9c:	bf00      	nop
 8004f9e:	bf00      	nop
 8004fa0:	e7fd      	b.n	8004f9e <pvPortMalloc+0x176>
	return pvReturn;
 8004fa2:	69fb      	ldr	r3, [r7, #28]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3728      	adds	r7, #40	@ 0x28
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	20004a3c 	.word	0x20004a3c
 8004fb0:	20004a50 	.word	0x20004a50
 8004fb4:	20004a40 	.word	0x20004a40
 8004fb8:	20004a34 	.word	0x20004a34
 8004fbc:	20004a44 	.word	0x20004a44
 8004fc0:	20004a48 	.word	0x20004a48

08004fc4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d04f      	beq.n	8005076 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004fd6:	2308      	movs	r3, #8
 8004fd8:	425b      	negs	r3, r3
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	4413      	add	r3, r2
 8004fde:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	4b25      	ldr	r3, [pc, #148]	@ (8005080 <vPortFree+0xbc>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4013      	ands	r3, r2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10b      	bne.n	800500a <vPortFree+0x46>
	__asm volatile
 8004ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ff6:	f383 8811 	msr	BASEPRI, r3
 8004ffa:	f3bf 8f6f 	isb	sy
 8004ffe:	f3bf 8f4f 	dsb	sy
 8005002:	60fb      	str	r3, [r7, #12]
}
 8005004:	bf00      	nop
 8005006:	bf00      	nop
 8005008:	e7fd      	b.n	8005006 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00b      	beq.n	800502a <vPortFree+0x66>
	__asm volatile
 8005012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005016:	f383 8811 	msr	BASEPRI, r3
 800501a:	f3bf 8f6f 	isb	sy
 800501e:	f3bf 8f4f 	dsb	sy
 8005022:	60bb      	str	r3, [r7, #8]
}
 8005024:	bf00      	nop
 8005026:	bf00      	nop
 8005028:	e7fd      	b.n	8005026 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	4b14      	ldr	r3, [pc, #80]	@ (8005080 <vPortFree+0xbc>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4013      	ands	r3, r2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d01e      	beq.n	8005076 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d11a      	bne.n	8005076 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	685a      	ldr	r2, [r3, #4]
 8005044:	4b0e      	ldr	r3, [pc, #56]	@ (8005080 <vPortFree+0xbc>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	43db      	mvns	r3, r3
 800504a:	401a      	ands	r2, r3
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005050:	f7ff f9ca 	bl	80043e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	4b0a      	ldr	r3, [pc, #40]	@ (8005084 <vPortFree+0xc0>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4413      	add	r3, r2
 800505e:	4a09      	ldr	r2, [pc, #36]	@ (8005084 <vPortFree+0xc0>)
 8005060:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005062:	6938      	ldr	r0, [r7, #16]
 8005064:	f000 f874 	bl	8005150 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005068:	4b07      	ldr	r3, [pc, #28]	@ (8005088 <vPortFree+0xc4>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	3301      	adds	r3, #1
 800506e:	4a06      	ldr	r2, [pc, #24]	@ (8005088 <vPortFree+0xc4>)
 8005070:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005072:	f7ff f9c7 	bl	8004404 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005076:	bf00      	nop
 8005078:	3718      	adds	r7, #24
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	20004a50 	.word	0x20004a50
 8005084:	20004a40 	.word	0x20004a40
 8005088:	20004a4c 	.word	0x20004a4c

0800508c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005092:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005096:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005098:	4b27      	ldr	r3, [pc, #156]	@ (8005138 <prvHeapInit+0xac>)
 800509a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f003 0307 	and.w	r3, r3, #7
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00c      	beq.n	80050c0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	3307      	adds	r3, #7
 80050aa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f023 0307 	bic.w	r3, r3, #7
 80050b2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	4a1f      	ldr	r2, [pc, #124]	@ (8005138 <prvHeapInit+0xac>)
 80050bc:	4413      	add	r3, r2
 80050be:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80050c4:	4a1d      	ldr	r2, [pc, #116]	@ (800513c <prvHeapInit+0xb0>)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80050ca:	4b1c      	ldr	r3, [pc, #112]	@ (800513c <prvHeapInit+0xb0>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	4413      	add	r3, r2
 80050d6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80050d8:	2208      	movs	r2, #8
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	1a9b      	subs	r3, r3, r2
 80050de:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f023 0307 	bic.w	r3, r3, #7
 80050e6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	4a15      	ldr	r2, [pc, #84]	@ (8005140 <prvHeapInit+0xb4>)
 80050ec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80050ee:	4b14      	ldr	r3, [pc, #80]	@ (8005140 <prvHeapInit+0xb4>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2200      	movs	r2, #0
 80050f4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80050f6:	4b12      	ldr	r3, [pc, #72]	@ (8005140 <prvHeapInit+0xb4>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2200      	movs	r2, #0
 80050fc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	1ad2      	subs	r2, r2, r3
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800510c:	4b0c      	ldr	r3, [pc, #48]	@ (8005140 <prvHeapInit+0xb4>)
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	4a0a      	ldr	r2, [pc, #40]	@ (8005144 <prvHeapInit+0xb8>)
 800511a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	4a09      	ldr	r2, [pc, #36]	@ (8005148 <prvHeapInit+0xbc>)
 8005122:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005124:	4b09      	ldr	r3, [pc, #36]	@ (800514c <prvHeapInit+0xc0>)
 8005126:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800512a:	601a      	str	r2, [r3, #0]
}
 800512c:	bf00      	nop
 800512e:	3714      	adds	r7, #20
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr
 8005138:	20000e34 	.word	0x20000e34
 800513c:	20004a34 	.word	0x20004a34
 8005140:	20004a3c 	.word	0x20004a3c
 8005144:	20004a44 	.word	0x20004a44
 8005148:	20004a40 	.word	0x20004a40
 800514c:	20004a50 	.word	0x20004a50

08005150 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005158:	4b28      	ldr	r3, [pc, #160]	@ (80051fc <prvInsertBlockIntoFreeList+0xac>)
 800515a:	60fb      	str	r3, [r7, #12]
 800515c:	e002      	b.n	8005164 <prvInsertBlockIntoFreeList+0x14>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	60fb      	str	r3, [r7, #12]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	429a      	cmp	r2, r3
 800516c:	d8f7      	bhi.n	800515e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	4413      	add	r3, r2
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	429a      	cmp	r2, r3
 800517e:	d108      	bne.n	8005192 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	685a      	ldr	r2, [r3, #4]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	441a      	add	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	441a      	add	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d118      	bne.n	80051d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	4b15      	ldr	r3, [pc, #84]	@ (8005200 <prvInsertBlockIntoFreeList+0xb0>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d00d      	beq.n	80051ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	441a      	add	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	601a      	str	r2, [r3, #0]
 80051cc:	e008      	b.n	80051e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80051ce:	4b0c      	ldr	r3, [pc, #48]	@ (8005200 <prvInsertBlockIntoFreeList+0xb0>)
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	601a      	str	r2, [r3, #0]
 80051d6:	e003      	b.n	80051e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d002      	beq.n	80051ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051ee:	bf00      	nop
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	20004a34 	.word	0x20004a34
 8005200:	20004a3c 	.word	0x20004a3c

08005204 <atoi>:
 8005204:	220a      	movs	r2, #10
 8005206:	2100      	movs	r1, #0
 8005208:	f000 b87a 	b.w	8005300 <strtol>

0800520c <_strtol_l.constprop.0>:
 800520c:	2b24      	cmp	r3, #36	@ 0x24
 800520e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005212:	4686      	mov	lr, r0
 8005214:	4690      	mov	r8, r2
 8005216:	d801      	bhi.n	800521c <_strtol_l.constprop.0+0x10>
 8005218:	2b01      	cmp	r3, #1
 800521a:	d106      	bne.n	800522a <_strtol_l.constprop.0+0x1e>
 800521c:	f000 fbe2 	bl	80059e4 <__errno>
 8005220:	2316      	movs	r3, #22
 8005222:	6003      	str	r3, [r0, #0]
 8005224:	2000      	movs	r0, #0
 8005226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800522a:	4834      	ldr	r0, [pc, #208]	@ (80052fc <_strtol_l.constprop.0+0xf0>)
 800522c:	460d      	mov	r5, r1
 800522e:	462a      	mov	r2, r5
 8005230:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005234:	5d06      	ldrb	r6, [r0, r4]
 8005236:	f016 0608 	ands.w	r6, r6, #8
 800523a:	d1f8      	bne.n	800522e <_strtol_l.constprop.0+0x22>
 800523c:	2c2d      	cmp	r4, #45	@ 0x2d
 800523e:	d12d      	bne.n	800529c <_strtol_l.constprop.0+0x90>
 8005240:	782c      	ldrb	r4, [r5, #0]
 8005242:	2601      	movs	r6, #1
 8005244:	1c95      	adds	r5, r2, #2
 8005246:	f033 0210 	bics.w	r2, r3, #16
 800524a:	d109      	bne.n	8005260 <_strtol_l.constprop.0+0x54>
 800524c:	2c30      	cmp	r4, #48	@ 0x30
 800524e:	d12a      	bne.n	80052a6 <_strtol_l.constprop.0+0x9a>
 8005250:	782a      	ldrb	r2, [r5, #0]
 8005252:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005256:	2a58      	cmp	r2, #88	@ 0x58
 8005258:	d125      	bne.n	80052a6 <_strtol_l.constprop.0+0x9a>
 800525a:	786c      	ldrb	r4, [r5, #1]
 800525c:	2310      	movs	r3, #16
 800525e:	3502      	adds	r5, #2
 8005260:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005264:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005268:	2200      	movs	r2, #0
 800526a:	fbbc f9f3 	udiv	r9, ip, r3
 800526e:	4610      	mov	r0, r2
 8005270:	fb03 ca19 	mls	sl, r3, r9, ip
 8005274:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005278:	2f09      	cmp	r7, #9
 800527a:	d81b      	bhi.n	80052b4 <_strtol_l.constprop.0+0xa8>
 800527c:	463c      	mov	r4, r7
 800527e:	42a3      	cmp	r3, r4
 8005280:	dd27      	ble.n	80052d2 <_strtol_l.constprop.0+0xc6>
 8005282:	1c57      	adds	r7, r2, #1
 8005284:	d007      	beq.n	8005296 <_strtol_l.constprop.0+0x8a>
 8005286:	4581      	cmp	r9, r0
 8005288:	d320      	bcc.n	80052cc <_strtol_l.constprop.0+0xc0>
 800528a:	d101      	bne.n	8005290 <_strtol_l.constprop.0+0x84>
 800528c:	45a2      	cmp	sl, r4
 800528e:	db1d      	blt.n	80052cc <_strtol_l.constprop.0+0xc0>
 8005290:	fb00 4003 	mla	r0, r0, r3, r4
 8005294:	2201      	movs	r2, #1
 8005296:	f815 4b01 	ldrb.w	r4, [r5], #1
 800529a:	e7eb      	b.n	8005274 <_strtol_l.constprop.0+0x68>
 800529c:	2c2b      	cmp	r4, #43	@ 0x2b
 800529e:	bf04      	itt	eq
 80052a0:	782c      	ldrbeq	r4, [r5, #0]
 80052a2:	1c95      	addeq	r5, r2, #2
 80052a4:	e7cf      	b.n	8005246 <_strtol_l.constprop.0+0x3a>
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1da      	bne.n	8005260 <_strtol_l.constprop.0+0x54>
 80052aa:	2c30      	cmp	r4, #48	@ 0x30
 80052ac:	bf0c      	ite	eq
 80052ae:	2308      	moveq	r3, #8
 80052b0:	230a      	movne	r3, #10
 80052b2:	e7d5      	b.n	8005260 <_strtol_l.constprop.0+0x54>
 80052b4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80052b8:	2f19      	cmp	r7, #25
 80052ba:	d801      	bhi.n	80052c0 <_strtol_l.constprop.0+0xb4>
 80052bc:	3c37      	subs	r4, #55	@ 0x37
 80052be:	e7de      	b.n	800527e <_strtol_l.constprop.0+0x72>
 80052c0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80052c4:	2f19      	cmp	r7, #25
 80052c6:	d804      	bhi.n	80052d2 <_strtol_l.constprop.0+0xc6>
 80052c8:	3c57      	subs	r4, #87	@ 0x57
 80052ca:	e7d8      	b.n	800527e <_strtol_l.constprop.0+0x72>
 80052cc:	f04f 32ff 	mov.w	r2, #4294967295
 80052d0:	e7e1      	b.n	8005296 <_strtol_l.constprop.0+0x8a>
 80052d2:	1c53      	adds	r3, r2, #1
 80052d4:	d108      	bne.n	80052e8 <_strtol_l.constprop.0+0xdc>
 80052d6:	2322      	movs	r3, #34	@ 0x22
 80052d8:	f8ce 3000 	str.w	r3, [lr]
 80052dc:	4660      	mov	r0, ip
 80052de:	f1b8 0f00 	cmp.w	r8, #0
 80052e2:	d0a0      	beq.n	8005226 <_strtol_l.constprop.0+0x1a>
 80052e4:	1e69      	subs	r1, r5, #1
 80052e6:	e006      	b.n	80052f6 <_strtol_l.constprop.0+0xea>
 80052e8:	b106      	cbz	r6, 80052ec <_strtol_l.constprop.0+0xe0>
 80052ea:	4240      	negs	r0, r0
 80052ec:	f1b8 0f00 	cmp.w	r8, #0
 80052f0:	d099      	beq.n	8005226 <_strtol_l.constprop.0+0x1a>
 80052f2:	2a00      	cmp	r2, #0
 80052f4:	d1f6      	bne.n	80052e4 <_strtol_l.constprop.0+0xd8>
 80052f6:	f8c8 1000 	str.w	r1, [r8]
 80052fa:	e794      	b.n	8005226 <_strtol_l.constprop.0+0x1a>
 80052fc:	08006f9d 	.word	0x08006f9d

08005300 <strtol>:
 8005300:	4613      	mov	r3, r2
 8005302:	460a      	mov	r2, r1
 8005304:	4601      	mov	r1, r0
 8005306:	4802      	ldr	r0, [pc, #8]	@ (8005310 <strtol+0x10>)
 8005308:	6800      	ldr	r0, [r0, #0]
 800530a:	f7ff bf7f 	b.w	800520c <_strtol_l.constprop.0>
 800530e:	bf00      	nop
 8005310:	20000034 	.word	0x20000034

08005314 <std>:
 8005314:	2300      	movs	r3, #0
 8005316:	b510      	push	{r4, lr}
 8005318:	4604      	mov	r4, r0
 800531a:	e9c0 3300 	strd	r3, r3, [r0]
 800531e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005322:	6083      	str	r3, [r0, #8]
 8005324:	8181      	strh	r1, [r0, #12]
 8005326:	6643      	str	r3, [r0, #100]	@ 0x64
 8005328:	81c2      	strh	r2, [r0, #14]
 800532a:	6183      	str	r3, [r0, #24]
 800532c:	4619      	mov	r1, r3
 800532e:	2208      	movs	r2, #8
 8005330:	305c      	adds	r0, #92	@ 0x5c
 8005332:	f000 fa21 	bl	8005778 <memset>
 8005336:	4b0d      	ldr	r3, [pc, #52]	@ (800536c <std+0x58>)
 8005338:	6263      	str	r3, [r4, #36]	@ 0x24
 800533a:	4b0d      	ldr	r3, [pc, #52]	@ (8005370 <std+0x5c>)
 800533c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800533e:	4b0d      	ldr	r3, [pc, #52]	@ (8005374 <std+0x60>)
 8005340:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005342:	4b0d      	ldr	r3, [pc, #52]	@ (8005378 <std+0x64>)
 8005344:	6323      	str	r3, [r4, #48]	@ 0x30
 8005346:	4b0d      	ldr	r3, [pc, #52]	@ (800537c <std+0x68>)
 8005348:	6224      	str	r4, [r4, #32]
 800534a:	429c      	cmp	r4, r3
 800534c:	d006      	beq.n	800535c <std+0x48>
 800534e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005352:	4294      	cmp	r4, r2
 8005354:	d002      	beq.n	800535c <std+0x48>
 8005356:	33d0      	adds	r3, #208	@ 0xd0
 8005358:	429c      	cmp	r4, r3
 800535a:	d105      	bne.n	8005368 <std+0x54>
 800535c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005364:	f000 bb68 	b.w	8005a38 <__retarget_lock_init_recursive>
 8005368:	bd10      	pop	{r4, pc}
 800536a:	bf00      	nop
 800536c:	080055c9 	.word	0x080055c9
 8005370:	080055eb 	.word	0x080055eb
 8005374:	08005623 	.word	0x08005623
 8005378:	08005647 	.word	0x08005647
 800537c:	20004a54 	.word	0x20004a54

08005380 <stdio_exit_handler>:
 8005380:	4a02      	ldr	r2, [pc, #8]	@ (800538c <stdio_exit_handler+0xc>)
 8005382:	4903      	ldr	r1, [pc, #12]	@ (8005390 <stdio_exit_handler+0x10>)
 8005384:	4803      	ldr	r0, [pc, #12]	@ (8005394 <stdio_exit_handler+0x14>)
 8005386:	f000 b869 	b.w	800545c <_fwalk_sglue>
 800538a:	bf00      	nop
 800538c:	20000028 	.word	0x20000028
 8005390:	08006601 	.word	0x08006601
 8005394:	20000038 	.word	0x20000038

08005398 <cleanup_stdio>:
 8005398:	6841      	ldr	r1, [r0, #4]
 800539a:	4b0c      	ldr	r3, [pc, #48]	@ (80053cc <cleanup_stdio+0x34>)
 800539c:	4299      	cmp	r1, r3
 800539e:	b510      	push	{r4, lr}
 80053a0:	4604      	mov	r4, r0
 80053a2:	d001      	beq.n	80053a8 <cleanup_stdio+0x10>
 80053a4:	f001 f92c 	bl	8006600 <_fflush_r>
 80053a8:	68a1      	ldr	r1, [r4, #8]
 80053aa:	4b09      	ldr	r3, [pc, #36]	@ (80053d0 <cleanup_stdio+0x38>)
 80053ac:	4299      	cmp	r1, r3
 80053ae:	d002      	beq.n	80053b6 <cleanup_stdio+0x1e>
 80053b0:	4620      	mov	r0, r4
 80053b2:	f001 f925 	bl	8006600 <_fflush_r>
 80053b6:	68e1      	ldr	r1, [r4, #12]
 80053b8:	4b06      	ldr	r3, [pc, #24]	@ (80053d4 <cleanup_stdio+0x3c>)
 80053ba:	4299      	cmp	r1, r3
 80053bc:	d004      	beq.n	80053c8 <cleanup_stdio+0x30>
 80053be:	4620      	mov	r0, r4
 80053c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053c4:	f001 b91c 	b.w	8006600 <_fflush_r>
 80053c8:	bd10      	pop	{r4, pc}
 80053ca:	bf00      	nop
 80053cc:	20004a54 	.word	0x20004a54
 80053d0:	20004abc 	.word	0x20004abc
 80053d4:	20004b24 	.word	0x20004b24

080053d8 <global_stdio_init.part.0>:
 80053d8:	b510      	push	{r4, lr}
 80053da:	4b0b      	ldr	r3, [pc, #44]	@ (8005408 <global_stdio_init.part.0+0x30>)
 80053dc:	4c0b      	ldr	r4, [pc, #44]	@ (800540c <global_stdio_init.part.0+0x34>)
 80053de:	4a0c      	ldr	r2, [pc, #48]	@ (8005410 <global_stdio_init.part.0+0x38>)
 80053e0:	601a      	str	r2, [r3, #0]
 80053e2:	4620      	mov	r0, r4
 80053e4:	2200      	movs	r2, #0
 80053e6:	2104      	movs	r1, #4
 80053e8:	f7ff ff94 	bl	8005314 <std>
 80053ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80053f0:	2201      	movs	r2, #1
 80053f2:	2109      	movs	r1, #9
 80053f4:	f7ff ff8e 	bl	8005314 <std>
 80053f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80053fc:	2202      	movs	r2, #2
 80053fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005402:	2112      	movs	r1, #18
 8005404:	f7ff bf86 	b.w	8005314 <std>
 8005408:	20004b8c 	.word	0x20004b8c
 800540c:	20004a54 	.word	0x20004a54
 8005410:	08005381 	.word	0x08005381

08005414 <__sfp_lock_acquire>:
 8005414:	4801      	ldr	r0, [pc, #4]	@ (800541c <__sfp_lock_acquire+0x8>)
 8005416:	f000 bb10 	b.w	8005a3a <__retarget_lock_acquire_recursive>
 800541a:	bf00      	nop
 800541c:	20004b95 	.word	0x20004b95

08005420 <__sfp_lock_release>:
 8005420:	4801      	ldr	r0, [pc, #4]	@ (8005428 <__sfp_lock_release+0x8>)
 8005422:	f000 bb0b 	b.w	8005a3c <__retarget_lock_release_recursive>
 8005426:	bf00      	nop
 8005428:	20004b95 	.word	0x20004b95

0800542c <__sinit>:
 800542c:	b510      	push	{r4, lr}
 800542e:	4604      	mov	r4, r0
 8005430:	f7ff fff0 	bl	8005414 <__sfp_lock_acquire>
 8005434:	6a23      	ldr	r3, [r4, #32]
 8005436:	b11b      	cbz	r3, 8005440 <__sinit+0x14>
 8005438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800543c:	f7ff bff0 	b.w	8005420 <__sfp_lock_release>
 8005440:	4b04      	ldr	r3, [pc, #16]	@ (8005454 <__sinit+0x28>)
 8005442:	6223      	str	r3, [r4, #32]
 8005444:	4b04      	ldr	r3, [pc, #16]	@ (8005458 <__sinit+0x2c>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1f5      	bne.n	8005438 <__sinit+0xc>
 800544c:	f7ff ffc4 	bl	80053d8 <global_stdio_init.part.0>
 8005450:	e7f2      	b.n	8005438 <__sinit+0xc>
 8005452:	bf00      	nop
 8005454:	08005399 	.word	0x08005399
 8005458:	20004b8c 	.word	0x20004b8c

0800545c <_fwalk_sglue>:
 800545c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005460:	4607      	mov	r7, r0
 8005462:	4688      	mov	r8, r1
 8005464:	4614      	mov	r4, r2
 8005466:	2600      	movs	r6, #0
 8005468:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800546c:	f1b9 0901 	subs.w	r9, r9, #1
 8005470:	d505      	bpl.n	800547e <_fwalk_sglue+0x22>
 8005472:	6824      	ldr	r4, [r4, #0]
 8005474:	2c00      	cmp	r4, #0
 8005476:	d1f7      	bne.n	8005468 <_fwalk_sglue+0xc>
 8005478:	4630      	mov	r0, r6
 800547a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800547e:	89ab      	ldrh	r3, [r5, #12]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d907      	bls.n	8005494 <_fwalk_sglue+0x38>
 8005484:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005488:	3301      	adds	r3, #1
 800548a:	d003      	beq.n	8005494 <_fwalk_sglue+0x38>
 800548c:	4629      	mov	r1, r5
 800548e:	4638      	mov	r0, r7
 8005490:	47c0      	blx	r8
 8005492:	4306      	orrs	r6, r0
 8005494:	3568      	adds	r5, #104	@ 0x68
 8005496:	e7e9      	b.n	800546c <_fwalk_sglue+0x10>

08005498 <iprintf>:
 8005498:	b40f      	push	{r0, r1, r2, r3}
 800549a:	b507      	push	{r0, r1, r2, lr}
 800549c:	4906      	ldr	r1, [pc, #24]	@ (80054b8 <iprintf+0x20>)
 800549e:	ab04      	add	r3, sp, #16
 80054a0:	6808      	ldr	r0, [r1, #0]
 80054a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80054a6:	6881      	ldr	r1, [r0, #8]
 80054a8:	9301      	str	r3, [sp, #4]
 80054aa:	f000 fd7f 	bl	8005fac <_vfiprintf_r>
 80054ae:	b003      	add	sp, #12
 80054b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80054b4:	b004      	add	sp, #16
 80054b6:	4770      	bx	lr
 80054b8:	20000034 	.word	0x20000034

080054bc <putchar>:
 80054bc:	4b02      	ldr	r3, [pc, #8]	@ (80054c8 <putchar+0xc>)
 80054be:	4601      	mov	r1, r0
 80054c0:	6818      	ldr	r0, [r3, #0]
 80054c2:	6882      	ldr	r2, [r0, #8]
 80054c4:	f001 b938 	b.w	8006738 <_putc_r>
 80054c8:	20000034 	.word	0x20000034

080054cc <_puts_r>:
 80054cc:	6a03      	ldr	r3, [r0, #32]
 80054ce:	b570      	push	{r4, r5, r6, lr}
 80054d0:	6884      	ldr	r4, [r0, #8]
 80054d2:	4605      	mov	r5, r0
 80054d4:	460e      	mov	r6, r1
 80054d6:	b90b      	cbnz	r3, 80054dc <_puts_r+0x10>
 80054d8:	f7ff ffa8 	bl	800542c <__sinit>
 80054dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80054de:	07db      	lsls	r3, r3, #31
 80054e0:	d405      	bmi.n	80054ee <_puts_r+0x22>
 80054e2:	89a3      	ldrh	r3, [r4, #12]
 80054e4:	0598      	lsls	r0, r3, #22
 80054e6:	d402      	bmi.n	80054ee <_puts_r+0x22>
 80054e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054ea:	f000 faa6 	bl	8005a3a <__retarget_lock_acquire_recursive>
 80054ee:	89a3      	ldrh	r3, [r4, #12]
 80054f0:	0719      	lsls	r1, r3, #28
 80054f2:	d502      	bpl.n	80054fa <_puts_r+0x2e>
 80054f4:	6923      	ldr	r3, [r4, #16]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d135      	bne.n	8005566 <_puts_r+0x9a>
 80054fa:	4621      	mov	r1, r4
 80054fc:	4628      	mov	r0, r5
 80054fe:	f000 f8e5 	bl	80056cc <__swsetup_r>
 8005502:	b380      	cbz	r0, 8005566 <_puts_r+0x9a>
 8005504:	f04f 35ff 	mov.w	r5, #4294967295
 8005508:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800550a:	07da      	lsls	r2, r3, #31
 800550c:	d405      	bmi.n	800551a <_puts_r+0x4e>
 800550e:	89a3      	ldrh	r3, [r4, #12]
 8005510:	059b      	lsls	r3, r3, #22
 8005512:	d402      	bmi.n	800551a <_puts_r+0x4e>
 8005514:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005516:	f000 fa91 	bl	8005a3c <__retarget_lock_release_recursive>
 800551a:	4628      	mov	r0, r5
 800551c:	bd70      	pop	{r4, r5, r6, pc}
 800551e:	2b00      	cmp	r3, #0
 8005520:	da04      	bge.n	800552c <_puts_r+0x60>
 8005522:	69a2      	ldr	r2, [r4, #24]
 8005524:	429a      	cmp	r2, r3
 8005526:	dc17      	bgt.n	8005558 <_puts_r+0x8c>
 8005528:	290a      	cmp	r1, #10
 800552a:	d015      	beq.n	8005558 <_puts_r+0x8c>
 800552c:	6823      	ldr	r3, [r4, #0]
 800552e:	1c5a      	adds	r2, r3, #1
 8005530:	6022      	str	r2, [r4, #0]
 8005532:	7019      	strb	r1, [r3, #0]
 8005534:	68a3      	ldr	r3, [r4, #8]
 8005536:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800553a:	3b01      	subs	r3, #1
 800553c:	60a3      	str	r3, [r4, #8]
 800553e:	2900      	cmp	r1, #0
 8005540:	d1ed      	bne.n	800551e <_puts_r+0x52>
 8005542:	2b00      	cmp	r3, #0
 8005544:	da11      	bge.n	800556a <_puts_r+0x9e>
 8005546:	4622      	mov	r2, r4
 8005548:	210a      	movs	r1, #10
 800554a:	4628      	mov	r0, r5
 800554c:	f000 f87f 	bl	800564e <__swbuf_r>
 8005550:	3001      	adds	r0, #1
 8005552:	d0d7      	beq.n	8005504 <_puts_r+0x38>
 8005554:	250a      	movs	r5, #10
 8005556:	e7d7      	b.n	8005508 <_puts_r+0x3c>
 8005558:	4622      	mov	r2, r4
 800555a:	4628      	mov	r0, r5
 800555c:	f000 f877 	bl	800564e <__swbuf_r>
 8005560:	3001      	adds	r0, #1
 8005562:	d1e7      	bne.n	8005534 <_puts_r+0x68>
 8005564:	e7ce      	b.n	8005504 <_puts_r+0x38>
 8005566:	3e01      	subs	r6, #1
 8005568:	e7e4      	b.n	8005534 <_puts_r+0x68>
 800556a:	6823      	ldr	r3, [r4, #0]
 800556c:	1c5a      	adds	r2, r3, #1
 800556e:	6022      	str	r2, [r4, #0]
 8005570:	220a      	movs	r2, #10
 8005572:	701a      	strb	r2, [r3, #0]
 8005574:	e7ee      	b.n	8005554 <_puts_r+0x88>
	...

08005578 <puts>:
 8005578:	4b02      	ldr	r3, [pc, #8]	@ (8005584 <puts+0xc>)
 800557a:	4601      	mov	r1, r0
 800557c:	6818      	ldr	r0, [r3, #0]
 800557e:	f7ff bfa5 	b.w	80054cc <_puts_r>
 8005582:	bf00      	nop
 8005584:	20000034 	.word	0x20000034

08005588 <siprintf>:
 8005588:	b40e      	push	{r1, r2, r3}
 800558a:	b500      	push	{lr}
 800558c:	b09c      	sub	sp, #112	@ 0x70
 800558e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005590:	9002      	str	r0, [sp, #8]
 8005592:	9006      	str	r0, [sp, #24]
 8005594:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005598:	4809      	ldr	r0, [pc, #36]	@ (80055c0 <siprintf+0x38>)
 800559a:	9107      	str	r1, [sp, #28]
 800559c:	9104      	str	r1, [sp, #16]
 800559e:	4909      	ldr	r1, [pc, #36]	@ (80055c4 <siprintf+0x3c>)
 80055a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80055a4:	9105      	str	r1, [sp, #20]
 80055a6:	6800      	ldr	r0, [r0, #0]
 80055a8:	9301      	str	r3, [sp, #4]
 80055aa:	a902      	add	r1, sp, #8
 80055ac:	f000 fbd8 	bl	8005d60 <_svfiprintf_r>
 80055b0:	9b02      	ldr	r3, [sp, #8]
 80055b2:	2200      	movs	r2, #0
 80055b4:	701a      	strb	r2, [r3, #0]
 80055b6:	b01c      	add	sp, #112	@ 0x70
 80055b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80055bc:	b003      	add	sp, #12
 80055be:	4770      	bx	lr
 80055c0:	20000034 	.word	0x20000034
 80055c4:	ffff0208 	.word	0xffff0208

080055c8 <__sread>:
 80055c8:	b510      	push	{r4, lr}
 80055ca:	460c      	mov	r4, r1
 80055cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055d0:	f000 f9e4 	bl	800599c <_read_r>
 80055d4:	2800      	cmp	r0, #0
 80055d6:	bfab      	itete	ge
 80055d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80055da:	89a3      	ldrhlt	r3, [r4, #12]
 80055dc:	181b      	addge	r3, r3, r0
 80055de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80055e2:	bfac      	ite	ge
 80055e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80055e6:	81a3      	strhlt	r3, [r4, #12]
 80055e8:	bd10      	pop	{r4, pc}

080055ea <__swrite>:
 80055ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055ee:	461f      	mov	r7, r3
 80055f0:	898b      	ldrh	r3, [r1, #12]
 80055f2:	05db      	lsls	r3, r3, #23
 80055f4:	4605      	mov	r5, r0
 80055f6:	460c      	mov	r4, r1
 80055f8:	4616      	mov	r6, r2
 80055fa:	d505      	bpl.n	8005608 <__swrite+0x1e>
 80055fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005600:	2302      	movs	r3, #2
 8005602:	2200      	movs	r2, #0
 8005604:	f000 f9b8 	bl	8005978 <_lseek_r>
 8005608:	89a3      	ldrh	r3, [r4, #12]
 800560a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800560e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005612:	81a3      	strh	r3, [r4, #12]
 8005614:	4632      	mov	r2, r6
 8005616:	463b      	mov	r3, r7
 8005618:	4628      	mov	r0, r5
 800561a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800561e:	f000 b9cf 	b.w	80059c0 <_write_r>

08005622 <__sseek>:
 8005622:	b510      	push	{r4, lr}
 8005624:	460c      	mov	r4, r1
 8005626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800562a:	f000 f9a5 	bl	8005978 <_lseek_r>
 800562e:	1c43      	adds	r3, r0, #1
 8005630:	89a3      	ldrh	r3, [r4, #12]
 8005632:	bf15      	itete	ne
 8005634:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005636:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800563a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800563e:	81a3      	strheq	r3, [r4, #12]
 8005640:	bf18      	it	ne
 8005642:	81a3      	strhne	r3, [r4, #12]
 8005644:	bd10      	pop	{r4, pc}

08005646 <__sclose>:
 8005646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800564a:	f000 b92f 	b.w	80058ac <_close_r>

0800564e <__swbuf_r>:
 800564e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005650:	460e      	mov	r6, r1
 8005652:	4614      	mov	r4, r2
 8005654:	4605      	mov	r5, r0
 8005656:	b118      	cbz	r0, 8005660 <__swbuf_r+0x12>
 8005658:	6a03      	ldr	r3, [r0, #32]
 800565a:	b90b      	cbnz	r3, 8005660 <__swbuf_r+0x12>
 800565c:	f7ff fee6 	bl	800542c <__sinit>
 8005660:	69a3      	ldr	r3, [r4, #24]
 8005662:	60a3      	str	r3, [r4, #8]
 8005664:	89a3      	ldrh	r3, [r4, #12]
 8005666:	071a      	lsls	r2, r3, #28
 8005668:	d501      	bpl.n	800566e <__swbuf_r+0x20>
 800566a:	6923      	ldr	r3, [r4, #16]
 800566c:	b943      	cbnz	r3, 8005680 <__swbuf_r+0x32>
 800566e:	4621      	mov	r1, r4
 8005670:	4628      	mov	r0, r5
 8005672:	f000 f82b 	bl	80056cc <__swsetup_r>
 8005676:	b118      	cbz	r0, 8005680 <__swbuf_r+0x32>
 8005678:	f04f 37ff 	mov.w	r7, #4294967295
 800567c:	4638      	mov	r0, r7
 800567e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005680:	6823      	ldr	r3, [r4, #0]
 8005682:	6922      	ldr	r2, [r4, #16]
 8005684:	1a98      	subs	r0, r3, r2
 8005686:	6963      	ldr	r3, [r4, #20]
 8005688:	b2f6      	uxtb	r6, r6
 800568a:	4283      	cmp	r3, r0
 800568c:	4637      	mov	r7, r6
 800568e:	dc05      	bgt.n	800569c <__swbuf_r+0x4e>
 8005690:	4621      	mov	r1, r4
 8005692:	4628      	mov	r0, r5
 8005694:	f000 ffb4 	bl	8006600 <_fflush_r>
 8005698:	2800      	cmp	r0, #0
 800569a:	d1ed      	bne.n	8005678 <__swbuf_r+0x2a>
 800569c:	68a3      	ldr	r3, [r4, #8]
 800569e:	3b01      	subs	r3, #1
 80056a0:	60a3      	str	r3, [r4, #8]
 80056a2:	6823      	ldr	r3, [r4, #0]
 80056a4:	1c5a      	adds	r2, r3, #1
 80056a6:	6022      	str	r2, [r4, #0]
 80056a8:	701e      	strb	r6, [r3, #0]
 80056aa:	6962      	ldr	r2, [r4, #20]
 80056ac:	1c43      	adds	r3, r0, #1
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d004      	beq.n	80056bc <__swbuf_r+0x6e>
 80056b2:	89a3      	ldrh	r3, [r4, #12]
 80056b4:	07db      	lsls	r3, r3, #31
 80056b6:	d5e1      	bpl.n	800567c <__swbuf_r+0x2e>
 80056b8:	2e0a      	cmp	r6, #10
 80056ba:	d1df      	bne.n	800567c <__swbuf_r+0x2e>
 80056bc:	4621      	mov	r1, r4
 80056be:	4628      	mov	r0, r5
 80056c0:	f000 ff9e 	bl	8006600 <_fflush_r>
 80056c4:	2800      	cmp	r0, #0
 80056c6:	d0d9      	beq.n	800567c <__swbuf_r+0x2e>
 80056c8:	e7d6      	b.n	8005678 <__swbuf_r+0x2a>
	...

080056cc <__swsetup_r>:
 80056cc:	b538      	push	{r3, r4, r5, lr}
 80056ce:	4b29      	ldr	r3, [pc, #164]	@ (8005774 <__swsetup_r+0xa8>)
 80056d0:	4605      	mov	r5, r0
 80056d2:	6818      	ldr	r0, [r3, #0]
 80056d4:	460c      	mov	r4, r1
 80056d6:	b118      	cbz	r0, 80056e0 <__swsetup_r+0x14>
 80056d8:	6a03      	ldr	r3, [r0, #32]
 80056da:	b90b      	cbnz	r3, 80056e0 <__swsetup_r+0x14>
 80056dc:	f7ff fea6 	bl	800542c <__sinit>
 80056e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056e4:	0719      	lsls	r1, r3, #28
 80056e6:	d422      	bmi.n	800572e <__swsetup_r+0x62>
 80056e8:	06da      	lsls	r2, r3, #27
 80056ea:	d407      	bmi.n	80056fc <__swsetup_r+0x30>
 80056ec:	2209      	movs	r2, #9
 80056ee:	602a      	str	r2, [r5, #0]
 80056f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056f4:	81a3      	strh	r3, [r4, #12]
 80056f6:	f04f 30ff 	mov.w	r0, #4294967295
 80056fa:	e033      	b.n	8005764 <__swsetup_r+0x98>
 80056fc:	0758      	lsls	r0, r3, #29
 80056fe:	d512      	bpl.n	8005726 <__swsetup_r+0x5a>
 8005700:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005702:	b141      	cbz	r1, 8005716 <__swsetup_r+0x4a>
 8005704:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005708:	4299      	cmp	r1, r3
 800570a:	d002      	beq.n	8005712 <__swsetup_r+0x46>
 800570c:	4628      	mov	r0, r5
 800570e:	f000 f9cb 	bl	8005aa8 <_free_r>
 8005712:	2300      	movs	r3, #0
 8005714:	6363      	str	r3, [r4, #52]	@ 0x34
 8005716:	89a3      	ldrh	r3, [r4, #12]
 8005718:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800571c:	81a3      	strh	r3, [r4, #12]
 800571e:	2300      	movs	r3, #0
 8005720:	6063      	str	r3, [r4, #4]
 8005722:	6923      	ldr	r3, [r4, #16]
 8005724:	6023      	str	r3, [r4, #0]
 8005726:	89a3      	ldrh	r3, [r4, #12]
 8005728:	f043 0308 	orr.w	r3, r3, #8
 800572c:	81a3      	strh	r3, [r4, #12]
 800572e:	6923      	ldr	r3, [r4, #16]
 8005730:	b94b      	cbnz	r3, 8005746 <__swsetup_r+0x7a>
 8005732:	89a3      	ldrh	r3, [r4, #12]
 8005734:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005738:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800573c:	d003      	beq.n	8005746 <__swsetup_r+0x7a>
 800573e:	4621      	mov	r1, r4
 8005740:	4628      	mov	r0, r5
 8005742:	f000 ffbd 	bl	80066c0 <__smakebuf_r>
 8005746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800574a:	f013 0201 	ands.w	r2, r3, #1
 800574e:	d00a      	beq.n	8005766 <__swsetup_r+0x9a>
 8005750:	2200      	movs	r2, #0
 8005752:	60a2      	str	r2, [r4, #8]
 8005754:	6962      	ldr	r2, [r4, #20]
 8005756:	4252      	negs	r2, r2
 8005758:	61a2      	str	r2, [r4, #24]
 800575a:	6922      	ldr	r2, [r4, #16]
 800575c:	b942      	cbnz	r2, 8005770 <__swsetup_r+0xa4>
 800575e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005762:	d1c5      	bne.n	80056f0 <__swsetup_r+0x24>
 8005764:	bd38      	pop	{r3, r4, r5, pc}
 8005766:	0799      	lsls	r1, r3, #30
 8005768:	bf58      	it	pl
 800576a:	6962      	ldrpl	r2, [r4, #20]
 800576c:	60a2      	str	r2, [r4, #8]
 800576e:	e7f4      	b.n	800575a <__swsetup_r+0x8e>
 8005770:	2000      	movs	r0, #0
 8005772:	e7f7      	b.n	8005764 <__swsetup_r+0x98>
 8005774:	20000034 	.word	0x20000034

08005778 <memset>:
 8005778:	4402      	add	r2, r0
 800577a:	4603      	mov	r3, r0
 800577c:	4293      	cmp	r3, r2
 800577e:	d100      	bne.n	8005782 <memset+0xa>
 8005780:	4770      	bx	lr
 8005782:	f803 1b01 	strb.w	r1, [r3], #1
 8005786:	e7f9      	b.n	800577c <memset+0x4>

08005788 <strchr>:
 8005788:	b2c9      	uxtb	r1, r1
 800578a:	4603      	mov	r3, r0
 800578c:	4618      	mov	r0, r3
 800578e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005792:	b112      	cbz	r2, 800579a <strchr+0x12>
 8005794:	428a      	cmp	r2, r1
 8005796:	d1f9      	bne.n	800578c <strchr+0x4>
 8005798:	4770      	bx	lr
 800579a:	2900      	cmp	r1, #0
 800579c:	bf18      	it	ne
 800579e:	2000      	movne	r0, #0
 80057a0:	4770      	bx	lr

080057a2 <strncmp>:
 80057a2:	b510      	push	{r4, lr}
 80057a4:	b16a      	cbz	r2, 80057c2 <strncmp+0x20>
 80057a6:	3901      	subs	r1, #1
 80057a8:	1884      	adds	r4, r0, r2
 80057aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057ae:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d103      	bne.n	80057be <strncmp+0x1c>
 80057b6:	42a0      	cmp	r0, r4
 80057b8:	d001      	beq.n	80057be <strncmp+0x1c>
 80057ba:	2a00      	cmp	r2, #0
 80057bc:	d1f5      	bne.n	80057aa <strncmp+0x8>
 80057be:	1ad0      	subs	r0, r2, r3
 80057c0:	bd10      	pop	{r4, pc}
 80057c2:	4610      	mov	r0, r2
 80057c4:	e7fc      	b.n	80057c0 <strncmp+0x1e>
	...

080057c8 <strtok>:
 80057c8:	4b16      	ldr	r3, [pc, #88]	@ (8005824 <strtok+0x5c>)
 80057ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057ce:	681f      	ldr	r7, [r3, #0]
 80057d0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80057d2:	4605      	mov	r5, r0
 80057d4:	460e      	mov	r6, r1
 80057d6:	b9ec      	cbnz	r4, 8005814 <strtok+0x4c>
 80057d8:	2050      	movs	r0, #80	@ 0x50
 80057da:	f000 f9af 	bl	8005b3c <malloc>
 80057de:	4602      	mov	r2, r0
 80057e0:	6478      	str	r0, [r7, #68]	@ 0x44
 80057e2:	b920      	cbnz	r0, 80057ee <strtok+0x26>
 80057e4:	4b10      	ldr	r3, [pc, #64]	@ (8005828 <strtok+0x60>)
 80057e6:	4811      	ldr	r0, [pc, #68]	@ (800582c <strtok+0x64>)
 80057e8:	215b      	movs	r1, #91	@ 0x5b
 80057ea:	f000 f93f 	bl	8005a6c <__assert_func>
 80057ee:	e9c0 4400 	strd	r4, r4, [r0]
 80057f2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80057f6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80057fa:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80057fe:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8005802:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8005806:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800580a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800580e:	6184      	str	r4, [r0, #24]
 8005810:	7704      	strb	r4, [r0, #28]
 8005812:	6244      	str	r4, [r0, #36]	@ 0x24
 8005814:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005816:	4631      	mov	r1, r6
 8005818:	4628      	mov	r0, r5
 800581a:	2301      	movs	r3, #1
 800581c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005820:	f000 b806 	b.w	8005830 <__strtok_r>
 8005824:	20000034 	.word	0x20000034
 8005828:	0800709d 	.word	0x0800709d
 800582c:	080070b4 	.word	0x080070b4

08005830 <__strtok_r>:
 8005830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005832:	4604      	mov	r4, r0
 8005834:	b908      	cbnz	r0, 800583a <__strtok_r+0xa>
 8005836:	6814      	ldr	r4, [r2, #0]
 8005838:	b144      	cbz	r4, 800584c <__strtok_r+0x1c>
 800583a:	4620      	mov	r0, r4
 800583c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005840:	460f      	mov	r7, r1
 8005842:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005846:	b91e      	cbnz	r6, 8005850 <__strtok_r+0x20>
 8005848:	b965      	cbnz	r5, 8005864 <__strtok_r+0x34>
 800584a:	6015      	str	r5, [r2, #0]
 800584c:	2000      	movs	r0, #0
 800584e:	e005      	b.n	800585c <__strtok_r+0x2c>
 8005850:	42b5      	cmp	r5, r6
 8005852:	d1f6      	bne.n	8005842 <__strtok_r+0x12>
 8005854:	2b00      	cmp	r3, #0
 8005856:	d1f0      	bne.n	800583a <__strtok_r+0xa>
 8005858:	6014      	str	r4, [r2, #0]
 800585a:	7003      	strb	r3, [r0, #0]
 800585c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800585e:	461c      	mov	r4, r3
 8005860:	e00c      	b.n	800587c <__strtok_r+0x4c>
 8005862:	b915      	cbnz	r5, 800586a <__strtok_r+0x3a>
 8005864:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005868:	460e      	mov	r6, r1
 800586a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800586e:	42ab      	cmp	r3, r5
 8005870:	d1f7      	bne.n	8005862 <__strtok_r+0x32>
 8005872:	2b00      	cmp	r3, #0
 8005874:	d0f3      	beq.n	800585e <__strtok_r+0x2e>
 8005876:	2300      	movs	r3, #0
 8005878:	f804 3c01 	strb.w	r3, [r4, #-1]
 800587c:	6014      	str	r4, [r2, #0]
 800587e:	e7ed      	b.n	800585c <__strtok_r+0x2c>

08005880 <strstr>:
 8005880:	780a      	ldrb	r2, [r1, #0]
 8005882:	b570      	push	{r4, r5, r6, lr}
 8005884:	b96a      	cbnz	r2, 80058a2 <strstr+0x22>
 8005886:	bd70      	pop	{r4, r5, r6, pc}
 8005888:	429a      	cmp	r2, r3
 800588a:	d109      	bne.n	80058a0 <strstr+0x20>
 800588c:	460c      	mov	r4, r1
 800588e:	4605      	mov	r5, r0
 8005890:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005894:	2b00      	cmp	r3, #0
 8005896:	d0f6      	beq.n	8005886 <strstr+0x6>
 8005898:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800589c:	429e      	cmp	r6, r3
 800589e:	d0f7      	beq.n	8005890 <strstr+0x10>
 80058a0:	3001      	adds	r0, #1
 80058a2:	7803      	ldrb	r3, [r0, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1ef      	bne.n	8005888 <strstr+0x8>
 80058a8:	4618      	mov	r0, r3
 80058aa:	e7ec      	b.n	8005886 <strstr+0x6>

080058ac <_close_r>:
 80058ac:	b538      	push	{r3, r4, r5, lr}
 80058ae:	4d06      	ldr	r5, [pc, #24]	@ (80058c8 <_close_r+0x1c>)
 80058b0:	2300      	movs	r3, #0
 80058b2:	4604      	mov	r4, r0
 80058b4:	4608      	mov	r0, r1
 80058b6:	602b      	str	r3, [r5, #0]
 80058b8:	f7fb fd70 	bl	800139c <_close>
 80058bc:	1c43      	adds	r3, r0, #1
 80058be:	d102      	bne.n	80058c6 <_close_r+0x1a>
 80058c0:	682b      	ldr	r3, [r5, #0]
 80058c2:	b103      	cbz	r3, 80058c6 <_close_r+0x1a>
 80058c4:	6023      	str	r3, [r4, #0]
 80058c6:	bd38      	pop	{r3, r4, r5, pc}
 80058c8:	20004b90 	.word	0x20004b90

080058cc <_reclaim_reent>:
 80058cc:	4b29      	ldr	r3, [pc, #164]	@ (8005974 <_reclaim_reent+0xa8>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4283      	cmp	r3, r0
 80058d2:	b570      	push	{r4, r5, r6, lr}
 80058d4:	4604      	mov	r4, r0
 80058d6:	d04b      	beq.n	8005970 <_reclaim_reent+0xa4>
 80058d8:	69c3      	ldr	r3, [r0, #28]
 80058da:	b1ab      	cbz	r3, 8005908 <_reclaim_reent+0x3c>
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	b16b      	cbz	r3, 80058fc <_reclaim_reent+0x30>
 80058e0:	2500      	movs	r5, #0
 80058e2:	69e3      	ldr	r3, [r4, #28]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	5959      	ldr	r1, [r3, r5]
 80058e8:	2900      	cmp	r1, #0
 80058ea:	d13b      	bne.n	8005964 <_reclaim_reent+0x98>
 80058ec:	3504      	adds	r5, #4
 80058ee:	2d80      	cmp	r5, #128	@ 0x80
 80058f0:	d1f7      	bne.n	80058e2 <_reclaim_reent+0x16>
 80058f2:	69e3      	ldr	r3, [r4, #28]
 80058f4:	4620      	mov	r0, r4
 80058f6:	68d9      	ldr	r1, [r3, #12]
 80058f8:	f000 f8d6 	bl	8005aa8 <_free_r>
 80058fc:	69e3      	ldr	r3, [r4, #28]
 80058fe:	6819      	ldr	r1, [r3, #0]
 8005900:	b111      	cbz	r1, 8005908 <_reclaim_reent+0x3c>
 8005902:	4620      	mov	r0, r4
 8005904:	f000 f8d0 	bl	8005aa8 <_free_r>
 8005908:	6961      	ldr	r1, [r4, #20]
 800590a:	b111      	cbz	r1, 8005912 <_reclaim_reent+0x46>
 800590c:	4620      	mov	r0, r4
 800590e:	f000 f8cb 	bl	8005aa8 <_free_r>
 8005912:	69e1      	ldr	r1, [r4, #28]
 8005914:	b111      	cbz	r1, 800591c <_reclaim_reent+0x50>
 8005916:	4620      	mov	r0, r4
 8005918:	f000 f8c6 	bl	8005aa8 <_free_r>
 800591c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800591e:	b111      	cbz	r1, 8005926 <_reclaim_reent+0x5a>
 8005920:	4620      	mov	r0, r4
 8005922:	f000 f8c1 	bl	8005aa8 <_free_r>
 8005926:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005928:	b111      	cbz	r1, 8005930 <_reclaim_reent+0x64>
 800592a:	4620      	mov	r0, r4
 800592c:	f000 f8bc 	bl	8005aa8 <_free_r>
 8005930:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005932:	b111      	cbz	r1, 800593a <_reclaim_reent+0x6e>
 8005934:	4620      	mov	r0, r4
 8005936:	f000 f8b7 	bl	8005aa8 <_free_r>
 800593a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800593c:	b111      	cbz	r1, 8005944 <_reclaim_reent+0x78>
 800593e:	4620      	mov	r0, r4
 8005940:	f000 f8b2 	bl	8005aa8 <_free_r>
 8005944:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005946:	b111      	cbz	r1, 800594e <_reclaim_reent+0x82>
 8005948:	4620      	mov	r0, r4
 800594a:	f000 f8ad 	bl	8005aa8 <_free_r>
 800594e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005950:	b111      	cbz	r1, 8005958 <_reclaim_reent+0x8c>
 8005952:	4620      	mov	r0, r4
 8005954:	f000 f8a8 	bl	8005aa8 <_free_r>
 8005958:	6a23      	ldr	r3, [r4, #32]
 800595a:	b14b      	cbz	r3, 8005970 <_reclaim_reent+0xa4>
 800595c:	4620      	mov	r0, r4
 800595e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005962:	4718      	bx	r3
 8005964:	680e      	ldr	r6, [r1, #0]
 8005966:	4620      	mov	r0, r4
 8005968:	f000 f89e 	bl	8005aa8 <_free_r>
 800596c:	4631      	mov	r1, r6
 800596e:	e7bb      	b.n	80058e8 <_reclaim_reent+0x1c>
 8005970:	bd70      	pop	{r4, r5, r6, pc}
 8005972:	bf00      	nop
 8005974:	20000034 	.word	0x20000034

08005978 <_lseek_r>:
 8005978:	b538      	push	{r3, r4, r5, lr}
 800597a:	4d07      	ldr	r5, [pc, #28]	@ (8005998 <_lseek_r+0x20>)
 800597c:	4604      	mov	r4, r0
 800597e:	4608      	mov	r0, r1
 8005980:	4611      	mov	r1, r2
 8005982:	2200      	movs	r2, #0
 8005984:	602a      	str	r2, [r5, #0]
 8005986:	461a      	mov	r2, r3
 8005988:	f7fb fd2f 	bl	80013ea <_lseek>
 800598c:	1c43      	adds	r3, r0, #1
 800598e:	d102      	bne.n	8005996 <_lseek_r+0x1e>
 8005990:	682b      	ldr	r3, [r5, #0]
 8005992:	b103      	cbz	r3, 8005996 <_lseek_r+0x1e>
 8005994:	6023      	str	r3, [r4, #0]
 8005996:	bd38      	pop	{r3, r4, r5, pc}
 8005998:	20004b90 	.word	0x20004b90

0800599c <_read_r>:
 800599c:	b538      	push	{r3, r4, r5, lr}
 800599e:	4d07      	ldr	r5, [pc, #28]	@ (80059bc <_read_r+0x20>)
 80059a0:	4604      	mov	r4, r0
 80059a2:	4608      	mov	r0, r1
 80059a4:	4611      	mov	r1, r2
 80059a6:	2200      	movs	r2, #0
 80059a8:	602a      	str	r2, [r5, #0]
 80059aa:	461a      	mov	r2, r3
 80059ac:	f7fb fcbd 	bl	800132a <_read>
 80059b0:	1c43      	adds	r3, r0, #1
 80059b2:	d102      	bne.n	80059ba <_read_r+0x1e>
 80059b4:	682b      	ldr	r3, [r5, #0]
 80059b6:	b103      	cbz	r3, 80059ba <_read_r+0x1e>
 80059b8:	6023      	str	r3, [r4, #0]
 80059ba:	bd38      	pop	{r3, r4, r5, pc}
 80059bc:	20004b90 	.word	0x20004b90

080059c0 <_write_r>:
 80059c0:	b538      	push	{r3, r4, r5, lr}
 80059c2:	4d07      	ldr	r5, [pc, #28]	@ (80059e0 <_write_r+0x20>)
 80059c4:	4604      	mov	r4, r0
 80059c6:	4608      	mov	r0, r1
 80059c8:	4611      	mov	r1, r2
 80059ca:	2200      	movs	r2, #0
 80059cc:	602a      	str	r2, [r5, #0]
 80059ce:	461a      	mov	r2, r3
 80059d0:	f7fb fcc8 	bl	8001364 <_write>
 80059d4:	1c43      	adds	r3, r0, #1
 80059d6:	d102      	bne.n	80059de <_write_r+0x1e>
 80059d8:	682b      	ldr	r3, [r5, #0]
 80059da:	b103      	cbz	r3, 80059de <_write_r+0x1e>
 80059dc:	6023      	str	r3, [r4, #0]
 80059de:	bd38      	pop	{r3, r4, r5, pc}
 80059e0:	20004b90 	.word	0x20004b90

080059e4 <__errno>:
 80059e4:	4b01      	ldr	r3, [pc, #4]	@ (80059ec <__errno+0x8>)
 80059e6:	6818      	ldr	r0, [r3, #0]
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	20000034 	.word	0x20000034

080059f0 <__libc_init_array>:
 80059f0:	b570      	push	{r4, r5, r6, lr}
 80059f2:	4d0d      	ldr	r5, [pc, #52]	@ (8005a28 <__libc_init_array+0x38>)
 80059f4:	4c0d      	ldr	r4, [pc, #52]	@ (8005a2c <__libc_init_array+0x3c>)
 80059f6:	1b64      	subs	r4, r4, r5
 80059f8:	10a4      	asrs	r4, r4, #2
 80059fa:	2600      	movs	r6, #0
 80059fc:	42a6      	cmp	r6, r4
 80059fe:	d109      	bne.n	8005a14 <__libc_init_array+0x24>
 8005a00:	4d0b      	ldr	r5, [pc, #44]	@ (8005a30 <__libc_init_array+0x40>)
 8005a02:	4c0c      	ldr	r4, [pc, #48]	@ (8005a34 <__libc_init_array+0x44>)
 8005a04:	f000 ff9a 	bl	800693c <_init>
 8005a08:	1b64      	subs	r4, r4, r5
 8005a0a:	10a4      	asrs	r4, r4, #2
 8005a0c:	2600      	movs	r6, #0
 8005a0e:	42a6      	cmp	r6, r4
 8005a10:	d105      	bne.n	8005a1e <__libc_init_array+0x2e>
 8005a12:	bd70      	pop	{r4, r5, r6, pc}
 8005a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a18:	4798      	blx	r3
 8005a1a:	3601      	adds	r6, #1
 8005a1c:	e7ee      	b.n	80059fc <__libc_init_array+0xc>
 8005a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a22:	4798      	blx	r3
 8005a24:	3601      	adds	r6, #1
 8005a26:	e7f2      	b.n	8005a0e <__libc_init_array+0x1e>
 8005a28:	08007188 	.word	0x08007188
 8005a2c:	08007188 	.word	0x08007188
 8005a30:	08007188 	.word	0x08007188
 8005a34:	0800718c 	.word	0x0800718c

08005a38 <__retarget_lock_init_recursive>:
 8005a38:	4770      	bx	lr

08005a3a <__retarget_lock_acquire_recursive>:
 8005a3a:	4770      	bx	lr

08005a3c <__retarget_lock_release_recursive>:
 8005a3c:	4770      	bx	lr

08005a3e <strcpy>:
 8005a3e:	4603      	mov	r3, r0
 8005a40:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a44:	f803 2b01 	strb.w	r2, [r3], #1
 8005a48:	2a00      	cmp	r2, #0
 8005a4a:	d1f9      	bne.n	8005a40 <strcpy+0x2>
 8005a4c:	4770      	bx	lr

08005a4e <memcpy>:
 8005a4e:	440a      	add	r2, r1
 8005a50:	4291      	cmp	r1, r2
 8005a52:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a56:	d100      	bne.n	8005a5a <memcpy+0xc>
 8005a58:	4770      	bx	lr
 8005a5a:	b510      	push	{r4, lr}
 8005a5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a64:	4291      	cmp	r1, r2
 8005a66:	d1f9      	bne.n	8005a5c <memcpy+0xe>
 8005a68:	bd10      	pop	{r4, pc}
	...

08005a6c <__assert_func>:
 8005a6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005a6e:	4614      	mov	r4, r2
 8005a70:	461a      	mov	r2, r3
 8005a72:	4b09      	ldr	r3, [pc, #36]	@ (8005a98 <__assert_func+0x2c>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4605      	mov	r5, r0
 8005a78:	68d8      	ldr	r0, [r3, #12]
 8005a7a:	b954      	cbnz	r4, 8005a92 <__assert_func+0x26>
 8005a7c:	4b07      	ldr	r3, [pc, #28]	@ (8005a9c <__assert_func+0x30>)
 8005a7e:	461c      	mov	r4, r3
 8005a80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005a84:	9100      	str	r1, [sp, #0]
 8005a86:	462b      	mov	r3, r5
 8005a88:	4905      	ldr	r1, [pc, #20]	@ (8005aa0 <__assert_func+0x34>)
 8005a8a:	f000 fde1 	bl	8006650 <fiprintf>
 8005a8e:	f000 fed3 	bl	8006838 <abort>
 8005a92:	4b04      	ldr	r3, [pc, #16]	@ (8005aa4 <__assert_func+0x38>)
 8005a94:	e7f4      	b.n	8005a80 <__assert_func+0x14>
 8005a96:	bf00      	nop
 8005a98:	20000034 	.word	0x20000034
 8005a9c:	08007149 	.word	0x08007149
 8005aa0:	0800711b 	.word	0x0800711b
 8005aa4:	0800710e 	.word	0x0800710e

08005aa8 <_free_r>:
 8005aa8:	b538      	push	{r3, r4, r5, lr}
 8005aaa:	4605      	mov	r5, r0
 8005aac:	2900      	cmp	r1, #0
 8005aae:	d041      	beq.n	8005b34 <_free_r+0x8c>
 8005ab0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ab4:	1f0c      	subs	r4, r1, #4
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	bfb8      	it	lt
 8005aba:	18e4      	addlt	r4, r4, r3
 8005abc:	f000 f8e8 	bl	8005c90 <__malloc_lock>
 8005ac0:	4a1d      	ldr	r2, [pc, #116]	@ (8005b38 <_free_r+0x90>)
 8005ac2:	6813      	ldr	r3, [r2, #0]
 8005ac4:	b933      	cbnz	r3, 8005ad4 <_free_r+0x2c>
 8005ac6:	6063      	str	r3, [r4, #4]
 8005ac8:	6014      	str	r4, [r2, #0]
 8005aca:	4628      	mov	r0, r5
 8005acc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ad0:	f000 b8e4 	b.w	8005c9c <__malloc_unlock>
 8005ad4:	42a3      	cmp	r3, r4
 8005ad6:	d908      	bls.n	8005aea <_free_r+0x42>
 8005ad8:	6820      	ldr	r0, [r4, #0]
 8005ada:	1821      	adds	r1, r4, r0
 8005adc:	428b      	cmp	r3, r1
 8005ade:	bf01      	itttt	eq
 8005ae0:	6819      	ldreq	r1, [r3, #0]
 8005ae2:	685b      	ldreq	r3, [r3, #4]
 8005ae4:	1809      	addeq	r1, r1, r0
 8005ae6:	6021      	streq	r1, [r4, #0]
 8005ae8:	e7ed      	b.n	8005ac6 <_free_r+0x1e>
 8005aea:	461a      	mov	r2, r3
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	b10b      	cbz	r3, 8005af4 <_free_r+0x4c>
 8005af0:	42a3      	cmp	r3, r4
 8005af2:	d9fa      	bls.n	8005aea <_free_r+0x42>
 8005af4:	6811      	ldr	r1, [r2, #0]
 8005af6:	1850      	adds	r0, r2, r1
 8005af8:	42a0      	cmp	r0, r4
 8005afa:	d10b      	bne.n	8005b14 <_free_r+0x6c>
 8005afc:	6820      	ldr	r0, [r4, #0]
 8005afe:	4401      	add	r1, r0
 8005b00:	1850      	adds	r0, r2, r1
 8005b02:	4283      	cmp	r3, r0
 8005b04:	6011      	str	r1, [r2, #0]
 8005b06:	d1e0      	bne.n	8005aca <_free_r+0x22>
 8005b08:	6818      	ldr	r0, [r3, #0]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	6053      	str	r3, [r2, #4]
 8005b0e:	4408      	add	r0, r1
 8005b10:	6010      	str	r0, [r2, #0]
 8005b12:	e7da      	b.n	8005aca <_free_r+0x22>
 8005b14:	d902      	bls.n	8005b1c <_free_r+0x74>
 8005b16:	230c      	movs	r3, #12
 8005b18:	602b      	str	r3, [r5, #0]
 8005b1a:	e7d6      	b.n	8005aca <_free_r+0x22>
 8005b1c:	6820      	ldr	r0, [r4, #0]
 8005b1e:	1821      	adds	r1, r4, r0
 8005b20:	428b      	cmp	r3, r1
 8005b22:	bf04      	itt	eq
 8005b24:	6819      	ldreq	r1, [r3, #0]
 8005b26:	685b      	ldreq	r3, [r3, #4]
 8005b28:	6063      	str	r3, [r4, #4]
 8005b2a:	bf04      	itt	eq
 8005b2c:	1809      	addeq	r1, r1, r0
 8005b2e:	6021      	streq	r1, [r4, #0]
 8005b30:	6054      	str	r4, [r2, #4]
 8005b32:	e7ca      	b.n	8005aca <_free_r+0x22>
 8005b34:	bd38      	pop	{r3, r4, r5, pc}
 8005b36:	bf00      	nop
 8005b38:	20004b9c 	.word	0x20004b9c

08005b3c <malloc>:
 8005b3c:	4b02      	ldr	r3, [pc, #8]	@ (8005b48 <malloc+0xc>)
 8005b3e:	4601      	mov	r1, r0
 8005b40:	6818      	ldr	r0, [r3, #0]
 8005b42:	f000 b825 	b.w	8005b90 <_malloc_r>
 8005b46:	bf00      	nop
 8005b48:	20000034 	.word	0x20000034

08005b4c <sbrk_aligned>:
 8005b4c:	b570      	push	{r4, r5, r6, lr}
 8005b4e:	4e0f      	ldr	r6, [pc, #60]	@ (8005b8c <sbrk_aligned+0x40>)
 8005b50:	460c      	mov	r4, r1
 8005b52:	6831      	ldr	r1, [r6, #0]
 8005b54:	4605      	mov	r5, r0
 8005b56:	b911      	cbnz	r1, 8005b5e <sbrk_aligned+0x12>
 8005b58:	f000 fe5e 	bl	8006818 <_sbrk_r>
 8005b5c:	6030      	str	r0, [r6, #0]
 8005b5e:	4621      	mov	r1, r4
 8005b60:	4628      	mov	r0, r5
 8005b62:	f000 fe59 	bl	8006818 <_sbrk_r>
 8005b66:	1c43      	adds	r3, r0, #1
 8005b68:	d103      	bne.n	8005b72 <sbrk_aligned+0x26>
 8005b6a:	f04f 34ff 	mov.w	r4, #4294967295
 8005b6e:	4620      	mov	r0, r4
 8005b70:	bd70      	pop	{r4, r5, r6, pc}
 8005b72:	1cc4      	adds	r4, r0, #3
 8005b74:	f024 0403 	bic.w	r4, r4, #3
 8005b78:	42a0      	cmp	r0, r4
 8005b7a:	d0f8      	beq.n	8005b6e <sbrk_aligned+0x22>
 8005b7c:	1a21      	subs	r1, r4, r0
 8005b7e:	4628      	mov	r0, r5
 8005b80:	f000 fe4a 	bl	8006818 <_sbrk_r>
 8005b84:	3001      	adds	r0, #1
 8005b86:	d1f2      	bne.n	8005b6e <sbrk_aligned+0x22>
 8005b88:	e7ef      	b.n	8005b6a <sbrk_aligned+0x1e>
 8005b8a:	bf00      	nop
 8005b8c:	20004b98 	.word	0x20004b98

08005b90 <_malloc_r>:
 8005b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b94:	1ccd      	adds	r5, r1, #3
 8005b96:	f025 0503 	bic.w	r5, r5, #3
 8005b9a:	3508      	adds	r5, #8
 8005b9c:	2d0c      	cmp	r5, #12
 8005b9e:	bf38      	it	cc
 8005ba0:	250c      	movcc	r5, #12
 8005ba2:	2d00      	cmp	r5, #0
 8005ba4:	4606      	mov	r6, r0
 8005ba6:	db01      	blt.n	8005bac <_malloc_r+0x1c>
 8005ba8:	42a9      	cmp	r1, r5
 8005baa:	d904      	bls.n	8005bb6 <_malloc_r+0x26>
 8005bac:	230c      	movs	r3, #12
 8005bae:	6033      	str	r3, [r6, #0]
 8005bb0:	2000      	movs	r0, #0
 8005bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c8c <_malloc_r+0xfc>
 8005bba:	f000 f869 	bl	8005c90 <__malloc_lock>
 8005bbe:	f8d8 3000 	ldr.w	r3, [r8]
 8005bc2:	461c      	mov	r4, r3
 8005bc4:	bb44      	cbnz	r4, 8005c18 <_malloc_r+0x88>
 8005bc6:	4629      	mov	r1, r5
 8005bc8:	4630      	mov	r0, r6
 8005bca:	f7ff ffbf 	bl	8005b4c <sbrk_aligned>
 8005bce:	1c43      	adds	r3, r0, #1
 8005bd0:	4604      	mov	r4, r0
 8005bd2:	d158      	bne.n	8005c86 <_malloc_r+0xf6>
 8005bd4:	f8d8 4000 	ldr.w	r4, [r8]
 8005bd8:	4627      	mov	r7, r4
 8005bda:	2f00      	cmp	r7, #0
 8005bdc:	d143      	bne.n	8005c66 <_malloc_r+0xd6>
 8005bde:	2c00      	cmp	r4, #0
 8005be0:	d04b      	beq.n	8005c7a <_malloc_r+0xea>
 8005be2:	6823      	ldr	r3, [r4, #0]
 8005be4:	4639      	mov	r1, r7
 8005be6:	4630      	mov	r0, r6
 8005be8:	eb04 0903 	add.w	r9, r4, r3
 8005bec:	f000 fe14 	bl	8006818 <_sbrk_r>
 8005bf0:	4581      	cmp	r9, r0
 8005bf2:	d142      	bne.n	8005c7a <_malloc_r+0xea>
 8005bf4:	6821      	ldr	r1, [r4, #0]
 8005bf6:	1a6d      	subs	r5, r5, r1
 8005bf8:	4629      	mov	r1, r5
 8005bfa:	4630      	mov	r0, r6
 8005bfc:	f7ff ffa6 	bl	8005b4c <sbrk_aligned>
 8005c00:	3001      	adds	r0, #1
 8005c02:	d03a      	beq.n	8005c7a <_malloc_r+0xea>
 8005c04:	6823      	ldr	r3, [r4, #0]
 8005c06:	442b      	add	r3, r5
 8005c08:	6023      	str	r3, [r4, #0]
 8005c0a:	f8d8 3000 	ldr.w	r3, [r8]
 8005c0e:	685a      	ldr	r2, [r3, #4]
 8005c10:	bb62      	cbnz	r2, 8005c6c <_malloc_r+0xdc>
 8005c12:	f8c8 7000 	str.w	r7, [r8]
 8005c16:	e00f      	b.n	8005c38 <_malloc_r+0xa8>
 8005c18:	6822      	ldr	r2, [r4, #0]
 8005c1a:	1b52      	subs	r2, r2, r5
 8005c1c:	d420      	bmi.n	8005c60 <_malloc_r+0xd0>
 8005c1e:	2a0b      	cmp	r2, #11
 8005c20:	d917      	bls.n	8005c52 <_malloc_r+0xc2>
 8005c22:	1961      	adds	r1, r4, r5
 8005c24:	42a3      	cmp	r3, r4
 8005c26:	6025      	str	r5, [r4, #0]
 8005c28:	bf18      	it	ne
 8005c2a:	6059      	strne	r1, [r3, #4]
 8005c2c:	6863      	ldr	r3, [r4, #4]
 8005c2e:	bf08      	it	eq
 8005c30:	f8c8 1000 	streq.w	r1, [r8]
 8005c34:	5162      	str	r2, [r4, r5]
 8005c36:	604b      	str	r3, [r1, #4]
 8005c38:	4630      	mov	r0, r6
 8005c3a:	f000 f82f 	bl	8005c9c <__malloc_unlock>
 8005c3e:	f104 000b 	add.w	r0, r4, #11
 8005c42:	1d23      	adds	r3, r4, #4
 8005c44:	f020 0007 	bic.w	r0, r0, #7
 8005c48:	1ac2      	subs	r2, r0, r3
 8005c4a:	bf1c      	itt	ne
 8005c4c:	1a1b      	subne	r3, r3, r0
 8005c4e:	50a3      	strne	r3, [r4, r2]
 8005c50:	e7af      	b.n	8005bb2 <_malloc_r+0x22>
 8005c52:	6862      	ldr	r2, [r4, #4]
 8005c54:	42a3      	cmp	r3, r4
 8005c56:	bf0c      	ite	eq
 8005c58:	f8c8 2000 	streq.w	r2, [r8]
 8005c5c:	605a      	strne	r2, [r3, #4]
 8005c5e:	e7eb      	b.n	8005c38 <_malloc_r+0xa8>
 8005c60:	4623      	mov	r3, r4
 8005c62:	6864      	ldr	r4, [r4, #4]
 8005c64:	e7ae      	b.n	8005bc4 <_malloc_r+0x34>
 8005c66:	463c      	mov	r4, r7
 8005c68:	687f      	ldr	r7, [r7, #4]
 8005c6a:	e7b6      	b.n	8005bda <_malloc_r+0x4a>
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	42a3      	cmp	r3, r4
 8005c72:	d1fb      	bne.n	8005c6c <_malloc_r+0xdc>
 8005c74:	2300      	movs	r3, #0
 8005c76:	6053      	str	r3, [r2, #4]
 8005c78:	e7de      	b.n	8005c38 <_malloc_r+0xa8>
 8005c7a:	230c      	movs	r3, #12
 8005c7c:	6033      	str	r3, [r6, #0]
 8005c7e:	4630      	mov	r0, r6
 8005c80:	f000 f80c 	bl	8005c9c <__malloc_unlock>
 8005c84:	e794      	b.n	8005bb0 <_malloc_r+0x20>
 8005c86:	6005      	str	r5, [r0, #0]
 8005c88:	e7d6      	b.n	8005c38 <_malloc_r+0xa8>
 8005c8a:	bf00      	nop
 8005c8c:	20004b9c 	.word	0x20004b9c

08005c90 <__malloc_lock>:
 8005c90:	4801      	ldr	r0, [pc, #4]	@ (8005c98 <__malloc_lock+0x8>)
 8005c92:	f7ff bed2 	b.w	8005a3a <__retarget_lock_acquire_recursive>
 8005c96:	bf00      	nop
 8005c98:	20004b94 	.word	0x20004b94

08005c9c <__malloc_unlock>:
 8005c9c:	4801      	ldr	r0, [pc, #4]	@ (8005ca4 <__malloc_unlock+0x8>)
 8005c9e:	f7ff becd 	b.w	8005a3c <__retarget_lock_release_recursive>
 8005ca2:	bf00      	nop
 8005ca4:	20004b94 	.word	0x20004b94

08005ca8 <__ssputs_r>:
 8005ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cac:	688e      	ldr	r6, [r1, #8]
 8005cae:	461f      	mov	r7, r3
 8005cb0:	42be      	cmp	r6, r7
 8005cb2:	680b      	ldr	r3, [r1, #0]
 8005cb4:	4682      	mov	sl, r0
 8005cb6:	460c      	mov	r4, r1
 8005cb8:	4690      	mov	r8, r2
 8005cba:	d82d      	bhi.n	8005d18 <__ssputs_r+0x70>
 8005cbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005cc0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005cc4:	d026      	beq.n	8005d14 <__ssputs_r+0x6c>
 8005cc6:	6965      	ldr	r5, [r4, #20]
 8005cc8:	6909      	ldr	r1, [r1, #16]
 8005cca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005cce:	eba3 0901 	sub.w	r9, r3, r1
 8005cd2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005cd6:	1c7b      	adds	r3, r7, #1
 8005cd8:	444b      	add	r3, r9
 8005cda:	106d      	asrs	r5, r5, #1
 8005cdc:	429d      	cmp	r5, r3
 8005cde:	bf38      	it	cc
 8005ce0:	461d      	movcc	r5, r3
 8005ce2:	0553      	lsls	r3, r2, #21
 8005ce4:	d527      	bpl.n	8005d36 <__ssputs_r+0x8e>
 8005ce6:	4629      	mov	r1, r5
 8005ce8:	f7ff ff52 	bl	8005b90 <_malloc_r>
 8005cec:	4606      	mov	r6, r0
 8005cee:	b360      	cbz	r0, 8005d4a <__ssputs_r+0xa2>
 8005cf0:	6921      	ldr	r1, [r4, #16]
 8005cf2:	464a      	mov	r2, r9
 8005cf4:	f7ff feab 	bl	8005a4e <memcpy>
 8005cf8:	89a3      	ldrh	r3, [r4, #12]
 8005cfa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005cfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d02:	81a3      	strh	r3, [r4, #12]
 8005d04:	6126      	str	r6, [r4, #16]
 8005d06:	6165      	str	r5, [r4, #20]
 8005d08:	444e      	add	r6, r9
 8005d0a:	eba5 0509 	sub.w	r5, r5, r9
 8005d0e:	6026      	str	r6, [r4, #0]
 8005d10:	60a5      	str	r5, [r4, #8]
 8005d12:	463e      	mov	r6, r7
 8005d14:	42be      	cmp	r6, r7
 8005d16:	d900      	bls.n	8005d1a <__ssputs_r+0x72>
 8005d18:	463e      	mov	r6, r7
 8005d1a:	6820      	ldr	r0, [r4, #0]
 8005d1c:	4632      	mov	r2, r6
 8005d1e:	4641      	mov	r1, r8
 8005d20:	f000 fd3e 	bl	80067a0 <memmove>
 8005d24:	68a3      	ldr	r3, [r4, #8]
 8005d26:	1b9b      	subs	r3, r3, r6
 8005d28:	60a3      	str	r3, [r4, #8]
 8005d2a:	6823      	ldr	r3, [r4, #0]
 8005d2c:	4433      	add	r3, r6
 8005d2e:	6023      	str	r3, [r4, #0]
 8005d30:	2000      	movs	r0, #0
 8005d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d36:	462a      	mov	r2, r5
 8005d38:	f000 fd85 	bl	8006846 <_realloc_r>
 8005d3c:	4606      	mov	r6, r0
 8005d3e:	2800      	cmp	r0, #0
 8005d40:	d1e0      	bne.n	8005d04 <__ssputs_r+0x5c>
 8005d42:	6921      	ldr	r1, [r4, #16]
 8005d44:	4650      	mov	r0, sl
 8005d46:	f7ff feaf 	bl	8005aa8 <_free_r>
 8005d4a:	230c      	movs	r3, #12
 8005d4c:	f8ca 3000 	str.w	r3, [sl]
 8005d50:	89a3      	ldrh	r3, [r4, #12]
 8005d52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d56:	81a3      	strh	r3, [r4, #12]
 8005d58:	f04f 30ff 	mov.w	r0, #4294967295
 8005d5c:	e7e9      	b.n	8005d32 <__ssputs_r+0x8a>
	...

08005d60 <_svfiprintf_r>:
 8005d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d64:	4698      	mov	r8, r3
 8005d66:	898b      	ldrh	r3, [r1, #12]
 8005d68:	061b      	lsls	r3, r3, #24
 8005d6a:	b09d      	sub	sp, #116	@ 0x74
 8005d6c:	4607      	mov	r7, r0
 8005d6e:	460d      	mov	r5, r1
 8005d70:	4614      	mov	r4, r2
 8005d72:	d510      	bpl.n	8005d96 <_svfiprintf_r+0x36>
 8005d74:	690b      	ldr	r3, [r1, #16]
 8005d76:	b973      	cbnz	r3, 8005d96 <_svfiprintf_r+0x36>
 8005d78:	2140      	movs	r1, #64	@ 0x40
 8005d7a:	f7ff ff09 	bl	8005b90 <_malloc_r>
 8005d7e:	6028      	str	r0, [r5, #0]
 8005d80:	6128      	str	r0, [r5, #16]
 8005d82:	b930      	cbnz	r0, 8005d92 <_svfiprintf_r+0x32>
 8005d84:	230c      	movs	r3, #12
 8005d86:	603b      	str	r3, [r7, #0]
 8005d88:	f04f 30ff 	mov.w	r0, #4294967295
 8005d8c:	b01d      	add	sp, #116	@ 0x74
 8005d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d92:	2340      	movs	r3, #64	@ 0x40
 8005d94:	616b      	str	r3, [r5, #20]
 8005d96:	2300      	movs	r3, #0
 8005d98:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d9a:	2320      	movs	r3, #32
 8005d9c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005da0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005da4:	2330      	movs	r3, #48	@ 0x30
 8005da6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005f44 <_svfiprintf_r+0x1e4>
 8005daa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005dae:	f04f 0901 	mov.w	r9, #1
 8005db2:	4623      	mov	r3, r4
 8005db4:	469a      	mov	sl, r3
 8005db6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005dba:	b10a      	cbz	r2, 8005dc0 <_svfiprintf_r+0x60>
 8005dbc:	2a25      	cmp	r2, #37	@ 0x25
 8005dbe:	d1f9      	bne.n	8005db4 <_svfiprintf_r+0x54>
 8005dc0:	ebba 0b04 	subs.w	fp, sl, r4
 8005dc4:	d00b      	beq.n	8005dde <_svfiprintf_r+0x7e>
 8005dc6:	465b      	mov	r3, fp
 8005dc8:	4622      	mov	r2, r4
 8005dca:	4629      	mov	r1, r5
 8005dcc:	4638      	mov	r0, r7
 8005dce:	f7ff ff6b 	bl	8005ca8 <__ssputs_r>
 8005dd2:	3001      	adds	r0, #1
 8005dd4:	f000 80a7 	beq.w	8005f26 <_svfiprintf_r+0x1c6>
 8005dd8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005dda:	445a      	add	r2, fp
 8005ddc:	9209      	str	r2, [sp, #36]	@ 0x24
 8005dde:	f89a 3000 	ldrb.w	r3, [sl]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f000 809f 	beq.w	8005f26 <_svfiprintf_r+0x1c6>
 8005de8:	2300      	movs	r3, #0
 8005dea:	f04f 32ff 	mov.w	r2, #4294967295
 8005dee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005df2:	f10a 0a01 	add.w	sl, sl, #1
 8005df6:	9304      	str	r3, [sp, #16]
 8005df8:	9307      	str	r3, [sp, #28]
 8005dfa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005dfe:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e00:	4654      	mov	r4, sl
 8005e02:	2205      	movs	r2, #5
 8005e04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e08:	484e      	ldr	r0, [pc, #312]	@ (8005f44 <_svfiprintf_r+0x1e4>)
 8005e0a:	f7fa fa01 	bl	8000210 <memchr>
 8005e0e:	9a04      	ldr	r2, [sp, #16]
 8005e10:	b9d8      	cbnz	r0, 8005e4a <_svfiprintf_r+0xea>
 8005e12:	06d0      	lsls	r0, r2, #27
 8005e14:	bf44      	itt	mi
 8005e16:	2320      	movmi	r3, #32
 8005e18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e1c:	0711      	lsls	r1, r2, #28
 8005e1e:	bf44      	itt	mi
 8005e20:	232b      	movmi	r3, #43	@ 0x2b
 8005e22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e26:	f89a 3000 	ldrb.w	r3, [sl]
 8005e2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e2c:	d015      	beq.n	8005e5a <_svfiprintf_r+0xfa>
 8005e2e:	9a07      	ldr	r2, [sp, #28]
 8005e30:	4654      	mov	r4, sl
 8005e32:	2000      	movs	r0, #0
 8005e34:	f04f 0c0a 	mov.w	ip, #10
 8005e38:	4621      	mov	r1, r4
 8005e3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e3e:	3b30      	subs	r3, #48	@ 0x30
 8005e40:	2b09      	cmp	r3, #9
 8005e42:	d94b      	bls.n	8005edc <_svfiprintf_r+0x17c>
 8005e44:	b1b0      	cbz	r0, 8005e74 <_svfiprintf_r+0x114>
 8005e46:	9207      	str	r2, [sp, #28]
 8005e48:	e014      	b.n	8005e74 <_svfiprintf_r+0x114>
 8005e4a:	eba0 0308 	sub.w	r3, r0, r8
 8005e4e:	fa09 f303 	lsl.w	r3, r9, r3
 8005e52:	4313      	orrs	r3, r2
 8005e54:	9304      	str	r3, [sp, #16]
 8005e56:	46a2      	mov	sl, r4
 8005e58:	e7d2      	b.n	8005e00 <_svfiprintf_r+0xa0>
 8005e5a:	9b03      	ldr	r3, [sp, #12]
 8005e5c:	1d19      	adds	r1, r3, #4
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	9103      	str	r1, [sp, #12]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	bfbb      	ittet	lt
 8005e66:	425b      	neglt	r3, r3
 8005e68:	f042 0202 	orrlt.w	r2, r2, #2
 8005e6c:	9307      	strge	r3, [sp, #28]
 8005e6e:	9307      	strlt	r3, [sp, #28]
 8005e70:	bfb8      	it	lt
 8005e72:	9204      	strlt	r2, [sp, #16]
 8005e74:	7823      	ldrb	r3, [r4, #0]
 8005e76:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e78:	d10a      	bne.n	8005e90 <_svfiprintf_r+0x130>
 8005e7a:	7863      	ldrb	r3, [r4, #1]
 8005e7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e7e:	d132      	bne.n	8005ee6 <_svfiprintf_r+0x186>
 8005e80:	9b03      	ldr	r3, [sp, #12]
 8005e82:	1d1a      	adds	r2, r3, #4
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	9203      	str	r2, [sp, #12]
 8005e88:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e8c:	3402      	adds	r4, #2
 8005e8e:	9305      	str	r3, [sp, #20]
 8005e90:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005f54 <_svfiprintf_r+0x1f4>
 8005e94:	7821      	ldrb	r1, [r4, #0]
 8005e96:	2203      	movs	r2, #3
 8005e98:	4650      	mov	r0, sl
 8005e9a:	f7fa f9b9 	bl	8000210 <memchr>
 8005e9e:	b138      	cbz	r0, 8005eb0 <_svfiprintf_r+0x150>
 8005ea0:	9b04      	ldr	r3, [sp, #16]
 8005ea2:	eba0 000a 	sub.w	r0, r0, sl
 8005ea6:	2240      	movs	r2, #64	@ 0x40
 8005ea8:	4082      	lsls	r2, r0
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	3401      	adds	r4, #1
 8005eae:	9304      	str	r3, [sp, #16]
 8005eb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005eb4:	4824      	ldr	r0, [pc, #144]	@ (8005f48 <_svfiprintf_r+0x1e8>)
 8005eb6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005eba:	2206      	movs	r2, #6
 8005ebc:	f7fa f9a8 	bl	8000210 <memchr>
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	d036      	beq.n	8005f32 <_svfiprintf_r+0x1d2>
 8005ec4:	4b21      	ldr	r3, [pc, #132]	@ (8005f4c <_svfiprintf_r+0x1ec>)
 8005ec6:	bb1b      	cbnz	r3, 8005f10 <_svfiprintf_r+0x1b0>
 8005ec8:	9b03      	ldr	r3, [sp, #12]
 8005eca:	3307      	adds	r3, #7
 8005ecc:	f023 0307 	bic.w	r3, r3, #7
 8005ed0:	3308      	adds	r3, #8
 8005ed2:	9303      	str	r3, [sp, #12]
 8005ed4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ed6:	4433      	add	r3, r6
 8005ed8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005eda:	e76a      	b.n	8005db2 <_svfiprintf_r+0x52>
 8005edc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ee0:	460c      	mov	r4, r1
 8005ee2:	2001      	movs	r0, #1
 8005ee4:	e7a8      	b.n	8005e38 <_svfiprintf_r+0xd8>
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	3401      	adds	r4, #1
 8005eea:	9305      	str	r3, [sp, #20]
 8005eec:	4619      	mov	r1, r3
 8005eee:	f04f 0c0a 	mov.w	ip, #10
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ef8:	3a30      	subs	r2, #48	@ 0x30
 8005efa:	2a09      	cmp	r2, #9
 8005efc:	d903      	bls.n	8005f06 <_svfiprintf_r+0x1a6>
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d0c6      	beq.n	8005e90 <_svfiprintf_r+0x130>
 8005f02:	9105      	str	r1, [sp, #20]
 8005f04:	e7c4      	b.n	8005e90 <_svfiprintf_r+0x130>
 8005f06:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f0a:	4604      	mov	r4, r0
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e7f0      	b.n	8005ef2 <_svfiprintf_r+0x192>
 8005f10:	ab03      	add	r3, sp, #12
 8005f12:	9300      	str	r3, [sp, #0]
 8005f14:	462a      	mov	r2, r5
 8005f16:	4b0e      	ldr	r3, [pc, #56]	@ (8005f50 <_svfiprintf_r+0x1f0>)
 8005f18:	a904      	add	r1, sp, #16
 8005f1a:	4638      	mov	r0, r7
 8005f1c:	f3af 8000 	nop.w
 8005f20:	1c42      	adds	r2, r0, #1
 8005f22:	4606      	mov	r6, r0
 8005f24:	d1d6      	bne.n	8005ed4 <_svfiprintf_r+0x174>
 8005f26:	89ab      	ldrh	r3, [r5, #12]
 8005f28:	065b      	lsls	r3, r3, #25
 8005f2a:	f53f af2d 	bmi.w	8005d88 <_svfiprintf_r+0x28>
 8005f2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f30:	e72c      	b.n	8005d8c <_svfiprintf_r+0x2c>
 8005f32:	ab03      	add	r3, sp, #12
 8005f34:	9300      	str	r3, [sp, #0]
 8005f36:	462a      	mov	r2, r5
 8005f38:	4b05      	ldr	r3, [pc, #20]	@ (8005f50 <_svfiprintf_r+0x1f0>)
 8005f3a:	a904      	add	r1, sp, #16
 8005f3c:	4638      	mov	r0, r7
 8005f3e:	f000 f9bb 	bl	80062b8 <_printf_i>
 8005f42:	e7ed      	b.n	8005f20 <_svfiprintf_r+0x1c0>
 8005f44:	0800714a 	.word	0x0800714a
 8005f48:	08007154 	.word	0x08007154
 8005f4c:	00000000 	.word	0x00000000
 8005f50:	08005ca9 	.word	0x08005ca9
 8005f54:	08007150 	.word	0x08007150

08005f58 <__sfputc_r>:
 8005f58:	6893      	ldr	r3, [r2, #8]
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	b410      	push	{r4}
 8005f60:	6093      	str	r3, [r2, #8]
 8005f62:	da08      	bge.n	8005f76 <__sfputc_r+0x1e>
 8005f64:	6994      	ldr	r4, [r2, #24]
 8005f66:	42a3      	cmp	r3, r4
 8005f68:	db01      	blt.n	8005f6e <__sfputc_r+0x16>
 8005f6a:	290a      	cmp	r1, #10
 8005f6c:	d103      	bne.n	8005f76 <__sfputc_r+0x1e>
 8005f6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f72:	f7ff bb6c 	b.w	800564e <__swbuf_r>
 8005f76:	6813      	ldr	r3, [r2, #0]
 8005f78:	1c58      	adds	r0, r3, #1
 8005f7a:	6010      	str	r0, [r2, #0]
 8005f7c:	7019      	strb	r1, [r3, #0]
 8005f7e:	4608      	mov	r0, r1
 8005f80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <__sfputs_r>:
 8005f86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f88:	4606      	mov	r6, r0
 8005f8a:	460f      	mov	r7, r1
 8005f8c:	4614      	mov	r4, r2
 8005f8e:	18d5      	adds	r5, r2, r3
 8005f90:	42ac      	cmp	r4, r5
 8005f92:	d101      	bne.n	8005f98 <__sfputs_r+0x12>
 8005f94:	2000      	movs	r0, #0
 8005f96:	e007      	b.n	8005fa8 <__sfputs_r+0x22>
 8005f98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f9c:	463a      	mov	r2, r7
 8005f9e:	4630      	mov	r0, r6
 8005fa0:	f7ff ffda 	bl	8005f58 <__sfputc_r>
 8005fa4:	1c43      	adds	r3, r0, #1
 8005fa6:	d1f3      	bne.n	8005f90 <__sfputs_r+0xa>
 8005fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005fac <_vfiprintf_r>:
 8005fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fb0:	460d      	mov	r5, r1
 8005fb2:	b09d      	sub	sp, #116	@ 0x74
 8005fb4:	4614      	mov	r4, r2
 8005fb6:	4698      	mov	r8, r3
 8005fb8:	4606      	mov	r6, r0
 8005fba:	b118      	cbz	r0, 8005fc4 <_vfiprintf_r+0x18>
 8005fbc:	6a03      	ldr	r3, [r0, #32]
 8005fbe:	b90b      	cbnz	r3, 8005fc4 <_vfiprintf_r+0x18>
 8005fc0:	f7ff fa34 	bl	800542c <__sinit>
 8005fc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005fc6:	07d9      	lsls	r1, r3, #31
 8005fc8:	d405      	bmi.n	8005fd6 <_vfiprintf_r+0x2a>
 8005fca:	89ab      	ldrh	r3, [r5, #12]
 8005fcc:	059a      	lsls	r2, r3, #22
 8005fce:	d402      	bmi.n	8005fd6 <_vfiprintf_r+0x2a>
 8005fd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005fd2:	f7ff fd32 	bl	8005a3a <__retarget_lock_acquire_recursive>
 8005fd6:	89ab      	ldrh	r3, [r5, #12]
 8005fd8:	071b      	lsls	r3, r3, #28
 8005fda:	d501      	bpl.n	8005fe0 <_vfiprintf_r+0x34>
 8005fdc:	692b      	ldr	r3, [r5, #16]
 8005fde:	b99b      	cbnz	r3, 8006008 <_vfiprintf_r+0x5c>
 8005fe0:	4629      	mov	r1, r5
 8005fe2:	4630      	mov	r0, r6
 8005fe4:	f7ff fb72 	bl	80056cc <__swsetup_r>
 8005fe8:	b170      	cbz	r0, 8006008 <_vfiprintf_r+0x5c>
 8005fea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005fec:	07dc      	lsls	r4, r3, #31
 8005fee:	d504      	bpl.n	8005ffa <_vfiprintf_r+0x4e>
 8005ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ff4:	b01d      	add	sp, #116	@ 0x74
 8005ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ffa:	89ab      	ldrh	r3, [r5, #12]
 8005ffc:	0598      	lsls	r0, r3, #22
 8005ffe:	d4f7      	bmi.n	8005ff0 <_vfiprintf_r+0x44>
 8006000:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006002:	f7ff fd1b 	bl	8005a3c <__retarget_lock_release_recursive>
 8006006:	e7f3      	b.n	8005ff0 <_vfiprintf_r+0x44>
 8006008:	2300      	movs	r3, #0
 800600a:	9309      	str	r3, [sp, #36]	@ 0x24
 800600c:	2320      	movs	r3, #32
 800600e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006012:	f8cd 800c 	str.w	r8, [sp, #12]
 8006016:	2330      	movs	r3, #48	@ 0x30
 8006018:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80061c8 <_vfiprintf_r+0x21c>
 800601c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006020:	f04f 0901 	mov.w	r9, #1
 8006024:	4623      	mov	r3, r4
 8006026:	469a      	mov	sl, r3
 8006028:	f813 2b01 	ldrb.w	r2, [r3], #1
 800602c:	b10a      	cbz	r2, 8006032 <_vfiprintf_r+0x86>
 800602e:	2a25      	cmp	r2, #37	@ 0x25
 8006030:	d1f9      	bne.n	8006026 <_vfiprintf_r+0x7a>
 8006032:	ebba 0b04 	subs.w	fp, sl, r4
 8006036:	d00b      	beq.n	8006050 <_vfiprintf_r+0xa4>
 8006038:	465b      	mov	r3, fp
 800603a:	4622      	mov	r2, r4
 800603c:	4629      	mov	r1, r5
 800603e:	4630      	mov	r0, r6
 8006040:	f7ff ffa1 	bl	8005f86 <__sfputs_r>
 8006044:	3001      	adds	r0, #1
 8006046:	f000 80a7 	beq.w	8006198 <_vfiprintf_r+0x1ec>
 800604a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800604c:	445a      	add	r2, fp
 800604e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006050:	f89a 3000 	ldrb.w	r3, [sl]
 8006054:	2b00      	cmp	r3, #0
 8006056:	f000 809f 	beq.w	8006198 <_vfiprintf_r+0x1ec>
 800605a:	2300      	movs	r3, #0
 800605c:	f04f 32ff 	mov.w	r2, #4294967295
 8006060:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006064:	f10a 0a01 	add.w	sl, sl, #1
 8006068:	9304      	str	r3, [sp, #16]
 800606a:	9307      	str	r3, [sp, #28]
 800606c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006070:	931a      	str	r3, [sp, #104]	@ 0x68
 8006072:	4654      	mov	r4, sl
 8006074:	2205      	movs	r2, #5
 8006076:	f814 1b01 	ldrb.w	r1, [r4], #1
 800607a:	4853      	ldr	r0, [pc, #332]	@ (80061c8 <_vfiprintf_r+0x21c>)
 800607c:	f7fa f8c8 	bl	8000210 <memchr>
 8006080:	9a04      	ldr	r2, [sp, #16]
 8006082:	b9d8      	cbnz	r0, 80060bc <_vfiprintf_r+0x110>
 8006084:	06d1      	lsls	r1, r2, #27
 8006086:	bf44      	itt	mi
 8006088:	2320      	movmi	r3, #32
 800608a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800608e:	0713      	lsls	r3, r2, #28
 8006090:	bf44      	itt	mi
 8006092:	232b      	movmi	r3, #43	@ 0x2b
 8006094:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006098:	f89a 3000 	ldrb.w	r3, [sl]
 800609c:	2b2a      	cmp	r3, #42	@ 0x2a
 800609e:	d015      	beq.n	80060cc <_vfiprintf_r+0x120>
 80060a0:	9a07      	ldr	r2, [sp, #28]
 80060a2:	4654      	mov	r4, sl
 80060a4:	2000      	movs	r0, #0
 80060a6:	f04f 0c0a 	mov.w	ip, #10
 80060aa:	4621      	mov	r1, r4
 80060ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060b0:	3b30      	subs	r3, #48	@ 0x30
 80060b2:	2b09      	cmp	r3, #9
 80060b4:	d94b      	bls.n	800614e <_vfiprintf_r+0x1a2>
 80060b6:	b1b0      	cbz	r0, 80060e6 <_vfiprintf_r+0x13a>
 80060b8:	9207      	str	r2, [sp, #28]
 80060ba:	e014      	b.n	80060e6 <_vfiprintf_r+0x13a>
 80060bc:	eba0 0308 	sub.w	r3, r0, r8
 80060c0:	fa09 f303 	lsl.w	r3, r9, r3
 80060c4:	4313      	orrs	r3, r2
 80060c6:	9304      	str	r3, [sp, #16]
 80060c8:	46a2      	mov	sl, r4
 80060ca:	e7d2      	b.n	8006072 <_vfiprintf_r+0xc6>
 80060cc:	9b03      	ldr	r3, [sp, #12]
 80060ce:	1d19      	adds	r1, r3, #4
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	9103      	str	r1, [sp, #12]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	bfbb      	ittet	lt
 80060d8:	425b      	neglt	r3, r3
 80060da:	f042 0202 	orrlt.w	r2, r2, #2
 80060de:	9307      	strge	r3, [sp, #28]
 80060e0:	9307      	strlt	r3, [sp, #28]
 80060e2:	bfb8      	it	lt
 80060e4:	9204      	strlt	r2, [sp, #16]
 80060e6:	7823      	ldrb	r3, [r4, #0]
 80060e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80060ea:	d10a      	bne.n	8006102 <_vfiprintf_r+0x156>
 80060ec:	7863      	ldrb	r3, [r4, #1]
 80060ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80060f0:	d132      	bne.n	8006158 <_vfiprintf_r+0x1ac>
 80060f2:	9b03      	ldr	r3, [sp, #12]
 80060f4:	1d1a      	adds	r2, r3, #4
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	9203      	str	r2, [sp, #12]
 80060fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80060fe:	3402      	adds	r4, #2
 8006100:	9305      	str	r3, [sp, #20]
 8006102:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80061d8 <_vfiprintf_r+0x22c>
 8006106:	7821      	ldrb	r1, [r4, #0]
 8006108:	2203      	movs	r2, #3
 800610a:	4650      	mov	r0, sl
 800610c:	f7fa f880 	bl	8000210 <memchr>
 8006110:	b138      	cbz	r0, 8006122 <_vfiprintf_r+0x176>
 8006112:	9b04      	ldr	r3, [sp, #16]
 8006114:	eba0 000a 	sub.w	r0, r0, sl
 8006118:	2240      	movs	r2, #64	@ 0x40
 800611a:	4082      	lsls	r2, r0
 800611c:	4313      	orrs	r3, r2
 800611e:	3401      	adds	r4, #1
 8006120:	9304      	str	r3, [sp, #16]
 8006122:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006126:	4829      	ldr	r0, [pc, #164]	@ (80061cc <_vfiprintf_r+0x220>)
 8006128:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800612c:	2206      	movs	r2, #6
 800612e:	f7fa f86f 	bl	8000210 <memchr>
 8006132:	2800      	cmp	r0, #0
 8006134:	d03f      	beq.n	80061b6 <_vfiprintf_r+0x20a>
 8006136:	4b26      	ldr	r3, [pc, #152]	@ (80061d0 <_vfiprintf_r+0x224>)
 8006138:	bb1b      	cbnz	r3, 8006182 <_vfiprintf_r+0x1d6>
 800613a:	9b03      	ldr	r3, [sp, #12]
 800613c:	3307      	adds	r3, #7
 800613e:	f023 0307 	bic.w	r3, r3, #7
 8006142:	3308      	adds	r3, #8
 8006144:	9303      	str	r3, [sp, #12]
 8006146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006148:	443b      	add	r3, r7
 800614a:	9309      	str	r3, [sp, #36]	@ 0x24
 800614c:	e76a      	b.n	8006024 <_vfiprintf_r+0x78>
 800614e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006152:	460c      	mov	r4, r1
 8006154:	2001      	movs	r0, #1
 8006156:	e7a8      	b.n	80060aa <_vfiprintf_r+0xfe>
 8006158:	2300      	movs	r3, #0
 800615a:	3401      	adds	r4, #1
 800615c:	9305      	str	r3, [sp, #20]
 800615e:	4619      	mov	r1, r3
 8006160:	f04f 0c0a 	mov.w	ip, #10
 8006164:	4620      	mov	r0, r4
 8006166:	f810 2b01 	ldrb.w	r2, [r0], #1
 800616a:	3a30      	subs	r2, #48	@ 0x30
 800616c:	2a09      	cmp	r2, #9
 800616e:	d903      	bls.n	8006178 <_vfiprintf_r+0x1cc>
 8006170:	2b00      	cmp	r3, #0
 8006172:	d0c6      	beq.n	8006102 <_vfiprintf_r+0x156>
 8006174:	9105      	str	r1, [sp, #20]
 8006176:	e7c4      	b.n	8006102 <_vfiprintf_r+0x156>
 8006178:	fb0c 2101 	mla	r1, ip, r1, r2
 800617c:	4604      	mov	r4, r0
 800617e:	2301      	movs	r3, #1
 8006180:	e7f0      	b.n	8006164 <_vfiprintf_r+0x1b8>
 8006182:	ab03      	add	r3, sp, #12
 8006184:	9300      	str	r3, [sp, #0]
 8006186:	462a      	mov	r2, r5
 8006188:	4b12      	ldr	r3, [pc, #72]	@ (80061d4 <_vfiprintf_r+0x228>)
 800618a:	a904      	add	r1, sp, #16
 800618c:	4630      	mov	r0, r6
 800618e:	f3af 8000 	nop.w
 8006192:	4607      	mov	r7, r0
 8006194:	1c78      	adds	r0, r7, #1
 8006196:	d1d6      	bne.n	8006146 <_vfiprintf_r+0x19a>
 8006198:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800619a:	07d9      	lsls	r1, r3, #31
 800619c:	d405      	bmi.n	80061aa <_vfiprintf_r+0x1fe>
 800619e:	89ab      	ldrh	r3, [r5, #12]
 80061a0:	059a      	lsls	r2, r3, #22
 80061a2:	d402      	bmi.n	80061aa <_vfiprintf_r+0x1fe>
 80061a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80061a6:	f7ff fc49 	bl	8005a3c <__retarget_lock_release_recursive>
 80061aa:	89ab      	ldrh	r3, [r5, #12]
 80061ac:	065b      	lsls	r3, r3, #25
 80061ae:	f53f af1f 	bmi.w	8005ff0 <_vfiprintf_r+0x44>
 80061b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80061b4:	e71e      	b.n	8005ff4 <_vfiprintf_r+0x48>
 80061b6:	ab03      	add	r3, sp, #12
 80061b8:	9300      	str	r3, [sp, #0]
 80061ba:	462a      	mov	r2, r5
 80061bc:	4b05      	ldr	r3, [pc, #20]	@ (80061d4 <_vfiprintf_r+0x228>)
 80061be:	a904      	add	r1, sp, #16
 80061c0:	4630      	mov	r0, r6
 80061c2:	f000 f879 	bl	80062b8 <_printf_i>
 80061c6:	e7e4      	b.n	8006192 <_vfiprintf_r+0x1e6>
 80061c8:	0800714a 	.word	0x0800714a
 80061cc:	08007154 	.word	0x08007154
 80061d0:	00000000 	.word	0x00000000
 80061d4:	08005f87 	.word	0x08005f87
 80061d8:	08007150 	.word	0x08007150

080061dc <_printf_common>:
 80061dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061e0:	4616      	mov	r6, r2
 80061e2:	4698      	mov	r8, r3
 80061e4:	688a      	ldr	r2, [r1, #8]
 80061e6:	690b      	ldr	r3, [r1, #16]
 80061e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80061ec:	4293      	cmp	r3, r2
 80061ee:	bfb8      	it	lt
 80061f0:	4613      	movlt	r3, r2
 80061f2:	6033      	str	r3, [r6, #0]
 80061f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80061f8:	4607      	mov	r7, r0
 80061fa:	460c      	mov	r4, r1
 80061fc:	b10a      	cbz	r2, 8006202 <_printf_common+0x26>
 80061fe:	3301      	adds	r3, #1
 8006200:	6033      	str	r3, [r6, #0]
 8006202:	6823      	ldr	r3, [r4, #0]
 8006204:	0699      	lsls	r1, r3, #26
 8006206:	bf42      	ittt	mi
 8006208:	6833      	ldrmi	r3, [r6, #0]
 800620a:	3302      	addmi	r3, #2
 800620c:	6033      	strmi	r3, [r6, #0]
 800620e:	6825      	ldr	r5, [r4, #0]
 8006210:	f015 0506 	ands.w	r5, r5, #6
 8006214:	d106      	bne.n	8006224 <_printf_common+0x48>
 8006216:	f104 0a19 	add.w	sl, r4, #25
 800621a:	68e3      	ldr	r3, [r4, #12]
 800621c:	6832      	ldr	r2, [r6, #0]
 800621e:	1a9b      	subs	r3, r3, r2
 8006220:	42ab      	cmp	r3, r5
 8006222:	dc26      	bgt.n	8006272 <_printf_common+0x96>
 8006224:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006228:	6822      	ldr	r2, [r4, #0]
 800622a:	3b00      	subs	r3, #0
 800622c:	bf18      	it	ne
 800622e:	2301      	movne	r3, #1
 8006230:	0692      	lsls	r2, r2, #26
 8006232:	d42b      	bmi.n	800628c <_printf_common+0xb0>
 8006234:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006238:	4641      	mov	r1, r8
 800623a:	4638      	mov	r0, r7
 800623c:	47c8      	blx	r9
 800623e:	3001      	adds	r0, #1
 8006240:	d01e      	beq.n	8006280 <_printf_common+0xa4>
 8006242:	6823      	ldr	r3, [r4, #0]
 8006244:	6922      	ldr	r2, [r4, #16]
 8006246:	f003 0306 	and.w	r3, r3, #6
 800624a:	2b04      	cmp	r3, #4
 800624c:	bf02      	ittt	eq
 800624e:	68e5      	ldreq	r5, [r4, #12]
 8006250:	6833      	ldreq	r3, [r6, #0]
 8006252:	1aed      	subeq	r5, r5, r3
 8006254:	68a3      	ldr	r3, [r4, #8]
 8006256:	bf0c      	ite	eq
 8006258:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800625c:	2500      	movne	r5, #0
 800625e:	4293      	cmp	r3, r2
 8006260:	bfc4      	itt	gt
 8006262:	1a9b      	subgt	r3, r3, r2
 8006264:	18ed      	addgt	r5, r5, r3
 8006266:	2600      	movs	r6, #0
 8006268:	341a      	adds	r4, #26
 800626a:	42b5      	cmp	r5, r6
 800626c:	d11a      	bne.n	80062a4 <_printf_common+0xc8>
 800626e:	2000      	movs	r0, #0
 8006270:	e008      	b.n	8006284 <_printf_common+0xa8>
 8006272:	2301      	movs	r3, #1
 8006274:	4652      	mov	r2, sl
 8006276:	4641      	mov	r1, r8
 8006278:	4638      	mov	r0, r7
 800627a:	47c8      	blx	r9
 800627c:	3001      	adds	r0, #1
 800627e:	d103      	bne.n	8006288 <_printf_common+0xac>
 8006280:	f04f 30ff 	mov.w	r0, #4294967295
 8006284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006288:	3501      	adds	r5, #1
 800628a:	e7c6      	b.n	800621a <_printf_common+0x3e>
 800628c:	18e1      	adds	r1, r4, r3
 800628e:	1c5a      	adds	r2, r3, #1
 8006290:	2030      	movs	r0, #48	@ 0x30
 8006292:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006296:	4422      	add	r2, r4
 8006298:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800629c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80062a0:	3302      	adds	r3, #2
 80062a2:	e7c7      	b.n	8006234 <_printf_common+0x58>
 80062a4:	2301      	movs	r3, #1
 80062a6:	4622      	mov	r2, r4
 80062a8:	4641      	mov	r1, r8
 80062aa:	4638      	mov	r0, r7
 80062ac:	47c8      	blx	r9
 80062ae:	3001      	adds	r0, #1
 80062b0:	d0e6      	beq.n	8006280 <_printf_common+0xa4>
 80062b2:	3601      	adds	r6, #1
 80062b4:	e7d9      	b.n	800626a <_printf_common+0x8e>
	...

080062b8 <_printf_i>:
 80062b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062bc:	7e0f      	ldrb	r7, [r1, #24]
 80062be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80062c0:	2f78      	cmp	r7, #120	@ 0x78
 80062c2:	4691      	mov	r9, r2
 80062c4:	4680      	mov	r8, r0
 80062c6:	460c      	mov	r4, r1
 80062c8:	469a      	mov	sl, r3
 80062ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80062ce:	d807      	bhi.n	80062e0 <_printf_i+0x28>
 80062d0:	2f62      	cmp	r7, #98	@ 0x62
 80062d2:	d80a      	bhi.n	80062ea <_printf_i+0x32>
 80062d4:	2f00      	cmp	r7, #0
 80062d6:	f000 80d2 	beq.w	800647e <_printf_i+0x1c6>
 80062da:	2f58      	cmp	r7, #88	@ 0x58
 80062dc:	f000 80b9 	beq.w	8006452 <_printf_i+0x19a>
 80062e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80062e8:	e03a      	b.n	8006360 <_printf_i+0xa8>
 80062ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80062ee:	2b15      	cmp	r3, #21
 80062f0:	d8f6      	bhi.n	80062e0 <_printf_i+0x28>
 80062f2:	a101      	add	r1, pc, #4	@ (adr r1, 80062f8 <_printf_i+0x40>)
 80062f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80062f8:	08006351 	.word	0x08006351
 80062fc:	08006365 	.word	0x08006365
 8006300:	080062e1 	.word	0x080062e1
 8006304:	080062e1 	.word	0x080062e1
 8006308:	080062e1 	.word	0x080062e1
 800630c:	080062e1 	.word	0x080062e1
 8006310:	08006365 	.word	0x08006365
 8006314:	080062e1 	.word	0x080062e1
 8006318:	080062e1 	.word	0x080062e1
 800631c:	080062e1 	.word	0x080062e1
 8006320:	080062e1 	.word	0x080062e1
 8006324:	08006465 	.word	0x08006465
 8006328:	0800638f 	.word	0x0800638f
 800632c:	0800641f 	.word	0x0800641f
 8006330:	080062e1 	.word	0x080062e1
 8006334:	080062e1 	.word	0x080062e1
 8006338:	08006487 	.word	0x08006487
 800633c:	080062e1 	.word	0x080062e1
 8006340:	0800638f 	.word	0x0800638f
 8006344:	080062e1 	.word	0x080062e1
 8006348:	080062e1 	.word	0x080062e1
 800634c:	08006427 	.word	0x08006427
 8006350:	6833      	ldr	r3, [r6, #0]
 8006352:	1d1a      	adds	r2, r3, #4
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	6032      	str	r2, [r6, #0]
 8006358:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800635c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006360:	2301      	movs	r3, #1
 8006362:	e09d      	b.n	80064a0 <_printf_i+0x1e8>
 8006364:	6833      	ldr	r3, [r6, #0]
 8006366:	6820      	ldr	r0, [r4, #0]
 8006368:	1d19      	adds	r1, r3, #4
 800636a:	6031      	str	r1, [r6, #0]
 800636c:	0606      	lsls	r6, r0, #24
 800636e:	d501      	bpl.n	8006374 <_printf_i+0xbc>
 8006370:	681d      	ldr	r5, [r3, #0]
 8006372:	e003      	b.n	800637c <_printf_i+0xc4>
 8006374:	0645      	lsls	r5, r0, #25
 8006376:	d5fb      	bpl.n	8006370 <_printf_i+0xb8>
 8006378:	f9b3 5000 	ldrsh.w	r5, [r3]
 800637c:	2d00      	cmp	r5, #0
 800637e:	da03      	bge.n	8006388 <_printf_i+0xd0>
 8006380:	232d      	movs	r3, #45	@ 0x2d
 8006382:	426d      	negs	r5, r5
 8006384:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006388:	4859      	ldr	r0, [pc, #356]	@ (80064f0 <_printf_i+0x238>)
 800638a:	230a      	movs	r3, #10
 800638c:	e011      	b.n	80063b2 <_printf_i+0xfa>
 800638e:	6821      	ldr	r1, [r4, #0]
 8006390:	6833      	ldr	r3, [r6, #0]
 8006392:	0608      	lsls	r0, r1, #24
 8006394:	f853 5b04 	ldr.w	r5, [r3], #4
 8006398:	d402      	bmi.n	80063a0 <_printf_i+0xe8>
 800639a:	0649      	lsls	r1, r1, #25
 800639c:	bf48      	it	mi
 800639e:	b2ad      	uxthmi	r5, r5
 80063a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80063a2:	4853      	ldr	r0, [pc, #332]	@ (80064f0 <_printf_i+0x238>)
 80063a4:	6033      	str	r3, [r6, #0]
 80063a6:	bf14      	ite	ne
 80063a8:	230a      	movne	r3, #10
 80063aa:	2308      	moveq	r3, #8
 80063ac:	2100      	movs	r1, #0
 80063ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80063b2:	6866      	ldr	r6, [r4, #4]
 80063b4:	60a6      	str	r6, [r4, #8]
 80063b6:	2e00      	cmp	r6, #0
 80063b8:	bfa2      	ittt	ge
 80063ba:	6821      	ldrge	r1, [r4, #0]
 80063bc:	f021 0104 	bicge.w	r1, r1, #4
 80063c0:	6021      	strge	r1, [r4, #0]
 80063c2:	b90d      	cbnz	r5, 80063c8 <_printf_i+0x110>
 80063c4:	2e00      	cmp	r6, #0
 80063c6:	d04b      	beq.n	8006460 <_printf_i+0x1a8>
 80063c8:	4616      	mov	r6, r2
 80063ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80063ce:	fb03 5711 	mls	r7, r3, r1, r5
 80063d2:	5dc7      	ldrb	r7, [r0, r7]
 80063d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80063d8:	462f      	mov	r7, r5
 80063da:	42bb      	cmp	r3, r7
 80063dc:	460d      	mov	r5, r1
 80063de:	d9f4      	bls.n	80063ca <_printf_i+0x112>
 80063e0:	2b08      	cmp	r3, #8
 80063e2:	d10b      	bne.n	80063fc <_printf_i+0x144>
 80063e4:	6823      	ldr	r3, [r4, #0]
 80063e6:	07df      	lsls	r7, r3, #31
 80063e8:	d508      	bpl.n	80063fc <_printf_i+0x144>
 80063ea:	6923      	ldr	r3, [r4, #16]
 80063ec:	6861      	ldr	r1, [r4, #4]
 80063ee:	4299      	cmp	r1, r3
 80063f0:	bfde      	ittt	le
 80063f2:	2330      	movle	r3, #48	@ 0x30
 80063f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80063f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80063fc:	1b92      	subs	r2, r2, r6
 80063fe:	6122      	str	r2, [r4, #16]
 8006400:	f8cd a000 	str.w	sl, [sp]
 8006404:	464b      	mov	r3, r9
 8006406:	aa03      	add	r2, sp, #12
 8006408:	4621      	mov	r1, r4
 800640a:	4640      	mov	r0, r8
 800640c:	f7ff fee6 	bl	80061dc <_printf_common>
 8006410:	3001      	adds	r0, #1
 8006412:	d14a      	bne.n	80064aa <_printf_i+0x1f2>
 8006414:	f04f 30ff 	mov.w	r0, #4294967295
 8006418:	b004      	add	sp, #16
 800641a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800641e:	6823      	ldr	r3, [r4, #0]
 8006420:	f043 0320 	orr.w	r3, r3, #32
 8006424:	6023      	str	r3, [r4, #0]
 8006426:	4833      	ldr	r0, [pc, #204]	@ (80064f4 <_printf_i+0x23c>)
 8006428:	2778      	movs	r7, #120	@ 0x78
 800642a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800642e:	6823      	ldr	r3, [r4, #0]
 8006430:	6831      	ldr	r1, [r6, #0]
 8006432:	061f      	lsls	r7, r3, #24
 8006434:	f851 5b04 	ldr.w	r5, [r1], #4
 8006438:	d402      	bmi.n	8006440 <_printf_i+0x188>
 800643a:	065f      	lsls	r7, r3, #25
 800643c:	bf48      	it	mi
 800643e:	b2ad      	uxthmi	r5, r5
 8006440:	6031      	str	r1, [r6, #0]
 8006442:	07d9      	lsls	r1, r3, #31
 8006444:	bf44      	itt	mi
 8006446:	f043 0320 	orrmi.w	r3, r3, #32
 800644a:	6023      	strmi	r3, [r4, #0]
 800644c:	b11d      	cbz	r5, 8006456 <_printf_i+0x19e>
 800644e:	2310      	movs	r3, #16
 8006450:	e7ac      	b.n	80063ac <_printf_i+0xf4>
 8006452:	4827      	ldr	r0, [pc, #156]	@ (80064f0 <_printf_i+0x238>)
 8006454:	e7e9      	b.n	800642a <_printf_i+0x172>
 8006456:	6823      	ldr	r3, [r4, #0]
 8006458:	f023 0320 	bic.w	r3, r3, #32
 800645c:	6023      	str	r3, [r4, #0]
 800645e:	e7f6      	b.n	800644e <_printf_i+0x196>
 8006460:	4616      	mov	r6, r2
 8006462:	e7bd      	b.n	80063e0 <_printf_i+0x128>
 8006464:	6833      	ldr	r3, [r6, #0]
 8006466:	6825      	ldr	r5, [r4, #0]
 8006468:	6961      	ldr	r1, [r4, #20]
 800646a:	1d18      	adds	r0, r3, #4
 800646c:	6030      	str	r0, [r6, #0]
 800646e:	062e      	lsls	r6, r5, #24
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	d501      	bpl.n	8006478 <_printf_i+0x1c0>
 8006474:	6019      	str	r1, [r3, #0]
 8006476:	e002      	b.n	800647e <_printf_i+0x1c6>
 8006478:	0668      	lsls	r0, r5, #25
 800647a:	d5fb      	bpl.n	8006474 <_printf_i+0x1bc>
 800647c:	8019      	strh	r1, [r3, #0]
 800647e:	2300      	movs	r3, #0
 8006480:	6123      	str	r3, [r4, #16]
 8006482:	4616      	mov	r6, r2
 8006484:	e7bc      	b.n	8006400 <_printf_i+0x148>
 8006486:	6833      	ldr	r3, [r6, #0]
 8006488:	1d1a      	adds	r2, r3, #4
 800648a:	6032      	str	r2, [r6, #0]
 800648c:	681e      	ldr	r6, [r3, #0]
 800648e:	6862      	ldr	r2, [r4, #4]
 8006490:	2100      	movs	r1, #0
 8006492:	4630      	mov	r0, r6
 8006494:	f7f9 febc 	bl	8000210 <memchr>
 8006498:	b108      	cbz	r0, 800649e <_printf_i+0x1e6>
 800649a:	1b80      	subs	r0, r0, r6
 800649c:	6060      	str	r0, [r4, #4]
 800649e:	6863      	ldr	r3, [r4, #4]
 80064a0:	6123      	str	r3, [r4, #16]
 80064a2:	2300      	movs	r3, #0
 80064a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064a8:	e7aa      	b.n	8006400 <_printf_i+0x148>
 80064aa:	6923      	ldr	r3, [r4, #16]
 80064ac:	4632      	mov	r2, r6
 80064ae:	4649      	mov	r1, r9
 80064b0:	4640      	mov	r0, r8
 80064b2:	47d0      	blx	sl
 80064b4:	3001      	adds	r0, #1
 80064b6:	d0ad      	beq.n	8006414 <_printf_i+0x15c>
 80064b8:	6823      	ldr	r3, [r4, #0]
 80064ba:	079b      	lsls	r3, r3, #30
 80064bc:	d413      	bmi.n	80064e6 <_printf_i+0x22e>
 80064be:	68e0      	ldr	r0, [r4, #12]
 80064c0:	9b03      	ldr	r3, [sp, #12]
 80064c2:	4298      	cmp	r0, r3
 80064c4:	bfb8      	it	lt
 80064c6:	4618      	movlt	r0, r3
 80064c8:	e7a6      	b.n	8006418 <_printf_i+0x160>
 80064ca:	2301      	movs	r3, #1
 80064cc:	4632      	mov	r2, r6
 80064ce:	4649      	mov	r1, r9
 80064d0:	4640      	mov	r0, r8
 80064d2:	47d0      	blx	sl
 80064d4:	3001      	adds	r0, #1
 80064d6:	d09d      	beq.n	8006414 <_printf_i+0x15c>
 80064d8:	3501      	adds	r5, #1
 80064da:	68e3      	ldr	r3, [r4, #12]
 80064dc:	9903      	ldr	r1, [sp, #12]
 80064de:	1a5b      	subs	r3, r3, r1
 80064e0:	42ab      	cmp	r3, r5
 80064e2:	dcf2      	bgt.n	80064ca <_printf_i+0x212>
 80064e4:	e7eb      	b.n	80064be <_printf_i+0x206>
 80064e6:	2500      	movs	r5, #0
 80064e8:	f104 0619 	add.w	r6, r4, #25
 80064ec:	e7f5      	b.n	80064da <_printf_i+0x222>
 80064ee:	bf00      	nop
 80064f0:	0800715b 	.word	0x0800715b
 80064f4:	0800716c 	.word	0x0800716c

080064f8 <__sflush_r>:
 80064f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80064fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006500:	0716      	lsls	r6, r2, #28
 8006502:	4605      	mov	r5, r0
 8006504:	460c      	mov	r4, r1
 8006506:	d454      	bmi.n	80065b2 <__sflush_r+0xba>
 8006508:	684b      	ldr	r3, [r1, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	dc02      	bgt.n	8006514 <__sflush_r+0x1c>
 800650e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006510:	2b00      	cmp	r3, #0
 8006512:	dd48      	ble.n	80065a6 <__sflush_r+0xae>
 8006514:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006516:	2e00      	cmp	r6, #0
 8006518:	d045      	beq.n	80065a6 <__sflush_r+0xae>
 800651a:	2300      	movs	r3, #0
 800651c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006520:	682f      	ldr	r7, [r5, #0]
 8006522:	6a21      	ldr	r1, [r4, #32]
 8006524:	602b      	str	r3, [r5, #0]
 8006526:	d030      	beq.n	800658a <__sflush_r+0x92>
 8006528:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800652a:	89a3      	ldrh	r3, [r4, #12]
 800652c:	0759      	lsls	r1, r3, #29
 800652e:	d505      	bpl.n	800653c <__sflush_r+0x44>
 8006530:	6863      	ldr	r3, [r4, #4]
 8006532:	1ad2      	subs	r2, r2, r3
 8006534:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006536:	b10b      	cbz	r3, 800653c <__sflush_r+0x44>
 8006538:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800653a:	1ad2      	subs	r2, r2, r3
 800653c:	2300      	movs	r3, #0
 800653e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006540:	6a21      	ldr	r1, [r4, #32]
 8006542:	4628      	mov	r0, r5
 8006544:	47b0      	blx	r6
 8006546:	1c43      	adds	r3, r0, #1
 8006548:	89a3      	ldrh	r3, [r4, #12]
 800654a:	d106      	bne.n	800655a <__sflush_r+0x62>
 800654c:	6829      	ldr	r1, [r5, #0]
 800654e:	291d      	cmp	r1, #29
 8006550:	d82b      	bhi.n	80065aa <__sflush_r+0xb2>
 8006552:	4a2a      	ldr	r2, [pc, #168]	@ (80065fc <__sflush_r+0x104>)
 8006554:	410a      	asrs	r2, r1
 8006556:	07d6      	lsls	r6, r2, #31
 8006558:	d427      	bmi.n	80065aa <__sflush_r+0xb2>
 800655a:	2200      	movs	r2, #0
 800655c:	6062      	str	r2, [r4, #4]
 800655e:	04d9      	lsls	r1, r3, #19
 8006560:	6922      	ldr	r2, [r4, #16]
 8006562:	6022      	str	r2, [r4, #0]
 8006564:	d504      	bpl.n	8006570 <__sflush_r+0x78>
 8006566:	1c42      	adds	r2, r0, #1
 8006568:	d101      	bne.n	800656e <__sflush_r+0x76>
 800656a:	682b      	ldr	r3, [r5, #0]
 800656c:	b903      	cbnz	r3, 8006570 <__sflush_r+0x78>
 800656e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006570:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006572:	602f      	str	r7, [r5, #0]
 8006574:	b1b9      	cbz	r1, 80065a6 <__sflush_r+0xae>
 8006576:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800657a:	4299      	cmp	r1, r3
 800657c:	d002      	beq.n	8006584 <__sflush_r+0x8c>
 800657e:	4628      	mov	r0, r5
 8006580:	f7ff fa92 	bl	8005aa8 <_free_r>
 8006584:	2300      	movs	r3, #0
 8006586:	6363      	str	r3, [r4, #52]	@ 0x34
 8006588:	e00d      	b.n	80065a6 <__sflush_r+0xae>
 800658a:	2301      	movs	r3, #1
 800658c:	4628      	mov	r0, r5
 800658e:	47b0      	blx	r6
 8006590:	4602      	mov	r2, r0
 8006592:	1c50      	adds	r0, r2, #1
 8006594:	d1c9      	bne.n	800652a <__sflush_r+0x32>
 8006596:	682b      	ldr	r3, [r5, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d0c6      	beq.n	800652a <__sflush_r+0x32>
 800659c:	2b1d      	cmp	r3, #29
 800659e:	d001      	beq.n	80065a4 <__sflush_r+0xac>
 80065a0:	2b16      	cmp	r3, #22
 80065a2:	d11e      	bne.n	80065e2 <__sflush_r+0xea>
 80065a4:	602f      	str	r7, [r5, #0]
 80065a6:	2000      	movs	r0, #0
 80065a8:	e022      	b.n	80065f0 <__sflush_r+0xf8>
 80065aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065ae:	b21b      	sxth	r3, r3
 80065b0:	e01b      	b.n	80065ea <__sflush_r+0xf2>
 80065b2:	690f      	ldr	r7, [r1, #16]
 80065b4:	2f00      	cmp	r7, #0
 80065b6:	d0f6      	beq.n	80065a6 <__sflush_r+0xae>
 80065b8:	0793      	lsls	r3, r2, #30
 80065ba:	680e      	ldr	r6, [r1, #0]
 80065bc:	bf08      	it	eq
 80065be:	694b      	ldreq	r3, [r1, #20]
 80065c0:	600f      	str	r7, [r1, #0]
 80065c2:	bf18      	it	ne
 80065c4:	2300      	movne	r3, #0
 80065c6:	eba6 0807 	sub.w	r8, r6, r7
 80065ca:	608b      	str	r3, [r1, #8]
 80065cc:	f1b8 0f00 	cmp.w	r8, #0
 80065d0:	dde9      	ble.n	80065a6 <__sflush_r+0xae>
 80065d2:	6a21      	ldr	r1, [r4, #32]
 80065d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80065d6:	4643      	mov	r3, r8
 80065d8:	463a      	mov	r2, r7
 80065da:	4628      	mov	r0, r5
 80065dc:	47b0      	blx	r6
 80065de:	2800      	cmp	r0, #0
 80065e0:	dc08      	bgt.n	80065f4 <__sflush_r+0xfc>
 80065e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065ea:	81a3      	strh	r3, [r4, #12]
 80065ec:	f04f 30ff 	mov.w	r0, #4294967295
 80065f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065f4:	4407      	add	r7, r0
 80065f6:	eba8 0800 	sub.w	r8, r8, r0
 80065fa:	e7e7      	b.n	80065cc <__sflush_r+0xd4>
 80065fc:	dfbffffe 	.word	0xdfbffffe

08006600 <_fflush_r>:
 8006600:	b538      	push	{r3, r4, r5, lr}
 8006602:	690b      	ldr	r3, [r1, #16]
 8006604:	4605      	mov	r5, r0
 8006606:	460c      	mov	r4, r1
 8006608:	b913      	cbnz	r3, 8006610 <_fflush_r+0x10>
 800660a:	2500      	movs	r5, #0
 800660c:	4628      	mov	r0, r5
 800660e:	bd38      	pop	{r3, r4, r5, pc}
 8006610:	b118      	cbz	r0, 800661a <_fflush_r+0x1a>
 8006612:	6a03      	ldr	r3, [r0, #32]
 8006614:	b90b      	cbnz	r3, 800661a <_fflush_r+0x1a>
 8006616:	f7fe ff09 	bl	800542c <__sinit>
 800661a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d0f3      	beq.n	800660a <_fflush_r+0xa>
 8006622:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006624:	07d0      	lsls	r0, r2, #31
 8006626:	d404      	bmi.n	8006632 <_fflush_r+0x32>
 8006628:	0599      	lsls	r1, r3, #22
 800662a:	d402      	bmi.n	8006632 <_fflush_r+0x32>
 800662c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800662e:	f7ff fa04 	bl	8005a3a <__retarget_lock_acquire_recursive>
 8006632:	4628      	mov	r0, r5
 8006634:	4621      	mov	r1, r4
 8006636:	f7ff ff5f 	bl	80064f8 <__sflush_r>
 800663a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800663c:	07da      	lsls	r2, r3, #31
 800663e:	4605      	mov	r5, r0
 8006640:	d4e4      	bmi.n	800660c <_fflush_r+0xc>
 8006642:	89a3      	ldrh	r3, [r4, #12]
 8006644:	059b      	lsls	r3, r3, #22
 8006646:	d4e1      	bmi.n	800660c <_fflush_r+0xc>
 8006648:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800664a:	f7ff f9f7 	bl	8005a3c <__retarget_lock_release_recursive>
 800664e:	e7dd      	b.n	800660c <_fflush_r+0xc>

08006650 <fiprintf>:
 8006650:	b40e      	push	{r1, r2, r3}
 8006652:	b503      	push	{r0, r1, lr}
 8006654:	4601      	mov	r1, r0
 8006656:	ab03      	add	r3, sp, #12
 8006658:	4805      	ldr	r0, [pc, #20]	@ (8006670 <fiprintf+0x20>)
 800665a:	f853 2b04 	ldr.w	r2, [r3], #4
 800665e:	6800      	ldr	r0, [r0, #0]
 8006660:	9301      	str	r3, [sp, #4]
 8006662:	f7ff fca3 	bl	8005fac <_vfiprintf_r>
 8006666:	b002      	add	sp, #8
 8006668:	f85d eb04 	ldr.w	lr, [sp], #4
 800666c:	b003      	add	sp, #12
 800666e:	4770      	bx	lr
 8006670:	20000034 	.word	0x20000034

08006674 <__swhatbuf_r>:
 8006674:	b570      	push	{r4, r5, r6, lr}
 8006676:	460c      	mov	r4, r1
 8006678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800667c:	2900      	cmp	r1, #0
 800667e:	b096      	sub	sp, #88	@ 0x58
 8006680:	4615      	mov	r5, r2
 8006682:	461e      	mov	r6, r3
 8006684:	da0d      	bge.n	80066a2 <__swhatbuf_r+0x2e>
 8006686:	89a3      	ldrh	r3, [r4, #12]
 8006688:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800668c:	f04f 0100 	mov.w	r1, #0
 8006690:	bf14      	ite	ne
 8006692:	2340      	movne	r3, #64	@ 0x40
 8006694:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006698:	2000      	movs	r0, #0
 800669a:	6031      	str	r1, [r6, #0]
 800669c:	602b      	str	r3, [r5, #0]
 800669e:	b016      	add	sp, #88	@ 0x58
 80066a0:	bd70      	pop	{r4, r5, r6, pc}
 80066a2:	466a      	mov	r2, sp
 80066a4:	f000 f896 	bl	80067d4 <_fstat_r>
 80066a8:	2800      	cmp	r0, #0
 80066aa:	dbec      	blt.n	8006686 <__swhatbuf_r+0x12>
 80066ac:	9901      	ldr	r1, [sp, #4]
 80066ae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80066b2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80066b6:	4259      	negs	r1, r3
 80066b8:	4159      	adcs	r1, r3
 80066ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80066be:	e7eb      	b.n	8006698 <__swhatbuf_r+0x24>

080066c0 <__smakebuf_r>:
 80066c0:	898b      	ldrh	r3, [r1, #12]
 80066c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066c4:	079d      	lsls	r5, r3, #30
 80066c6:	4606      	mov	r6, r0
 80066c8:	460c      	mov	r4, r1
 80066ca:	d507      	bpl.n	80066dc <__smakebuf_r+0x1c>
 80066cc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80066d0:	6023      	str	r3, [r4, #0]
 80066d2:	6123      	str	r3, [r4, #16]
 80066d4:	2301      	movs	r3, #1
 80066d6:	6163      	str	r3, [r4, #20]
 80066d8:	b003      	add	sp, #12
 80066da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066dc:	ab01      	add	r3, sp, #4
 80066de:	466a      	mov	r2, sp
 80066e0:	f7ff ffc8 	bl	8006674 <__swhatbuf_r>
 80066e4:	9f00      	ldr	r7, [sp, #0]
 80066e6:	4605      	mov	r5, r0
 80066e8:	4639      	mov	r1, r7
 80066ea:	4630      	mov	r0, r6
 80066ec:	f7ff fa50 	bl	8005b90 <_malloc_r>
 80066f0:	b948      	cbnz	r0, 8006706 <__smakebuf_r+0x46>
 80066f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066f6:	059a      	lsls	r2, r3, #22
 80066f8:	d4ee      	bmi.n	80066d8 <__smakebuf_r+0x18>
 80066fa:	f023 0303 	bic.w	r3, r3, #3
 80066fe:	f043 0302 	orr.w	r3, r3, #2
 8006702:	81a3      	strh	r3, [r4, #12]
 8006704:	e7e2      	b.n	80066cc <__smakebuf_r+0xc>
 8006706:	89a3      	ldrh	r3, [r4, #12]
 8006708:	6020      	str	r0, [r4, #0]
 800670a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800670e:	81a3      	strh	r3, [r4, #12]
 8006710:	9b01      	ldr	r3, [sp, #4]
 8006712:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006716:	b15b      	cbz	r3, 8006730 <__smakebuf_r+0x70>
 8006718:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800671c:	4630      	mov	r0, r6
 800671e:	f000 f86b 	bl	80067f8 <_isatty_r>
 8006722:	b128      	cbz	r0, 8006730 <__smakebuf_r+0x70>
 8006724:	89a3      	ldrh	r3, [r4, #12]
 8006726:	f023 0303 	bic.w	r3, r3, #3
 800672a:	f043 0301 	orr.w	r3, r3, #1
 800672e:	81a3      	strh	r3, [r4, #12]
 8006730:	89a3      	ldrh	r3, [r4, #12]
 8006732:	431d      	orrs	r5, r3
 8006734:	81a5      	strh	r5, [r4, #12]
 8006736:	e7cf      	b.n	80066d8 <__smakebuf_r+0x18>

08006738 <_putc_r>:
 8006738:	b570      	push	{r4, r5, r6, lr}
 800673a:	460d      	mov	r5, r1
 800673c:	4614      	mov	r4, r2
 800673e:	4606      	mov	r6, r0
 8006740:	b118      	cbz	r0, 800674a <_putc_r+0x12>
 8006742:	6a03      	ldr	r3, [r0, #32]
 8006744:	b90b      	cbnz	r3, 800674a <_putc_r+0x12>
 8006746:	f7fe fe71 	bl	800542c <__sinit>
 800674a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800674c:	07d8      	lsls	r0, r3, #31
 800674e:	d405      	bmi.n	800675c <_putc_r+0x24>
 8006750:	89a3      	ldrh	r3, [r4, #12]
 8006752:	0599      	lsls	r1, r3, #22
 8006754:	d402      	bmi.n	800675c <_putc_r+0x24>
 8006756:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006758:	f7ff f96f 	bl	8005a3a <__retarget_lock_acquire_recursive>
 800675c:	68a3      	ldr	r3, [r4, #8]
 800675e:	3b01      	subs	r3, #1
 8006760:	2b00      	cmp	r3, #0
 8006762:	60a3      	str	r3, [r4, #8]
 8006764:	da05      	bge.n	8006772 <_putc_r+0x3a>
 8006766:	69a2      	ldr	r2, [r4, #24]
 8006768:	4293      	cmp	r3, r2
 800676a:	db12      	blt.n	8006792 <_putc_r+0x5a>
 800676c:	b2eb      	uxtb	r3, r5
 800676e:	2b0a      	cmp	r3, #10
 8006770:	d00f      	beq.n	8006792 <_putc_r+0x5a>
 8006772:	6823      	ldr	r3, [r4, #0]
 8006774:	1c5a      	adds	r2, r3, #1
 8006776:	6022      	str	r2, [r4, #0]
 8006778:	701d      	strb	r5, [r3, #0]
 800677a:	b2ed      	uxtb	r5, r5
 800677c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800677e:	07da      	lsls	r2, r3, #31
 8006780:	d405      	bmi.n	800678e <_putc_r+0x56>
 8006782:	89a3      	ldrh	r3, [r4, #12]
 8006784:	059b      	lsls	r3, r3, #22
 8006786:	d402      	bmi.n	800678e <_putc_r+0x56>
 8006788:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800678a:	f7ff f957 	bl	8005a3c <__retarget_lock_release_recursive>
 800678e:	4628      	mov	r0, r5
 8006790:	bd70      	pop	{r4, r5, r6, pc}
 8006792:	4629      	mov	r1, r5
 8006794:	4622      	mov	r2, r4
 8006796:	4630      	mov	r0, r6
 8006798:	f7fe ff59 	bl	800564e <__swbuf_r>
 800679c:	4605      	mov	r5, r0
 800679e:	e7ed      	b.n	800677c <_putc_r+0x44>

080067a0 <memmove>:
 80067a0:	4288      	cmp	r0, r1
 80067a2:	b510      	push	{r4, lr}
 80067a4:	eb01 0402 	add.w	r4, r1, r2
 80067a8:	d902      	bls.n	80067b0 <memmove+0x10>
 80067aa:	4284      	cmp	r4, r0
 80067ac:	4623      	mov	r3, r4
 80067ae:	d807      	bhi.n	80067c0 <memmove+0x20>
 80067b0:	1e43      	subs	r3, r0, #1
 80067b2:	42a1      	cmp	r1, r4
 80067b4:	d008      	beq.n	80067c8 <memmove+0x28>
 80067b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80067ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80067be:	e7f8      	b.n	80067b2 <memmove+0x12>
 80067c0:	4402      	add	r2, r0
 80067c2:	4601      	mov	r1, r0
 80067c4:	428a      	cmp	r2, r1
 80067c6:	d100      	bne.n	80067ca <memmove+0x2a>
 80067c8:	bd10      	pop	{r4, pc}
 80067ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80067ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80067d2:	e7f7      	b.n	80067c4 <memmove+0x24>

080067d4 <_fstat_r>:
 80067d4:	b538      	push	{r3, r4, r5, lr}
 80067d6:	4d07      	ldr	r5, [pc, #28]	@ (80067f4 <_fstat_r+0x20>)
 80067d8:	2300      	movs	r3, #0
 80067da:	4604      	mov	r4, r0
 80067dc:	4608      	mov	r0, r1
 80067de:	4611      	mov	r1, r2
 80067e0:	602b      	str	r3, [r5, #0]
 80067e2:	f7fa fde7 	bl	80013b4 <_fstat>
 80067e6:	1c43      	adds	r3, r0, #1
 80067e8:	d102      	bne.n	80067f0 <_fstat_r+0x1c>
 80067ea:	682b      	ldr	r3, [r5, #0]
 80067ec:	b103      	cbz	r3, 80067f0 <_fstat_r+0x1c>
 80067ee:	6023      	str	r3, [r4, #0]
 80067f0:	bd38      	pop	{r3, r4, r5, pc}
 80067f2:	bf00      	nop
 80067f4:	20004b90 	.word	0x20004b90

080067f8 <_isatty_r>:
 80067f8:	b538      	push	{r3, r4, r5, lr}
 80067fa:	4d06      	ldr	r5, [pc, #24]	@ (8006814 <_isatty_r+0x1c>)
 80067fc:	2300      	movs	r3, #0
 80067fe:	4604      	mov	r4, r0
 8006800:	4608      	mov	r0, r1
 8006802:	602b      	str	r3, [r5, #0]
 8006804:	f7fa fde6 	bl	80013d4 <_isatty>
 8006808:	1c43      	adds	r3, r0, #1
 800680a:	d102      	bne.n	8006812 <_isatty_r+0x1a>
 800680c:	682b      	ldr	r3, [r5, #0]
 800680e:	b103      	cbz	r3, 8006812 <_isatty_r+0x1a>
 8006810:	6023      	str	r3, [r4, #0]
 8006812:	bd38      	pop	{r3, r4, r5, pc}
 8006814:	20004b90 	.word	0x20004b90

08006818 <_sbrk_r>:
 8006818:	b538      	push	{r3, r4, r5, lr}
 800681a:	4d06      	ldr	r5, [pc, #24]	@ (8006834 <_sbrk_r+0x1c>)
 800681c:	2300      	movs	r3, #0
 800681e:	4604      	mov	r4, r0
 8006820:	4608      	mov	r0, r1
 8006822:	602b      	str	r3, [r5, #0]
 8006824:	f7fa fdee 	bl	8001404 <_sbrk>
 8006828:	1c43      	adds	r3, r0, #1
 800682a:	d102      	bne.n	8006832 <_sbrk_r+0x1a>
 800682c:	682b      	ldr	r3, [r5, #0]
 800682e:	b103      	cbz	r3, 8006832 <_sbrk_r+0x1a>
 8006830:	6023      	str	r3, [r4, #0]
 8006832:	bd38      	pop	{r3, r4, r5, pc}
 8006834:	20004b90 	.word	0x20004b90

08006838 <abort>:
 8006838:	b508      	push	{r3, lr}
 800683a:	2006      	movs	r0, #6
 800683c:	f000 f85a 	bl	80068f4 <raise>
 8006840:	2001      	movs	r0, #1
 8006842:	f7fa fd67 	bl	8001314 <_exit>

08006846 <_realloc_r>:
 8006846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800684a:	4680      	mov	r8, r0
 800684c:	4615      	mov	r5, r2
 800684e:	460c      	mov	r4, r1
 8006850:	b921      	cbnz	r1, 800685c <_realloc_r+0x16>
 8006852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006856:	4611      	mov	r1, r2
 8006858:	f7ff b99a 	b.w	8005b90 <_malloc_r>
 800685c:	b92a      	cbnz	r2, 800686a <_realloc_r+0x24>
 800685e:	f7ff f923 	bl	8005aa8 <_free_r>
 8006862:	2400      	movs	r4, #0
 8006864:	4620      	mov	r0, r4
 8006866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800686a:	f000 f85f 	bl	800692c <_malloc_usable_size_r>
 800686e:	4285      	cmp	r5, r0
 8006870:	4606      	mov	r6, r0
 8006872:	d802      	bhi.n	800687a <_realloc_r+0x34>
 8006874:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006878:	d8f4      	bhi.n	8006864 <_realloc_r+0x1e>
 800687a:	4629      	mov	r1, r5
 800687c:	4640      	mov	r0, r8
 800687e:	f7ff f987 	bl	8005b90 <_malloc_r>
 8006882:	4607      	mov	r7, r0
 8006884:	2800      	cmp	r0, #0
 8006886:	d0ec      	beq.n	8006862 <_realloc_r+0x1c>
 8006888:	42b5      	cmp	r5, r6
 800688a:	462a      	mov	r2, r5
 800688c:	4621      	mov	r1, r4
 800688e:	bf28      	it	cs
 8006890:	4632      	movcs	r2, r6
 8006892:	f7ff f8dc 	bl	8005a4e <memcpy>
 8006896:	4621      	mov	r1, r4
 8006898:	4640      	mov	r0, r8
 800689a:	f7ff f905 	bl	8005aa8 <_free_r>
 800689e:	463c      	mov	r4, r7
 80068a0:	e7e0      	b.n	8006864 <_realloc_r+0x1e>

080068a2 <_raise_r>:
 80068a2:	291f      	cmp	r1, #31
 80068a4:	b538      	push	{r3, r4, r5, lr}
 80068a6:	4605      	mov	r5, r0
 80068a8:	460c      	mov	r4, r1
 80068aa:	d904      	bls.n	80068b6 <_raise_r+0x14>
 80068ac:	2316      	movs	r3, #22
 80068ae:	6003      	str	r3, [r0, #0]
 80068b0:	f04f 30ff 	mov.w	r0, #4294967295
 80068b4:	bd38      	pop	{r3, r4, r5, pc}
 80068b6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80068b8:	b112      	cbz	r2, 80068c0 <_raise_r+0x1e>
 80068ba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80068be:	b94b      	cbnz	r3, 80068d4 <_raise_r+0x32>
 80068c0:	4628      	mov	r0, r5
 80068c2:	f000 f831 	bl	8006928 <_getpid_r>
 80068c6:	4622      	mov	r2, r4
 80068c8:	4601      	mov	r1, r0
 80068ca:	4628      	mov	r0, r5
 80068cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068d0:	f000 b818 	b.w	8006904 <_kill_r>
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d00a      	beq.n	80068ee <_raise_r+0x4c>
 80068d8:	1c59      	adds	r1, r3, #1
 80068da:	d103      	bne.n	80068e4 <_raise_r+0x42>
 80068dc:	2316      	movs	r3, #22
 80068de:	6003      	str	r3, [r0, #0]
 80068e0:	2001      	movs	r0, #1
 80068e2:	e7e7      	b.n	80068b4 <_raise_r+0x12>
 80068e4:	2100      	movs	r1, #0
 80068e6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80068ea:	4620      	mov	r0, r4
 80068ec:	4798      	blx	r3
 80068ee:	2000      	movs	r0, #0
 80068f0:	e7e0      	b.n	80068b4 <_raise_r+0x12>
	...

080068f4 <raise>:
 80068f4:	4b02      	ldr	r3, [pc, #8]	@ (8006900 <raise+0xc>)
 80068f6:	4601      	mov	r1, r0
 80068f8:	6818      	ldr	r0, [r3, #0]
 80068fa:	f7ff bfd2 	b.w	80068a2 <_raise_r>
 80068fe:	bf00      	nop
 8006900:	20000034 	.word	0x20000034

08006904 <_kill_r>:
 8006904:	b538      	push	{r3, r4, r5, lr}
 8006906:	4d07      	ldr	r5, [pc, #28]	@ (8006924 <_kill_r+0x20>)
 8006908:	2300      	movs	r3, #0
 800690a:	4604      	mov	r4, r0
 800690c:	4608      	mov	r0, r1
 800690e:	4611      	mov	r1, r2
 8006910:	602b      	str	r3, [r5, #0]
 8006912:	f7fa fcef 	bl	80012f4 <_kill>
 8006916:	1c43      	adds	r3, r0, #1
 8006918:	d102      	bne.n	8006920 <_kill_r+0x1c>
 800691a:	682b      	ldr	r3, [r5, #0]
 800691c:	b103      	cbz	r3, 8006920 <_kill_r+0x1c>
 800691e:	6023      	str	r3, [r4, #0]
 8006920:	bd38      	pop	{r3, r4, r5, pc}
 8006922:	bf00      	nop
 8006924:	20004b90 	.word	0x20004b90

08006928 <_getpid_r>:
 8006928:	f7fa bcdc 	b.w	80012e4 <_getpid>

0800692c <_malloc_usable_size_r>:
 800692c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006930:	1f18      	subs	r0, r3, #4
 8006932:	2b00      	cmp	r3, #0
 8006934:	bfbc      	itt	lt
 8006936:	580b      	ldrlt	r3, [r1, r0]
 8006938:	18c0      	addlt	r0, r0, r3
 800693a:	4770      	bx	lr

0800693c <_init>:
 800693c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800693e:	bf00      	nop
 8006940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006942:	bc08      	pop	{r3}
 8006944:	469e      	mov	lr, r3
 8006946:	4770      	bx	lr

08006948 <_fini>:
 8006948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800694a:	bf00      	nop
 800694c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800694e:	bc08      	pop	{r3}
 8006950:	469e      	mov	lr, r3
 8006952:	4770      	bx	lr
