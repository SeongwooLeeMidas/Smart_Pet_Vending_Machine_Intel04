
Vending_Machine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f94  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  08008134  08008134  00009134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084e8  080084e8  0000a084  2**0
                  CONTENTS
  4 .ARM          00000008  080084e8  080084e8  000094e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084f0  080084f0  0000a084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084f0  080084f0  000094f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080084f4  080084f4  000094f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  080084f8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043c4  20000084  0800857c  0000a084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004448  0800857c  0000a448  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016823  00000000  00000000  0000a0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003886  00000000  00000000  000208d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001390  00000000  00000000  00024160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f1a  00000000  00000000  000254f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019cca  00000000  00000000  0002640a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000176c3  00000000  00000000  000400d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000998a2  00000000  00000000  00057797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f1039  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cf8  00000000  00000000  000f107c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000f6d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800811c 	.word	0x0800811c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	0800811c 	.word	0x0800811c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	607b      	str	r3, [r7, #4]
 80005aa:	4b17      	ldr	r3, [pc, #92]	@ (8000608 <MX_DMA_Init+0x68>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	4a16      	ldr	r2, [pc, #88]	@ (8000608 <MX_DMA_Init+0x68>)
 80005b0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b6:	4b14      	ldr	r3, [pc, #80]	@ (8000608 <MX_DMA_Init+0x68>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	603b      	str	r3, [r7, #0]
 80005c6:	4b10      	ldr	r3, [pc, #64]	@ (8000608 <MX_DMA_Init+0x68>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	4a0f      	ldr	r2, [pc, #60]	@ (8000608 <MX_DMA_Init+0x68>)
 80005cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000608 <MX_DMA_Init+0x68>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005da:	603b      	str	r3, [r7, #0]
 80005dc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	2105      	movs	r1, #5
 80005e2:	2010      	movs	r0, #16
 80005e4:	f001 f83c 	bl	8001660 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80005e8:	2010      	movs	r0, #16
 80005ea:	f001 f855 	bl	8001698 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2105      	movs	r1, #5
 80005f2:	2039      	movs	r0, #57	@ 0x39
 80005f4:	f001 f834 	bl	8001660 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80005f8:	2039      	movs	r0, #57	@ 0x39
 80005fa:	f001 f84d 	bl	8001698 <HAL_NVIC_EnableIRQ>

}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	40023800 	.word	0x40023800

0800060c <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000616:	bf00      	nop
 8000618:	370c      	adds	r7, #12
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
	...

08000624 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	60f8      	str	r0, [r7, #12]
 800062c:	60b9      	str	r1, [r7, #8]
 800062e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	4a07      	ldr	r2, [pc, #28]	@ (8000650 <vApplicationGetIdleTaskMemory+0x2c>)
 8000634:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	4a06      	ldr	r2, [pc, #24]	@ (8000654 <vApplicationGetIdleTaskMemory+0x30>)
 800063a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2280      	movs	r2, #128	@ 0x80
 8000640:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000642:	bf00      	nop
 8000644:	3714      	adds	r7, #20
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	200000f4 	.word	0x200000f4
 8000654:	20000194 	.word	0x20000194

08000658 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000658:	b5b0      	push	{r4, r5, r7, lr}
 800065a:	b092      	sub	sp, #72	@ 0x48
 800065c:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of msgQueue */
  osMessageQDef(msgQueue, 32, uint32_t);
 800065e:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <MX_FREERTOS_Init+0x74>)
 8000660:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000664:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000666:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  msgQueueHandle = osMessageCreate(osMessageQ(msgQueue), NULL);
 800066a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800066e:	2100      	movs	r1, #0
 8000670:	4618      	mov	r0, r3
 8000672:	f003 ff8e 	bl	8004592 <osMessageCreate>
 8000676:	4603      	mov	r3, r0
 8000678:	4a15      	ldr	r2, [pc, #84]	@ (80006d0 <MX_FREERTOS_Init+0x78>)
 800067a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of UART_Task */
  osThreadDef(UART_Task, UART_Task_Func, osPriorityNormal, 0, 256);
 800067c:	4b15      	ldr	r3, [pc, #84]	@ (80006d4 <MX_FREERTOS_Init+0x7c>)
 800067e:	f107 041c 	add.w	r4, r7, #28
 8000682:	461d      	mov	r5, r3
 8000684:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000686:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000688:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800068c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART_TaskHandle = osThreadCreate(osThread(UART_Task), NULL);
 8000690:	f107 031c 	add.w	r3, r7, #28
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f003 ff1b 	bl	80044d2 <osThreadCreate>
 800069c:	4603      	mov	r3, r0
 800069e:	4a0e      	ldr	r2, [pc, #56]	@ (80006d8 <MX_FREERTOS_Init+0x80>)
 80006a0:	6013      	str	r3, [r2, #0]

  /* definition and creation of IR_Task */
  osThreadDef(IR_Task, IR_Task_Func, osPriorityHigh, 0, 256);
 80006a2:	4b0e      	ldr	r3, [pc, #56]	@ (80006dc <MX_FREERTOS_Init+0x84>)
 80006a4:	463c      	mov	r4, r7
 80006a6:	461d      	mov	r5, r3
 80006a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IR_TaskHandle = osThreadCreate(osThread(IR_Task), NULL);
 80006b4:	463b      	mov	r3, r7
 80006b6:	2100      	movs	r1, #0
 80006b8:	4618      	mov	r0, r3
 80006ba:	f003 ff0a 	bl	80044d2 <osThreadCreate>
 80006be:	4603      	mov	r3, r0
 80006c0:	4a07      	ldr	r2, [pc, #28]	@ (80006e0 <MX_FREERTOS_Init+0x88>)
 80006c2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80006c4:	bf00      	nop
 80006c6:	3748      	adds	r7, #72	@ 0x48
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bdb0      	pop	{r4, r5, r7, pc}
 80006cc:	08008134 	.word	0x08008134
 80006d0:	200000f0 	.word	0x200000f0
 80006d4:	08008150 	.word	0x08008150
 80006d8:	200000e8 	.word	0x200000e8
 80006dc:	08008174 	.word	0x08008174
 80006e0:	200000ec 	.word	0x200000ec

080006e4 <UART_Task_Func>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_UART_Task_Func */
void UART_Task_Func(void const * argument)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b088      	sub	sp, #32
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_Task_Func */
	osEvent event;
  /* Infinite loop */
  for(;;)
  {
  	event = osMessageGet(msgQueueHandle, osWaitForever);
 80006ec:	4b19      	ldr	r3, [pc, #100]	@ (8000754 <UART_Task_Func+0x70>)
 80006ee:	6819      	ldr	r1, [r3, #0]
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	f04f 32ff 	mov.w	r2, #4294967295
 80006f8:	4618      	mov	r0, r3
 80006fa:	f003 ffb3 	bl	8004664 <osMessageGet>
		UBaseType_t uxHighWaterMark = uxTaskGetStackHighWaterMark(NULL);
 80006fe:	2000      	movs	r0, #0
 8000700:	f005 fc26 	bl	8005f50 <uxTaskGetStackHighWaterMark>
 8000704:	61f8      	str	r0, [r7, #28]
		printf("UART Task stack high watermark: %lu\r\n", uxHighWaterMark);
 8000706:	69f9      	ldr	r1, [r7, #28]
 8000708:	4813      	ldr	r0, [pc, #76]	@ (8000758 <UART_Task_Func+0x74>)
 800070a:	f006 fb27 	bl	8006d5c <iprintf>
		if (event.status == osEventMessage)
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	2b10      	cmp	r3, #16
 8000712:	d11a      	bne.n	800074a <UART_Task_Func+0x66>
		{
				uint32_t motorNumber = event.value.v;
 8000714:	693b      	ldr	r3, [r7, #16]
 8000716:	61bb      	str	r3, [r7, #24]

				// 모터 번호에 따른 동작 수행
				if (motorNumber >= 1 && motorNumber <= NUM_MOTOR_PINS)
 8000718:	69bb      	ldr	r3, [r7, #24]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d011      	beq.n	8000742 <UART_Task_Func+0x5e>
 800071e:	69bb      	ldr	r3, [r7, #24]
 8000720:	2b06      	cmp	r3, #6
 8000722:	d80e      	bhi.n	8000742 <UART_Task_Func+0x5e>
				{
						HAL_GPIO_WritePin(MOTOR_PORT, motorPins[motorNumber - 1], GPIO_PIN_SET);
 8000724:	69bb      	ldr	r3, [r7, #24]
 8000726:	3b01      	subs	r3, #1
 8000728:	4a0c      	ldr	r2, [pc, #48]	@ (800075c <UART_Task_Func+0x78>)
 800072a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800072e:	2201      	movs	r2, #1
 8000730:	4619      	mov	r1, r3
 8000732:	480b      	ldr	r0, [pc, #44]	@ (8000760 <UART_Task_Func+0x7c>)
 8000734:	f001 fd5c 	bl	80021f0 <HAL_GPIO_WritePin>
						printf("MOTOR %lu ON\r\n", motorNumber);
 8000738:	69b9      	ldr	r1, [r7, #24]
 800073a:	480a      	ldr	r0, [pc, #40]	@ (8000764 <UART_Task_Func+0x80>)
 800073c:	f006 fb0e 	bl	8006d5c <iprintf>
 8000740:	e003      	b.n	800074a <UART_Task_Func+0x66>
				}
				else
				{
						printf("Invalid motor number: %lu\r\n", motorNumber);
 8000742:	69b9      	ldr	r1, [r7, #24]
 8000744:	4808      	ldr	r0, [pc, #32]	@ (8000768 <UART_Task_Func+0x84>)
 8000746:	f006 fb09 	bl	8006d5c <iprintf>
				}
		}
    osDelay(500);
 800074a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800074e:	f003 ff0c 	bl	800456a <osDelay>
  {
 8000752:	e7cb      	b.n	80006ec <UART_Task_Func+0x8>
 8000754:	200000f0 	.word	0x200000f0
 8000758:	08008190 	.word	0x08008190
 800075c:	2000000c 	.word	0x2000000c
 8000760:	40020000 	.word	0x40020000
 8000764:	080081b8 	.word	0x080081b8
 8000768:	080081c8 	.word	0x080081c8

0800076c <IR_Task_Func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_IR_Task_Func */
void IR_Task_Func(void const * argument)
{
 800076c:	b590      	push	{r4, r7, lr}
 800076e:	b087      	sub	sp, #28
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IR_Task_Func */

  /* Infinite loop */
  for(;;)
  {
  	UBaseType_t uxHighWaterMark = uxTaskGetStackHighWaterMark(NULL);  // ?��?�� ?��?��?��?�� ?��?�� ?��?��?��
 8000774:	2000      	movs	r0, #0
 8000776:	f005 fbeb 	bl	8005f50 <uxTaskGetStackHighWaterMark>
 800077a:	6138      	str	r0, [r7, #16]
  	printf("IR Task stack high watermark: %lu\r\n", uxHighWaterMark);
 800077c:	6939      	ldr	r1, [r7, #16]
 800077e:	4839      	ldr	r0, [pc, #228]	@ (8000864 <IR_Task_Func+0xf8>)
 8000780:	f006 faec 	bl	8006d5c <iprintf>
  	for (int i = 0; i < NUM_IR_PINS; i++) {
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
 8000788:	e065      	b.n	8000856 <IR_Task_Func+0xea>
			sampleValues[i][sampleIndex[i]] = HAL_GPIO_ReadPin(IR_PORT, irPins[i]);
 800078a:	4a37      	ldr	r2, [pc, #220]	@ (8000868 <IR_Task_Func+0xfc>)
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000792:	4936      	ldr	r1, [pc, #216]	@ (800086c <IR_Task_Func+0x100>)
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 800079a:	4611      	mov	r1, r2
 800079c:	4834      	ldr	r0, [pc, #208]	@ (8000870 <IR_Task_Func+0x104>)
 800079e:	f001 fd0f 	bl	80021c0 <HAL_GPIO_ReadPin>
 80007a2:	4603      	mov	r3, r0
 80007a4:	4618      	mov	r0, r3
 80007a6:	4933      	ldr	r1, [pc, #204]	@ (8000874 <IR_Task_Func+0x108>)
 80007a8:	697a      	ldr	r2, [r7, #20]
 80007aa:	4613      	mov	r3, r2
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	4413      	add	r3, r2
 80007b0:	440b      	add	r3, r1
 80007b2:	4423      	add	r3, r4
 80007b4:	4602      	mov	r2, r0
 80007b6:	701a      	strb	r2, [r3, #0]
			sampleIndex[i] = (sampleIndex[i] + 1) % SAMPLE_COUNT;
 80007b8:	4a2c      	ldr	r2, [pc, #176]	@ (800086c <IR_Task_Func+0x100>)
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007c0:	1c59      	adds	r1, r3, #1
 80007c2:	4b2d      	ldr	r3, [pc, #180]	@ (8000878 <IR_Task_Func+0x10c>)
 80007c4:	fb83 2301 	smull	r2, r3, r3, r1
 80007c8:	105a      	asrs	r2, r3, #1
 80007ca:	17cb      	asrs	r3, r1, #31
 80007cc:	1ad2      	subs	r2, r2, r3
 80007ce:	4613      	mov	r3, r2
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	4413      	add	r3, r2
 80007d4:	1aca      	subs	r2, r1, r3
 80007d6:	4925      	ldr	r1, [pc, #148]	@ (800086c <IR_Task_Func+0x100>)
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			if (sampleIndex[i] == 0) {
 80007de:	4a23      	ldr	r2, [pc, #140]	@ (800086c <IR_Task_Func+0x100>)
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d132      	bne.n	8000850 <IR_Task_Func+0xe4>
				GPIO_PinState majorityValue = majorityVote(sampleValues[i], SAMPLE_COUNT);
 80007ea:	697a      	ldr	r2, [r7, #20]
 80007ec:	4613      	mov	r3, r2
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	4413      	add	r3, r2
 80007f2:	4a20      	ldr	r2, [pc, #128]	@ (8000874 <IR_Task_Func+0x108>)
 80007f4:	4413      	add	r3, r2
 80007f6:	2105      	movs	r1, #5
 80007f8:	4618      	mov	r0, r3
 80007fa:	f000 f849 	bl	8000890 <majorityVote>
 80007fe:	4603      	mov	r3, r0
 8000800:	73fb      	strb	r3, [r7, #15]
				previousIrValues[i] = currentIrValues[i];
 8000802:	4a1e      	ldr	r2, [pc, #120]	@ (800087c <IR_Task_Func+0x110>)
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	4413      	add	r3, r2
 8000808:	7819      	ldrb	r1, [r3, #0]
 800080a:	4a1d      	ldr	r2, [pc, #116]	@ (8000880 <IR_Task_Func+0x114>)
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	4413      	add	r3, r2
 8000810:	460a      	mov	r2, r1
 8000812:	701a      	strb	r2, [r3, #0]
				currentIrValues[i] = majorityValue;
 8000814:	4a19      	ldr	r2, [pc, #100]	@ (800087c <IR_Task_Func+0x110>)
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	4413      	add	r3, r2
 800081a:	7bfa      	ldrb	r2, [r7, #15]
 800081c:	701a      	strb	r2, [r3, #0]
				//printf("1:%d, 2:%d, 3:%d, 4:%d, 5:%d, 6:%d\r\n",currentIrValues[0],currentIrValues[1],currentIrValues[2],currentIrValues[3],currentIrValues[4],currentIrValues[5]);
				if (previousIrValues[i] == GPIO_PIN_RESET && currentIrValues[i] == GPIO_PIN_SET) {
 800081e:	4a18      	ldr	r2, [pc, #96]	@ (8000880 <IR_Task_Func+0x114>)
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	4413      	add	r3, r2
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d112      	bne.n	8000850 <IR_Task_Func+0xe4>
 800082a:	4a14      	ldr	r2, [pc, #80]	@ (800087c <IR_Task_Func+0x110>)
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	4413      	add	r3, r2
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	2b01      	cmp	r3, #1
 8000834:	d10c      	bne.n	8000850 <IR_Task_Func+0xe4>
					printf("Motor %d OFF\r\n",i);
 8000836:	6979      	ldr	r1, [r7, #20]
 8000838:	4812      	ldr	r0, [pc, #72]	@ (8000884 <IR_Task_Func+0x118>)
 800083a:	f006 fa8f 	bl	8006d5c <iprintf>
					HAL_GPIO_WritePin(MOTOR_PORT, motorPins[i], GPIO_PIN_RESET);
 800083e:	4a12      	ldr	r2, [pc, #72]	@ (8000888 <IR_Task_Func+0x11c>)
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000846:	2200      	movs	r2, #0
 8000848:	4619      	mov	r1, r3
 800084a:	4810      	ldr	r0, [pc, #64]	@ (800088c <IR_Task_Func+0x120>)
 800084c:	f001 fcd0 	bl	80021f0 <HAL_GPIO_WritePin>
  	for (int i = 0; i < NUM_IR_PINS; i++) {
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	3301      	adds	r3, #1
 8000854:	617b      	str	r3, [r7, #20]
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	2b05      	cmp	r3, #5
 800085a:	dd96      	ble.n	800078a <IR_Task_Func+0x1e>
				}
			}
		}
  	osDelay(50);
 800085c:	2032      	movs	r0, #50	@ 0x32
 800085e:	f003 fe84 	bl	800456a <osDelay>
  {
 8000862:	e787      	b.n	8000774 <IR_Task_Func+0x8>
 8000864:	080081e4 	.word	0x080081e4
 8000868:	20000000 	.word	0x20000000
 800086c:	200000d0 	.word	0x200000d0
 8000870:	40020400 	.word	0x40020400
 8000874:	200000b0 	.word	0x200000b0
 8000878:	66666667 	.word	0x66666667
 800087c:	200000a0 	.word	0x200000a0
 8000880:	200000a8 	.word	0x200000a8
 8000884:	08008208 	.word	0x08008208
 8000888:	2000000c 	.word	0x2000000c
 800088c:	40020000 	.word	0x40020000

08000890 <majorityVote>:
    char taskList[512];
    vTaskList(taskList);
    printf("Task\t\tState\tPrio\tStack\tID\r\n");
    printf("%s\r\n", taskList);
}
GPIO_PinState majorityVote(GPIO_PinState *samples, int count) {
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	6039      	str	r1, [r7, #0]
  int highCount = 0;
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < count; i++) {
 800089e:	2300      	movs	r3, #0
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	e00b      	b.n	80008bc <majorityVote+0x2c>
    if (samples[i] == GPIO_PIN_SET) {
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	4413      	add	r3, r2
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d102      	bne.n	80008b6 <majorityVote+0x26>
      highCount++;
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	3301      	adds	r3, #1
 80008b4:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < count; i++) {
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	3301      	adds	r3, #1
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68ba      	ldr	r2, [r7, #8]
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	dbef      	blt.n	80008a4 <majorityVote+0x14>
    }
  }
  return (highCount > count / 2) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	0fda      	lsrs	r2, r3, #31
 80008c8:	4413      	add	r3, r2
 80008ca:	105b      	asrs	r3, r3, #1
 80008cc:	461a      	mov	r2, r3
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	4293      	cmp	r3, r2
 80008d2:	bfcc      	ite	gt
 80008d4:	2301      	movgt	r3, #1
 80008d6:	2300      	movle	r3, #0
 80008d8:	b2db      	uxtb	r3, r3
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3714      	adds	r7, #20
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
	...

080008e8 <bluetooth_Event>:

void bluetooth_Event()
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b0a6      	sub	sp, #152	@ 0x98
 80008ec:	af02      	add	r7, sp, #8

  int i=0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  int motorNumber = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  char * pToken;
  char * pArray[ARR_CNT]={0};
 80008fa:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
 8000908:	611a      	str	r2, [r3, #16]
  char recvBuf[CMD_SIZE];
  char sendBuf[CMD_SIZE];

  strcpy(recvBuf,btData);
 800090a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800090e:	4943      	ldr	r1, [pc, #268]	@ (8000a1c <bluetooth_Event+0x134>)
 8000910:	4618      	mov	r0, r3
 8000912:	f006 fcb8 	bl	8007286 <strcpy>
  printf("btData : %s\r\n",btData);
 8000916:	4941      	ldr	r1, [pc, #260]	@ (8000a1c <bluetooth_Event+0x134>)
 8000918:	4841      	ldr	r0, [pc, #260]	@ (8000a20 <bluetooth_Event+0x138>)
 800091a:	f006 fa1f 	bl	8006d5c <iprintf>

  pToken = strtok(recvBuf,"[@]");
 800091e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000922:	4940      	ldr	r1, [pc, #256]	@ (8000a24 <bluetooth_Event+0x13c>)
 8000924:	4618      	mov	r0, r3
 8000926:	f006 fb89 	bl	800703c <strtok>
 800092a:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
  while(pToken != NULL)
 800092e:	e017      	b.n	8000960 <bluetooth_Event+0x78>
  {
    pArray[i] =  pToken;
 8000930:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	3390      	adds	r3, #144	@ 0x90
 8000938:	443b      	add	r3, r7
 800093a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800093e:	f843 2c24 	str.w	r2, [r3, #-36]
    if(++i >= ARR_CNT)
 8000942:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000946:	3301      	adds	r3, #1
 8000948:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800094c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000950:	2b04      	cmp	r3, #4
 8000952:	dc0a      	bgt.n	800096a <bluetooth_Event+0x82>
      break;
    pToken = strtok(NULL,"[@]");
 8000954:	4933      	ldr	r1, [pc, #204]	@ (8000a24 <bluetooth_Event+0x13c>)
 8000956:	2000      	movs	r0, #0
 8000958:	f006 fb70 	bl	800703c <strtok>
 800095c:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
  while(pToken != NULL)
 8000960:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000964:	2b00      	cmp	r3, #0
 8000966:	d1e3      	bne.n	8000930 <bluetooth_Event+0x48>
 8000968:	e000      	b.n	800096c <bluetooth_Event+0x84>
      break;
 800096a:	bf00      	nop
  }

  if(!strcmp(pArray[1],"MOTOR"))
 800096c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800096e:	492e      	ldr	r1, [pc, #184]	@ (8000a28 <bluetooth_Event+0x140>)
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fc35 	bl	80001e0 <strcmp>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d126      	bne.n	80009ca <bluetooth_Event+0xe2>
  {
  	motorNumber = atoi(pArray[2]);
 800097c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800097e:	4618      	mov	r0, r3
 8000980:	f006 f8a2 	bl	8006ac8 <atoi>
 8000984:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
  	if(motorNumber >= 1 && motorNumber <= NUM_MOTOR_PINS) {
 8000988:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800098c:	2b00      	cmp	r3, #0
 800098e:	dd2c      	ble.n	80009ea <bluetooth_Event+0x102>
 8000990:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000994:	2b06      	cmp	r3, #6
 8000996:	dc28      	bgt.n	80009ea <bluetooth_Event+0x102>
  		UBaseType_t uxHighWaterMark = uxTaskGetStackHighWaterMark(NULL);
 8000998:	2000      	movs	r0, #0
 800099a:	f005 fad9 	bl	8005f50 <uxTaskGetStackHighWaterMark>
 800099e:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  		printf("BT Func stack high watermark: %lu\r\n", uxHighWaterMark);
 80009a2:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 80009a6:	4821      	ldr	r0, [pc, #132]	@ (8000a2c <bluetooth_Event+0x144>)
 80009a8:	f006 f9d8 	bl	8006d5c <iprintf>
  		// 모터 번호를 메시지 큐에 전송
			if (osMessagePut(msgQueueHandle, motorNumber, 0) != osOK)
 80009ac:	4b20      	ldr	r3, [pc, #128]	@ (8000a30 <bluetooth_Event+0x148>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 80009b4:	2200      	movs	r2, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f003 fe14 	bl	80045e4 <osMessagePut>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d013      	beq.n	80009ea <bluetooth_Event+0x102>
			{
					printf("Failed to send motor number to queue\n");
 80009c2:	481c      	ldr	r0, [pc, #112]	@ (8000a34 <bluetooth_Event+0x14c>)
 80009c4:	f006 fa32 	bl	8006e2c <puts>
 80009c8:	e00f      	b.n	80009ea <bluetooth_Event+0x102>
			}
		}
  }
  else if(!strncmp(pArray[1]," New conn",sizeof(" New conn")))
 80009ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80009cc:	491a      	ldr	r1, [pc, #104]	@ (8000a38 <bluetooth_Event+0x150>)
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fc06 	bl	80001e0 <strcmp>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d01c      	beq.n	8000a14 <bluetooth_Event+0x12c>
  {
      return;
  }
  else if(!strncmp(pArray[1]," Already log",sizeof(" Already log")))
 80009da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80009dc:	4917      	ldr	r1, [pc, #92]	@ (8000a3c <bluetooth_Event+0x154>)
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff fbfe 	bl	80001e0 <strcmp>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
  {
      return;
  }
  else
      return;
 80009e8:	e015      	b.n	8000a16 <bluetooth_Event+0x12e>

  sprintf(sendBuf,"[%s]%s@%s\n",pArray[0],pArray[1],pArray[2]);
 80009ea:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80009ec:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80009ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80009f0:	1d38      	adds	r0, r7, #4
 80009f2:	9300      	str	r3, [sp, #0]
 80009f4:	460b      	mov	r3, r1
 80009f6:	4912      	ldr	r1, [pc, #72]	@ (8000a40 <bluetooth_Event+0x158>)
 80009f8:	f006 fa20 	bl	8006e3c <siprintf>
  HAL_UART_Transmit(&huart6, (uint8_t *)sendBuf, strlen(sendBuf), 100);
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fbf8 	bl	80001f4 <strlen>
 8000a04:	4603      	mov	r3, r0
 8000a06:	b29a      	uxth	r2, r3
 8000a08:	1d39      	adds	r1, r7, #4
 8000a0a:	2364      	movs	r3, #100	@ 0x64
 8000a0c:	480d      	ldr	r0, [pc, #52]	@ (8000a44 <bluetooth_Event+0x15c>)
 8000a0e:	f002 fb97 	bl	8003140 <HAL_UART_Transmit>
 8000a12:	e000      	b.n	8000a16 <bluetooth_Event+0x12e>
      return;
 8000a14:	bf00      	nop
}
 8000a16:	3790      	adds	r7, #144	@ 0x90
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000418 	.word	0x20000418
 8000a20:	0800823c 	.word	0x0800823c
 8000a24:	0800824c 	.word	0x0800824c
 8000a28:	08008250 	.word	0x08008250
 8000a2c:	08008258 	.word	0x08008258
 8000a30:	200000f0 	.word	0x200000f0
 8000a34:	0800827c 	.word	0x0800827c
 8000a38:	080082a4 	.word	0x080082a4
 8000a3c:	080082b0 	.word	0x080082b0
 8000a40:	080082c0 	.word	0x080082c0
 8000a44:	20000494 	.word	0x20000494

08000a48 <__io_putchar>:
PUTCHAR_PROTOTYPE
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART6 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000a50:	1d39      	adds	r1, r7, #4
 8000a52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a56:	2201      	movs	r2, #1
 8000a58:	4803      	ldr	r0, [pc, #12]	@ (8000a68 <__io_putchar+0x20>)
 8000a5a:	f002 fb71 	bl	8003140 <HAL_UART_Transmit>

  return ch;
 8000a5e:	687b      	ldr	r3, [r7, #4]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	2000044c 	.word	0x2000044c

08000a6c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	@ 0x28
 8000a70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	4b34      	ldr	r3, [pc, #208]	@ (8000b58 <MX_GPIO_Init+0xec>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	4a33      	ldr	r2, [pc, #204]	@ (8000b58 <MX_GPIO_Init+0xec>)
 8000a8c:	f043 0304 	orr.w	r3, r3, #4
 8000a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a92:	4b31      	ldr	r3, [pc, #196]	@ (8000b58 <MX_GPIO_Init+0xec>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	f003 0304 	and.w	r3, r3, #4
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
 8000aa2:	4b2d      	ldr	r3, [pc, #180]	@ (8000b58 <MX_GPIO_Init+0xec>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	4a2c      	ldr	r2, [pc, #176]	@ (8000b58 <MX_GPIO_Init+0xec>)
 8000aa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aae:	4b2a      	ldr	r3, [pc, #168]	@ (8000b58 <MX_GPIO_Init+0xec>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	4b26      	ldr	r3, [pc, #152]	@ (8000b58 <MX_GPIO_Init+0xec>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	4a25      	ldr	r2, [pc, #148]	@ (8000b58 <MX_GPIO_Init+0xec>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aca:	4b23      	ldr	r3, [pc, #140]	@ (8000b58 <MX_GPIO_Init+0xec>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	4b1f      	ldr	r3, [pc, #124]	@ (8000b58 <MX_GPIO_Init+0xec>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	4a1e      	ldr	r2, [pc, #120]	@ (8000b58 <MX_GPIO_Init+0xec>)
 8000ae0:	f043 0302 	orr.w	r3, r3, #2
 8000ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b58 <MX_GPIO_Init+0xec>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	f003 0302 	and.w	r3, r3, #2
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000af2:	2200      	movs	r2, #0
 8000af4:	21f3      	movs	r1, #243	@ 0xf3
 8000af6:	4819      	ldr	r0, [pc, #100]	@ (8000b5c <MX_GPIO_Init+0xf0>)
 8000af8:	f001 fb7a 	bl	80021f0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000afc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b02:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	4813      	ldr	r0, [pc, #76]	@ (8000b60 <MX_GPIO_Init+0xf4>)
 8000b14:	f001 f9d0 	bl	8001eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000b18:	23f3      	movs	r3, #243	@ 0xf3
 8000b1a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	480b      	ldr	r0, [pc, #44]	@ (8000b5c <MX_GPIO_Init+0xf0>)
 8000b30:	f001 f9c2 	bl	8001eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13
 8000b34:	f24e 0307 	movw	r3, #57351	@ 0xe007
 8000b38:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4619      	mov	r1, r3
 8000b48:	4806      	ldr	r0, [pc, #24]	@ (8000b64 <MX_GPIO_Init+0xf8>)
 8000b4a:	f001 f9b5 	bl	8001eb8 <HAL_GPIO_Init>

}
 8000b4e:	bf00      	nop
 8000b50:	3728      	adds	r7, #40	@ 0x28
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40020000 	.word	0x40020000
 8000b60:	40020800 	.word	0x40020800
 8000b64:	40020400 	.word	0x40020400

08000b68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int ret = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b72:	f000 fc7b 	bl	800146c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b76:	f000 f825 	bl	8000bc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b7a:	f7ff ff77 	bl	8000a6c <MX_GPIO_Init>
  MX_DMA_Init();
 8000b7e:	f7ff fd0f 	bl	80005a0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000b82:	f000 fa6f 	bl	8001064 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000b86:	f000 fa97 	bl	80010b8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  ret |= drv_uart_init();
 8000b8a:	f000 fbb1 	bl	80012f0 <drv_uart_init>
 8000b8e:	4602      	mov	r2, r0
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	607b      	str	r3, [r7, #4]
	ret |= drv_esp_init();
 8000b96:	f000 fbb9 	bl	800130c <drv_esp_init>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	607b      	str	r3, [r7, #4]
	if(ret != 0) Error_Handler();
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <main+0x44>
 8000ba8:	f000 f888 	bl	8000cbc <Error_Handler>
	printf("start main()\r\n");
 8000bac:	4804      	ldr	r0, [pc, #16]	@ (8000bc0 <main+0x58>)
 8000bae:	f006 f93d 	bl	8006e2c <puts>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000bb2:	f7ff fd51 	bl	8000658 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000bb6:	f003 fc85 	bl	80044c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bba:	bf00      	nop
 8000bbc:	e7fd      	b.n	8000bba <main+0x52>
 8000bbe:	bf00      	nop
 8000bc0:	080082cc 	.word	0x080082cc

08000bc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b094      	sub	sp, #80	@ 0x50
 8000bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bca:	f107 0320 	add.w	r3, r7, #32
 8000bce:	2230      	movs	r2, #48	@ 0x30
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f006 fa2a 	bl	800702c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd8:	f107 030c 	add.w	r3, r7, #12
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be8:	2300      	movs	r3, #0
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	4b28      	ldr	r3, [pc, #160]	@ (8000c90 <SystemClock_Config+0xcc>)
 8000bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf0:	4a27      	ldr	r2, [pc, #156]	@ (8000c90 <SystemClock_Config+0xcc>)
 8000bf2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bf6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bf8:	4b25      	ldr	r3, [pc, #148]	@ (8000c90 <SystemClock_Config+0xcc>)
 8000bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c04:	2300      	movs	r3, #0
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	4b22      	ldr	r3, [pc, #136]	@ (8000c94 <SystemClock_Config+0xd0>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a21      	ldr	r2, [pc, #132]	@ (8000c94 <SystemClock_Config+0xd0>)
 8000c0e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c12:	6013      	str	r3, [r2, #0]
 8000c14:	4b1f      	ldr	r3, [pc, #124]	@ (8000c94 <SystemClock_Config+0xd0>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c1c:	607b      	str	r3, [r7, #4]
 8000c1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c20:	2302      	movs	r3, #2
 8000c22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c24:	2301      	movs	r3, #1
 8000c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c28:	2310      	movs	r3, #16
 8000c2a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c30:	2300      	movs	r3, #0
 8000c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000c34:	2310      	movs	r3, #16
 8000c36:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c38:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000c3c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c3e:	2304      	movs	r3, #4
 8000c40:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c42:	2304      	movs	r3, #4
 8000c44:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c46:	f107 0320 	add.w	r3, r7, #32
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f001 faea 	bl	8002224 <HAL_RCC_OscConfig>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c56:	f000 f831 	bl	8000cbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c5a:	230f      	movs	r3, #15
 8000c5c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c62:	2300      	movs	r3, #0
 8000c64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c70:	f107 030c 	add.w	r3, r7, #12
 8000c74:	2102      	movs	r1, #2
 8000c76:	4618      	mov	r0, r3
 8000c78:	f001 fd4c 	bl	8002714 <HAL_RCC_ClockConfig>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c82:	f000 f81b 	bl	8000cbc <Error_Handler>
  }
}
 8000c86:	bf00      	nop
 8000c88:	3750      	adds	r7, #80	@ 0x50
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40007000 	.word	0x40007000

08000c98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a04      	ldr	r2, [pc, #16]	@ (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d101      	bne.n	8000cae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000caa:	f000 fc01 	bl	80014b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40000400 	.word	0x40000400

08000cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc0:	b672      	cpsid	i
}
 8000cc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc4:	bf00      	nop
 8000cc6:	e7fd      	b.n	8000cc4 <Error_Handler+0x8>

08000cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	607b      	str	r3, [r7, #4]
 8000cd2:	4b12      	ldr	r3, [pc, #72]	@ (8000d1c <HAL_MspInit+0x54>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd6:	4a11      	ldr	r2, [pc, #68]	@ (8000d1c <HAL_MspInit+0x54>)
 8000cd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cde:	4b0f      	ldr	r3, [pc, #60]	@ (8000d1c <HAL_MspInit+0x54>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ce2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	603b      	str	r3, [r7, #0]
 8000cee:	4b0b      	ldr	r3, [pc, #44]	@ (8000d1c <HAL_MspInit+0x54>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8000d1c <HAL_MspInit+0x54>)
 8000cf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cfa:	4b08      	ldr	r3, [pc, #32]	@ (8000d1c <HAL_MspInit+0x54>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	210f      	movs	r1, #15
 8000d0a:	f06f 0001 	mvn.w	r0, #1
 8000d0e:	f000 fca7 	bl	8001660 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40023800 	.word	0x40023800

08000d20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08e      	sub	sp, #56	@ 0x38
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000d30:	2300      	movs	r3, #0
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	4b33      	ldr	r3, [pc, #204]	@ (8000e04 <HAL_InitTick+0xe4>)
 8000d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d38:	4a32      	ldr	r2, [pc, #200]	@ (8000e04 <HAL_InitTick+0xe4>)
 8000d3a:	f043 0302 	orr.w	r3, r3, #2
 8000d3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d40:	4b30      	ldr	r3, [pc, #192]	@ (8000e04 <HAL_InitTick+0xe4>)
 8000d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d44:	f003 0302 	and.w	r3, r3, #2
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d4c:	f107 0210 	add.w	r2, r7, #16
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	4611      	mov	r1, r2
 8000d56:	4618      	mov	r0, r3
 8000d58:	f001 fefc 	bl	8002b54 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d5c:	6a3b      	ldr	r3, [r7, #32]
 8000d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d103      	bne.n	8000d6e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d66:	f001 fecd 	bl	8002b04 <HAL_RCC_GetPCLK1Freq>
 8000d6a:	6378      	str	r0, [r7, #52]	@ 0x34
 8000d6c:	e004      	b.n	8000d78 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d6e:	f001 fec9 	bl	8002b04 <HAL_RCC_GetPCLK1Freq>
 8000d72:	4603      	mov	r3, r0
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d7a:	4a23      	ldr	r2, [pc, #140]	@ (8000e08 <HAL_InitTick+0xe8>)
 8000d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d80:	0c9b      	lsrs	r3, r3, #18
 8000d82:	3b01      	subs	r3, #1
 8000d84:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000d86:	4b21      	ldr	r3, [pc, #132]	@ (8000e0c <HAL_InitTick+0xec>)
 8000d88:	4a21      	ldr	r2, [pc, #132]	@ (8000e10 <HAL_InitTick+0xf0>)
 8000d8a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000d8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000e0c <HAL_InitTick+0xec>)
 8000d8e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d92:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000d94:	4a1d      	ldr	r2, [pc, #116]	@ (8000e0c <HAL_InitTick+0xec>)
 8000d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d98:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000d9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e0c <HAL_InitTick+0xec>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e0c <HAL_InitTick+0xec>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da6:	4b19      	ldr	r3, [pc, #100]	@ (8000e0c <HAL_InitTick+0xec>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000dac:	4817      	ldr	r0, [pc, #92]	@ (8000e0c <HAL_InitTick+0xec>)
 8000dae:	f001 ff03 	bl	8002bb8 <HAL_TIM_Base_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000db8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d11b      	bne.n	8000df8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000dc0:	4812      	ldr	r0, [pc, #72]	@ (8000e0c <HAL_InitTick+0xec>)
 8000dc2:	f001 ff53 	bl	8002c6c <HAL_TIM_Base_Start_IT>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000dcc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d111      	bne.n	8000df8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000dd4:	201d      	movs	r0, #29
 8000dd6:	f000 fc5f 	bl	8001698 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2b0f      	cmp	r3, #15
 8000dde:	d808      	bhi.n	8000df2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000de0:	2200      	movs	r2, #0
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	201d      	movs	r0, #29
 8000de6:	f000 fc3b 	bl	8001660 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dea:	4a0a      	ldr	r2, [pc, #40]	@ (8000e14 <HAL_InitTick+0xf4>)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6013      	str	r3, [r2, #0]
 8000df0:	e002      	b.n	8000df8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000df8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3738      	adds	r7, #56	@ 0x38
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40023800 	.word	0x40023800
 8000e08:	431bde83 	.word	0x431bde83
 8000e0c:	20000394 	.word	0x20000394
 8000e10:	40000400 	.word	0x40000400
 8000e14:	2000001c 	.word	0x2000001c

08000e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <NMI_Handler+0x4>

08000e20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <HardFault_Handler+0x4>

08000e28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <MemManage_Handler+0x4>

08000e30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <BusFault_Handler+0x4>

08000e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <UsageFault_Handler+0x4>

08000e40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
	...

08000e50 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000e54:	4802      	ldr	r0, [pc, #8]	@ (8000e60 <DMA1_Stream5_IRQHandler+0x10>)
 8000e56:	f000 fdc5 	bl	80019e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	200004dc 	.word	0x200004dc

08000e64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e68:	4802      	ldr	r0, [pc, #8]	@ (8000e74 <TIM3_IRQHandler+0x10>)
 8000e6a:	f001 ff61 	bl	8002d30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000394 	.word	0x20000394

08000e78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e7c:	4802      	ldr	r0, [pc, #8]	@ (8000e88 <USART2_IRQHandler+0x10>)
 8000e7e:	f002 fa0f 	bl	80032a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	2000044c 	.word	0x2000044c

08000e8c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8000e90:	4802      	ldr	r0, [pc, #8]	@ (8000e9c <DMA2_Stream1_IRQHandler+0x10>)
 8000e92:	f000 fda7 	bl	80019e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	2000053c 	.word	0x2000053c

08000ea0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000ea4:	4802      	ldr	r0, [pc, #8]	@ (8000eb0 <USART6_IRQHandler+0x10>)
 8000ea6:	f002 f9fb 	bl	80032a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000494 	.word	0x20000494

08000eb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return 1;
 8000eb8:	2301      	movs	r3, #1
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <_kill>:

int _kill(int pid, int sig)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ece:	f006 f9ad 	bl	800722c <__errno>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2216      	movs	r2, #22
 8000ed6:	601a      	str	r2, [r3, #0]
  return -1;
 8000ed8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <_exit>:

void _exit (int status)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000eec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff ffe7 	bl	8000ec4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ef6:	bf00      	nop
 8000ef8:	e7fd      	b.n	8000ef6 <_exit+0x12>

08000efa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b086      	sub	sp, #24
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	60f8      	str	r0, [r7, #12]
 8000f02:	60b9      	str	r1, [r7, #8]
 8000f04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	e00a      	b.n	8000f22 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f0c:	f3af 8000 	nop.w
 8000f10:	4601      	mov	r1, r0
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	1c5a      	adds	r2, r3, #1
 8000f16:	60ba      	str	r2, [r7, #8]
 8000f18:	b2ca      	uxtb	r2, r1
 8000f1a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	617b      	str	r3, [r7, #20]
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	dbf0      	blt.n	8000f0c <_read+0x12>
  }

  return len;
 8000f2a:	687b      	ldr	r3, [r7, #4]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3718      	adds	r7, #24
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	e009      	b.n	8000f5a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	1c5a      	adds	r2, r3, #1
 8000f4a:	60ba      	str	r2, [r7, #8]
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fd7a 	bl	8000a48 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	3301      	adds	r3, #1
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	697a      	ldr	r2, [r7, #20]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	dbf1      	blt.n	8000f46 <_write+0x12>
  }
  return len;
 8000f62:	687b      	ldr	r3, [r7, #4]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3718      	adds	r7, #24
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <_close>:

int _close(int file)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f94:	605a      	str	r2, [r3, #4]
  return 0;
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <_isatty>:

int _isatty(int file)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fac:	2301      	movs	r3, #1
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b085      	sub	sp, #20
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	60f8      	str	r0, [r7, #12]
 8000fc2:	60b9      	str	r1, [r7, #8]
 8000fc4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fc6:	2300      	movs	r3, #0
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fdc:	4a14      	ldr	r2, [pc, #80]	@ (8001030 <_sbrk+0x5c>)
 8000fde:	4b15      	ldr	r3, [pc, #84]	@ (8001034 <_sbrk+0x60>)
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe8:	4b13      	ldr	r3, [pc, #76]	@ (8001038 <_sbrk+0x64>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d102      	bne.n	8000ff6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	@ (8001038 <_sbrk+0x64>)
 8000ff2:	4a12      	ldr	r2, [pc, #72]	@ (800103c <_sbrk+0x68>)
 8000ff4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ff6:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <_sbrk+0x64>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	429a      	cmp	r2, r3
 8001002:	d207      	bcs.n	8001014 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001004:	f006 f912 	bl	800722c <__errno>
 8001008:	4603      	mov	r3, r0
 800100a:	220c      	movs	r2, #12
 800100c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800100e:	f04f 33ff 	mov.w	r3, #4294967295
 8001012:	e009      	b.n	8001028 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001014:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <_sbrk+0x64>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800101a:	4b07      	ldr	r3, [pc, #28]	@ (8001038 <_sbrk+0x64>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	4a05      	ldr	r2, [pc, #20]	@ (8001038 <_sbrk+0x64>)
 8001024:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001026:	68fb      	ldr	r3, [r7, #12]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20020000 	.word	0x20020000
 8001034:	00000400 	.word	0x00000400
 8001038:	200003dc 	.word	0x200003dc
 800103c:	20004448 	.word	0x20004448

08001040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001044:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <SystemInit+0x20>)
 8001046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800104a:	4a05      	ldr	r2, [pc, #20]	@ (8001060 <SystemInit+0x20>)
 800104c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001050:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001068:	4b11      	ldr	r3, [pc, #68]	@ (80010b0 <MX_USART2_UART_Init+0x4c>)
 800106a:	4a12      	ldr	r2, [pc, #72]	@ (80010b4 <MX_USART2_UART_Init+0x50>)
 800106c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800106e:	4b10      	ldr	r3, [pc, #64]	@ (80010b0 <MX_USART2_UART_Init+0x4c>)
 8001070:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001074:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001076:	4b0e      	ldr	r3, [pc, #56]	@ (80010b0 <MX_USART2_UART_Init+0x4c>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800107c:	4b0c      	ldr	r3, [pc, #48]	@ (80010b0 <MX_USART2_UART_Init+0x4c>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001082:	4b0b      	ldr	r3, [pc, #44]	@ (80010b0 <MX_USART2_UART_Init+0x4c>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001088:	4b09      	ldr	r3, [pc, #36]	@ (80010b0 <MX_USART2_UART_Init+0x4c>)
 800108a:	220c      	movs	r2, #12
 800108c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108e:	4b08      	ldr	r3, [pc, #32]	@ (80010b0 <MX_USART2_UART_Init+0x4c>)
 8001090:	2200      	movs	r2, #0
 8001092:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001094:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <MX_USART2_UART_Init+0x4c>)
 8001096:	2200      	movs	r2, #0
 8001098:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800109a:	4805      	ldr	r0, [pc, #20]	@ (80010b0 <MX_USART2_UART_Init+0x4c>)
 800109c:	f002 f800 	bl	80030a0 <HAL_UART_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010a6:	f7ff fe09 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	2000044c 	.word	0x2000044c
 80010b4:	40004400 	.word	0x40004400

080010b8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80010bc:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <MX_USART6_UART_Init+0x4c>)
 80010be:	4a12      	ldr	r2, [pc, #72]	@ (8001108 <MX_USART6_UART_Init+0x50>)
 80010c0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80010c2:	4b10      	ldr	r3, [pc, #64]	@ (8001104 <MX_USART6_UART_Init+0x4c>)
 80010c4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80010c8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001104 <MX_USART6_UART_Init+0x4c>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80010d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <MX_USART6_UART_Init+0x4c>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80010d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001104 <MX_USART6_UART_Init+0x4c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80010dc:	4b09      	ldr	r3, [pc, #36]	@ (8001104 <MX_USART6_UART_Init+0x4c>)
 80010de:	220c      	movs	r2, #12
 80010e0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e2:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <MX_USART6_UART_Init+0x4c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e8:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <MX_USART6_UART_Init+0x4c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80010ee:	4805      	ldr	r0, [pc, #20]	@ (8001104 <MX_USART6_UART_Init+0x4c>)
 80010f0:	f001 ffd6 	bl	80030a0 <HAL_UART_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80010fa:	f7ff fddf 	bl	8000cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000494 	.word	0x20000494
 8001108:	40011400 	.word	0x40011400

0800110c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08c      	sub	sp, #48	@ 0x30
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 031c 	add.w	r3, r7, #28
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a68      	ldr	r2, [pc, #416]	@ (80012cc <HAL_UART_MspInit+0x1c0>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d162      	bne.n	80011f4 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	61bb      	str	r3, [r7, #24]
 8001132:	4b67      	ldr	r3, [pc, #412]	@ (80012d0 <HAL_UART_MspInit+0x1c4>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001136:	4a66      	ldr	r2, [pc, #408]	@ (80012d0 <HAL_UART_MspInit+0x1c4>)
 8001138:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800113c:	6413      	str	r3, [r2, #64]	@ 0x40
 800113e:	4b64      	ldr	r3, [pc, #400]	@ (80012d0 <HAL_UART_MspInit+0x1c4>)
 8001140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001146:	61bb      	str	r3, [r7, #24]
 8001148:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	4b60      	ldr	r3, [pc, #384]	@ (80012d0 <HAL_UART_MspInit+0x1c4>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	4a5f      	ldr	r2, [pc, #380]	@ (80012d0 <HAL_UART_MspInit+0x1c4>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6313      	str	r3, [r2, #48]	@ 0x30
 800115a:	4b5d      	ldr	r3, [pc, #372]	@ (80012d0 <HAL_UART_MspInit+0x1c4>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001166:	230c      	movs	r3, #12
 8001168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116a:	2302      	movs	r3, #2
 800116c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001172:	2303      	movs	r3, #3
 8001174:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001176:	2307      	movs	r3, #7
 8001178:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117a:	f107 031c 	add.w	r3, r7, #28
 800117e:	4619      	mov	r1, r3
 8001180:	4854      	ldr	r0, [pc, #336]	@ (80012d4 <HAL_UART_MspInit+0x1c8>)
 8001182:	f000 fe99 	bl	8001eb8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001186:	4b54      	ldr	r3, [pc, #336]	@ (80012d8 <HAL_UART_MspInit+0x1cc>)
 8001188:	4a54      	ldr	r2, [pc, #336]	@ (80012dc <HAL_UART_MspInit+0x1d0>)
 800118a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800118c:	4b52      	ldr	r3, [pc, #328]	@ (80012d8 <HAL_UART_MspInit+0x1cc>)
 800118e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001192:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001194:	4b50      	ldr	r3, [pc, #320]	@ (80012d8 <HAL_UART_MspInit+0x1cc>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800119a:	4b4f      	ldr	r3, [pc, #316]	@ (80012d8 <HAL_UART_MspInit+0x1cc>)
 800119c:	2200      	movs	r2, #0
 800119e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011a0:	4b4d      	ldr	r3, [pc, #308]	@ (80012d8 <HAL_UART_MspInit+0x1cc>)
 80011a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011a6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011a8:	4b4b      	ldr	r3, [pc, #300]	@ (80012d8 <HAL_UART_MspInit+0x1cc>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011ae:	4b4a      	ldr	r3, [pc, #296]	@ (80012d8 <HAL_UART_MspInit+0x1cc>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80011b4:	4b48      	ldr	r3, [pc, #288]	@ (80012d8 <HAL_UART_MspInit+0x1cc>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011ba:	4b47      	ldr	r3, [pc, #284]	@ (80012d8 <HAL_UART_MspInit+0x1cc>)
 80011bc:	2200      	movs	r2, #0
 80011be:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011c0:	4b45      	ldr	r3, [pc, #276]	@ (80012d8 <HAL_UART_MspInit+0x1cc>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80011c6:	4844      	ldr	r0, [pc, #272]	@ (80012d8 <HAL_UART_MspInit+0x1cc>)
 80011c8:	f000 fa74 	bl	80016b4 <HAL_DMA_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 80011d2:	f7ff fd73 	bl	8000cbc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a3f      	ldr	r2, [pc, #252]	@ (80012d8 <HAL_UART_MspInit+0x1cc>)
 80011da:	63da      	str	r2, [r3, #60]	@ 0x3c
 80011dc:	4a3e      	ldr	r2, [pc, #248]	@ (80012d8 <HAL_UART_MspInit+0x1cc>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2105      	movs	r1, #5
 80011e6:	2026      	movs	r0, #38	@ 0x26
 80011e8:	f000 fa3a 	bl	8001660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011ec:	2026      	movs	r0, #38	@ 0x26
 80011ee:	f000 fa53 	bl	8001698 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80011f2:	e066      	b.n	80012c2 <HAL_UART_MspInit+0x1b6>
  else if(uartHandle->Instance==USART6)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a39      	ldr	r2, [pc, #228]	@ (80012e0 <HAL_UART_MspInit+0x1d4>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d161      	bne.n	80012c2 <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART6_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	4b33      	ldr	r3, [pc, #204]	@ (80012d0 <HAL_UART_MspInit+0x1c4>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001206:	4a32      	ldr	r2, [pc, #200]	@ (80012d0 <HAL_UART_MspInit+0x1c4>)
 8001208:	f043 0320 	orr.w	r3, r3, #32
 800120c:	6453      	str	r3, [r2, #68]	@ 0x44
 800120e:	4b30      	ldr	r3, [pc, #192]	@ (80012d0 <HAL_UART_MspInit+0x1c4>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001212:	f003 0320 	and.w	r3, r3, #32
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	4b2c      	ldr	r3, [pc, #176]	@ (80012d0 <HAL_UART_MspInit+0x1c4>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	4a2b      	ldr	r2, [pc, #172]	@ (80012d0 <HAL_UART_MspInit+0x1c4>)
 8001224:	f043 0304 	orr.w	r3, r3, #4
 8001228:	6313      	str	r3, [r2, #48]	@ 0x30
 800122a:	4b29      	ldr	r3, [pc, #164]	@ (80012d0 <HAL_UART_MspInit+0x1c4>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	f003 0304 	and.w	r3, r3, #4
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001236:	23c0      	movs	r3, #192	@ 0xc0
 8001238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001242:	2303      	movs	r3, #3
 8001244:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001246:	2308      	movs	r3, #8
 8001248:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800124a:	f107 031c 	add.w	r3, r7, #28
 800124e:	4619      	mov	r1, r3
 8001250:	4824      	ldr	r0, [pc, #144]	@ (80012e4 <HAL_UART_MspInit+0x1d8>)
 8001252:	f000 fe31 	bl	8001eb8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001256:	4b24      	ldr	r3, [pc, #144]	@ (80012e8 <HAL_UART_MspInit+0x1dc>)
 8001258:	4a24      	ldr	r2, [pc, #144]	@ (80012ec <HAL_UART_MspInit+0x1e0>)
 800125a:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800125c:	4b22      	ldr	r3, [pc, #136]	@ (80012e8 <HAL_UART_MspInit+0x1dc>)
 800125e:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001262:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001264:	4b20      	ldr	r3, [pc, #128]	@ (80012e8 <HAL_UART_MspInit+0x1dc>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800126a:	4b1f      	ldr	r3, [pc, #124]	@ (80012e8 <HAL_UART_MspInit+0x1dc>)
 800126c:	2200      	movs	r2, #0
 800126e:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001270:	4b1d      	ldr	r3, [pc, #116]	@ (80012e8 <HAL_UART_MspInit+0x1dc>)
 8001272:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001276:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001278:	4b1b      	ldr	r3, [pc, #108]	@ (80012e8 <HAL_UART_MspInit+0x1dc>)
 800127a:	2200      	movs	r2, #0
 800127c:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800127e:	4b1a      	ldr	r3, [pc, #104]	@ (80012e8 <HAL_UART_MspInit+0x1dc>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001284:	4b18      	ldr	r3, [pc, #96]	@ (80012e8 <HAL_UART_MspInit+0x1dc>)
 8001286:	2200      	movs	r2, #0
 8001288:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800128a:	4b17      	ldr	r3, [pc, #92]	@ (80012e8 <HAL_UART_MspInit+0x1dc>)
 800128c:	2200      	movs	r2, #0
 800128e:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001290:	4b15      	ldr	r3, [pc, #84]	@ (80012e8 <HAL_UART_MspInit+0x1dc>)
 8001292:	2200      	movs	r2, #0
 8001294:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001296:	4814      	ldr	r0, [pc, #80]	@ (80012e8 <HAL_UART_MspInit+0x1dc>)
 8001298:	f000 fa0c 	bl	80016b4 <HAL_DMA_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <HAL_UART_MspInit+0x19a>
      Error_Handler();
 80012a2:	f7ff fd0b 	bl	8000cbc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a0f      	ldr	r2, [pc, #60]	@ (80012e8 <HAL_UART_MspInit+0x1dc>)
 80012aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80012ac:	4a0e      	ldr	r2, [pc, #56]	@ (80012e8 <HAL_UART_MspInit+0x1dc>)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80012b2:	2200      	movs	r2, #0
 80012b4:	2105      	movs	r1, #5
 80012b6:	2047      	movs	r0, #71	@ 0x47
 80012b8:	f000 f9d2 	bl	8001660 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80012bc:	2047      	movs	r0, #71	@ 0x47
 80012be:	f000 f9eb 	bl	8001698 <HAL_NVIC_EnableIRQ>
}
 80012c2:	bf00      	nop
 80012c4:	3730      	adds	r7, #48	@ 0x30
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40004400 	.word	0x40004400
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40020000 	.word	0x40020000
 80012d8:	200004dc 	.word	0x200004dc
 80012dc:	40026088 	.word	0x40026088
 80012e0:	40011400 	.word	0x40011400
 80012e4:	40020800 	.word	0x40020800
 80012e8:	2000053c 	.word	0x2000053c
 80012ec:	40026428 	.word	0x40026428

080012f0 <drv_uart_init>:
  }
}

/* USER CODE BEGIN 1 */
int drv_uart_init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart2, &rx2char,1);
 80012f4:	2201      	movs	r2, #1
 80012f6:	4903      	ldr	r1, [pc, #12]	@ (8001304 <drv_uart_init+0x14>)
 80012f8:	4803      	ldr	r0, [pc, #12]	@ (8001308 <drv_uart_init+0x18>)
 80012fa:	f001 ffac 	bl	8003256 <HAL_UART_Receive_DMA>
	return 0;
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	bd80      	pop	{r7, pc}
 8001304:	200003e0 	.word	0x200003e0
 8001308:	2000044c 	.word	0x2000044c

0800130c <drv_esp_init>:
int drv_esp_init(void) {
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart6, &btchar,1);  // Initialize UART for ESP communication
 8001310:	2201      	movs	r2, #1
 8001312:	4903      	ldr	r1, [pc, #12]	@ (8001320 <drv_esp_init+0x14>)
 8001314:	4803      	ldr	r0, [pc, #12]	@ (8001324 <drv_esp_init+0x18>)
 8001316:	f001 ff9e 	bl	8003256 <HAL_UART_Receive_DMA>
	return 0;  // Return 0 if successful
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	bd80      	pop	{r7, pc}
 8001320:	2000044a 	.word	0x2000044a
 8001324:	20000494 	.word	0x20000494

08001328 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART2)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a2d      	ldr	r2, [pc, #180]	@ (80013ec <HAL_UART_RxCpltCallback+0xc4>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d128      	bne.n	800138c <HAL_UART_RxCpltCallback+0x64>
    {
    	static int i=0;
    	rx2Data[i] = rx2char;
 800133a:	4b2d      	ldr	r3, [pc, #180]	@ (80013f0 <HAL_UART_RxCpltCallback+0xc8>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a2d      	ldr	r2, [pc, #180]	@ (80013f4 <HAL_UART_RxCpltCallback+0xcc>)
 8001340:	7811      	ldrb	r1, [r2, #0]
 8001342:	4a2d      	ldr	r2, [pc, #180]	@ (80013f8 <HAL_UART_RxCpltCallback+0xd0>)
 8001344:	54d1      	strb	r1, [r2, r3]
    	if((rx2Data[i] == '\r')||(btData[i] == '\n'))
 8001346:	4b2a      	ldr	r3, [pc, #168]	@ (80013f0 <HAL_UART_RxCpltCallback+0xc8>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a2b      	ldr	r2, [pc, #172]	@ (80013f8 <HAL_UART_RxCpltCallback+0xd0>)
 800134c:	5cd3      	ldrb	r3, [r2, r3]
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b0d      	cmp	r3, #13
 8001352:	d005      	beq.n	8001360 <HAL_UART_RxCpltCallback+0x38>
 8001354:	4b26      	ldr	r3, [pc, #152]	@ (80013f0 <HAL_UART_RxCpltCallback+0xc8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a28      	ldr	r2, [pc, #160]	@ (80013fc <HAL_UART_RxCpltCallback+0xd4>)
 800135a:	5cd3      	ldrb	r3, [r2, r3]
 800135c:	2b0a      	cmp	r3, #10
 800135e:	d10b      	bne.n	8001378 <HAL_UART_RxCpltCallback+0x50>
    	{
    		rx2Data[i] = '\0';
 8001360:	4b23      	ldr	r3, [pc, #140]	@ (80013f0 <HAL_UART_RxCpltCallback+0xc8>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a24      	ldr	r2, [pc, #144]	@ (80013f8 <HAL_UART_RxCpltCallback+0xd0>)
 8001366:	2100      	movs	r1, #0
 8001368:	54d1      	strb	r1, [r2, r3]
    		rx2Flag = 1;
 800136a:	4b25      	ldr	r3, [pc, #148]	@ (8001400 <HAL_UART_RxCpltCallback+0xd8>)
 800136c:	2201      	movs	r2, #1
 800136e:	701a      	strb	r2, [r3, #0]
    		i = 0;
 8001370:	4b1f      	ldr	r3, [pc, #124]	@ (80013f0 <HAL_UART_RxCpltCallback+0xc8>)
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	e004      	b.n	8001382 <HAL_UART_RxCpltCallback+0x5a>
    	}
    	else
    	{
    		i++;
 8001378:	4b1d      	ldr	r3, [pc, #116]	@ (80013f0 <HAL_UART_RxCpltCallback+0xc8>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	3301      	adds	r3, #1
 800137e:	4a1c      	ldr	r2, [pc, #112]	@ (80013f0 <HAL_UART_RxCpltCallback+0xc8>)
 8001380:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_DMA(&huart2, &rx2char,1);
 8001382:	2201      	movs	r2, #1
 8001384:	491b      	ldr	r1, [pc, #108]	@ (80013f4 <HAL_UART_RxCpltCallback+0xcc>)
 8001386:	481f      	ldr	r0, [pc, #124]	@ (8001404 <HAL_UART_RxCpltCallback+0xdc>)
 8001388:	f001 ff65 	bl	8003256 <HAL_UART_Receive_DMA>
    }
    if(huart->Instance == USART6)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a1d      	ldr	r2, [pc, #116]	@ (8001408 <HAL_UART_RxCpltCallback+0xe0>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d126      	bne.n	80013e4 <HAL_UART_RxCpltCallback+0xbc>
		{
    	static int i = 0;
			btData[i] = btchar;
 8001396:	4b1d      	ldr	r3, [pc, #116]	@ (800140c <HAL_UART_RxCpltCallback+0xe4>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a1d      	ldr	r2, [pc, #116]	@ (8001410 <HAL_UART_RxCpltCallback+0xe8>)
 800139c:	7811      	ldrb	r1, [r2, #0]
 800139e:	4a17      	ldr	r2, [pc, #92]	@ (80013fc <HAL_UART_RxCpltCallback+0xd4>)
 80013a0:	54d1      	strb	r1, [r2, r3]
			if ((btData[i] == '\n') || (btData[i] == '\r'))
 80013a2:	4b1a      	ldr	r3, [pc, #104]	@ (800140c <HAL_UART_RxCpltCallback+0xe4>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a15      	ldr	r2, [pc, #84]	@ (80013fc <HAL_UART_RxCpltCallback+0xd4>)
 80013a8:	5cd3      	ldrb	r3, [r2, r3]
 80013aa:	2b0a      	cmp	r3, #10
 80013ac:	d005      	beq.n	80013ba <HAL_UART_RxCpltCallback+0x92>
 80013ae:	4b17      	ldr	r3, [pc, #92]	@ (800140c <HAL_UART_RxCpltCallback+0xe4>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a12      	ldr	r2, [pc, #72]	@ (80013fc <HAL_UART_RxCpltCallback+0xd4>)
 80013b4:	5cd3      	ldrb	r3, [r2, r3]
 80013b6:	2b0d      	cmp	r3, #13
 80013b8:	d10a      	bne.n	80013d0 <HAL_UART_RxCpltCallback+0xa8>
			{
					btData[i] = '\0';
 80013ba:	4b14      	ldr	r3, [pc, #80]	@ (800140c <HAL_UART_RxCpltCallback+0xe4>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a0f      	ldr	r2, [pc, #60]	@ (80013fc <HAL_UART_RxCpltCallback+0xd4>)
 80013c0:	2100      	movs	r1, #0
 80013c2:	54d1      	strb	r1, [r2, r3]
					bluetooth_Event();
 80013c4:	f7ff fa90 	bl	80008e8 <bluetooth_Event>
					i = 0;
 80013c8:	4b10      	ldr	r3, [pc, #64]	@ (800140c <HAL_UART_RxCpltCallback+0xe4>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	e004      	b.n	80013da <HAL_UART_RxCpltCallback+0xb2>
			}
			else
			{
					i++;
 80013d0:	4b0e      	ldr	r3, [pc, #56]	@ (800140c <HAL_UART_RxCpltCallback+0xe4>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	3301      	adds	r3, #1
 80013d6:	4a0d      	ldr	r2, [pc, #52]	@ (800140c <HAL_UART_RxCpltCallback+0xe4>)
 80013d8:	6013      	str	r3, [r2, #0]
			}
			HAL_UART_Receive_DMA(&huart6, &btchar,1);
 80013da:	2201      	movs	r2, #1
 80013dc:	490c      	ldr	r1, [pc, #48]	@ (8001410 <HAL_UART_RxCpltCallback+0xe8>)
 80013de:	480d      	ldr	r0, [pc, #52]	@ (8001414 <HAL_UART_RxCpltCallback+0xec>)
 80013e0:	f001 ff39 	bl	8003256 <HAL_UART_Receive_DMA>
		}
}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40004400 	.word	0x40004400
 80013f0:	2000059c 	.word	0x2000059c
 80013f4:	200003e0 	.word	0x200003e0
 80013f8:	200003e4 	.word	0x200003e4
 80013fc:	20000418 	.word	0x20000418
 8001400:	200003e1 	.word	0x200003e1
 8001404:	2000044c 	.word	0x2000044c
 8001408:	40011400 	.word	0x40011400
 800140c:	200005a0 	.word	0x200005a0
 8001410:	2000044a 	.word	0x2000044a
 8001414:	20000494 	.word	0x20000494

08001418 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001418:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001450 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800141c:	f7ff fe10 	bl	8001040 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001420:	480c      	ldr	r0, [pc, #48]	@ (8001454 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001422:	490d      	ldr	r1, [pc, #52]	@ (8001458 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001424:	4a0d      	ldr	r2, [pc, #52]	@ (800145c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001428:	e002      	b.n	8001430 <LoopCopyDataInit>

0800142a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800142a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800142c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800142e:	3304      	adds	r3, #4

08001430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001434:	d3f9      	bcc.n	800142a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001436:	4a0a      	ldr	r2, [pc, #40]	@ (8001460 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001438:	4c0a      	ldr	r4, [pc, #40]	@ (8001464 <LoopFillZerobss+0x22>)
  movs r3, #0
 800143a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800143c:	e001      	b.n	8001442 <LoopFillZerobss>

0800143e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800143e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001440:	3204      	adds	r2, #4

08001442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001444:	d3fb      	bcc.n	800143e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001446:	f005 fef7 	bl	8007238 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800144a:	f7ff fb8d 	bl	8000b68 <main>
  bx  lr    
 800144e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001450:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001458:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 800145c:	080084f8 	.word	0x080084f8
  ldr r2, =_sbss
 8001460:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001464:	20004448 	.word	0x20004448

08001468 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001468:	e7fe      	b.n	8001468 <ADC_IRQHandler>
	...

0800146c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001470:	4b0e      	ldr	r3, [pc, #56]	@ (80014ac <HAL_Init+0x40>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a0d      	ldr	r2, [pc, #52]	@ (80014ac <HAL_Init+0x40>)
 8001476:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800147a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800147c:	4b0b      	ldr	r3, [pc, #44]	@ (80014ac <HAL_Init+0x40>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a0a      	ldr	r2, [pc, #40]	@ (80014ac <HAL_Init+0x40>)
 8001482:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001486:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001488:	4b08      	ldr	r3, [pc, #32]	@ (80014ac <HAL_Init+0x40>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a07      	ldr	r2, [pc, #28]	@ (80014ac <HAL_Init+0x40>)
 800148e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001492:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001494:	2003      	movs	r0, #3
 8001496:	f000 f8d8 	bl	800164a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800149a:	200f      	movs	r0, #15
 800149c:	f7ff fc40 	bl	8000d20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014a0:	f7ff fc12 	bl	8000cc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40023c00 	.word	0x40023c00

080014b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014b4:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <HAL_IncTick+0x20>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	461a      	mov	r2, r3
 80014ba:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <HAL_IncTick+0x24>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4413      	add	r3, r2
 80014c0:	4a04      	ldr	r2, [pc, #16]	@ (80014d4 <HAL_IncTick+0x24>)
 80014c2:	6013      	str	r3, [r2, #0]
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	20000020 	.word	0x20000020
 80014d4:	200005a4 	.word	0x200005a4

080014d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  return uwTick;
 80014dc:	4b03      	ldr	r3, [pc, #12]	@ (80014ec <HAL_GetTick+0x14>)
 80014de:	681b      	ldr	r3, [r3, #0]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	200005a4 	.word	0x200005a4

080014f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001500:	4b0c      	ldr	r3, [pc, #48]	@ (8001534 <__NVIC_SetPriorityGrouping+0x44>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001506:	68ba      	ldr	r2, [r7, #8]
 8001508:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800150c:	4013      	ands	r3, r2
 800150e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001518:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800151c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001522:	4a04      	ldr	r2, [pc, #16]	@ (8001534 <__NVIC_SetPriorityGrouping+0x44>)
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	60d3      	str	r3, [r2, #12]
}
 8001528:	bf00      	nop
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800153c:	4b04      	ldr	r3, [pc, #16]	@ (8001550 <__NVIC_GetPriorityGrouping+0x18>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	0a1b      	lsrs	r3, r3, #8
 8001542:	f003 0307 	and.w	r3, r3, #7
}
 8001546:	4618      	mov	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800155e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001562:	2b00      	cmp	r3, #0
 8001564:	db0b      	blt.n	800157e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001566:	79fb      	ldrb	r3, [r7, #7]
 8001568:	f003 021f 	and.w	r2, r3, #31
 800156c:	4907      	ldr	r1, [pc, #28]	@ (800158c <__NVIC_EnableIRQ+0x38>)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	095b      	lsrs	r3, r3, #5
 8001574:	2001      	movs	r0, #1
 8001576:	fa00 f202 	lsl.w	r2, r0, r2
 800157a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	e000e100 	.word	0xe000e100

08001590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	6039      	str	r1, [r7, #0]
 800159a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	db0a      	blt.n	80015ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	490c      	ldr	r1, [pc, #48]	@ (80015dc <__NVIC_SetPriority+0x4c>)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	0112      	lsls	r2, r2, #4
 80015b0:	b2d2      	uxtb	r2, r2
 80015b2:	440b      	add	r3, r1
 80015b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015b8:	e00a      	b.n	80015d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	4908      	ldr	r1, [pc, #32]	@ (80015e0 <__NVIC_SetPriority+0x50>)
 80015c0:	79fb      	ldrb	r3, [r7, #7]
 80015c2:	f003 030f 	and.w	r3, r3, #15
 80015c6:	3b04      	subs	r3, #4
 80015c8:	0112      	lsls	r2, r2, #4
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	440b      	add	r3, r1
 80015ce:	761a      	strb	r2, [r3, #24]
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000e100 	.word	0xe000e100
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b089      	sub	sp, #36	@ 0x24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f1c3 0307 	rsb	r3, r3, #7
 80015fe:	2b04      	cmp	r3, #4
 8001600:	bf28      	it	cs
 8001602:	2304      	movcs	r3, #4
 8001604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	3304      	adds	r3, #4
 800160a:	2b06      	cmp	r3, #6
 800160c:	d902      	bls.n	8001614 <NVIC_EncodePriority+0x30>
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	3b03      	subs	r3, #3
 8001612:	e000      	b.n	8001616 <NVIC_EncodePriority+0x32>
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001618:	f04f 32ff 	mov.w	r2, #4294967295
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	fa02 f303 	lsl.w	r3, r2, r3
 8001622:	43da      	mvns	r2, r3
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	401a      	ands	r2, r3
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800162c:	f04f 31ff 	mov.w	r1, #4294967295
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	fa01 f303 	lsl.w	r3, r1, r3
 8001636:	43d9      	mvns	r1, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800163c:	4313      	orrs	r3, r2
         );
}
 800163e:	4618      	mov	r0, r3
 8001640:	3724      	adds	r7, #36	@ 0x24
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff ff4c 	bl	80014f0 <__NVIC_SetPriorityGrouping>
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
 800166c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800166e:	2300      	movs	r3, #0
 8001670:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001672:	f7ff ff61 	bl	8001538 <__NVIC_GetPriorityGrouping>
 8001676:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	68b9      	ldr	r1, [r7, #8]
 800167c:	6978      	ldr	r0, [r7, #20]
 800167e:	f7ff ffb1 	bl	80015e4 <NVIC_EncodePriority>
 8001682:	4602      	mov	r2, r0
 8001684:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001688:	4611      	mov	r1, r2
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff ff80 	bl	8001590 <__NVIC_SetPriority>
}
 8001690:	bf00      	nop
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff ff54 	bl	8001554 <__NVIC_EnableIRQ>
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80016c0:	f7ff ff0a 	bl	80014d8 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e099      	b.n	8001804 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2202      	movs	r2, #2
 80016d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f022 0201 	bic.w	r2, r2, #1
 80016ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016f0:	e00f      	b.n	8001712 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016f2:	f7ff fef1 	bl	80014d8 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b05      	cmp	r3, #5
 80016fe:	d908      	bls.n	8001712 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2220      	movs	r2, #32
 8001704:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2203      	movs	r2, #3
 800170a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e078      	b.n	8001804 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1e8      	bne.n	80016f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	4b38      	ldr	r3, [pc, #224]	@ (800180c <HAL_DMA_Init+0x158>)
 800172c:	4013      	ands	r3, r2
 800172e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685a      	ldr	r2, [r3, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800173e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800174a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001756:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	4313      	orrs	r3, r2
 8001762:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001768:	2b04      	cmp	r3, #4
 800176a:	d107      	bne.n	800177c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001774:	4313      	orrs	r3, r2
 8001776:	697a      	ldr	r2, [r7, #20]
 8001778:	4313      	orrs	r3, r2
 800177a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	697a      	ldr	r2, [r7, #20]
 8001782:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	f023 0307 	bic.w	r3, r3, #7
 8001792:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001798:	697a      	ldr	r2, [r7, #20]
 800179a:	4313      	orrs	r3, r2
 800179c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	d117      	bne.n	80017d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d00e      	beq.n	80017d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f000 fb01 	bl	8001dc0 <DMA_CheckFifoParam>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d008      	beq.n	80017d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2240      	movs	r2, #64	@ 0x40
 80017c8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2201      	movs	r2, #1
 80017ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80017d2:	2301      	movs	r3, #1
 80017d4:	e016      	b.n	8001804 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 fab8 	bl	8001d54 <DMA_CalcBaseAndBitshift>
 80017e4:	4603      	mov	r3, r0
 80017e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017ec:	223f      	movs	r2, #63	@ 0x3f
 80017ee:	409a      	lsls	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2201      	movs	r2, #1
 80017fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	f010803f 	.word	0xf010803f

08001810 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
 800181c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800181e:	2300      	movs	r3, #0
 8001820:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001826:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800182e:	2b01      	cmp	r3, #1
 8001830:	d101      	bne.n	8001836 <HAL_DMA_Start_IT+0x26>
 8001832:	2302      	movs	r3, #2
 8001834:	e040      	b.n	80018b8 <HAL_DMA_Start_IT+0xa8>
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2201      	movs	r2, #1
 800183a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b01      	cmp	r3, #1
 8001848:	d12f      	bne.n	80018aa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2202      	movs	r2, #2
 800184e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2200      	movs	r2, #0
 8001856:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	68b9      	ldr	r1, [r7, #8]
 800185e:	68f8      	ldr	r0, [r7, #12]
 8001860:	f000 fa4a 	bl	8001cf8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001868:	223f      	movs	r2, #63	@ 0x3f
 800186a:	409a      	lsls	r2, r3
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f042 0216 	orr.w	r2, r2, #22
 800187e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001884:	2b00      	cmp	r3, #0
 8001886:	d007      	beq.n	8001898 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f042 0208 	orr.w	r2, r2, #8
 8001896:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f042 0201 	orr.w	r2, r2, #1
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	e005      	b.n	80018b6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80018b2:	2302      	movs	r3, #2
 80018b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80018b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018cc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80018ce:	f7ff fe03 	bl	80014d8 <HAL_GetTick>
 80018d2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d008      	beq.n	80018f2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2280      	movs	r2, #128	@ 0x80
 80018e4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e052      	b.n	8001998 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f022 0216 	bic.w	r2, r2, #22
 8001900:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	695a      	ldr	r2, [r3, #20]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001910:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001916:	2b00      	cmp	r3, #0
 8001918:	d103      	bne.n	8001922 <HAL_DMA_Abort+0x62>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800191e:	2b00      	cmp	r3, #0
 8001920:	d007      	beq.n	8001932 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f022 0208 	bic.w	r2, r2, #8
 8001930:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f022 0201 	bic.w	r2, r2, #1
 8001940:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001942:	e013      	b.n	800196c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001944:	f7ff fdc8 	bl	80014d8 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b05      	cmp	r3, #5
 8001950:	d90c      	bls.n	800196c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2220      	movs	r2, #32
 8001956:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2203      	movs	r2, #3
 800195c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e015      	b.n	8001998 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1e4      	bne.n	8001944 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800197e:	223f      	movs	r2, #63	@ 0x3f
 8001980:	409a      	lsls	r2, r3
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2201      	movs	r2, #1
 800198a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d004      	beq.n	80019be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2280      	movs	r2, #128	@ 0x80
 80019b8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e00c      	b.n	80019d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2205      	movs	r2, #5
 80019c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 0201 	bic.w	r2, r2, #1
 80019d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80019f0:	4b8e      	ldr	r3, [pc, #568]	@ (8001c2c <HAL_DMA_IRQHandler+0x248>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a8e      	ldr	r2, [pc, #568]	@ (8001c30 <HAL_DMA_IRQHandler+0x24c>)
 80019f6:	fba2 2303 	umull	r2, r3, r2, r3
 80019fa:	0a9b      	lsrs	r3, r3, #10
 80019fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a0e:	2208      	movs	r2, #8
 8001a10:	409a      	lsls	r2, r3
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	4013      	ands	r3, r2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d01a      	beq.n	8001a50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d013      	beq.n	8001a50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f022 0204 	bic.w	r2, r2, #4
 8001a36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a3c:	2208      	movs	r2, #8
 8001a3e:	409a      	lsls	r2, r3
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a48:	f043 0201 	orr.w	r2, r3, #1
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a54:	2201      	movs	r2, #1
 8001a56:	409a      	lsls	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d012      	beq.n	8001a86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d00b      	beq.n	8001a86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a72:	2201      	movs	r2, #1
 8001a74:	409a      	lsls	r2, r3
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a7e:	f043 0202 	orr.w	r2, r3, #2
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a8a:	2204      	movs	r2, #4
 8001a8c:	409a      	lsls	r2, r3
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	4013      	ands	r3, r2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d012      	beq.n	8001abc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d00b      	beq.n	8001abc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aa8:	2204      	movs	r2, #4
 8001aaa:	409a      	lsls	r2, r3
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ab4:	f043 0204 	orr.w	r2, r3, #4
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ac0:	2210      	movs	r2, #16
 8001ac2:	409a      	lsls	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d043      	beq.n	8001b54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d03c      	beq.n	8001b54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ade:	2210      	movs	r2, #16
 8001ae0:	409a      	lsls	r2, r3
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d018      	beq.n	8001b26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d108      	bne.n	8001b14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d024      	beq.n	8001b54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	4798      	blx	r3
 8001b12:	e01f      	b.n	8001b54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d01b      	beq.n	8001b54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	4798      	blx	r3
 8001b24:	e016      	b.n	8001b54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d107      	bne.n	8001b44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 0208 	bic.w	r2, r2, #8
 8001b42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b58:	2220      	movs	r2, #32
 8001b5a:	409a      	lsls	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 808f 	beq.w	8001c84 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0310 	and.w	r3, r3, #16
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 8087 	beq.w	8001c84 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b7a:	2220      	movs	r2, #32
 8001b7c:	409a      	lsls	r2, r3
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b05      	cmp	r3, #5
 8001b8c:	d136      	bne.n	8001bfc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 0216 	bic.w	r2, r2, #22
 8001b9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	695a      	ldr	r2, [r3, #20]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001bac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d103      	bne.n	8001bbe <HAL_DMA_IRQHandler+0x1da>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d007      	beq.n	8001bce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0208 	bic.w	r2, r2, #8
 8001bcc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bd2:	223f      	movs	r2, #63	@ 0x3f
 8001bd4:	409a      	lsls	r2, r3
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d07e      	beq.n	8001cf0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	4798      	blx	r3
        }
        return;
 8001bfa:	e079      	b.n	8001cf0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d01d      	beq.n	8001c46 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d10d      	bne.n	8001c34 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d031      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	4798      	blx	r3
 8001c28:	e02c      	b.n	8001c84 <HAL_DMA_IRQHandler+0x2a0>
 8001c2a:	bf00      	nop
 8001c2c:	20000018 	.word	0x20000018
 8001c30:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d023      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	4798      	blx	r3
 8001c44:	e01e      	b.n	8001c84 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d10f      	bne.n	8001c74 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 0210 	bic.w	r2, r2, #16
 8001c62:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d003      	beq.n	8001c84 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d032      	beq.n	8001cf2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d022      	beq.n	8001cde <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2205      	movs	r2, #5
 8001c9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0201 	bic.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d307      	bcc.n	8001ccc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f2      	bne.n	8001cb0 <HAL_DMA_IRQHandler+0x2cc>
 8001cca:	e000      	b.n	8001cce <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ccc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d005      	beq.n	8001cf2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	4798      	blx	r3
 8001cee:	e000      	b.n	8001cf2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001cf0:	bf00      	nop
    }
  }
}
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
 8001d04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001d14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	2b40      	cmp	r3, #64	@ 0x40
 8001d24:	d108      	bne.n	8001d38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68ba      	ldr	r2, [r7, #8]
 8001d34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001d36:	e007      	b.n	8001d48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68ba      	ldr	r2, [r7, #8]
 8001d3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	60da      	str	r2, [r3, #12]
}
 8001d48:	bf00      	nop
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	3b10      	subs	r3, #16
 8001d64:	4a14      	ldr	r2, [pc, #80]	@ (8001db8 <DMA_CalcBaseAndBitshift+0x64>)
 8001d66:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6a:	091b      	lsrs	r3, r3, #4
 8001d6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d6e:	4a13      	ldr	r2, [pc, #76]	@ (8001dbc <DMA_CalcBaseAndBitshift+0x68>)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4413      	add	r3, r2
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	461a      	mov	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2b03      	cmp	r3, #3
 8001d80:	d909      	bls.n	8001d96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001d8a:	f023 0303 	bic.w	r3, r3, #3
 8001d8e:	1d1a      	adds	r2, r3, #4
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d94:	e007      	b.n	8001da6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001d9e:	f023 0303 	bic.w	r3, r3, #3
 8001da2:	687a      	ldr	r2, [r7, #4]
 8001da4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	aaaaaaab 	.word	0xaaaaaaab
 8001dbc:	080082fc 	.word	0x080082fc

08001dc0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d11f      	bne.n	8001e1a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	d856      	bhi.n	8001e8e <DMA_CheckFifoParam+0xce>
 8001de0:	a201      	add	r2, pc, #4	@ (adr r2, 8001de8 <DMA_CheckFifoParam+0x28>)
 8001de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de6:	bf00      	nop
 8001de8:	08001df9 	.word	0x08001df9
 8001dec:	08001e0b 	.word	0x08001e0b
 8001df0:	08001df9 	.word	0x08001df9
 8001df4:	08001e8f 	.word	0x08001e8f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dfc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d046      	beq.n	8001e92 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e08:	e043      	b.n	8001e92 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e0e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001e12:	d140      	bne.n	8001e96 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e18:	e03d      	b.n	8001e96 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e22:	d121      	bne.n	8001e68 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	d837      	bhi.n	8001e9a <DMA_CheckFifoParam+0xda>
 8001e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8001e30 <DMA_CheckFifoParam+0x70>)
 8001e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e30:	08001e41 	.word	0x08001e41
 8001e34:	08001e47 	.word	0x08001e47
 8001e38:	08001e41 	.word	0x08001e41
 8001e3c:	08001e59 	.word	0x08001e59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	73fb      	strb	r3, [r7, #15]
      break;
 8001e44:	e030      	b.n	8001ea8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d025      	beq.n	8001e9e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e56:	e022      	b.n	8001e9e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e5c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001e60:	d11f      	bne.n	8001ea2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001e66:	e01c      	b.n	8001ea2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d903      	bls.n	8001e76 <DMA_CheckFifoParam+0xb6>
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	2b03      	cmp	r3, #3
 8001e72:	d003      	beq.n	8001e7c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e74:	e018      	b.n	8001ea8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	73fb      	strb	r3, [r7, #15]
      break;
 8001e7a:	e015      	b.n	8001ea8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00e      	beq.n	8001ea6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8001e8c:	e00b      	b.n	8001ea6 <DMA_CheckFifoParam+0xe6>
      break;
 8001e8e:	bf00      	nop
 8001e90:	e00a      	b.n	8001ea8 <DMA_CheckFifoParam+0xe8>
      break;
 8001e92:	bf00      	nop
 8001e94:	e008      	b.n	8001ea8 <DMA_CheckFifoParam+0xe8>
      break;
 8001e96:	bf00      	nop
 8001e98:	e006      	b.n	8001ea8 <DMA_CheckFifoParam+0xe8>
      break;
 8001e9a:	bf00      	nop
 8001e9c:	e004      	b.n	8001ea8 <DMA_CheckFifoParam+0xe8>
      break;
 8001e9e:	bf00      	nop
 8001ea0:	e002      	b.n	8001ea8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001ea2:	bf00      	nop
 8001ea4:	e000      	b.n	8001ea8 <DMA_CheckFifoParam+0xe8>
      break;
 8001ea6:	bf00      	nop
    }
  } 
  
  return status; 
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop

08001eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b089      	sub	sp, #36	@ 0x24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61fb      	str	r3, [r7, #28]
 8001ed2:	e159      	b.n	8002188 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	f040 8148 	bne.w	8002182 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d005      	beq.n	8001f0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d130      	bne.n	8001f6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	2203      	movs	r2, #3
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f40:	2201      	movs	r2, #1
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	091b      	lsrs	r3, r3, #4
 8001f56:	f003 0201 	and.w	r2, r3, #1
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	2b03      	cmp	r3, #3
 8001f76:	d017      	beq.n	8001fa8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	2203      	movs	r2, #3
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 0303 	and.w	r3, r3, #3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d123      	bne.n	8001ffc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	08da      	lsrs	r2, r3, #3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3208      	adds	r2, #8
 8001fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	220f      	movs	r2, #15
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	691a      	ldr	r2, [r3, #16]
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	08da      	lsrs	r2, r3, #3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	3208      	adds	r2, #8
 8001ff6:	69b9      	ldr	r1, [r7, #24]
 8001ff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	2203      	movs	r2, #3
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 0203 	and.w	r2, r3, #3
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4313      	orrs	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 80a2 	beq.w	8002182 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	4b57      	ldr	r3, [pc, #348]	@ (80021a0 <HAL_GPIO_Init+0x2e8>)
 8002044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002046:	4a56      	ldr	r2, [pc, #344]	@ (80021a0 <HAL_GPIO_Init+0x2e8>)
 8002048:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800204c:	6453      	str	r3, [r2, #68]	@ 0x44
 800204e:	4b54      	ldr	r3, [pc, #336]	@ (80021a0 <HAL_GPIO_Init+0x2e8>)
 8002050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002052:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800205a:	4a52      	ldr	r2, [pc, #328]	@ (80021a4 <HAL_GPIO_Init+0x2ec>)
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	089b      	lsrs	r3, r3, #2
 8002060:	3302      	adds	r3, #2
 8002062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002066:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	220f      	movs	r2, #15
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4013      	ands	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a49      	ldr	r2, [pc, #292]	@ (80021a8 <HAL_GPIO_Init+0x2f0>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d019      	beq.n	80020ba <HAL_GPIO_Init+0x202>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a48      	ldr	r2, [pc, #288]	@ (80021ac <HAL_GPIO_Init+0x2f4>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d013      	beq.n	80020b6 <HAL_GPIO_Init+0x1fe>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a47      	ldr	r2, [pc, #284]	@ (80021b0 <HAL_GPIO_Init+0x2f8>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d00d      	beq.n	80020b2 <HAL_GPIO_Init+0x1fa>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a46      	ldr	r2, [pc, #280]	@ (80021b4 <HAL_GPIO_Init+0x2fc>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d007      	beq.n	80020ae <HAL_GPIO_Init+0x1f6>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a45      	ldr	r2, [pc, #276]	@ (80021b8 <HAL_GPIO_Init+0x300>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d101      	bne.n	80020aa <HAL_GPIO_Init+0x1f2>
 80020a6:	2304      	movs	r3, #4
 80020a8:	e008      	b.n	80020bc <HAL_GPIO_Init+0x204>
 80020aa:	2307      	movs	r3, #7
 80020ac:	e006      	b.n	80020bc <HAL_GPIO_Init+0x204>
 80020ae:	2303      	movs	r3, #3
 80020b0:	e004      	b.n	80020bc <HAL_GPIO_Init+0x204>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e002      	b.n	80020bc <HAL_GPIO_Init+0x204>
 80020b6:	2301      	movs	r3, #1
 80020b8:	e000      	b.n	80020bc <HAL_GPIO_Init+0x204>
 80020ba:	2300      	movs	r3, #0
 80020bc:	69fa      	ldr	r2, [r7, #28]
 80020be:	f002 0203 	and.w	r2, r2, #3
 80020c2:	0092      	lsls	r2, r2, #2
 80020c4:	4093      	lsls	r3, r2
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020cc:	4935      	ldr	r1, [pc, #212]	@ (80021a4 <HAL_GPIO_Init+0x2ec>)
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	089b      	lsrs	r3, r3, #2
 80020d2:	3302      	adds	r3, #2
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020da:	4b38      	ldr	r3, [pc, #224]	@ (80021bc <HAL_GPIO_Init+0x304>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4013      	ands	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020fe:	4a2f      	ldr	r2, [pc, #188]	@ (80021bc <HAL_GPIO_Init+0x304>)
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002104:	4b2d      	ldr	r3, [pc, #180]	@ (80021bc <HAL_GPIO_Init+0x304>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	43db      	mvns	r3, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4013      	ands	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	4313      	orrs	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002128:	4a24      	ldr	r2, [pc, #144]	@ (80021bc <HAL_GPIO_Init+0x304>)
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800212e:	4b23      	ldr	r3, [pc, #140]	@ (80021bc <HAL_GPIO_Init+0x304>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	43db      	mvns	r3, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4013      	ands	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002152:	4a1a      	ldr	r2, [pc, #104]	@ (80021bc <HAL_GPIO_Init+0x304>)
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002158:	4b18      	ldr	r3, [pc, #96]	@ (80021bc <HAL_GPIO_Init+0x304>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4313      	orrs	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800217c:	4a0f      	ldr	r2, [pc, #60]	@ (80021bc <HAL_GPIO_Init+0x304>)
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3301      	adds	r3, #1
 8002186:	61fb      	str	r3, [r7, #28]
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	2b0f      	cmp	r3, #15
 800218c:	f67f aea2 	bls.w	8001ed4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002190:	bf00      	nop
 8002192:	bf00      	nop
 8002194:	3724      	adds	r7, #36	@ 0x24
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40023800 	.word	0x40023800
 80021a4:	40013800 	.word	0x40013800
 80021a8:	40020000 	.word	0x40020000
 80021ac:	40020400 	.word	0x40020400
 80021b0:	40020800 	.word	0x40020800
 80021b4:	40020c00 	.word	0x40020c00
 80021b8:	40021000 	.word	0x40021000
 80021bc:	40013c00 	.word	0x40013c00

080021c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691a      	ldr	r2, [r3, #16]
 80021d0:	887b      	ldrh	r3, [r7, #2]
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d002      	beq.n	80021de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021d8:	2301      	movs	r3, #1
 80021da:	73fb      	strb	r3, [r7, #15]
 80021dc:	e001      	b.n	80021e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021de:	2300      	movs	r3, #0
 80021e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	460b      	mov	r3, r1
 80021fa:	807b      	strh	r3, [r7, #2]
 80021fc:	4613      	mov	r3, r2
 80021fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002200:	787b      	ldrb	r3, [r7, #1]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002206:	887a      	ldrh	r2, [r7, #2]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800220c:	e003      	b.n	8002216 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800220e:	887b      	ldrh	r3, [r7, #2]
 8002210:	041a      	lsls	r2, r3, #16
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	619a      	str	r2, [r3, #24]
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
	...

08002224 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e267      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	2b00      	cmp	r3, #0
 8002240:	d075      	beq.n	800232e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002242:	4b88      	ldr	r3, [pc, #544]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 030c 	and.w	r3, r3, #12
 800224a:	2b04      	cmp	r3, #4
 800224c:	d00c      	beq.n	8002268 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800224e:	4b85      	ldr	r3, [pc, #532]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002256:	2b08      	cmp	r3, #8
 8002258:	d112      	bne.n	8002280 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800225a:	4b82      	ldr	r3, [pc, #520]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002262:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002266:	d10b      	bne.n	8002280 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002268:	4b7e      	ldr	r3, [pc, #504]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d05b      	beq.n	800232c <HAL_RCC_OscConfig+0x108>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d157      	bne.n	800232c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e242      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002288:	d106      	bne.n	8002298 <HAL_RCC_OscConfig+0x74>
 800228a:	4b76      	ldr	r3, [pc, #472]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a75      	ldr	r2, [pc, #468]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 8002290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	e01d      	b.n	80022d4 <HAL_RCC_OscConfig+0xb0>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022a0:	d10c      	bne.n	80022bc <HAL_RCC_OscConfig+0x98>
 80022a2:	4b70      	ldr	r3, [pc, #448]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a6f      	ldr	r2, [pc, #444]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 80022a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	4b6d      	ldr	r3, [pc, #436]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a6c      	ldr	r2, [pc, #432]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 80022b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	e00b      	b.n	80022d4 <HAL_RCC_OscConfig+0xb0>
 80022bc:	4b69      	ldr	r3, [pc, #420]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a68      	ldr	r2, [pc, #416]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 80022c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022c6:	6013      	str	r3, [r2, #0]
 80022c8:	4b66      	ldr	r3, [pc, #408]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a65      	ldr	r2, [pc, #404]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 80022ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d013      	beq.n	8002304 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022dc:	f7ff f8fc 	bl	80014d8 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022e4:	f7ff f8f8 	bl	80014d8 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b64      	cmp	r3, #100	@ 0x64
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e207      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f6:	4b5b      	ldr	r3, [pc, #364]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0f0      	beq.n	80022e4 <HAL_RCC_OscConfig+0xc0>
 8002302:	e014      	b.n	800232e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002304:	f7ff f8e8 	bl	80014d8 <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800230c:	f7ff f8e4 	bl	80014d8 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b64      	cmp	r3, #100	@ 0x64
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e1f3      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800231e:	4b51      	ldr	r3, [pc, #324]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f0      	bne.n	800230c <HAL_RCC_OscConfig+0xe8>
 800232a:	e000      	b.n	800232e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800232c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d063      	beq.n	8002402 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800233a:	4b4a      	ldr	r3, [pc, #296]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 030c 	and.w	r3, r3, #12
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00b      	beq.n	800235e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002346:	4b47      	ldr	r3, [pc, #284]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800234e:	2b08      	cmp	r3, #8
 8002350:	d11c      	bne.n	800238c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002352:	4b44      	ldr	r3, [pc, #272]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d116      	bne.n	800238c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800235e:	4b41      	ldr	r3, [pc, #260]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d005      	beq.n	8002376 <HAL_RCC_OscConfig+0x152>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d001      	beq.n	8002376 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e1c7      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002376:	4b3b      	ldr	r3, [pc, #236]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	4937      	ldr	r1, [pc, #220]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 8002386:	4313      	orrs	r3, r2
 8002388:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800238a:	e03a      	b.n	8002402 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d020      	beq.n	80023d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002394:	4b34      	ldr	r3, [pc, #208]	@ (8002468 <HAL_RCC_OscConfig+0x244>)
 8002396:	2201      	movs	r2, #1
 8002398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239a:	f7ff f89d 	bl	80014d8 <HAL_GetTick>
 800239e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023a2:	f7ff f899 	bl	80014d8 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e1a8      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0302 	and.w	r3, r3, #2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d0f0      	beq.n	80023a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c0:	4b28      	ldr	r3, [pc, #160]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	4925      	ldr	r1, [pc, #148]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	600b      	str	r3, [r1, #0]
 80023d4:	e015      	b.n	8002402 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023d6:	4b24      	ldr	r3, [pc, #144]	@ (8002468 <HAL_RCC_OscConfig+0x244>)
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023dc:	f7ff f87c 	bl	80014d8 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e4:	f7ff f878 	bl	80014d8 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e187      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	2b00      	cmp	r3, #0
 800240c:	d036      	beq.n	800247c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d016      	beq.n	8002444 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002416:	4b15      	ldr	r3, [pc, #84]	@ (800246c <HAL_RCC_OscConfig+0x248>)
 8002418:	2201      	movs	r2, #1
 800241a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800241c:	f7ff f85c 	bl	80014d8 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002424:	f7ff f858 	bl	80014d8 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b02      	cmp	r3, #2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e167      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002436:	4b0b      	ldr	r3, [pc, #44]	@ (8002464 <HAL_RCC_OscConfig+0x240>)
 8002438:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0f0      	beq.n	8002424 <HAL_RCC_OscConfig+0x200>
 8002442:	e01b      	b.n	800247c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002444:	4b09      	ldr	r3, [pc, #36]	@ (800246c <HAL_RCC_OscConfig+0x248>)
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800244a:	f7ff f845 	bl	80014d8 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002450:	e00e      	b.n	8002470 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002452:	f7ff f841 	bl	80014d8 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d907      	bls.n	8002470 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e150      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
 8002464:	40023800 	.word	0x40023800
 8002468:	42470000 	.word	0x42470000
 800246c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002470:	4b88      	ldr	r3, [pc, #544]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 8002472:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1ea      	bne.n	8002452 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 8097 	beq.w	80025b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800248a:	2300      	movs	r3, #0
 800248c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800248e:	4b81      	ldr	r3, [pc, #516]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002492:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10f      	bne.n	80024ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	60bb      	str	r3, [r7, #8]
 800249e:	4b7d      	ldr	r3, [pc, #500]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 80024a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a2:	4a7c      	ldr	r2, [pc, #496]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 80024a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024aa:	4b7a      	ldr	r3, [pc, #488]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 80024ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024b2:	60bb      	str	r3, [r7, #8]
 80024b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024b6:	2301      	movs	r3, #1
 80024b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ba:	4b77      	ldr	r3, [pc, #476]	@ (8002698 <HAL_RCC_OscConfig+0x474>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d118      	bne.n	80024f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024c6:	4b74      	ldr	r3, [pc, #464]	@ (8002698 <HAL_RCC_OscConfig+0x474>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a73      	ldr	r2, [pc, #460]	@ (8002698 <HAL_RCC_OscConfig+0x474>)
 80024cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024d2:	f7ff f801 	bl	80014d8 <HAL_GetTick>
 80024d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d8:	e008      	b.n	80024ec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024da:	f7fe fffd 	bl	80014d8 <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e10c      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ec:	4b6a      	ldr	r3, [pc, #424]	@ (8002698 <HAL_RCC_OscConfig+0x474>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0f0      	beq.n	80024da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d106      	bne.n	800250e <HAL_RCC_OscConfig+0x2ea>
 8002500:	4b64      	ldr	r3, [pc, #400]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 8002502:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002504:	4a63      	ldr	r2, [pc, #396]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	6713      	str	r3, [r2, #112]	@ 0x70
 800250c:	e01c      	b.n	8002548 <HAL_RCC_OscConfig+0x324>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	2b05      	cmp	r3, #5
 8002514:	d10c      	bne.n	8002530 <HAL_RCC_OscConfig+0x30c>
 8002516:	4b5f      	ldr	r3, [pc, #380]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 8002518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800251a:	4a5e      	ldr	r2, [pc, #376]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 800251c:	f043 0304 	orr.w	r3, r3, #4
 8002520:	6713      	str	r3, [r2, #112]	@ 0x70
 8002522:	4b5c      	ldr	r3, [pc, #368]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 8002524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002526:	4a5b      	ldr	r2, [pc, #364]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 8002528:	f043 0301 	orr.w	r3, r3, #1
 800252c:	6713      	str	r3, [r2, #112]	@ 0x70
 800252e:	e00b      	b.n	8002548 <HAL_RCC_OscConfig+0x324>
 8002530:	4b58      	ldr	r3, [pc, #352]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 8002532:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002534:	4a57      	ldr	r2, [pc, #348]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 8002536:	f023 0301 	bic.w	r3, r3, #1
 800253a:	6713      	str	r3, [r2, #112]	@ 0x70
 800253c:	4b55      	ldr	r3, [pc, #340]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 800253e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002540:	4a54      	ldr	r2, [pc, #336]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 8002542:	f023 0304 	bic.w	r3, r3, #4
 8002546:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d015      	beq.n	800257c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002550:	f7fe ffc2 	bl	80014d8 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002556:	e00a      	b.n	800256e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002558:	f7fe ffbe 	bl	80014d8 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002566:	4293      	cmp	r3, r2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e0cb      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800256e:	4b49      	ldr	r3, [pc, #292]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 8002570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d0ee      	beq.n	8002558 <HAL_RCC_OscConfig+0x334>
 800257a:	e014      	b.n	80025a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800257c:	f7fe ffac 	bl	80014d8 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002582:	e00a      	b.n	800259a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002584:	f7fe ffa8 	bl	80014d8 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002592:	4293      	cmp	r3, r2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e0b5      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800259a:	4b3e      	ldr	r3, [pc, #248]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 800259c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1ee      	bne.n	8002584 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025a6:	7dfb      	ldrb	r3, [r7, #23]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d105      	bne.n	80025b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ac:	4b39      	ldr	r3, [pc, #228]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 80025ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b0:	4a38      	ldr	r2, [pc, #224]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 80025b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 80a1 	beq.w	8002704 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025c2:	4b34      	ldr	r3, [pc, #208]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 030c 	and.w	r3, r3, #12
 80025ca:	2b08      	cmp	r3, #8
 80025cc:	d05c      	beq.n	8002688 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d141      	bne.n	800265a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d6:	4b31      	ldr	r3, [pc, #196]	@ (800269c <HAL_RCC_OscConfig+0x478>)
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025dc:	f7fe ff7c 	bl	80014d8 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e4:	f7fe ff78 	bl	80014d8 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e087      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025f6:	4b27      	ldr	r3, [pc, #156]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1f0      	bne.n	80025e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69da      	ldr	r2, [r3, #28]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002610:	019b      	lsls	r3, r3, #6
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002618:	085b      	lsrs	r3, r3, #1
 800261a:	3b01      	subs	r3, #1
 800261c:	041b      	lsls	r3, r3, #16
 800261e:	431a      	orrs	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002624:	061b      	lsls	r3, r3, #24
 8002626:	491b      	ldr	r1, [pc, #108]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 8002628:	4313      	orrs	r3, r2
 800262a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800262c:	4b1b      	ldr	r3, [pc, #108]	@ (800269c <HAL_RCC_OscConfig+0x478>)
 800262e:	2201      	movs	r2, #1
 8002630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002632:	f7fe ff51 	bl	80014d8 <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263a:	f7fe ff4d 	bl	80014d8 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e05c      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800264c:	4b11      	ldr	r3, [pc, #68]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0f0      	beq.n	800263a <HAL_RCC_OscConfig+0x416>
 8002658:	e054      	b.n	8002704 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265a:	4b10      	ldr	r3, [pc, #64]	@ (800269c <HAL_RCC_OscConfig+0x478>)
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002660:	f7fe ff3a 	bl	80014d8 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002668:	f7fe ff36 	bl	80014d8 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e045      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800267a:	4b06      	ldr	r3, [pc, #24]	@ (8002694 <HAL_RCC_OscConfig+0x470>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f0      	bne.n	8002668 <HAL_RCC_OscConfig+0x444>
 8002686:	e03d      	b.n	8002704 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d107      	bne.n	80026a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e038      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
 8002694:	40023800 	.word	0x40023800
 8002698:	40007000 	.word	0x40007000
 800269c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002710 <HAL_RCC_OscConfig+0x4ec>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d028      	beq.n	8002700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d121      	bne.n	8002700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d11a      	bne.n	8002700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80026d0:	4013      	ands	r3, r2
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80026d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026d8:	4293      	cmp	r3, r2
 80026da:	d111      	bne.n	8002700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e6:	085b      	lsrs	r3, r3, #1
 80026e8:	3b01      	subs	r3, #1
 80026ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d107      	bne.n	8002700 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d001      	beq.n	8002704 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e000      	b.n	8002706 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40023800 	.word	0x40023800

08002714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e0cc      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002728:	4b68      	ldr	r3, [pc, #416]	@ (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	429a      	cmp	r2, r3
 8002734:	d90c      	bls.n	8002750 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002736:	4b65      	ldr	r3, [pc, #404]	@ (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800273e:	4b63      	ldr	r3, [pc, #396]	@ (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	429a      	cmp	r2, r3
 800274a:	d001      	beq.n	8002750 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e0b8      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d020      	beq.n	800279e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	d005      	beq.n	8002774 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002768:	4b59      	ldr	r3, [pc, #356]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	4a58      	ldr	r2, [pc, #352]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 800276e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002772:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0308 	and.w	r3, r3, #8
 800277c:	2b00      	cmp	r3, #0
 800277e:	d005      	beq.n	800278c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002780:	4b53      	ldr	r3, [pc, #332]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	4a52      	ldr	r2, [pc, #328]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002786:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800278a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800278c:	4b50      	ldr	r3, [pc, #320]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	494d      	ldr	r1, [pc, #308]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 800279a:	4313      	orrs	r3, r2
 800279c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d044      	beq.n	8002834 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d107      	bne.n	80027c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b2:	4b47      	ldr	r3, [pc, #284]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d119      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e07f      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d003      	beq.n	80027d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ce:	2b03      	cmp	r3, #3
 80027d0:	d107      	bne.n	80027e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027d2:	4b3f      	ldr	r3, [pc, #252]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d109      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e06f      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e2:	4b3b      	ldr	r3, [pc, #236]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e067      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027f2:	4b37      	ldr	r3, [pc, #220]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f023 0203 	bic.w	r2, r3, #3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	4934      	ldr	r1, [pc, #208]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002800:	4313      	orrs	r3, r2
 8002802:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002804:	f7fe fe68 	bl	80014d8 <HAL_GetTick>
 8002808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280a:	e00a      	b.n	8002822 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800280c:	f7fe fe64 	bl	80014d8 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800281a:	4293      	cmp	r3, r2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e04f      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002822:	4b2b      	ldr	r3, [pc, #172]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 020c 	and.w	r2, r3, #12
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	429a      	cmp	r2, r3
 8002832:	d1eb      	bne.n	800280c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002834:	4b25      	ldr	r3, [pc, #148]	@ (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	429a      	cmp	r2, r3
 8002840:	d20c      	bcs.n	800285c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002842:	4b22      	ldr	r3, [pc, #136]	@ (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800284a:	4b20      	ldr	r3, [pc, #128]	@ (80028cc <HAL_RCC_ClockConfig+0x1b8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	429a      	cmp	r2, r3
 8002856:	d001      	beq.n	800285c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e032      	b.n	80028c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b00      	cmp	r3, #0
 8002866:	d008      	beq.n	800287a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002868:	4b19      	ldr	r3, [pc, #100]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	4916      	ldr	r1, [pc, #88]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002876:	4313      	orrs	r3, r2
 8002878:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0308 	and.w	r3, r3, #8
 8002882:	2b00      	cmp	r3, #0
 8002884:	d009      	beq.n	800289a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002886:	4b12      	ldr	r3, [pc, #72]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	490e      	ldr	r1, [pc, #56]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 8002896:	4313      	orrs	r3, r2
 8002898:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800289a:	f000 f821 	bl	80028e0 <HAL_RCC_GetSysClockFreq>
 800289e:	4602      	mov	r2, r0
 80028a0:	4b0b      	ldr	r3, [pc, #44]	@ (80028d0 <HAL_RCC_ClockConfig+0x1bc>)
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	091b      	lsrs	r3, r3, #4
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	490a      	ldr	r1, [pc, #40]	@ (80028d4 <HAL_RCC_ClockConfig+0x1c0>)
 80028ac:	5ccb      	ldrb	r3, [r1, r3]
 80028ae:	fa22 f303 	lsr.w	r3, r2, r3
 80028b2:	4a09      	ldr	r2, [pc, #36]	@ (80028d8 <HAL_RCC_ClockConfig+0x1c4>)
 80028b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80028b6:	4b09      	ldr	r3, [pc, #36]	@ (80028dc <HAL_RCC_ClockConfig+0x1c8>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f7fe fa30 	bl	8000d20 <HAL_InitTick>

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40023c00 	.word	0x40023c00
 80028d0:	40023800 	.word	0x40023800
 80028d4:	080082e4 	.word	0x080082e4
 80028d8:	20000018 	.word	0x20000018
 80028dc:	2000001c 	.word	0x2000001c

080028e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028e4:	b094      	sub	sp, #80	@ 0x50
 80028e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028f8:	4b79      	ldr	r3, [pc, #484]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x200>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 030c 	and.w	r3, r3, #12
 8002900:	2b08      	cmp	r3, #8
 8002902:	d00d      	beq.n	8002920 <HAL_RCC_GetSysClockFreq+0x40>
 8002904:	2b08      	cmp	r3, #8
 8002906:	f200 80e1 	bhi.w	8002acc <HAL_RCC_GetSysClockFreq+0x1ec>
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <HAL_RCC_GetSysClockFreq+0x34>
 800290e:	2b04      	cmp	r3, #4
 8002910:	d003      	beq.n	800291a <HAL_RCC_GetSysClockFreq+0x3a>
 8002912:	e0db      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002914:	4b73      	ldr	r3, [pc, #460]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002916:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002918:	e0db      	b.n	8002ad2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800291a:	4b73      	ldr	r3, [pc, #460]	@ (8002ae8 <HAL_RCC_GetSysClockFreq+0x208>)
 800291c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800291e:	e0d8      	b.n	8002ad2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002920:	4b6f      	ldr	r3, [pc, #444]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002928:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800292a:	4b6d      	ldr	r3, [pc, #436]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x200>)
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d063      	beq.n	80029fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002936:	4b6a      	ldr	r3, [pc, #424]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	099b      	lsrs	r3, r3, #6
 800293c:	2200      	movs	r2, #0
 800293e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002940:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002948:	633b      	str	r3, [r7, #48]	@ 0x30
 800294a:	2300      	movs	r3, #0
 800294c:	637b      	str	r3, [r7, #52]	@ 0x34
 800294e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002952:	4622      	mov	r2, r4
 8002954:	462b      	mov	r3, r5
 8002956:	f04f 0000 	mov.w	r0, #0
 800295a:	f04f 0100 	mov.w	r1, #0
 800295e:	0159      	lsls	r1, r3, #5
 8002960:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002964:	0150      	lsls	r0, r2, #5
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	4621      	mov	r1, r4
 800296c:	1a51      	subs	r1, r2, r1
 800296e:	6139      	str	r1, [r7, #16]
 8002970:	4629      	mov	r1, r5
 8002972:	eb63 0301 	sbc.w	r3, r3, r1
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	f04f 0200 	mov.w	r2, #0
 800297c:	f04f 0300 	mov.w	r3, #0
 8002980:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002984:	4659      	mov	r1, fp
 8002986:	018b      	lsls	r3, r1, #6
 8002988:	4651      	mov	r1, sl
 800298a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800298e:	4651      	mov	r1, sl
 8002990:	018a      	lsls	r2, r1, #6
 8002992:	4651      	mov	r1, sl
 8002994:	ebb2 0801 	subs.w	r8, r2, r1
 8002998:	4659      	mov	r1, fp
 800299a:	eb63 0901 	sbc.w	r9, r3, r1
 800299e:	f04f 0200 	mov.w	r2, #0
 80029a2:	f04f 0300 	mov.w	r3, #0
 80029a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029b2:	4690      	mov	r8, r2
 80029b4:	4699      	mov	r9, r3
 80029b6:	4623      	mov	r3, r4
 80029b8:	eb18 0303 	adds.w	r3, r8, r3
 80029bc:	60bb      	str	r3, [r7, #8]
 80029be:	462b      	mov	r3, r5
 80029c0:	eb49 0303 	adc.w	r3, r9, r3
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	f04f 0200 	mov.w	r2, #0
 80029ca:	f04f 0300 	mov.w	r3, #0
 80029ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80029d2:	4629      	mov	r1, r5
 80029d4:	024b      	lsls	r3, r1, #9
 80029d6:	4621      	mov	r1, r4
 80029d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029dc:	4621      	mov	r1, r4
 80029de:	024a      	lsls	r2, r1, #9
 80029e0:	4610      	mov	r0, r2
 80029e2:	4619      	mov	r1, r3
 80029e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029e6:	2200      	movs	r2, #0
 80029e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80029f0:	f7fd fc5e 	bl	80002b0 <__aeabi_uldivmod>
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	4613      	mov	r3, r2
 80029fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029fc:	e058      	b.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029fe:	4b38      	ldr	r3, [pc, #224]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	099b      	lsrs	r3, r3, #6
 8002a04:	2200      	movs	r2, #0
 8002a06:	4618      	mov	r0, r3
 8002a08:	4611      	mov	r1, r2
 8002a0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a0e:	623b      	str	r3, [r7, #32]
 8002a10:	2300      	movs	r3, #0
 8002a12:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a18:	4642      	mov	r2, r8
 8002a1a:	464b      	mov	r3, r9
 8002a1c:	f04f 0000 	mov.w	r0, #0
 8002a20:	f04f 0100 	mov.w	r1, #0
 8002a24:	0159      	lsls	r1, r3, #5
 8002a26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a2a:	0150      	lsls	r0, r2, #5
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4641      	mov	r1, r8
 8002a32:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a36:	4649      	mov	r1, r9
 8002a38:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a3c:	f04f 0200 	mov.w	r2, #0
 8002a40:	f04f 0300 	mov.w	r3, #0
 8002a44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a50:	ebb2 040a 	subs.w	r4, r2, sl
 8002a54:	eb63 050b 	sbc.w	r5, r3, fp
 8002a58:	f04f 0200 	mov.w	r2, #0
 8002a5c:	f04f 0300 	mov.w	r3, #0
 8002a60:	00eb      	lsls	r3, r5, #3
 8002a62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a66:	00e2      	lsls	r2, r4, #3
 8002a68:	4614      	mov	r4, r2
 8002a6a:	461d      	mov	r5, r3
 8002a6c:	4643      	mov	r3, r8
 8002a6e:	18e3      	adds	r3, r4, r3
 8002a70:	603b      	str	r3, [r7, #0]
 8002a72:	464b      	mov	r3, r9
 8002a74:	eb45 0303 	adc.w	r3, r5, r3
 8002a78:	607b      	str	r3, [r7, #4]
 8002a7a:	f04f 0200 	mov.w	r2, #0
 8002a7e:	f04f 0300 	mov.w	r3, #0
 8002a82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a86:	4629      	mov	r1, r5
 8002a88:	028b      	lsls	r3, r1, #10
 8002a8a:	4621      	mov	r1, r4
 8002a8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a90:	4621      	mov	r1, r4
 8002a92:	028a      	lsls	r2, r1, #10
 8002a94:	4610      	mov	r0, r2
 8002a96:	4619      	mov	r1, r3
 8002a98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	61bb      	str	r3, [r7, #24]
 8002a9e:	61fa      	str	r2, [r7, #28]
 8002aa0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002aa4:	f7fd fc04 	bl	80002b0 <__aeabi_uldivmod>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	460b      	mov	r3, r1
 8002aac:	4613      	mov	r3, r2
 8002aae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	0c1b      	lsrs	r3, r3, #16
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	3301      	adds	r3, #1
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002ac0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ac2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002aca:	e002      	b.n	8002ad2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002acc:	4b05      	ldr	r3, [pc, #20]	@ (8002ae4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ace:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ad0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ad2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3750      	adds	r7, #80	@ 0x50
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ade:	bf00      	nop
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	00f42400 	.word	0x00f42400
 8002ae8:	007a1200 	.word	0x007a1200

08002aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002af0:	4b03      	ldr	r3, [pc, #12]	@ (8002b00 <HAL_RCC_GetHCLKFreq+0x14>)
 8002af2:	681b      	ldr	r3, [r3, #0]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	20000018 	.word	0x20000018

08002b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b08:	f7ff fff0 	bl	8002aec <HAL_RCC_GetHCLKFreq>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	4b05      	ldr	r3, [pc, #20]	@ (8002b24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	0a9b      	lsrs	r3, r3, #10
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	4903      	ldr	r1, [pc, #12]	@ (8002b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b1a:	5ccb      	ldrb	r3, [r1, r3]
 8002b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	40023800 	.word	0x40023800
 8002b28:	080082f4 	.word	0x080082f4

08002b2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b30:	f7ff ffdc 	bl	8002aec <HAL_RCC_GetHCLKFreq>
 8002b34:	4602      	mov	r2, r0
 8002b36:	4b05      	ldr	r3, [pc, #20]	@ (8002b4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	0b5b      	lsrs	r3, r3, #13
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	4903      	ldr	r1, [pc, #12]	@ (8002b50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b42:	5ccb      	ldrb	r3, [r1, r3]
 8002b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	080082f4 	.word	0x080082f4

08002b54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	220f      	movs	r2, #15
 8002b62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002b64:	4b12      	ldr	r3, [pc, #72]	@ (8002bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 0203 	and.w	r2, r3, #3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002b70:	4b0f      	ldr	r3, [pc, #60]	@ (8002bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002b88:	4b09      	ldr	r3, [pc, #36]	@ (8002bb0 <HAL_RCC_GetClockConfig+0x5c>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	08db      	lsrs	r3, r3, #3
 8002b8e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002b96:	4b07      	ldr	r3, [pc, #28]	@ (8002bb4 <HAL_RCC_GetClockConfig+0x60>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0207 	and.w	r2, r3, #7
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	601a      	str	r2, [r3, #0]
}
 8002ba2:	bf00      	nop
 8002ba4:	370c      	adds	r7, #12
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	40023c00 	.word	0x40023c00

08002bb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e041      	b.n	8002c4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d106      	bne.n	8002be4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f839 	bl	8002c56 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2202      	movs	r2, #2
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4610      	mov	r0, r2
 8002bf8:	f000 f9b2 	bl	8002f60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
	...

08002c6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d001      	beq.n	8002c84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e044      	b.n	8002d0e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68da      	ldr	r2, [r3, #12]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0201 	orr.w	r2, r2, #1
 8002c9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a1e      	ldr	r2, [pc, #120]	@ (8002d1c <HAL_TIM_Base_Start_IT+0xb0>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d018      	beq.n	8002cd8 <HAL_TIM_Base_Start_IT+0x6c>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cae:	d013      	beq.n	8002cd8 <HAL_TIM_Base_Start_IT+0x6c>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a1a      	ldr	r2, [pc, #104]	@ (8002d20 <HAL_TIM_Base_Start_IT+0xb4>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d00e      	beq.n	8002cd8 <HAL_TIM_Base_Start_IT+0x6c>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a19      	ldr	r2, [pc, #100]	@ (8002d24 <HAL_TIM_Base_Start_IT+0xb8>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d009      	beq.n	8002cd8 <HAL_TIM_Base_Start_IT+0x6c>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a17      	ldr	r2, [pc, #92]	@ (8002d28 <HAL_TIM_Base_Start_IT+0xbc>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d004      	beq.n	8002cd8 <HAL_TIM_Base_Start_IT+0x6c>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a16      	ldr	r2, [pc, #88]	@ (8002d2c <HAL_TIM_Base_Start_IT+0xc0>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d111      	bne.n	8002cfc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2b06      	cmp	r3, #6
 8002ce8:	d010      	beq.n	8002d0c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f042 0201 	orr.w	r2, r2, #1
 8002cf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cfa:	e007      	b.n	8002d0c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 0201 	orr.w	r2, r2, #1
 8002d0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40010000 	.word	0x40010000
 8002d20:	40000400 	.word	0x40000400
 8002d24:	40000800 	.word	0x40000800
 8002d28:	40000c00 	.word	0x40000c00
 8002d2c:	40014000 	.word	0x40014000

08002d30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d020      	beq.n	8002d94 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d01b      	beq.n	8002d94 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f06f 0202 	mvn.w	r2, #2
 8002d64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f8d2 	bl	8002f24 <HAL_TIM_IC_CaptureCallback>
 8002d80:	e005      	b.n	8002d8e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f8c4 	bl	8002f10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f8d5 	bl	8002f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	f003 0304 	and.w	r3, r3, #4
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d020      	beq.n	8002de0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d01b      	beq.n	8002de0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f06f 0204 	mvn.w	r2, #4
 8002db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2202      	movs	r2, #2
 8002db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f8ac 	bl	8002f24 <HAL_TIM_IC_CaptureCallback>
 8002dcc:	e005      	b.n	8002dda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f89e 	bl	8002f10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 f8af 	bl	8002f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	f003 0308 	and.w	r3, r3, #8
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d020      	beq.n	8002e2c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f003 0308 	and.w	r3, r3, #8
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d01b      	beq.n	8002e2c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f06f 0208 	mvn.w	r2, #8
 8002dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2204      	movs	r2, #4
 8002e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f886 	bl	8002f24 <HAL_TIM_IC_CaptureCallback>
 8002e18:	e005      	b.n	8002e26 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f878 	bl	8002f10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 f889 	bl	8002f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	f003 0310 	and.w	r3, r3, #16
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d020      	beq.n	8002e78 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f003 0310 	and.w	r3, r3, #16
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d01b      	beq.n	8002e78 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f06f 0210 	mvn.w	r2, #16
 8002e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2208      	movs	r2, #8
 8002e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f860 	bl	8002f24 <HAL_TIM_IC_CaptureCallback>
 8002e64:	e005      	b.n	8002e72 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f852 	bl	8002f10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f863 	bl	8002f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00c      	beq.n	8002e9c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d007      	beq.n	8002e9c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f06f 0201 	mvn.w	r2, #1
 8002e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7fd fefe 	bl	8000c98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00c      	beq.n	8002ec0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d007      	beq.n	8002ec0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 f8e6 	bl	800308c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00c      	beq.n	8002ee4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d007      	beq.n	8002ee4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f834 	bl	8002f4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	f003 0320 	and.w	r3, r3, #32
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00c      	beq.n	8002f08 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f003 0320 	and.w	r3, r3, #32
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d007      	beq.n	8002f08 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f06f 0220 	mvn.w	r2, #32
 8002f00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f8b8 	bl	8003078 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f08:	bf00      	nop
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f54:	bf00      	nop
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a3a      	ldr	r2, [pc, #232]	@ (800305c <TIM_Base_SetConfig+0xfc>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d00f      	beq.n	8002f98 <TIM_Base_SetConfig+0x38>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f7e:	d00b      	beq.n	8002f98 <TIM_Base_SetConfig+0x38>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a37      	ldr	r2, [pc, #220]	@ (8003060 <TIM_Base_SetConfig+0x100>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d007      	beq.n	8002f98 <TIM_Base_SetConfig+0x38>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a36      	ldr	r2, [pc, #216]	@ (8003064 <TIM_Base_SetConfig+0x104>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d003      	beq.n	8002f98 <TIM_Base_SetConfig+0x38>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a35      	ldr	r2, [pc, #212]	@ (8003068 <TIM_Base_SetConfig+0x108>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d108      	bne.n	8002faa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a2b      	ldr	r2, [pc, #172]	@ (800305c <TIM_Base_SetConfig+0xfc>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d01b      	beq.n	8002fea <TIM_Base_SetConfig+0x8a>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fb8:	d017      	beq.n	8002fea <TIM_Base_SetConfig+0x8a>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a28      	ldr	r2, [pc, #160]	@ (8003060 <TIM_Base_SetConfig+0x100>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d013      	beq.n	8002fea <TIM_Base_SetConfig+0x8a>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a27      	ldr	r2, [pc, #156]	@ (8003064 <TIM_Base_SetConfig+0x104>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d00f      	beq.n	8002fea <TIM_Base_SetConfig+0x8a>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a26      	ldr	r2, [pc, #152]	@ (8003068 <TIM_Base_SetConfig+0x108>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d00b      	beq.n	8002fea <TIM_Base_SetConfig+0x8a>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a25      	ldr	r2, [pc, #148]	@ (800306c <TIM_Base_SetConfig+0x10c>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d007      	beq.n	8002fea <TIM_Base_SetConfig+0x8a>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a24      	ldr	r2, [pc, #144]	@ (8003070 <TIM_Base_SetConfig+0x110>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d003      	beq.n	8002fea <TIM_Base_SetConfig+0x8a>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a23      	ldr	r2, [pc, #140]	@ (8003074 <TIM_Base_SetConfig+0x114>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d108      	bne.n	8002ffc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ff0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	4313      	orrs	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a0e      	ldr	r2, [pc, #56]	@ (800305c <TIM_Base_SetConfig+0xfc>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d103      	bne.n	8003030 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	691a      	ldr	r2, [r3, #16]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b01      	cmp	r3, #1
 8003040:	d105      	bne.n	800304e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	f023 0201 	bic.w	r2, r3, #1
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	611a      	str	r2, [r3, #16]
  }
}
 800304e:	bf00      	nop
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	40010000 	.word	0x40010000
 8003060:	40000400 	.word	0x40000400
 8003064:	40000800 	.word	0x40000800
 8003068:	40000c00 	.word	0x40000c00
 800306c:	40014000 	.word	0x40014000
 8003070:	40014400 	.word	0x40014400
 8003074:	40014800 	.word	0x40014800

08003078 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003094:	bf00      	nop
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e042      	b.n	8003138 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d106      	bne.n	80030cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7fe f820 	bl	800110c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2224      	movs	r2, #36	@ 0x24
 80030d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 ff4f 	bl	8003f88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	691a      	ldr	r2, [r3, #16]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80030f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	695a      	ldr	r2, [r3, #20]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003108:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68da      	ldr	r2, [r3, #12]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003118:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2220      	movs	r2, #32
 8003124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2220      	movs	r2, #32
 800312c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b08a      	sub	sp, #40	@ 0x28
 8003144:	af02      	add	r7, sp, #8
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	603b      	str	r3, [r7, #0]
 800314c:	4613      	mov	r3, r2
 800314e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800315a:	b2db      	uxtb	r3, r3
 800315c:	2b20      	cmp	r3, #32
 800315e:	d175      	bne.n	800324c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d002      	beq.n	800316c <HAL_UART_Transmit+0x2c>
 8003166:	88fb      	ldrh	r3, [r7, #6]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e06e      	b.n	800324e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2221      	movs	r2, #33	@ 0x21
 800317a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800317e:	f7fe f9ab 	bl	80014d8 <HAL_GetTick>
 8003182:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	88fa      	ldrh	r2, [r7, #6]
 8003188:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	88fa      	ldrh	r2, [r7, #6]
 800318e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003198:	d108      	bne.n	80031ac <HAL_UART_Transmit+0x6c>
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d104      	bne.n	80031ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80031a2:	2300      	movs	r3, #0
 80031a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	61bb      	str	r3, [r7, #24]
 80031aa:	e003      	b.n	80031b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80031b4:	e02e      	b.n	8003214 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	9300      	str	r3, [sp, #0]
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	2200      	movs	r2, #0
 80031be:	2180      	movs	r1, #128	@ 0x80
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 fc27 	bl	8003a14 <UART_WaitOnFlagUntilTimeout>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d005      	beq.n	80031d8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2220      	movs	r2, #32
 80031d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e03a      	b.n	800324e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10b      	bne.n	80031f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	881b      	ldrh	r3, [r3, #0]
 80031e2:	461a      	mov	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	3302      	adds	r3, #2
 80031f2:	61bb      	str	r3, [r7, #24]
 80031f4:	e007      	b.n	8003206 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	781a      	ldrb	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	3301      	adds	r3, #1
 8003204:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800320a:	b29b      	uxth	r3, r3
 800320c:	3b01      	subs	r3, #1
 800320e:	b29a      	uxth	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003218:	b29b      	uxth	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1cb      	bne.n	80031b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	2200      	movs	r2, #0
 8003226:	2140      	movs	r1, #64	@ 0x40
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 fbf3 	bl	8003a14 <UART_WaitOnFlagUntilTimeout>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d005      	beq.n	8003240 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2220      	movs	r2, #32
 8003238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e006      	b.n	800324e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003248:	2300      	movs	r3, #0
 800324a:	e000      	b.n	800324e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800324c:	2302      	movs	r3, #2
  }
}
 800324e:	4618      	mov	r0, r3
 8003250:	3720      	adds	r7, #32
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b084      	sub	sp, #16
 800325a:	af00      	add	r7, sp, #0
 800325c:	60f8      	str	r0, [r7, #12]
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	4613      	mov	r3, r2
 8003262:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b20      	cmp	r3, #32
 800326e:	d112      	bne.n	8003296 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <HAL_UART_Receive_DMA+0x26>
 8003276:	88fb      	ldrh	r3, [r7, #6]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d101      	bne.n	8003280 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e00b      	b.n	8003298 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003286:	88fb      	ldrh	r3, [r7, #6]
 8003288:	461a      	mov	r2, r3
 800328a:	68b9      	ldr	r1, [r7, #8]
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 fc1b 	bl	8003ac8 <UART_Start_Receive_DMA>
 8003292:	4603      	mov	r3, r0
 8003294:	e000      	b.n	8003298 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003296:	2302      	movs	r3, #2
  }
}
 8003298:	4618      	mov	r0, r3
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b0ba      	sub	sp, #232	@ 0xe8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80032d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80032de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10f      	bne.n	8003306 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032ea:	f003 0320 	and.w	r3, r3, #32
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d009      	beq.n	8003306 <HAL_UART_IRQHandler+0x66>
 80032f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032f6:	f003 0320 	and.w	r3, r3, #32
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 fd83 	bl	8003e0a <UART_Receive_IT>
      return;
 8003304:	e25b      	b.n	80037be <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003306:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 80de 	beq.w	80034cc <HAL_UART_IRQHandler+0x22c>
 8003310:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b00      	cmp	r3, #0
 800331a:	d106      	bne.n	800332a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800331c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003320:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 80d1 	beq.w	80034cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800332a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00b      	beq.n	800334e <HAL_UART_IRQHandler+0xae>
 8003336:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800333a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800333e:	2b00      	cmp	r3, #0
 8003340:	d005      	beq.n	800334e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003346:	f043 0201 	orr.w	r2, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800334e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003352:	f003 0304 	and.w	r3, r3, #4
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00b      	beq.n	8003372 <HAL_UART_IRQHandler+0xd2>
 800335a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	d005      	beq.n	8003372 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800336a:	f043 0202 	orr.w	r2, r3, #2
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00b      	beq.n	8003396 <HAL_UART_IRQHandler+0xf6>
 800337e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b00      	cmp	r3, #0
 8003388:	d005      	beq.n	8003396 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800338e:	f043 0204 	orr.w	r2, r3, #4
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d011      	beq.n	80033c6 <HAL_UART_IRQHandler+0x126>
 80033a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033a6:	f003 0320 	and.w	r3, r3, #32
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d105      	bne.n	80033ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80033ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d005      	beq.n	80033c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033be:	f043 0208 	orr.w	r2, r3, #8
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 81f2 	beq.w	80037b4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033d4:	f003 0320 	and.w	r3, r3, #32
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d008      	beq.n	80033ee <HAL_UART_IRQHandler+0x14e>
 80033dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033e0:	f003 0320 	and.w	r3, r3, #32
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d002      	beq.n	80033ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 fd0e 	bl	8003e0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033f8:	2b40      	cmp	r3, #64	@ 0x40
 80033fa:	bf0c      	ite	eq
 80033fc:	2301      	moveq	r3, #1
 80033fe:	2300      	movne	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	2b00      	cmp	r3, #0
 8003410:	d103      	bne.n	800341a <HAL_UART_IRQHandler+0x17a>
 8003412:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003416:	2b00      	cmp	r3, #0
 8003418:	d04f      	beq.n	80034ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 fc16 	bl	8003c4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800342a:	2b40      	cmp	r3, #64	@ 0x40
 800342c:	d141      	bne.n	80034b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	3314      	adds	r3, #20
 8003434:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003438:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800343c:	e853 3f00 	ldrex	r3, [r3]
 8003440:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003444:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003448:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800344c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	3314      	adds	r3, #20
 8003456:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800345a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800345e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003462:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003466:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800346a:	e841 2300 	strex	r3, r2, [r1]
 800346e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003472:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1d9      	bne.n	800342e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800347e:	2b00      	cmp	r3, #0
 8003480:	d013      	beq.n	80034aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003486:	4a7e      	ldr	r2, [pc, #504]	@ (8003680 <HAL_UART_IRQHandler+0x3e0>)
 8003488:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800348e:	4618      	mov	r0, r3
 8003490:	f7fe fa86 	bl	80019a0 <HAL_DMA_Abort_IT>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d016      	beq.n	80034c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800349e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80034a4:	4610      	mov	r0, r2
 80034a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034a8:	e00e      	b.n	80034c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f99e 	bl	80037ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034b0:	e00a      	b.n	80034c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f99a 	bl	80037ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034b8:	e006      	b.n	80034c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f996 	bl	80037ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80034c6:	e175      	b.n	80037b4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034c8:	bf00      	nop
    return;
 80034ca:	e173      	b.n	80037b4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	f040 814f 	bne.w	8003774 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80034d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034da:	f003 0310 	and.w	r3, r3, #16
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 8148 	beq.w	8003774 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80034e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034e8:	f003 0310 	and.w	r3, r3, #16
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 8141 	beq.w	8003774 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80034f2:	2300      	movs	r3, #0
 80034f4:	60bb      	str	r3, [r7, #8]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	60bb      	str	r3, [r7, #8]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	60bb      	str	r3, [r7, #8]
 8003506:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003512:	2b40      	cmp	r3, #64	@ 0x40
 8003514:	f040 80b6 	bne.w	8003684 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003524:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 8145 	beq.w	80037b8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003532:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003536:	429a      	cmp	r2, r3
 8003538:	f080 813e 	bcs.w	80037b8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003542:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800354e:	f000 8088 	beq.w	8003662 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	330c      	adds	r3, #12
 8003558:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800355c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003560:	e853 3f00 	ldrex	r3, [r3]
 8003564:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003568:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800356c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003570:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	330c      	adds	r3, #12
 800357a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800357e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003582:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003586:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800358a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800358e:	e841 2300 	strex	r3, r2, [r1]
 8003592:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003596:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1d9      	bne.n	8003552 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	3314      	adds	r3, #20
 80035a4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035a8:	e853 3f00 	ldrex	r3, [r3]
 80035ac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80035ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035b0:	f023 0301 	bic.w	r3, r3, #1
 80035b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	3314      	adds	r3, #20
 80035be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80035c2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80035c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80035ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80035ce:	e841 2300 	strex	r3, r2, [r1]
 80035d2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80035d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1e1      	bne.n	800359e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	3314      	adds	r3, #20
 80035e0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035e4:	e853 3f00 	ldrex	r3, [r3]
 80035e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80035ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	3314      	adds	r3, #20
 80035fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80035fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003600:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003602:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003604:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003606:	e841 2300 	strex	r3, r2, [r1]
 800360a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800360c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1e3      	bne.n	80035da <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2220      	movs	r2, #32
 8003616:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	330c      	adds	r3, #12
 8003626:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003628:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800362a:	e853 3f00 	ldrex	r3, [r3]
 800362e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003630:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003632:	f023 0310 	bic.w	r3, r3, #16
 8003636:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	330c      	adds	r3, #12
 8003640:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003644:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003646:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003648:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800364a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800364c:	e841 2300 	strex	r3, r2, [r1]
 8003650:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003652:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1e3      	bne.n	8003620 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800365c:	4618      	mov	r0, r3
 800365e:	f7fe f92f 	bl	80018c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2202      	movs	r2, #2
 8003666:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003670:	b29b      	uxth	r3, r3
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	b29b      	uxth	r3, r3
 8003676:	4619      	mov	r1, r3
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f8c1 	bl	8003800 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800367e:	e09b      	b.n	80037b8 <HAL_UART_IRQHandler+0x518>
 8003680:	08003d13 	.word	0x08003d13
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800368c:	b29b      	uxth	r3, r3
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003698:	b29b      	uxth	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	f000 808e 	beq.w	80037bc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80036a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 8089 	beq.w	80037bc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	330c      	adds	r3, #12
 80036b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036b4:	e853 3f00 	ldrex	r3, [r3]
 80036b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80036ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	330c      	adds	r3, #12
 80036ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80036ce:	647a      	str	r2, [r7, #68]	@ 0x44
 80036d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80036d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036d6:	e841 2300 	strex	r3, r2, [r1]
 80036da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80036dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1e3      	bne.n	80036aa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	3314      	adds	r3, #20
 80036e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ec:	e853 3f00 	ldrex	r3, [r3]
 80036f0:	623b      	str	r3, [r7, #32]
   return(result);
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	f023 0301 	bic.w	r3, r3, #1
 80036f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	3314      	adds	r3, #20
 8003702:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003706:	633a      	str	r2, [r7, #48]	@ 0x30
 8003708:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800370c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800370e:	e841 2300 	strex	r3, r2, [r1]
 8003712:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1e3      	bne.n	80036e2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2220      	movs	r2, #32
 800371e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	330c      	adds	r3, #12
 800372e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	e853 3f00 	ldrex	r3, [r3]
 8003736:	60fb      	str	r3, [r7, #12]
   return(result);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f023 0310 	bic.w	r3, r3, #16
 800373e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	330c      	adds	r3, #12
 8003748:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800374c:	61fa      	str	r2, [r7, #28]
 800374e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003750:	69b9      	ldr	r1, [r7, #24]
 8003752:	69fa      	ldr	r2, [r7, #28]
 8003754:	e841 2300 	strex	r3, r2, [r1]
 8003758:	617b      	str	r3, [r7, #20]
   return(result);
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1e3      	bne.n	8003728 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2202      	movs	r2, #2
 8003764:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003766:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800376a:	4619      	mov	r1, r3
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f000 f847 	bl	8003800 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003772:	e023      	b.n	80037bc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003778:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800377c:	2b00      	cmp	r3, #0
 800377e:	d009      	beq.n	8003794 <HAL_UART_IRQHandler+0x4f4>
 8003780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003784:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 fad4 	bl	8003d3a <UART_Transmit_IT>
    return;
 8003792:	e014      	b.n	80037be <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00e      	beq.n	80037be <HAL_UART_IRQHandler+0x51e>
 80037a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d008      	beq.n	80037be <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 fb14 	bl	8003dda <UART_EndTransmit_IT>
    return;
 80037b2:	e004      	b.n	80037be <HAL_UART_IRQHandler+0x51e>
    return;
 80037b4:	bf00      	nop
 80037b6:	e002      	b.n	80037be <HAL_UART_IRQHandler+0x51e>
      return;
 80037b8:	bf00      	nop
 80037ba:	e000      	b.n	80037be <HAL_UART_IRQHandler+0x51e>
      return;
 80037bc:	bf00      	nop
  }
}
 80037be:	37e8      	adds	r7, #232	@ 0xe8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b09c      	sub	sp, #112	@ 0x70
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003824:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003830:	2b00      	cmp	r3, #0
 8003832:	d172      	bne.n	800391a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003834:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003836:	2200      	movs	r2, #0
 8003838:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800383a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	330c      	adds	r3, #12
 8003840:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003842:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003844:	e853 3f00 	ldrex	r3, [r3]
 8003848:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800384a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800384c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003850:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003852:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	330c      	adds	r3, #12
 8003858:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800385a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800385c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003860:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003862:	e841 2300 	strex	r3, r2, [r1]
 8003866:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003868:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1e5      	bne.n	800383a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800386e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	3314      	adds	r3, #20
 8003874:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003878:	e853 3f00 	ldrex	r3, [r3]
 800387c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800387e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003880:	f023 0301 	bic.w	r3, r3, #1
 8003884:	667b      	str	r3, [r7, #100]	@ 0x64
 8003886:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	3314      	adds	r3, #20
 800388c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800388e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003890:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003892:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003894:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003896:	e841 2300 	strex	r3, r2, [r1]
 800389a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800389c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1e5      	bne.n	800386e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	3314      	adds	r3, #20
 80038a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ac:	e853 3f00 	ldrex	r3, [r3]
 80038b0:	623b      	str	r3, [r7, #32]
   return(result);
 80038b2:	6a3b      	ldr	r3, [r7, #32]
 80038b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80038ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	3314      	adds	r3, #20
 80038c0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80038c2:	633a      	str	r2, [r7, #48]	@ 0x30
 80038c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038ca:	e841 2300 	strex	r3, r2, [r1]
 80038ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80038d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1e5      	bne.n	80038a2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80038d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038d8:	2220      	movs	r2, #32
 80038da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d119      	bne.n	800391a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	330c      	adds	r3, #12
 80038ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	e853 3f00 	ldrex	r3, [r3]
 80038f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f023 0310 	bic.w	r3, r3, #16
 80038fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80038fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	330c      	adds	r3, #12
 8003904:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003906:	61fa      	str	r2, [r7, #28]
 8003908:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390a:	69b9      	ldr	r1, [r7, #24]
 800390c:	69fa      	ldr	r2, [r7, #28]
 800390e:	e841 2300 	strex	r3, r2, [r1]
 8003912:	617b      	str	r3, [r7, #20]
   return(result);
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1e5      	bne.n	80038e6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800391a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800391c:	2200      	movs	r2, #0
 800391e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003920:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003924:	2b01      	cmp	r3, #1
 8003926:	d106      	bne.n	8003936 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003928:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800392a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800392c:	4619      	mov	r1, r3
 800392e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003930:	f7ff ff66 	bl	8003800 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003934:	e002      	b.n	800393c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003936:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003938:	f7fd fcf6 	bl	8001328 <HAL_UART_RxCpltCallback>
}
 800393c:	bf00      	nop
 800393e:	3770      	adds	r7, #112	@ 0x70
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003950:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2201      	movs	r2, #1
 8003956:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395c:	2b01      	cmp	r3, #1
 800395e:	d108      	bne.n	8003972 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003964:	085b      	lsrs	r3, r3, #1
 8003966:	b29b      	uxth	r3, r3
 8003968:	4619      	mov	r1, r3
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f7ff ff48 	bl	8003800 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003970:	e002      	b.n	8003978 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f7ff ff30 	bl	80037d8 <HAL_UART_RxHalfCpltCallback>
}
 8003978:	bf00      	nop
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003988:	2300      	movs	r3, #0
 800398a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003990:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	695b      	ldr	r3, [r3, #20]
 8003998:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800399c:	2b80      	cmp	r3, #128	@ 0x80
 800399e:	bf0c      	ite	eq
 80039a0:	2301      	moveq	r3, #1
 80039a2:	2300      	movne	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b21      	cmp	r3, #33	@ 0x21
 80039b2:	d108      	bne.n	80039c6 <UART_DMAError+0x46>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d005      	beq.n	80039c6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2200      	movs	r2, #0
 80039be:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80039c0:	68b8      	ldr	r0, [r7, #8]
 80039c2:	f000 f91b 	bl	8003bfc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039d0:	2b40      	cmp	r3, #64	@ 0x40
 80039d2:	bf0c      	ite	eq
 80039d4:	2301      	moveq	r3, #1
 80039d6:	2300      	movne	r3, #0
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b22      	cmp	r3, #34	@ 0x22
 80039e6:	d108      	bne.n	80039fa <UART_DMAError+0x7a>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d005      	beq.n	80039fa <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	2200      	movs	r2, #0
 80039f2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80039f4:	68b8      	ldr	r0, [r7, #8]
 80039f6:	f000 f929 	bl	8003c4c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039fe:	f043 0210 	orr.w	r2, r3, #16
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a06:	68b8      	ldr	r0, [r7, #8]
 8003a08:	f7ff fef0 	bl	80037ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a0c:	bf00      	nop
 8003a0e:	3710      	adds	r7, #16
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	603b      	str	r3, [r7, #0]
 8003a20:	4613      	mov	r3, r2
 8003a22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a24:	e03b      	b.n	8003a9e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2c:	d037      	beq.n	8003a9e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a2e:	f7fd fd53 	bl	80014d8 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	6a3a      	ldr	r2, [r7, #32]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d302      	bcc.n	8003a44 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a3e:	6a3b      	ldr	r3, [r7, #32]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e03a      	b.n	8003abe <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f003 0304 	and.w	r3, r3, #4
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d023      	beq.n	8003a9e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	2b80      	cmp	r3, #128	@ 0x80
 8003a5a:	d020      	beq.n	8003a9e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	2b40      	cmp	r3, #64	@ 0x40
 8003a60:	d01d      	beq.n	8003a9e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0308 	and.w	r3, r3, #8
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	d116      	bne.n	8003a9e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003a70:	2300      	movs	r3, #0
 8003a72:	617b      	str	r3, [r7, #20]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	617b      	str	r3, [r7, #20]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	617b      	str	r3, [r7, #20]
 8003a84:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 f8e0 	bl	8003c4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2208      	movs	r2, #8
 8003a90:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e00f      	b.n	8003abe <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	bf0c      	ite	eq
 8003aae:	2301      	moveq	r3, #1
 8003ab0:	2300      	movne	r3, #0
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	79fb      	ldrb	r3, [r7, #7]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d0b4      	beq.n	8003a26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3718      	adds	r7, #24
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
	...

08003ac8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b098      	sub	sp, #96	@ 0x60
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003ad6:	68ba      	ldr	r2, [r7, #8]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	88fa      	ldrh	r2, [r7, #6]
 8003ae0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2222      	movs	r2, #34	@ 0x22
 8003aec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003af4:	4a3e      	ldr	r2, [pc, #248]	@ (8003bf0 <UART_Start_Receive_DMA+0x128>)
 8003af6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003afc:	4a3d      	ldr	r2, [pc, #244]	@ (8003bf4 <UART_Start_Receive_DMA+0x12c>)
 8003afe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b04:	4a3c      	ldr	r2, [pc, #240]	@ (8003bf8 <UART_Start_Receive_DMA+0x130>)
 8003b06:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003b10:	f107 0308 	add.w	r3, r7, #8
 8003b14:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	3304      	adds	r3, #4
 8003b20:	4619      	mov	r1, r3
 8003b22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	88fb      	ldrh	r3, [r7, #6]
 8003b28:	f7fd fe72 	bl	8001810 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	613b      	str	r3, [r7, #16]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	613b      	str	r3, [r7, #16]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	613b      	str	r3, [r7, #16]
 8003b40:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d019      	beq.n	8003b7e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	330c      	adds	r3, #12
 8003b50:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b54:	e853 3f00 	ldrex	r3, [r3]
 8003b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b60:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	330c      	adds	r3, #12
 8003b68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b6a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003b6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b6e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003b70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b72:	e841 2300 	strex	r3, r2, [r1]
 8003b76:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003b78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1e5      	bne.n	8003b4a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	3314      	adds	r3, #20
 8003b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b88:	e853 3f00 	ldrex	r3, [r3]
 8003b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b90:	f043 0301 	orr.w	r3, r3, #1
 8003b94:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	3314      	adds	r3, #20
 8003b9c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003b9e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003ba0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003ba4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003ba6:	e841 2300 	strex	r3, r2, [r1]
 8003baa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1e5      	bne.n	8003b7e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	3314      	adds	r3, #20
 8003bb8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	e853 3f00 	ldrex	r3, [r3]
 8003bc0:	617b      	str	r3, [r7, #20]
   return(result);
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bc8:	653b      	str	r3, [r7, #80]	@ 0x50
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	3314      	adds	r3, #20
 8003bd0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003bd2:	627a      	str	r2, [r7, #36]	@ 0x24
 8003bd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd6:	6a39      	ldr	r1, [r7, #32]
 8003bd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bda:	e841 2300 	strex	r3, r2, [r1]
 8003bde:	61fb      	str	r3, [r7, #28]
   return(result);
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1e5      	bne.n	8003bb2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3760      	adds	r7, #96	@ 0x60
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	08003819 	.word	0x08003819
 8003bf4:	08003945 	.word	0x08003945
 8003bf8:	08003981 	.word	0x08003981

08003bfc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b089      	sub	sp, #36	@ 0x24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	330c      	adds	r3, #12
 8003c0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	e853 3f00 	ldrex	r3, [r3]
 8003c12:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003c1a:	61fb      	str	r3, [r7, #28]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	330c      	adds	r3, #12
 8003c22:	69fa      	ldr	r2, [r7, #28]
 8003c24:	61ba      	str	r2, [r7, #24]
 8003c26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c28:	6979      	ldr	r1, [r7, #20]
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	e841 2300 	strex	r3, r2, [r1]
 8003c30:	613b      	str	r3, [r7, #16]
   return(result);
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1e5      	bne.n	8003c04 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003c40:	bf00      	nop
 8003c42:	3724      	adds	r7, #36	@ 0x24
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b095      	sub	sp, #84	@ 0x54
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	330c      	adds	r3, #12
 8003c5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c5e:	e853 3f00 	ldrex	r3, [r3]
 8003c62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	330c      	adds	r3, #12
 8003c72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c74:	643a      	str	r2, [r7, #64]	@ 0x40
 8003c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c7c:	e841 2300 	strex	r3, r2, [r1]
 8003c80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1e5      	bne.n	8003c54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	3314      	adds	r3, #20
 8003c8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	e853 3f00 	ldrex	r3, [r3]
 8003c96:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	f023 0301 	bic.w	r3, r3, #1
 8003c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	3314      	adds	r3, #20
 8003ca6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ca8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003caa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cb0:	e841 2300 	strex	r3, r2, [r1]
 8003cb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1e5      	bne.n	8003c88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d119      	bne.n	8003cf8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	330c      	adds	r3, #12
 8003cca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	e853 3f00 	ldrex	r3, [r3]
 8003cd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	f023 0310 	bic.w	r3, r3, #16
 8003cda:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	330c      	adds	r3, #12
 8003ce2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ce4:	61ba      	str	r2, [r7, #24]
 8003ce6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce8:	6979      	ldr	r1, [r7, #20]
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	e841 2300 	strex	r3, r2, [r1]
 8003cf0:	613b      	str	r3, [r7, #16]
   return(result);
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1e5      	bne.n	8003cc4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003d06:	bf00      	nop
 8003d08:	3754      	adds	r7, #84	@ 0x54
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b084      	sub	sp, #16
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f7ff fd5d 	bl	80037ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d32:	bf00      	nop
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b085      	sub	sp, #20
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b21      	cmp	r3, #33	@ 0x21
 8003d4c:	d13e      	bne.n	8003dcc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d56:	d114      	bne.n	8003d82 <UART_Transmit_IT+0x48>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d110      	bne.n	8003d82 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	881b      	ldrh	r3, [r3, #0]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d74:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	1c9a      	adds	r2, r3, #2
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	621a      	str	r2, [r3, #32]
 8003d80:	e008      	b.n	8003d94 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	1c59      	adds	r1, r3, #1
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6211      	str	r1, [r2, #32]
 8003d8c:	781a      	ldrb	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	4619      	mov	r1, r3
 8003da2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10f      	bne.n	8003dc8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68da      	ldr	r2, [r3, #12]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003db6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003dc6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	e000      	b.n	8003dce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003dcc:	2302      	movs	r3, #2
  }
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3714      	adds	r7, #20
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b082      	sub	sp, #8
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003df0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2220      	movs	r2, #32
 8003df6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7ff fce2 	bl	80037c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b08c      	sub	sp, #48	@ 0x30
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b22      	cmp	r3, #34	@ 0x22
 8003e1c:	f040 80ae 	bne.w	8003f7c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e28:	d117      	bne.n	8003e5a <UART_Receive_IT+0x50>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d113      	bne.n	8003e5a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e32:	2300      	movs	r3, #0
 8003e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e4c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e52:	1c9a      	adds	r2, r3, #2
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e58:	e026      	b.n	8003ea8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003e60:	2300      	movs	r3, #0
 8003e62:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e6c:	d007      	beq.n	8003e7e <UART_Receive_IT+0x74>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10a      	bne.n	8003e8c <UART_Receive_IT+0x82>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d106      	bne.n	8003e8c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e88:	701a      	strb	r2, [r3, #0]
 8003e8a:	e008      	b.n	8003e9e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e98:	b2da      	uxtb	r2, r3
 8003e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e9c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea2:	1c5a      	adds	r2, r3, #1
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d15d      	bne.n	8003f78 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68da      	ldr	r2, [r3, #12]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0220 	bic.w	r2, r2, #32
 8003eca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68da      	ldr	r2, [r3, #12]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003eda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	695a      	ldr	r2, [r3, #20]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 0201 	bic.w	r2, r2, #1
 8003eea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d135      	bne.n	8003f6e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	330c      	adds	r3, #12
 8003f0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	e853 3f00 	ldrex	r3, [r3]
 8003f16:	613b      	str	r3, [r7, #16]
   return(result);
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	f023 0310 	bic.w	r3, r3, #16
 8003f1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	330c      	adds	r3, #12
 8003f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f28:	623a      	str	r2, [r7, #32]
 8003f2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2c:	69f9      	ldr	r1, [r7, #28]
 8003f2e:	6a3a      	ldr	r2, [r7, #32]
 8003f30:	e841 2300 	strex	r3, r2, [r1]
 8003f34:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1e5      	bne.n	8003f08 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0310 	and.w	r3, r3, #16
 8003f46:	2b10      	cmp	r3, #16
 8003f48:	d10a      	bne.n	8003f60 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60fb      	str	r3, [r7, #12]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	60fb      	str	r3, [r7, #12]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	60fb      	str	r3, [r7, #12]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f64:	4619      	mov	r1, r3
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7ff fc4a 	bl	8003800 <HAL_UARTEx_RxEventCallback>
 8003f6c:	e002      	b.n	8003f74 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7fd f9da 	bl	8001328 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f74:	2300      	movs	r3, #0
 8003f76:	e002      	b.n	8003f7e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	e000      	b.n	8003f7e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003f7c:	2302      	movs	r3, #2
  }
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3730      	adds	r7, #48	@ 0x30
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
	...

08003f88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f8c:	b0c0      	sub	sp, #256	@ 0x100
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa4:	68d9      	ldr	r1, [r3, #12]
 8003fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	ea40 0301 	orr.w	r3, r0, r1
 8003fb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003fe0:	f021 010c 	bic.w	r1, r1, #12
 8003fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003fee:	430b      	orrs	r3, r1
 8003ff0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ff2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004002:	6999      	ldr	r1, [r3, #24]
 8004004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	ea40 0301 	orr.w	r3, r0, r1
 800400e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	4b8f      	ldr	r3, [pc, #572]	@ (8004254 <UART_SetConfig+0x2cc>)
 8004018:	429a      	cmp	r2, r3
 800401a:	d005      	beq.n	8004028 <UART_SetConfig+0xa0>
 800401c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	4b8d      	ldr	r3, [pc, #564]	@ (8004258 <UART_SetConfig+0x2d0>)
 8004024:	429a      	cmp	r2, r3
 8004026:	d104      	bne.n	8004032 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004028:	f7fe fd80 	bl	8002b2c <HAL_RCC_GetPCLK2Freq>
 800402c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004030:	e003      	b.n	800403a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004032:	f7fe fd67 	bl	8002b04 <HAL_RCC_GetPCLK1Freq>
 8004036:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800403a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800403e:	69db      	ldr	r3, [r3, #28]
 8004040:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004044:	f040 810c 	bne.w	8004260 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004048:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800404c:	2200      	movs	r2, #0
 800404e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004052:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004056:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800405a:	4622      	mov	r2, r4
 800405c:	462b      	mov	r3, r5
 800405e:	1891      	adds	r1, r2, r2
 8004060:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004062:	415b      	adcs	r3, r3
 8004064:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004066:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800406a:	4621      	mov	r1, r4
 800406c:	eb12 0801 	adds.w	r8, r2, r1
 8004070:	4629      	mov	r1, r5
 8004072:	eb43 0901 	adc.w	r9, r3, r1
 8004076:	f04f 0200 	mov.w	r2, #0
 800407a:	f04f 0300 	mov.w	r3, #0
 800407e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004082:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004086:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800408a:	4690      	mov	r8, r2
 800408c:	4699      	mov	r9, r3
 800408e:	4623      	mov	r3, r4
 8004090:	eb18 0303 	adds.w	r3, r8, r3
 8004094:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004098:	462b      	mov	r3, r5
 800409a:	eb49 0303 	adc.w	r3, r9, r3
 800409e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80040a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80040ae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80040b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80040b6:	460b      	mov	r3, r1
 80040b8:	18db      	adds	r3, r3, r3
 80040ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80040bc:	4613      	mov	r3, r2
 80040be:	eb42 0303 	adc.w	r3, r2, r3
 80040c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80040c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80040c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80040cc:	f7fc f8f0 	bl	80002b0 <__aeabi_uldivmod>
 80040d0:	4602      	mov	r2, r0
 80040d2:	460b      	mov	r3, r1
 80040d4:	4b61      	ldr	r3, [pc, #388]	@ (800425c <UART_SetConfig+0x2d4>)
 80040d6:	fba3 2302 	umull	r2, r3, r3, r2
 80040da:	095b      	lsrs	r3, r3, #5
 80040dc:	011c      	lsls	r4, r3, #4
 80040de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040e2:	2200      	movs	r2, #0
 80040e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040e8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80040ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80040f0:	4642      	mov	r2, r8
 80040f2:	464b      	mov	r3, r9
 80040f4:	1891      	adds	r1, r2, r2
 80040f6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80040f8:	415b      	adcs	r3, r3
 80040fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004100:	4641      	mov	r1, r8
 8004102:	eb12 0a01 	adds.w	sl, r2, r1
 8004106:	4649      	mov	r1, r9
 8004108:	eb43 0b01 	adc.w	fp, r3, r1
 800410c:	f04f 0200 	mov.w	r2, #0
 8004110:	f04f 0300 	mov.w	r3, #0
 8004114:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004118:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800411c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004120:	4692      	mov	sl, r2
 8004122:	469b      	mov	fp, r3
 8004124:	4643      	mov	r3, r8
 8004126:	eb1a 0303 	adds.w	r3, sl, r3
 800412a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800412e:	464b      	mov	r3, r9
 8004130:	eb4b 0303 	adc.w	r3, fp, r3
 8004134:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004144:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004148:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800414c:	460b      	mov	r3, r1
 800414e:	18db      	adds	r3, r3, r3
 8004150:	643b      	str	r3, [r7, #64]	@ 0x40
 8004152:	4613      	mov	r3, r2
 8004154:	eb42 0303 	adc.w	r3, r2, r3
 8004158:	647b      	str	r3, [r7, #68]	@ 0x44
 800415a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800415e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004162:	f7fc f8a5 	bl	80002b0 <__aeabi_uldivmod>
 8004166:	4602      	mov	r2, r0
 8004168:	460b      	mov	r3, r1
 800416a:	4611      	mov	r1, r2
 800416c:	4b3b      	ldr	r3, [pc, #236]	@ (800425c <UART_SetConfig+0x2d4>)
 800416e:	fba3 2301 	umull	r2, r3, r3, r1
 8004172:	095b      	lsrs	r3, r3, #5
 8004174:	2264      	movs	r2, #100	@ 0x64
 8004176:	fb02 f303 	mul.w	r3, r2, r3
 800417a:	1acb      	subs	r3, r1, r3
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004182:	4b36      	ldr	r3, [pc, #216]	@ (800425c <UART_SetConfig+0x2d4>)
 8004184:	fba3 2302 	umull	r2, r3, r3, r2
 8004188:	095b      	lsrs	r3, r3, #5
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004190:	441c      	add	r4, r3
 8004192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004196:	2200      	movs	r2, #0
 8004198:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800419c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80041a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80041a4:	4642      	mov	r2, r8
 80041a6:	464b      	mov	r3, r9
 80041a8:	1891      	adds	r1, r2, r2
 80041aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80041ac:	415b      	adcs	r3, r3
 80041ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80041b4:	4641      	mov	r1, r8
 80041b6:	1851      	adds	r1, r2, r1
 80041b8:	6339      	str	r1, [r7, #48]	@ 0x30
 80041ba:	4649      	mov	r1, r9
 80041bc:	414b      	adcs	r3, r1
 80041be:	637b      	str	r3, [r7, #52]	@ 0x34
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	f04f 0300 	mov.w	r3, #0
 80041c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80041cc:	4659      	mov	r1, fp
 80041ce:	00cb      	lsls	r3, r1, #3
 80041d0:	4651      	mov	r1, sl
 80041d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041d6:	4651      	mov	r1, sl
 80041d8:	00ca      	lsls	r2, r1, #3
 80041da:	4610      	mov	r0, r2
 80041dc:	4619      	mov	r1, r3
 80041de:	4603      	mov	r3, r0
 80041e0:	4642      	mov	r2, r8
 80041e2:	189b      	adds	r3, r3, r2
 80041e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041e8:	464b      	mov	r3, r9
 80041ea:	460a      	mov	r2, r1
 80041ec:	eb42 0303 	adc.w	r3, r2, r3
 80041f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004200:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004204:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004208:	460b      	mov	r3, r1
 800420a:	18db      	adds	r3, r3, r3
 800420c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800420e:	4613      	mov	r3, r2
 8004210:	eb42 0303 	adc.w	r3, r2, r3
 8004214:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004216:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800421a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800421e:	f7fc f847 	bl	80002b0 <__aeabi_uldivmod>
 8004222:	4602      	mov	r2, r0
 8004224:	460b      	mov	r3, r1
 8004226:	4b0d      	ldr	r3, [pc, #52]	@ (800425c <UART_SetConfig+0x2d4>)
 8004228:	fba3 1302 	umull	r1, r3, r3, r2
 800422c:	095b      	lsrs	r3, r3, #5
 800422e:	2164      	movs	r1, #100	@ 0x64
 8004230:	fb01 f303 	mul.w	r3, r1, r3
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	3332      	adds	r3, #50	@ 0x32
 800423a:	4a08      	ldr	r2, [pc, #32]	@ (800425c <UART_SetConfig+0x2d4>)
 800423c:	fba2 2303 	umull	r2, r3, r2, r3
 8004240:	095b      	lsrs	r3, r3, #5
 8004242:	f003 0207 	and.w	r2, r3, #7
 8004246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4422      	add	r2, r4
 800424e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004250:	e106      	b.n	8004460 <UART_SetConfig+0x4d8>
 8004252:	bf00      	nop
 8004254:	40011000 	.word	0x40011000
 8004258:	40011400 	.word	0x40011400
 800425c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004260:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004264:	2200      	movs	r2, #0
 8004266:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800426a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800426e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004272:	4642      	mov	r2, r8
 8004274:	464b      	mov	r3, r9
 8004276:	1891      	adds	r1, r2, r2
 8004278:	6239      	str	r1, [r7, #32]
 800427a:	415b      	adcs	r3, r3
 800427c:	627b      	str	r3, [r7, #36]	@ 0x24
 800427e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004282:	4641      	mov	r1, r8
 8004284:	1854      	adds	r4, r2, r1
 8004286:	4649      	mov	r1, r9
 8004288:	eb43 0501 	adc.w	r5, r3, r1
 800428c:	f04f 0200 	mov.w	r2, #0
 8004290:	f04f 0300 	mov.w	r3, #0
 8004294:	00eb      	lsls	r3, r5, #3
 8004296:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800429a:	00e2      	lsls	r2, r4, #3
 800429c:	4614      	mov	r4, r2
 800429e:	461d      	mov	r5, r3
 80042a0:	4643      	mov	r3, r8
 80042a2:	18e3      	adds	r3, r4, r3
 80042a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80042a8:	464b      	mov	r3, r9
 80042aa:	eb45 0303 	adc.w	r3, r5, r3
 80042ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80042b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80042be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	f04f 0300 	mov.w	r3, #0
 80042ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80042ce:	4629      	mov	r1, r5
 80042d0:	008b      	lsls	r3, r1, #2
 80042d2:	4621      	mov	r1, r4
 80042d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042d8:	4621      	mov	r1, r4
 80042da:	008a      	lsls	r2, r1, #2
 80042dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80042e0:	f7fb ffe6 	bl	80002b0 <__aeabi_uldivmod>
 80042e4:	4602      	mov	r2, r0
 80042e6:	460b      	mov	r3, r1
 80042e8:	4b60      	ldr	r3, [pc, #384]	@ (800446c <UART_SetConfig+0x4e4>)
 80042ea:	fba3 2302 	umull	r2, r3, r3, r2
 80042ee:	095b      	lsrs	r3, r3, #5
 80042f0:	011c      	lsls	r4, r3, #4
 80042f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042f6:	2200      	movs	r2, #0
 80042f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80042fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004300:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004304:	4642      	mov	r2, r8
 8004306:	464b      	mov	r3, r9
 8004308:	1891      	adds	r1, r2, r2
 800430a:	61b9      	str	r1, [r7, #24]
 800430c:	415b      	adcs	r3, r3
 800430e:	61fb      	str	r3, [r7, #28]
 8004310:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004314:	4641      	mov	r1, r8
 8004316:	1851      	adds	r1, r2, r1
 8004318:	6139      	str	r1, [r7, #16]
 800431a:	4649      	mov	r1, r9
 800431c:	414b      	adcs	r3, r1
 800431e:	617b      	str	r3, [r7, #20]
 8004320:	f04f 0200 	mov.w	r2, #0
 8004324:	f04f 0300 	mov.w	r3, #0
 8004328:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800432c:	4659      	mov	r1, fp
 800432e:	00cb      	lsls	r3, r1, #3
 8004330:	4651      	mov	r1, sl
 8004332:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004336:	4651      	mov	r1, sl
 8004338:	00ca      	lsls	r2, r1, #3
 800433a:	4610      	mov	r0, r2
 800433c:	4619      	mov	r1, r3
 800433e:	4603      	mov	r3, r0
 8004340:	4642      	mov	r2, r8
 8004342:	189b      	adds	r3, r3, r2
 8004344:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004348:	464b      	mov	r3, r9
 800434a:	460a      	mov	r2, r1
 800434c:	eb42 0303 	adc.w	r3, r2, r3
 8004350:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800435e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004360:	f04f 0200 	mov.w	r2, #0
 8004364:	f04f 0300 	mov.w	r3, #0
 8004368:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800436c:	4649      	mov	r1, r9
 800436e:	008b      	lsls	r3, r1, #2
 8004370:	4641      	mov	r1, r8
 8004372:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004376:	4641      	mov	r1, r8
 8004378:	008a      	lsls	r2, r1, #2
 800437a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800437e:	f7fb ff97 	bl	80002b0 <__aeabi_uldivmod>
 8004382:	4602      	mov	r2, r0
 8004384:	460b      	mov	r3, r1
 8004386:	4611      	mov	r1, r2
 8004388:	4b38      	ldr	r3, [pc, #224]	@ (800446c <UART_SetConfig+0x4e4>)
 800438a:	fba3 2301 	umull	r2, r3, r3, r1
 800438e:	095b      	lsrs	r3, r3, #5
 8004390:	2264      	movs	r2, #100	@ 0x64
 8004392:	fb02 f303 	mul.w	r3, r2, r3
 8004396:	1acb      	subs	r3, r1, r3
 8004398:	011b      	lsls	r3, r3, #4
 800439a:	3332      	adds	r3, #50	@ 0x32
 800439c:	4a33      	ldr	r2, [pc, #204]	@ (800446c <UART_SetConfig+0x4e4>)
 800439e:	fba2 2303 	umull	r2, r3, r2, r3
 80043a2:	095b      	lsrs	r3, r3, #5
 80043a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043a8:	441c      	add	r4, r3
 80043aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043ae:	2200      	movs	r2, #0
 80043b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80043b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80043b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80043b8:	4642      	mov	r2, r8
 80043ba:	464b      	mov	r3, r9
 80043bc:	1891      	adds	r1, r2, r2
 80043be:	60b9      	str	r1, [r7, #8]
 80043c0:	415b      	adcs	r3, r3
 80043c2:	60fb      	str	r3, [r7, #12]
 80043c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043c8:	4641      	mov	r1, r8
 80043ca:	1851      	adds	r1, r2, r1
 80043cc:	6039      	str	r1, [r7, #0]
 80043ce:	4649      	mov	r1, r9
 80043d0:	414b      	adcs	r3, r1
 80043d2:	607b      	str	r3, [r7, #4]
 80043d4:	f04f 0200 	mov.w	r2, #0
 80043d8:	f04f 0300 	mov.w	r3, #0
 80043dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043e0:	4659      	mov	r1, fp
 80043e2:	00cb      	lsls	r3, r1, #3
 80043e4:	4651      	mov	r1, sl
 80043e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043ea:	4651      	mov	r1, sl
 80043ec:	00ca      	lsls	r2, r1, #3
 80043ee:	4610      	mov	r0, r2
 80043f0:	4619      	mov	r1, r3
 80043f2:	4603      	mov	r3, r0
 80043f4:	4642      	mov	r2, r8
 80043f6:	189b      	adds	r3, r3, r2
 80043f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043fa:	464b      	mov	r3, r9
 80043fc:	460a      	mov	r2, r1
 80043fe:	eb42 0303 	adc.w	r3, r2, r3
 8004402:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	663b      	str	r3, [r7, #96]	@ 0x60
 800440e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004410:	f04f 0200 	mov.w	r2, #0
 8004414:	f04f 0300 	mov.w	r3, #0
 8004418:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800441c:	4649      	mov	r1, r9
 800441e:	008b      	lsls	r3, r1, #2
 8004420:	4641      	mov	r1, r8
 8004422:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004426:	4641      	mov	r1, r8
 8004428:	008a      	lsls	r2, r1, #2
 800442a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800442e:	f7fb ff3f 	bl	80002b0 <__aeabi_uldivmod>
 8004432:	4602      	mov	r2, r0
 8004434:	460b      	mov	r3, r1
 8004436:	4b0d      	ldr	r3, [pc, #52]	@ (800446c <UART_SetConfig+0x4e4>)
 8004438:	fba3 1302 	umull	r1, r3, r3, r2
 800443c:	095b      	lsrs	r3, r3, #5
 800443e:	2164      	movs	r1, #100	@ 0x64
 8004440:	fb01 f303 	mul.w	r3, r1, r3
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	011b      	lsls	r3, r3, #4
 8004448:	3332      	adds	r3, #50	@ 0x32
 800444a:	4a08      	ldr	r2, [pc, #32]	@ (800446c <UART_SetConfig+0x4e4>)
 800444c:	fba2 2303 	umull	r2, r3, r2, r3
 8004450:	095b      	lsrs	r3, r3, #5
 8004452:	f003 020f 	and.w	r2, r3, #15
 8004456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4422      	add	r2, r4
 800445e:	609a      	str	r2, [r3, #8]
}
 8004460:	bf00      	nop
 8004462:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004466:	46bd      	mov	sp, r7
 8004468:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800446c:	51eb851f 	.word	0x51eb851f

08004470 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	4603      	mov	r3, r0
 8004478:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800447a:	2300      	movs	r3, #0
 800447c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800447e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004482:	2b84      	cmp	r3, #132	@ 0x84
 8004484:	d005      	beq.n	8004492 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004486:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	4413      	add	r3, r2
 800448e:	3303      	adds	r3, #3
 8004490:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004492:	68fb      	ldr	r3, [r7, #12]
}
 8004494:	4618      	mov	r0, r3
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044a6:	f3ef 8305 	mrs	r3, IPSR
 80044aa:	607b      	str	r3, [r7, #4]
  return(result);
 80044ac:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	bf14      	ite	ne
 80044b2:	2301      	movne	r3, #1
 80044b4:	2300      	moveq	r3, #0
 80044b6:	b2db      	uxtb	r3, r3
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80044c8:	f001 f938 	bl	800573c <vTaskStartScheduler>
  
  return osOK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80044d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044d4:	b089      	sub	sp, #36	@ 0x24
 80044d6:	af04      	add	r7, sp, #16
 80044d8:	6078      	str	r0, [r7, #4]
 80044da:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d020      	beq.n	8004526 <osThreadCreate+0x54>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d01c      	beq.n	8004526 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685c      	ldr	r4, [r3, #4]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	691e      	ldr	r6, [r3, #16]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80044fe:	4618      	mov	r0, r3
 8004500:	f7ff ffb6 	bl	8004470 <makeFreeRtosPriority>
 8004504:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800450e:	9202      	str	r2, [sp, #8]
 8004510:	9301      	str	r3, [sp, #4]
 8004512:	9100      	str	r1, [sp, #0]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	4632      	mov	r2, r6
 8004518:	4629      	mov	r1, r5
 800451a:	4620      	mov	r0, r4
 800451c:	f000 ff20 	bl	8005360 <xTaskCreateStatic>
 8004520:	4603      	mov	r3, r0
 8004522:	60fb      	str	r3, [r7, #12]
 8004524:	e01c      	b.n	8004560 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685c      	ldr	r4, [r3, #4]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004532:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800453a:	4618      	mov	r0, r3
 800453c:	f7ff ff98 	bl	8004470 <makeFreeRtosPriority>
 8004540:	4602      	mov	r2, r0
 8004542:	f107 030c 	add.w	r3, r7, #12
 8004546:	9301      	str	r3, [sp, #4]
 8004548:	9200      	str	r2, [sp, #0]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	4632      	mov	r2, r6
 800454e:	4629      	mov	r1, r5
 8004550:	4620      	mov	r0, r4
 8004552:	f000 ff65 	bl	8005420 <xTaskCreate>
 8004556:	4603      	mov	r3, r0
 8004558:	2b01      	cmp	r3, #1
 800455a:	d001      	beq.n	8004560 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800455c:	2300      	movs	r3, #0
 800455e:	e000      	b.n	8004562 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004560:	68fb      	ldr	r3, [r7, #12]
}
 8004562:	4618      	mov	r0, r3
 8004564:	3714      	adds	r7, #20
 8004566:	46bd      	mov	sp, r7
 8004568:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800456a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800456a:	b580      	push	{r7, lr}
 800456c:	b084      	sub	sp, #16
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <osDelay+0x16>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	e000      	b.n	8004582 <osDelay+0x18>
 8004580:	2301      	movs	r3, #1
 8004582:	4618      	mov	r0, r3
 8004584:	f001 f8a4 	bl	80056d0 <vTaskDelay>
  
  return osOK;
 8004588:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800458a:	4618      	mov	r0, r3
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004592:	b590      	push	{r4, r7, lr}
 8004594:	b085      	sub	sp, #20
 8004596:	af02      	add	r7, sp, #8
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d011      	beq.n	80045c8 <osMessageCreate+0x36>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00d      	beq.n	80045c8 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6818      	ldr	r0, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6859      	ldr	r1, [r3, #4]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	2400      	movs	r4, #0
 80045be:	9400      	str	r4, [sp, #0]
 80045c0:	f000 f9e2 	bl	8004988 <xQueueGenericCreateStatic>
 80045c4:	4603      	mov	r3, r0
 80045c6:	e008      	b.n	80045da <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6818      	ldr	r0, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	4619      	mov	r1, r3
 80045d4:	f000 fa55 	bl	8004a82 <xQueueGenericCreate>
 80045d8:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80045da:	4618      	mov	r0, r3
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd90      	pop	{r4, r7, pc}
	...

080045e4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80045f0:	2300      	movs	r3, #0
 80045f2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <osMessagePut+0x1e>
    ticks = 1;
 80045fe:	2301      	movs	r3, #1
 8004600:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8004602:	f7ff ff4d 	bl	80044a0 <inHandlerMode>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d018      	beq.n	800463e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800460c:	f107 0210 	add.w	r2, r7, #16
 8004610:	f107 0108 	add.w	r1, r7, #8
 8004614:	2300      	movs	r3, #0
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f000 fb90 	bl	8004d3c <xQueueGenericSendFromISR>
 800461c:	4603      	mov	r3, r0
 800461e:	2b01      	cmp	r3, #1
 8004620:	d001      	beq.n	8004626 <osMessagePut+0x42>
      return osErrorOS;
 8004622:	23ff      	movs	r3, #255	@ 0xff
 8004624:	e018      	b.n	8004658 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d014      	beq.n	8004656 <osMessagePut+0x72>
 800462c:	4b0c      	ldr	r3, [pc, #48]	@ (8004660 <osMessagePut+0x7c>)
 800462e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	f3bf 8f6f 	isb	sy
 800463c:	e00b      	b.n	8004656 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800463e:	f107 0108 	add.w	r1, r7, #8
 8004642:	2300      	movs	r3, #0
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 fa76 	bl	8004b38 <xQueueGenericSend>
 800464c:	4603      	mov	r3, r0
 800464e:	2b01      	cmp	r3, #1
 8004650:	d001      	beq.n	8004656 <osMessagePut+0x72>
      return osErrorOS;
 8004652:	23ff      	movs	r3, #255	@ 0xff
 8004654:	e000      	b.n	8004658 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3718      	adds	r7, #24
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	e000ed04 	.word	0xe000ed04

08004664 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004664:	b590      	push	{r4, r7, lr}
 8004666:	b08b      	sub	sp, #44	@ 0x2c
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8004674:	2300      	movs	r3, #0
 8004676:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10a      	bne.n	8004694 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800467e:	2380      	movs	r3, #128	@ 0x80
 8004680:	617b      	str	r3, [r7, #20]
    return event;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	461c      	mov	r4, r3
 8004686:	f107 0314 	add.w	r3, r7, #20
 800468a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800468e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004692:	e054      	b.n	800473e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004694:	2300      	movs	r3, #0
 8004696:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004698:	2300      	movs	r3, #0
 800469a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a2:	d103      	bne.n	80046ac <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80046a4:	f04f 33ff 	mov.w	r3, #4294967295
 80046a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80046aa:	e009      	b.n	80046c0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d006      	beq.n	80046c0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 80046b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d101      	bne.n	80046c0 <osMessageGet+0x5c>
      ticks = 1;
 80046bc:	2301      	movs	r3, #1
 80046be:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 80046c0:	f7ff feee 	bl	80044a0 <inHandlerMode>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d01c      	beq.n	8004704 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80046ca:	f107 0220 	add.w	r2, r7, #32
 80046ce:	f107 0314 	add.w	r3, r7, #20
 80046d2:	3304      	adds	r3, #4
 80046d4:	4619      	mov	r1, r3
 80046d6:	68b8      	ldr	r0, [r7, #8]
 80046d8:	f000 fcb0 	bl	800503c <xQueueReceiveFromISR>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d102      	bne.n	80046e8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80046e2:	2310      	movs	r3, #16
 80046e4:	617b      	str	r3, [r7, #20]
 80046e6:	e001      	b.n	80046ec <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80046e8:	2300      	movs	r3, #0
 80046ea:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80046ec:	6a3b      	ldr	r3, [r7, #32]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d01d      	beq.n	800472e <osMessageGet+0xca>
 80046f2:	4b15      	ldr	r3, [pc, #84]	@ (8004748 <osMessageGet+0xe4>)
 80046f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046f8:	601a      	str	r2, [r3, #0]
 80046fa:	f3bf 8f4f 	dsb	sy
 80046fe:	f3bf 8f6f 	isb	sy
 8004702:	e014      	b.n	800472e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004704:	f107 0314 	add.w	r3, r7, #20
 8004708:	3304      	adds	r3, #4
 800470a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800470c:	4619      	mov	r1, r3
 800470e:	68b8      	ldr	r0, [r7, #8]
 8004710:	f000 fbb2 	bl	8004e78 <xQueueReceive>
 8004714:	4603      	mov	r3, r0
 8004716:	2b01      	cmp	r3, #1
 8004718:	d102      	bne.n	8004720 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800471a:	2310      	movs	r3, #16
 800471c:	617b      	str	r3, [r7, #20]
 800471e:	e006      	b.n	800472e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <osMessageGet+0xc6>
 8004726:	2300      	movs	r3, #0
 8004728:	e000      	b.n	800472c <osMessageGet+0xc8>
 800472a:	2340      	movs	r3, #64	@ 0x40
 800472c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	461c      	mov	r4, r3
 8004732:	f107 0314 	add.w	r3, r7, #20
 8004736:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800473a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	372c      	adds	r7, #44	@ 0x2c
 8004742:	46bd      	mov	sp, r7
 8004744:	bd90      	pop	{r4, r7, pc}
 8004746:	bf00      	nop
 8004748:	e000ed04 	.word	0xe000ed04

0800474c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f103 0208 	add.w	r2, r3, #8
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f04f 32ff 	mov.w	r2, #4294967295
 8004764:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f103 0208 	add.w	r2, r3, #8
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f103 0208 	add.w	r2, r3, #8
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800479a:	bf00      	nop
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047a6:	b480      	push	{r7}
 80047a8:	b085      	sub	sp, #20
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
 80047ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	1c5a      	adds	r2, r3, #1
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	601a      	str	r2, [r3, #0]
}
 80047e2:	bf00      	nop
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr

080047ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047ee:	b480      	push	{r7}
 80047f0:	b085      	sub	sp, #20
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
 80047f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004804:	d103      	bne.n	800480e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	60fb      	str	r3, [r7, #12]
 800480c:	e00c      	b.n	8004828 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	3308      	adds	r3, #8
 8004812:	60fb      	str	r3, [r7, #12]
 8004814:	e002      	b.n	800481c <vListInsert+0x2e>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	60fb      	str	r3, [r7, #12]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	429a      	cmp	r2, r3
 8004826:	d2f6      	bcs.n	8004816 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	1c5a      	adds	r2, r3, #1
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	601a      	str	r2, [r3, #0]
}
 8004854:	bf00      	nop
 8004856:	3714      	adds	r7, #20
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	6892      	ldr	r2, [r2, #8]
 8004876:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	6852      	ldr	r2, [r2, #4]
 8004880:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	429a      	cmp	r2, r3
 800488a:	d103      	bne.n	8004894 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	1e5a      	subs	r2, r3, #1
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10b      	bne.n	80048e0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80048c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048cc:	f383 8811 	msr	BASEPRI, r3
 80048d0:	f3bf 8f6f 	isb	sy
 80048d4:	f3bf 8f4f 	dsb	sy
 80048d8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80048da:	bf00      	nop
 80048dc:	bf00      	nop
 80048de:	e7fd      	b.n	80048dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80048e0:	f001 fde2 	bl	80064a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ec:	68f9      	ldr	r1, [r7, #12]
 80048ee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80048f0:	fb01 f303 	mul.w	r3, r1, r3
 80048f4:	441a      	add	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004910:	3b01      	subs	r3, #1
 8004912:	68f9      	ldr	r1, [r7, #12]
 8004914:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004916:	fb01 f303 	mul.w	r3, r1, r3
 800491a:	441a      	add	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	22ff      	movs	r2, #255	@ 0xff
 8004924:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	22ff      	movs	r2, #255	@ 0xff
 800492c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d114      	bne.n	8004960 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d01a      	beq.n	8004974 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	3310      	adds	r3, #16
 8004942:	4618      	mov	r0, r3
 8004944:	f001 f978 	bl	8005c38 <xTaskRemoveFromEventList>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d012      	beq.n	8004974 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800494e:	4b0d      	ldr	r3, [pc, #52]	@ (8004984 <xQueueGenericReset+0xd0>)
 8004950:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004954:	601a      	str	r2, [r3, #0]
 8004956:	f3bf 8f4f 	dsb	sy
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	e009      	b.n	8004974 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	3310      	adds	r3, #16
 8004964:	4618      	mov	r0, r3
 8004966:	f7ff fef1 	bl	800474c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	3324      	adds	r3, #36	@ 0x24
 800496e:	4618      	mov	r0, r3
 8004970:	f7ff feec 	bl	800474c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004974:	f001 fdca 	bl	800650c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004978:	2301      	movs	r3, #1
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	e000ed04 	.word	0xe000ed04

08004988 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004988:	b580      	push	{r7, lr}
 800498a:	b08e      	sub	sp, #56	@ 0x38
 800498c:	af02      	add	r7, sp, #8
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
 8004994:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10b      	bne.n	80049b4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800499c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049a0:	f383 8811 	msr	BASEPRI, r3
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80049ae:	bf00      	nop
 80049b0:	bf00      	nop
 80049b2:	e7fd      	b.n	80049b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10b      	bne.n	80049d2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80049ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049be:	f383 8811 	msr	BASEPRI, r3
 80049c2:	f3bf 8f6f 	isb	sy
 80049c6:	f3bf 8f4f 	dsb	sy
 80049ca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80049cc:	bf00      	nop
 80049ce:	bf00      	nop
 80049d0:	e7fd      	b.n	80049ce <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d002      	beq.n	80049de <xQueueGenericCreateStatic+0x56>
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <xQueueGenericCreateStatic+0x5a>
 80049de:	2301      	movs	r3, #1
 80049e0:	e000      	b.n	80049e4 <xQueueGenericCreateStatic+0x5c>
 80049e2:	2300      	movs	r3, #0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10b      	bne.n	8004a00 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80049e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ec:	f383 8811 	msr	BASEPRI, r3
 80049f0:	f3bf 8f6f 	isb	sy
 80049f4:	f3bf 8f4f 	dsb	sy
 80049f8:	623b      	str	r3, [r7, #32]
}
 80049fa:	bf00      	nop
 80049fc:	bf00      	nop
 80049fe:	e7fd      	b.n	80049fc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d102      	bne.n	8004a0c <xQueueGenericCreateStatic+0x84>
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d101      	bne.n	8004a10 <xQueueGenericCreateStatic+0x88>
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e000      	b.n	8004a12 <xQueueGenericCreateStatic+0x8a>
 8004a10:	2300      	movs	r3, #0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10b      	bne.n	8004a2e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a1a:	f383 8811 	msr	BASEPRI, r3
 8004a1e:	f3bf 8f6f 	isb	sy
 8004a22:	f3bf 8f4f 	dsb	sy
 8004a26:	61fb      	str	r3, [r7, #28]
}
 8004a28:	bf00      	nop
 8004a2a:	bf00      	nop
 8004a2c:	e7fd      	b.n	8004a2a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004a2e:	2348      	movs	r3, #72	@ 0x48
 8004a30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	2b48      	cmp	r3, #72	@ 0x48
 8004a36:	d00b      	beq.n	8004a50 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a3c:	f383 8811 	msr	BASEPRI, r3
 8004a40:	f3bf 8f6f 	isb	sy
 8004a44:	f3bf 8f4f 	dsb	sy
 8004a48:	61bb      	str	r3, [r7, #24]
}
 8004a4a:	bf00      	nop
 8004a4c:	bf00      	nop
 8004a4e:	e7fd      	b.n	8004a4c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004a50:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00d      	beq.n	8004a78 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a64:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	68b9      	ldr	r1, [r7, #8]
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f000 f840 	bl	8004af8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3730      	adds	r7, #48	@ 0x30
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b08a      	sub	sp, #40	@ 0x28
 8004a86:	af02      	add	r7, sp, #8
 8004a88:	60f8      	str	r0, [r7, #12]
 8004a8a:	60b9      	str	r1, [r7, #8]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10b      	bne.n	8004aae <xQueueGenericCreate+0x2c>
	__asm volatile
 8004a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a9a:	f383 8811 	msr	BASEPRI, r3
 8004a9e:	f3bf 8f6f 	isb	sy
 8004aa2:	f3bf 8f4f 	dsb	sy
 8004aa6:	613b      	str	r3, [r7, #16]
}
 8004aa8:	bf00      	nop
 8004aaa:	bf00      	nop
 8004aac:	e7fd      	b.n	8004aaa <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	fb02 f303 	mul.w	r3, r2, r3
 8004ab6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	3348      	adds	r3, #72	@ 0x48
 8004abc:	4618      	mov	r0, r3
 8004abe:	f001 fe15 	bl	80066ec <pvPortMalloc>
 8004ac2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d011      	beq.n	8004aee <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	3348      	adds	r3, #72	@ 0x48
 8004ad2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004adc:	79fa      	ldrb	r2, [r7, #7]
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	9300      	str	r3, [sp, #0]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	68b9      	ldr	r1, [r7, #8]
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f000 f805 	bl	8004af8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004aee:	69bb      	ldr	r3, [r7, #24]
	}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3720      	adds	r7, #32
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
 8004b04:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d103      	bne.n	8004b14 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	69ba      	ldr	r2, [r7, #24]
 8004b10:	601a      	str	r2, [r3, #0]
 8004b12:	e002      	b.n	8004b1a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	68ba      	ldr	r2, [r7, #8]
 8004b24:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b26:	2101      	movs	r1, #1
 8004b28:	69b8      	ldr	r0, [r7, #24]
 8004b2a:	f7ff fec3 	bl	80048b4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b2e:	bf00      	nop
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
	...

08004b38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b08e      	sub	sp, #56	@ 0x38
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
 8004b44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b46:	2300      	movs	r3, #0
 8004b48:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10b      	bne.n	8004b6c <xQueueGenericSend+0x34>
	__asm volatile
 8004b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b58:	f383 8811 	msr	BASEPRI, r3
 8004b5c:	f3bf 8f6f 	isb	sy
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004b66:	bf00      	nop
 8004b68:	bf00      	nop
 8004b6a:	e7fd      	b.n	8004b68 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d103      	bne.n	8004b7a <xQueueGenericSend+0x42>
 8004b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <xQueueGenericSend+0x46>
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e000      	b.n	8004b80 <xQueueGenericSend+0x48>
 8004b7e:	2300      	movs	r3, #0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d10b      	bne.n	8004b9c <xQueueGenericSend+0x64>
	__asm volatile
 8004b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b88:	f383 8811 	msr	BASEPRI, r3
 8004b8c:	f3bf 8f6f 	isb	sy
 8004b90:	f3bf 8f4f 	dsb	sy
 8004b94:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004b96:	bf00      	nop
 8004b98:	bf00      	nop
 8004b9a:	e7fd      	b.n	8004b98 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d103      	bne.n	8004baa <xQueueGenericSend+0x72>
 8004ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d101      	bne.n	8004bae <xQueueGenericSend+0x76>
 8004baa:	2301      	movs	r3, #1
 8004bac:	e000      	b.n	8004bb0 <xQueueGenericSend+0x78>
 8004bae:	2300      	movs	r3, #0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10b      	bne.n	8004bcc <xQueueGenericSend+0x94>
	__asm volatile
 8004bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb8:	f383 8811 	msr	BASEPRI, r3
 8004bbc:	f3bf 8f6f 	isb	sy
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	623b      	str	r3, [r7, #32]
}
 8004bc6:	bf00      	nop
 8004bc8:	bf00      	nop
 8004bca:	e7fd      	b.n	8004bc8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bcc:	f001 fa32 	bl	8006034 <xTaskGetSchedulerState>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d102      	bne.n	8004bdc <xQueueGenericSend+0xa4>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d101      	bne.n	8004be0 <xQueueGenericSend+0xa8>
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e000      	b.n	8004be2 <xQueueGenericSend+0xaa>
 8004be0:	2300      	movs	r3, #0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10b      	bne.n	8004bfe <xQueueGenericSend+0xc6>
	__asm volatile
 8004be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bea:	f383 8811 	msr	BASEPRI, r3
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	f3bf 8f4f 	dsb	sy
 8004bf6:	61fb      	str	r3, [r7, #28]
}
 8004bf8:	bf00      	nop
 8004bfa:	bf00      	nop
 8004bfc:	e7fd      	b.n	8004bfa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004bfe:	f001 fc53 	bl	80064a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d302      	bcc.n	8004c14 <xQueueGenericSend+0xdc>
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d129      	bne.n	8004c68 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	68b9      	ldr	r1, [r7, #8]
 8004c18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c1a:	f000 fa91 	bl	8005140 <prvCopyDataToQueue>
 8004c1e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d010      	beq.n	8004c4a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2a:	3324      	adds	r3, #36	@ 0x24
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f001 f803 	bl	8005c38 <xTaskRemoveFromEventList>
 8004c32:	4603      	mov	r3, r0
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d013      	beq.n	8004c60 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c38:	4b3f      	ldr	r3, [pc, #252]	@ (8004d38 <xQueueGenericSend+0x200>)
 8004c3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	f3bf 8f4f 	dsb	sy
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	e00a      	b.n	8004c60 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d007      	beq.n	8004c60 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004c50:	4b39      	ldr	r3, [pc, #228]	@ (8004d38 <xQueueGenericSend+0x200>)
 8004c52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c56:	601a      	str	r2, [r3, #0]
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004c60:	f001 fc54 	bl	800650c <vPortExitCritical>
				return pdPASS;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e063      	b.n	8004d30 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d103      	bne.n	8004c76 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c6e:	f001 fc4d 	bl	800650c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004c72:	2300      	movs	r3, #0
 8004c74:	e05c      	b.n	8004d30 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d106      	bne.n	8004c8a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c7c:	f107 0314 	add.w	r3, r7, #20
 8004c80:	4618      	mov	r0, r3
 8004c82:	f001 f83d 	bl	8005d00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c86:	2301      	movs	r3, #1
 8004c88:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c8a:	f001 fc3f 	bl	800650c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c8e:	f000 fdbf 	bl	8005810 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c92:	f001 fc09 	bl	80064a8 <vPortEnterCritical>
 8004c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c9c:	b25b      	sxtb	r3, r3
 8004c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca2:	d103      	bne.n	8004cac <xQueueGenericSend+0x174>
 8004ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004cb2:	b25b      	sxtb	r3, r3
 8004cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb8:	d103      	bne.n	8004cc2 <xQueueGenericSend+0x18a>
 8004cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004cc2:	f001 fc23 	bl	800650c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004cc6:	1d3a      	adds	r2, r7, #4
 8004cc8:	f107 0314 	add.w	r3, r7, #20
 8004ccc:	4611      	mov	r1, r2
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f001 f82c 	bl	8005d2c <xTaskCheckForTimeOut>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d124      	bne.n	8004d24 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004cda:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004cdc:	f000 fb28 	bl	8005330 <prvIsQueueFull>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d018      	beq.n	8004d18 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce8:	3310      	adds	r3, #16
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	4611      	mov	r1, r2
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 ff7c 	bl	8005bec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004cf4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004cf6:	f000 fab3 	bl	8005260 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004cfa:	f000 fd97 	bl	800582c <xTaskResumeAll>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f47f af7c 	bne.w	8004bfe <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004d06:	4b0c      	ldr	r3, [pc, #48]	@ (8004d38 <xQueueGenericSend+0x200>)
 8004d08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d0c:	601a      	str	r2, [r3, #0]
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	f3bf 8f6f 	isb	sy
 8004d16:	e772      	b.n	8004bfe <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d1a:	f000 faa1 	bl	8005260 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d1e:	f000 fd85 	bl	800582c <xTaskResumeAll>
 8004d22:	e76c      	b.n	8004bfe <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d26:	f000 fa9b 	bl	8005260 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d2a:	f000 fd7f 	bl	800582c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d2e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3738      	adds	r7, #56	@ 0x38
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	e000ed04 	.word	0xe000ed04

08004d3c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b090      	sub	sp, #64	@ 0x40
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
 8004d48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10b      	bne.n	8004d6c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d58:	f383 8811 	msr	BASEPRI, r3
 8004d5c:	f3bf 8f6f 	isb	sy
 8004d60:	f3bf 8f4f 	dsb	sy
 8004d64:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004d66:	bf00      	nop
 8004d68:	bf00      	nop
 8004d6a:	e7fd      	b.n	8004d68 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d103      	bne.n	8004d7a <xQueueGenericSendFromISR+0x3e>
 8004d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d101      	bne.n	8004d7e <xQueueGenericSendFromISR+0x42>
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e000      	b.n	8004d80 <xQueueGenericSendFromISR+0x44>
 8004d7e:	2300      	movs	r3, #0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10b      	bne.n	8004d9c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d88:	f383 8811 	msr	BASEPRI, r3
 8004d8c:	f3bf 8f6f 	isb	sy
 8004d90:	f3bf 8f4f 	dsb	sy
 8004d94:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004d96:	bf00      	nop
 8004d98:	bf00      	nop
 8004d9a:	e7fd      	b.n	8004d98 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d103      	bne.n	8004daa <xQueueGenericSendFromISR+0x6e>
 8004da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d101      	bne.n	8004dae <xQueueGenericSendFromISR+0x72>
 8004daa:	2301      	movs	r3, #1
 8004dac:	e000      	b.n	8004db0 <xQueueGenericSendFromISR+0x74>
 8004dae:	2300      	movs	r3, #0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d10b      	bne.n	8004dcc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db8:	f383 8811 	msr	BASEPRI, r3
 8004dbc:	f3bf 8f6f 	isb	sy
 8004dc0:	f3bf 8f4f 	dsb	sy
 8004dc4:	623b      	str	r3, [r7, #32]
}
 8004dc6:	bf00      	nop
 8004dc8:	bf00      	nop
 8004dca:	e7fd      	b.n	8004dc8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004dcc:	f001 fc4c 	bl	8006668 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004dd0:	f3ef 8211 	mrs	r2, BASEPRI
 8004dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd8:	f383 8811 	msr	BASEPRI, r3
 8004ddc:	f3bf 8f6f 	isb	sy
 8004de0:	f3bf 8f4f 	dsb	sy
 8004de4:	61fa      	str	r2, [r7, #28]
 8004de6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004de8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004dea:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d302      	bcc.n	8004dfe <xQueueGenericSendFromISR+0xc2>
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d12f      	bne.n	8004e5e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e00:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e04:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	68b9      	ldr	r1, [r7, #8]
 8004e12:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004e14:	f000 f994 	bl	8005140 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004e18:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e20:	d112      	bne.n	8004e48 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d016      	beq.n	8004e58 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e2c:	3324      	adds	r3, #36	@ 0x24
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f000 ff02 	bl	8005c38 <xTaskRemoveFromEventList>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00e      	beq.n	8004e58 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00b      	beq.n	8004e58 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	601a      	str	r2, [r3, #0]
 8004e46:	e007      	b.n	8004e58 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e48:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	b25a      	sxtb	r2, r3
 8004e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004e5c:	e001      	b.n	8004e62 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e64:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004e6c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004e6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3740      	adds	r7, #64	@ 0x40
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b08c      	sub	sp, #48	@ 0x30
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e84:	2300      	movs	r3, #0
 8004e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10b      	bne.n	8004eaa <xQueueReceive+0x32>
	__asm volatile
 8004e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e96:	f383 8811 	msr	BASEPRI, r3
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	623b      	str	r3, [r7, #32]
}
 8004ea4:	bf00      	nop
 8004ea6:	bf00      	nop
 8004ea8:	e7fd      	b.n	8004ea6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d103      	bne.n	8004eb8 <xQueueReceive+0x40>
 8004eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <xQueueReceive+0x44>
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e000      	b.n	8004ebe <xQueueReceive+0x46>
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d10b      	bne.n	8004eda <xQueueReceive+0x62>
	__asm volatile
 8004ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec6:	f383 8811 	msr	BASEPRI, r3
 8004eca:	f3bf 8f6f 	isb	sy
 8004ece:	f3bf 8f4f 	dsb	sy
 8004ed2:	61fb      	str	r3, [r7, #28]
}
 8004ed4:	bf00      	nop
 8004ed6:	bf00      	nop
 8004ed8:	e7fd      	b.n	8004ed6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004eda:	f001 f8ab 	bl	8006034 <xTaskGetSchedulerState>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d102      	bne.n	8004eea <xQueueReceive+0x72>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <xQueueReceive+0x76>
 8004eea:	2301      	movs	r3, #1
 8004eec:	e000      	b.n	8004ef0 <xQueueReceive+0x78>
 8004eee:	2300      	movs	r3, #0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d10b      	bne.n	8004f0c <xQueueReceive+0x94>
	__asm volatile
 8004ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ef8:	f383 8811 	msr	BASEPRI, r3
 8004efc:	f3bf 8f6f 	isb	sy
 8004f00:	f3bf 8f4f 	dsb	sy
 8004f04:	61bb      	str	r3, [r7, #24]
}
 8004f06:	bf00      	nop
 8004f08:	bf00      	nop
 8004f0a:	e7fd      	b.n	8004f08 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f0c:	f001 facc 	bl	80064a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f14:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d01f      	beq.n	8004f5c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f1c:	68b9      	ldr	r1, [r7, #8]
 8004f1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f20:	f000 f978 	bl	8005214 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f26:	1e5a      	subs	r2, r3, #1
 8004f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f2a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00f      	beq.n	8004f54 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f36:	3310      	adds	r3, #16
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f000 fe7d 	bl	8005c38 <xTaskRemoveFromEventList>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d007      	beq.n	8004f54 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f44:	4b3c      	ldr	r3, [pc, #240]	@ (8005038 <xQueueReceive+0x1c0>)
 8004f46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f54:	f001 fada 	bl	800650c <vPortExitCritical>
				return pdPASS;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e069      	b.n	8005030 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d103      	bne.n	8004f6a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f62:	f001 fad3 	bl	800650c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f66:	2300      	movs	r3, #0
 8004f68:	e062      	b.n	8005030 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d106      	bne.n	8004f7e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f70:	f107 0310 	add.w	r3, r7, #16
 8004f74:	4618      	mov	r0, r3
 8004f76:	f000 fec3 	bl	8005d00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f7e:	f001 fac5 	bl	800650c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f82:	f000 fc45 	bl	8005810 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f86:	f001 fa8f 	bl	80064a8 <vPortEnterCritical>
 8004f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f90:	b25b      	sxtb	r3, r3
 8004f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f96:	d103      	bne.n	8004fa0 <xQueueReceive+0x128>
 8004f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004fa6:	b25b      	sxtb	r3, r3
 8004fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fac:	d103      	bne.n	8004fb6 <xQueueReceive+0x13e>
 8004fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fb6:	f001 faa9 	bl	800650c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004fba:	1d3a      	adds	r2, r7, #4
 8004fbc:	f107 0310 	add.w	r3, r7, #16
 8004fc0:	4611      	mov	r1, r2
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 feb2 	bl	8005d2c <xTaskCheckForTimeOut>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d123      	bne.n	8005016 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004fd0:	f000 f998 	bl	8005304 <prvIsQueueEmpty>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d017      	beq.n	800500a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fdc:	3324      	adds	r3, #36	@ 0x24
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	4611      	mov	r1, r2
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f000 fe02 	bl	8005bec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004fe8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004fea:	f000 f939 	bl	8005260 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004fee:	f000 fc1d 	bl	800582c <xTaskResumeAll>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d189      	bne.n	8004f0c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8005038 <xQueueReceive+0x1c0>)
 8004ffa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ffe:	601a      	str	r2, [r3, #0]
 8005000:	f3bf 8f4f 	dsb	sy
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	e780      	b.n	8004f0c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800500a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800500c:	f000 f928 	bl	8005260 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005010:	f000 fc0c 	bl	800582c <xTaskResumeAll>
 8005014:	e77a      	b.n	8004f0c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005016:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005018:	f000 f922 	bl	8005260 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800501c:	f000 fc06 	bl	800582c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005020:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005022:	f000 f96f 	bl	8005304 <prvIsQueueEmpty>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	f43f af6f 	beq.w	8004f0c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800502e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005030:	4618      	mov	r0, r3
 8005032:	3730      	adds	r7, #48	@ 0x30
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	e000ed04 	.word	0xe000ed04

0800503c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b08e      	sub	sp, #56	@ 0x38
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800504c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504e:	2b00      	cmp	r3, #0
 8005050:	d10b      	bne.n	800506a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8005052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005056:	f383 8811 	msr	BASEPRI, r3
 800505a:	f3bf 8f6f 	isb	sy
 800505e:	f3bf 8f4f 	dsb	sy
 8005062:	623b      	str	r3, [r7, #32]
}
 8005064:	bf00      	nop
 8005066:	bf00      	nop
 8005068:	e7fd      	b.n	8005066 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d103      	bne.n	8005078 <xQueueReceiveFromISR+0x3c>
 8005070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005074:	2b00      	cmp	r3, #0
 8005076:	d101      	bne.n	800507c <xQueueReceiveFromISR+0x40>
 8005078:	2301      	movs	r3, #1
 800507a:	e000      	b.n	800507e <xQueueReceiveFromISR+0x42>
 800507c:	2300      	movs	r3, #0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10b      	bne.n	800509a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8005082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005086:	f383 8811 	msr	BASEPRI, r3
 800508a:	f3bf 8f6f 	isb	sy
 800508e:	f3bf 8f4f 	dsb	sy
 8005092:	61fb      	str	r3, [r7, #28]
}
 8005094:	bf00      	nop
 8005096:	bf00      	nop
 8005098:	e7fd      	b.n	8005096 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800509a:	f001 fae5 	bl	8006668 <vPortValidateInterruptPriority>
	__asm volatile
 800509e:	f3ef 8211 	mrs	r2, BASEPRI
 80050a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a6:	f383 8811 	msr	BASEPRI, r3
 80050aa:	f3bf 8f6f 	isb	sy
 80050ae:	f3bf 8f4f 	dsb	sy
 80050b2:	61ba      	str	r2, [r7, #24]
 80050b4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80050b6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80050b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050be:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d02f      	beq.n	8005126 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80050c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80050cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80050d0:	68b9      	ldr	r1, [r7, #8]
 80050d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050d4:	f000 f89e 	bl	8005214 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80050d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050da:	1e5a      	subs	r2, r3, #1
 80050dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050de:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80050e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80050e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e8:	d112      	bne.n	8005110 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d016      	beq.n	8005120 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f4:	3310      	adds	r3, #16
 80050f6:	4618      	mov	r0, r3
 80050f8:	f000 fd9e 	bl	8005c38 <xTaskRemoveFromEventList>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d00e      	beq.n	8005120 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00b      	beq.n	8005120 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	e007      	b.n	8005120 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005110:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005114:	3301      	adds	r3, #1
 8005116:	b2db      	uxtb	r3, r3
 8005118:	b25a      	sxtb	r2, r3
 800511a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800511c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005120:	2301      	movs	r3, #1
 8005122:	637b      	str	r3, [r7, #52]	@ 0x34
 8005124:	e001      	b.n	800512a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005126:	2300      	movs	r3, #0
 8005128:	637b      	str	r3, [r7, #52]	@ 0x34
 800512a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800512c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	f383 8811 	msr	BASEPRI, r3
}
 8005134:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005138:	4618      	mov	r0, r3
 800513a:	3738      	adds	r7, #56	@ 0x38
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800514c:	2300      	movs	r3, #0
 800514e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005154:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10d      	bne.n	800517a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d14d      	bne.n	8005202 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	4618      	mov	r0, r3
 800516c:	f000 ff80 	bl	8006070 <xTaskPriorityDisinherit>
 8005170:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	609a      	str	r2, [r3, #8]
 8005178:	e043      	b.n	8005202 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d119      	bne.n	80051b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6858      	ldr	r0, [r3, #4]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005188:	461a      	mov	r2, r3
 800518a:	68b9      	ldr	r1, [r7, #8]
 800518c:	f002 f883 	bl	8007296 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005198:	441a      	add	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	685a      	ldr	r2, [r3, #4]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d32b      	bcc.n	8005202 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	605a      	str	r2, [r3, #4]
 80051b2:	e026      	b.n	8005202 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	68d8      	ldr	r0, [r3, #12]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051bc:	461a      	mov	r2, r3
 80051be:	68b9      	ldr	r1, [r7, #8]
 80051c0:	f002 f869 	bl	8007296 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	68da      	ldr	r2, [r3, #12]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051cc:	425b      	negs	r3, r3
 80051ce:	441a      	add	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	68da      	ldr	r2, [r3, #12]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	429a      	cmp	r2, r3
 80051de:	d207      	bcs.n	80051f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	689a      	ldr	r2, [r3, #8]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e8:	425b      	negs	r3, r3
 80051ea:	441a      	add	r2, r3
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d105      	bne.n	8005202 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d002      	beq.n	8005202 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	3b01      	subs	r3, #1
 8005200:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	1c5a      	adds	r2, r3, #1
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800520a:	697b      	ldr	r3, [r7, #20]
}
 800520c:	4618      	mov	r0, r3
 800520e:	3718      	adds	r7, #24
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005222:	2b00      	cmp	r3, #0
 8005224:	d018      	beq.n	8005258 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68da      	ldr	r2, [r3, #12]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800522e:	441a      	add	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68da      	ldr	r2, [r3, #12]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	429a      	cmp	r2, r3
 800523e:	d303      	bcc.n	8005248 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68d9      	ldr	r1, [r3, #12]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005250:	461a      	mov	r2, r3
 8005252:	6838      	ldr	r0, [r7, #0]
 8005254:	f002 f81f 	bl	8007296 <memcpy>
	}
}
 8005258:	bf00      	nop
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005268:	f001 f91e 	bl	80064a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005272:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005274:	e011      	b.n	800529a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800527a:	2b00      	cmp	r3, #0
 800527c:	d012      	beq.n	80052a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	3324      	adds	r3, #36	@ 0x24
 8005282:	4618      	mov	r0, r3
 8005284:	f000 fcd8 	bl	8005c38 <xTaskRemoveFromEventList>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d001      	beq.n	8005292 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800528e:	f000 fdb1 	bl	8005df4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005292:	7bfb      	ldrb	r3, [r7, #15]
 8005294:	3b01      	subs	r3, #1
 8005296:	b2db      	uxtb	r3, r3
 8005298:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800529a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	dce9      	bgt.n	8005276 <prvUnlockQueue+0x16>
 80052a2:	e000      	b.n	80052a6 <prvUnlockQueue+0x46>
					break;
 80052a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	22ff      	movs	r2, #255	@ 0xff
 80052aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80052ae:	f001 f92d 	bl	800650c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80052b2:	f001 f8f9 	bl	80064a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80052be:	e011      	b.n	80052e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d012      	beq.n	80052ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	3310      	adds	r3, #16
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 fcb3 	bl	8005c38 <xTaskRemoveFromEventList>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80052d8:	f000 fd8c 	bl	8005df4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80052dc:	7bbb      	ldrb	r3, [r7, #14]
 80052de:	3b01      	subs	r3, #1
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80052e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	dce9      	bgt.n	80052c0 <prvUnlockQueue+0x60>
 80052ec:	e000      	b.n	80052f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80052ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	22ff      	movs	r2, #255	@ 0xff
 80052f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80052f8:	f001 f908 	bl	800650c <vPortExitCritical>
}
 80052fc:	bf00      	nop
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800530c:	f001 f8cc 	bl	80064a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005314:	2b00      	cmp	r3, #0
 8005316:	d102      	bne.n	800531e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005318:	2301      	movs	r3, #1
 800531a:	60fb      	str	r3, [r7, #12]
 800531c:	e001      	b.n	8005322 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800531e:	2300      	movs	r3, #0
 8005320:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005322:	f001 f8f3 	bl	800650c <vPortExitCritical>

	return xReturn;
 8005326:	68fb      	ldr	r3, [r7, #12]
}
 8005328:	4618      	mov	r0, r3
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005338:	f001 f8b6 	bl	80064a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005344:	429a      	cmp	r2, r3
 8005346:	d102      	bne.n	800534e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005348:	2301      	movs	r3, #1
 800534a:	60fb      	str	r3, [r7, #12]
 800534c:	e001      	b.n	8005352 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800534e:	2300      	movs	r3, #0
 8005350:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005352:	f001 f8db 	bl	800650c <vPortExitCritical>

	return xReturn;
 8005356:	68fb      	ldr	r3, [r7, #12]
}
 8005358:	4618      	mov	r0, r3
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}

08005360 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005360:	b580      	push	{r7, lr}
 8005362:	b08e      	sub	sp, #56	@ 0x38
 8005364:	af04      	add	r7, sp, #16
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
 800536c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800536e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10b      	bne.n	800538c <xTaskCreateStatic+0x2c>
	__asm volatile
 8005374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005378:	f383 8811 	msr	BASEPRI, r3
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f3bf 8f4f 	dsb	sy
 8005384:	623b      	str	r3, [r7, #32]
}
 8005386:	bf00      	nop
 8005388:	bf00      	nop
 800538a:	e7fd      	b.n	8005388 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800538c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10b      	bne.n	80053aa <xTaskCreateStatic+0x4a>
	__asm volatile
 8005392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005396:	f383 8811 	msr	BASEPRI, r3
 800539a:	f3bf 8f6f 	isb	sy
 800539e:	f3bf 8f4f 	dsb	sy
 80053a2:	61fb      	str	r3, [r7, #28]
}
 80053a4:	bf00      	nop
 80053a6:	bf00      	nop
 80053a8:	e7fd      	b.n	80053a6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80053aa:	23a0      	movs	r3, #160	@ 0xa0
 80053ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	2ba0      	cmp	r3, #160	@ 0xa0
 80053b2:	d00b      	beq.n	80053cc <xTaskCreateStatic+0x6c>
	__asm volatile
 80053b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b8:	f383 8811 	msr	BASEPRI, r3
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	61bb      	str	r3, [r7, #24]
}
 80053c6:	bf00      	nop
 80053c8:	bf00      	nop
 80053ca:	e7fd      	b.n	80053c8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80053cc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80053ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d01e      	beq.n	8005412 <xTaskCreateStatic+0xb2>
 80053d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d01b      	beq.n	8005412 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053dc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80053de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80053e2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80053e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e6:	2202      	movs	r2, #2
 80053e8:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80053ec:	2300      	movs	r3, #0
 80053ee:	9303      	str	r3, [sp, #12]
 80053f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f2:	9302      	str	r3, [sp, #8]
 80053f4:	f107 0314 	add.w	r3, r7, #20
 80053f8:	9301      	str	r3, [sp, #4]
 80053fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	68b9      	ldr	r1, [r7, #8]
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f000 f851 	bl	80054ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800540a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800540c:	f000 f8f6 	bl	80055fc <prvAddNewTaskToReadyList>
 8005410:	e001      	b.n	8005416 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005412:	2300      	movs	r3, #0
 8005414:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005416:	697b      	ldr	r3, [r7, #20]
	}
 8005418:	4618      	mov	r0, r3
 800541a:	3728      	adds	r7, #40	@ 0x28
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005420:	b580      	push	{r7, lr}
 8005422:	b08c      	sub	sp, #48	@ 0x30
 8005424:	af04      	add	r7, sp, #16
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	603b      	str	r3, [r7, #0]
 800542c:	4613      	mov	r3, r2
 800542e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005430:	88fb      	ldrh	r3, [r7, #6]
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	4618      	mov	r0, r3
 8005436:	f001 f959 	bl	80066ec <pvPortMalloc>
 800543a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00e      	beq.n	8005460 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005442:	20a0      	movs	r0, #160	@ 0xa0
 8005444:	f001 f952 	bl	80066ec <pvPortMalloc>
 8005448:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d003      	beq.n	8005458 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	631a      	str	r2, [r3, #48]	@ 0x30
 8005456:	e005      	b.n	8005464 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005458:	6978      	ldr	r0, [r7, #20]
 800545a:	f001 fa15 	bl	8006888 <vPortFree>
 800545e:	e001      	b.n	8005464 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005460:	2300      	movs	r3, #0
 8005462:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d017      	beq.n	800549a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005472:	88fa      	ldrh	r2, [r7, #6]
 8005474:	2300      	movs	r3, #0
 8005476:	9303      	str	r3, [sp, #12]
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	9302      	str	r3, [sp, #8]
 800547c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800547e:	9301      	str	r3, [sp, #4]
 8005480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	68b9      	ldr	r1, [r7, #8]
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f000 f80f 	bl	80054ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800548e:	69f8      	ldr	r0, [r7, #28]
 8005490:	f000 f8b4 	bl	80055fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005494:	2301      	movs	r3, #1
 8005496:	61bb      	str	r3, [r7, #24]
 8005498:	e002      	b.n	80054a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800549a:	f04f 33ff 	mov.w	r3, #4294967295
 800549e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80054a0:	69bb      	ldr	r3, [r7, #24]
	}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3720      	adds	r7, #32
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
	...

080054ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b088      	sub	sp, #32
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
 80054b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80054ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054bc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	461a      	mov	r2, r3
 80054c4:	21a5      	movs	r1, #165	@ 0xa5
 80054c6:	f001 fdb1 	bl	800702c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80054ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80054d4:	3b01      	subs	r3, #1
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	f023 0307 	bic.w	r3, r3, #7
 80054e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	f003 0307 	and.w	r3, r3, #7
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00b      	beq.n	8005506 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80054ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	617b      	str	r3, [r7, #20]
}
 8005500:	bf00      	nop
 8005502:	bf00      	nop
 8005504:	e7fd      	b.n	8005502 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d01f      	beq.n	800554c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800550c:	2300      	movs	r3, #0
 800550e:	61fb      	str	r3, [r7, #28]
 8005510:	e012      	b.n	8005538 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	4413      	add	r3, r2
 8005518:	7819      	ldrb	r1, [r3, #0]
 800551a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	4413      	add	r3, r2
 8005520:	3334      	adds	r3, #52	@ 0x34
 8005522:	460a      	mov	r2, r1
 8005524:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005526:	68ba      	ldr	r2, [r7, #8]
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	4413      	add	r3, r2
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d006      	beq.n	8005540 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	3301      	adds	r3, #1
 8005536:	61fb      	str	r3, [r7, #28]
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	2b0f      	cmp	r3, #15
 800553c:	d9e9      	bls.n	8005512 <prvInitialiseNewTask+0x66>
 800553e:	e000      	b.n	8005542 <prvInitialiseNewTask+0x96>
			{
				break;
 8005540:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005544:	2200      	movs	r2, #0
 8005546:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800554a:	e003      	b.n	8005554 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800554c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800554e:	2200      	movs	r2, #0
 8005550:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005556:	2b06      	cmp	r3, #6
 8005558:	d901      	bls.n	800555e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800555a:	2306      	movs	r3, #6
 800555c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800555e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005560:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005562:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005566:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005568:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800556a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800556c:	2200      	movs	r2, #0
 800556e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005572:	3304      	adds	r3, #4
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff f909 	bl	800478c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800557a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800557c:	3318      	adds	r3, #24
 800557e:	4618      	mov	r0, r3
 8005580:	f7ff f904 	bl	800478c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005586:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005588:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800558a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800558c:	f1c3 0207 	rsb	r2, r3, #7
 8005590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005592:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005596:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005598:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800559a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559c:	2200      	movs	r2, #0
 800559e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80055a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80055aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ac:	334c      	adds	r3, #76	@ 0x4c
 80055ae:	224c      	movs	r2, #76	@ 0x4c
 80055b0:	2100      	movs	r1, #0
 80055b2:	4618      	mov	r0, r3
 80055b4:	f001 fd3a 	bl	800702c <memset>
 80055b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ba:	4a0d      	ldr	r2, [pc, #52]	@ (80055f0 <prvInitialiseNewTask+0x144>)
 80055bc:	651a      	str	r2, [r3, #80]	@ 0x50
 80055be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c0:	4a0c      	ldr	r2, [pc, #48]	@ (80055f4 <prvInitialiseNewTask+0x148>)
 80055c2:	655a      	str	r2, [r3, #84]	@ 0x54
 80055c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c6:	4a0c      	ldr	r2, [pc, #48]	@ (80055f8 <prvInitialiseNewTask+0x14c>)
 80055c8:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	68f9      	ldr	r1, [r7, #12]
 80055ce:	69b8      	ldr	r0, [r7, #24]
 80055d0:	f000 fe3c 	bl	800624c <pxPortInitialiseStack>
 80055d4:	4602      	mov	r2, r0
 80055d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80055da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055e6:	bf00      	nop
 80055e8:	3720      	adds	r7, #32
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	200042fc 	.word	0x200042fc
 80055f4:	20004364 	.word	0x20004364
 80055f8:	200043cc 	.word	0x200043cc

080055fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005604:	f000 ff50 	bl	80064a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005608:	4b2a      	ldr	r3, [pc, #168]	@ (80056b4 <prvAddNewTaskToReadyList+0xb8>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	3301      	adds	r3, #1
 800560e:	4a29      	ldr	r2, [pc, #164]	@ (80056b4 <prvAddNewTaskToReadyList+0xb8>)
 8005610:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005612:	4b29      	ldr	r3, [pc, #164]	@ (80056b8 <prvAddNewTaskToReadyList+0xbc>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d109      	bne.n	800562e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800561a:	4a27      	ldr	r2, [pc, #156]	@ (80056b8 <prvAddNewTaskToReadyList+0xbc>)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005620:	4b24      	ldr	r3, [pc, #144]	@ (80056b4 <prvAddNewTaskToReadyList+0xb8>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d110      	bne.n	800564a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005628:	f000 fc08 	bl	8005e3c <prvInitialiseTaskLists>
 800562c:	e00d      	b.n	800564a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800562e:	4b23      	ldr	r3, [pc, #140]	@ (80056bc <prvAddNewTaskToReadyList+0xc0>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d109      	bne.n	800564a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005636:	4b20      	ldr	r3, [pc, #128]	@ (80056b8 <prvAddNewTaskToReadyList+0xbc>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005640:	429a      	cmp	r2, r3
 8005642:	d802      	bhi.n	800564a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005644:	4a1c      	ldr	r2, [pc, #112]	@ (80056b8 <prvAddNewTaskToReadyList+0xbc>)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800564a:	4b1d      	ldr	r3, [pc, #116]	@ (80056c0 <prvAddNewTaskToReadyList+0xc4>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	3301      	adds	r3, #1
 8005650:	4a1b      	ldr	r2, [pc, #108]	@ (80056c0 <prvAddNewTaskToReadyList+0xc4>)
 8005652:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005658:	2201      	movs	r2, #1
 800565a:	409a      	lsls	r2, r3
 800565c:	4b19      	ldr	r3, [pc, #100]	@ (80056c4 <prvAddNewTaskToReadyList+0xc8>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4313      	orrs	r3, r2
 8005662:	4a18      	ldr	r2, [pc, #96]	@ (80056c4 <prvAddNewTaskToReadyList+0xc8>)
 8005664:	6013      	str	r3, [r2, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800566a:	4613      	mov	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	009b      	lsls	r3, r3, #2
 8005672:	4a15      	ldr	r2, [pc, #84]	@ (80056c8 <prvAddNewTaskToReadyList+0xcc>)
 8005674:	441a      	add	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	3304      	adds	r3, #4
 800567a:	4619      	mov	r1, r3
 800567c:	4610      	mov	r0, r2
 800567e:	f7ff f892 	bl	80047a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005682:	f000 ff43 	bl	800650c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005686:	4b0d      	ldr	r3, [pc, #52]	@ (80056bc <prvAddNewTaskToReadyList+0xc0>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00e      	beq.n	80056ac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800568e:	4b0a      	ldr	r3, [pc, #40]	@ (80056b8 <prvAddNewTaskToReadyList+0xbc>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005698:	429a      	cmp	r2, r3
 800569a:	d207      	bcs.n	80056ac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800569c:	4b0b      	ldr	r3, [pc, #44]	@ (80056cc <prvAddNewTaskToReadyList+0xd0>)
 800569e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	f3bf 8f4f 	dsb	sy
 80056a8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056ac:	bf00      	nop
 80056ae:	3708      	adds	r7, #8
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	200006a8 	.word	0x200006a8
 80056b8:	200005a8 	.word	0x200005a8
 80056bc:	200006b4 	.word	0x200006b4
 80056c0:	200006c4 	.word	0x200006c4
 80056c4:	200006b0 	.word	0x200006b0
 80056c8:	200005ac 	.word	0x200005ac
 80056cc:	e000ed04 	.word	0xe000ed04

080056d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80056d8:	2300      	movs	r3, #0
 80056da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d018      	beq.n	8005714 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80056e2:	4b14      	ldr	r3, [pc, #80]	@ (8005734 <vTaskDelay+0x64>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00b      	beq.n	8005702 <vTaskDelay+0x32>
	__asm volatile
 80056ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ee:	f383 8811 	msr	BASEPRI, r3
 80056f2:	f3bf 8f6f 	isb	sy
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	60bb      	str	r3, [r7, #8]
}
 80056fc:	bf00      	nop
 80056fe:	bf00      	nop
 8005700:	e7fd      	b.n	80056fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005702:	f000 f885 	bl	8005810 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005706:	2100      	movs	r1, #0
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 fd39 	bl	8006180 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800570e:	f000 f88d 	bl	800582c <xTaskResumeAll>
 8005712:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d107      	bne.n	800572a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800571a:	4b07      	ldr	r3, [pc, #28]	@ (8005738 <vTaskDelay+0x68>)
 800571c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005720:	601a      	str	r2, [r3, #0]
 8005722:	f3bf 8f4f 	dsb	sy
 8005726:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800572a:	bf00      	nop
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	200006d0 	.word	0x200006d0
 8005738:	e000ed04 	.word	0xe000ed04

0800573c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b08a      	sub	sp, #40	@ 0x28
 8005740:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005742:	2300      	movs	r3, #0
 8005744:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005746:	2300      	movs	r3, #0
 8005748:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800574a:	463a      	mov	r2, r7
 800574c:	1d39      	adds	r1, r7, #4
 800574e:	f107 0308 	add.w	r3, r7, #8
 8005752:	4618      	mov	r0, r3
 8005754:	f7fa ff66 	bl	8000624 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005758:	6839      	ldr	r1, [r7, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68ba      	ldr	r2, [r7, #8]
 800575e:	9202      	str	r2, [sp, #8]
 8005760:	9301      	str	r3, [sp, #4]
 8005762:	2300      	movs	r3, #0
 8005764:	9300      	str	r3, [sp, #0]
 8005766:	2300      	movs	r3, #0
 8005768:	460a      	mov	r2, r1
 800576a:	4921      	ldr	r1, [pc, #132]	@ (80057f0 <vTaskStartScheduler+0xb4>)
 800576c:	4821      	ldr	r0, [pc, #132]	@ (80057f4 <vTaskStartScheduler+0xb8>)
 800576e:	f7ff fdf7 	bl	8005360 <xTaskCreateStatic>
 8005772:	4603      	mov	r3, r0
 8005774:	4a20      	ldr	r2, [pc, #128]	@ (80057f8 <vTaskStartScheduler+0xbc>)
 8005776:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005778:	4b1f      	ldr	r3, [pc, #124]	@ (80057f8 <vTaskStartScheduler+0xbc>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d002      	beq.n	8005786 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005780:	2301      	movs	r3, #1
 8005782:	617b      	str	r3, [r7, #20]
 8005784:	e001      	b.n	800578a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005786:	2300      	movs	r3, #0
 8005788:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d11b      	bne.n	80057c8 <vTaskStartScheduler+0x8c>
	__asm volatile
 8005790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005794:	f383 8811 	msr	BASEPRI, r3
 8005798:	f3bf 8f6f 	isb	sy
 800579c:	f3bf 8f4f 	dsb	sy
 80057a0:	613b      	str	r3, [r7, #16]
}
 80057a2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80057a4:	4b15      	ldr	r3, [pc, #84]	@ (80057fc <vTaskStartScheduler+0xc0>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	334c      	adds	r3, #76	@ 0x4c
 80057aa:	4a15      	ldr	r2, [pc, #84]	@ (8005800 <vTaskStartScheduler+0xc4>)
 80057ac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80057ae:	4b15      	ldr	r3, [pc, #84]	@ (8005804 <vTaskStartScheduler+0xc8>)
 80057b0:	f04f 32ff 	mov.w	r2, #4294967295
 80057b4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80057b6:	4b14      	ldr	r3, [pc, #80]	@ (8005808 <vTaskStartScheduler+0xcc>)
 80057b8:	2201      	movs	r2, #1
 80057ba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80057bc:	4b13      	ldr	r3, [pc, #76]	@ (800580c <vTaskStartScheduler+0xd0>)
 80057be:	2200      	movs	r2, #0
 80057c0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80057c2:	f000 fdcd 	bl	8006360 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80057c6:	e00f      	b.n	80057e8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ce:	d10b      	bne.n	80057e8 <vTaskStartScheduler+0xac>
	__asm volatile
 80057d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d4:	f383 8811 	msr	BASEPRI, r3
 80057d8:	f3bf 8f6f 	isb	sy
 80057dc:	f3bf 8f4f 	dsb	sy
 80057e0:	60fb      	str	r3, [r7, #12]
}
 80057e2:	bf00      	nop
 80057e4:	bf00      	nop
 80057e6:	e7fd      	b.n	80057e4 <vTaskStartScheduler+0xa8>
}
 80057e8:	bf00      	nop
 80057ea:	3718      	adds	r7, #24
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	080082dc 	.word	0x080082dc
 80057f4:	08005e0d 	.word	0x08005e0d
 80057f8:	200006cc 	.word	0x200006cc
 80057fc:	200005a8 	.word	0x200005a8
 8005800:	20000034 	.word	0x20000034
 8005804:	200006c8 	.word	0x200006c8
 8005808:	200006b4 	.word	0x200006b4
 800580c:	200006ac 	.word	0x200006ac

08005810 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005810:	b480      	push	{r7}
 8005812:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005814:	4b04      	ldr	r3, [pc, #16]	@ (8005828 <vTaskSuspendAll+0x18>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	3301      	adds	r3, #1
 800581a:	4a03      	ldr	r2, [pc, #12]	@ (8005828 <vTaskSuspendAll+0x18>)
 800581c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800581e:	bf00      	nop
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr
 8005828:	200006d0 	.word	0x200006d0

0800582c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005832:	2300      	movs	r3, #0
 8005834:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005836:	2300      	movs	r3, #0
 8005838:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800583a:	4b42      	ldr	r3, [pc, #264]	@ (8005944 <xTaskResumeAll+0x118>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d10b      	bne.n	800585a <xTaskResumeAll+0x2e>
	__asm volatile
 8005842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005846:	f383 8811 	msr	BASEPRI, r3
 800584a:	f3bf 8f6f 	isb	sy
 800584e:	f3bf 8f4f 	dsb	sy
 8005852:	603b      	str	r3, [r7, #0]
}
 8005854:	bf00      	nop
 8005856:	bf00      	nop
 8005858:	e7fd      	b.n	8005856 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800585a:	f000 fe25 	bl	80064a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800585e:	4b39      	ldr	r3, [pc, #228]	@ (8005944 <xTaskResumeAll+0x118>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	3b01      	subs	r3, #1
 8005864:	4a37      	ldr	r2, [pc, #220]	@ (8005944 <xTaskResumeAll+0x118>)
 8005866:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005868:	4b36      	ldr	r3, [pc, #216]	@ (8005944 <xTaskResumeAll+0x118>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d161      	bne.n	8005934 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005870:	4b35      	ldr	r3, [pc, #212]	@ (8005948 <xTaskResumeAll+0x11c>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d05d      	beq.n	8005934 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005878:	e02e      	b.n	80058d8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800587a:	4b34      	ldr	r3, [pc, #208]	@ (800594c <xTaskResumeAll+0x120>)
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	3318      	adds	r3, #24
 8005886:	4618      	mov	r0, r3
 8005888:	f7fe ffea 	bl	8004860 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	3304      	adds	r3, #4
 8005890:	4618      	mov	r0, r3
 8005892:	f7fe ffe5 	bl	8004860 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800589a:	2201      	movs	r2, #1
 800589c:	409a      	lsls	r2, r3
 800589e:	4b2c      	ldr	r3, [pc, #176]	@ (8005950 <xTaskResumeAll+0x124>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	4a2a      	ldr	r2, [pc, #168]	@ (8005950 <xTaskResumeAll+0x124>)
 80058a6:	6013      	str	r3, [r2, #0]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ac:	4613      	mov	r3, r2
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4413      	add	r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4a27      	ldr	r2, [pc, #156]	@ (8005954 <xTaskResumeAll+0x128>)
 80058b6:	441a      	add	r2, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	3304      	adds	r3, #4
 80058bc:	4619      	mov	r1, r3
 80058be:	4610      	mov	r0, r2
 80058c0:	f7fe ff71 	bl	80047a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058c8:	4b23      	ldr	r3, [pc, #140]	@ (8005958 <xTaskResumeAll+0x12c>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d302      	bcc.n	80058d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80058d2:	4b22      	ldr	r3, [pc, #136]	@ (800595c <xTaskResumeAll+0x130>)
 80058d4:	2201      	movs	r2, #1
 80058d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058d8:	4b1c      	ldr	r3, [pc, #112]	@ (800594c <xTaskResumeAll+0x120>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d1cc      	bne.n	800587a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80058e6:	f000 fb85 	bl	8005ff4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80058ea:	4b1d      	ldr	r3, [pc, #116]	@ (8005960 <xTaskResumeAll+0x134>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d010      	beq.n	8005918 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80058f6:	f000 f837 	bl	8005968 <xTaskIncrementTick>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d002      	beq.n	8005906 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005900:	4b16      	ldr	r3, [pc, #88]	@ (800595c <xTaskResumeAll+0x130>)
 8005902:	2201      	movs	r2, #1
 8005904:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	3b01      	subs	r3, #1
 800590a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1f1      	bne.n	80058f6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005912:	4b13      	ldr	r3, [pc, #76]	@ (8005960 <xTaskResumeAll+0x134>)
 8005914:	2200      	movs	r2, #0
 8005916:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005918:	4b10      	ldr	r3, [pc, #64]	@ (800595c <xTaskResumeAll+0x130>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d009      	beq.n	8005934 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005920:	2301      	movs	r3, #1
 8005922:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005924:	4b0f      	ldr	r3, [pc, #60]	@ (8005964 <xTaskResumeAll+0x138>)
 8005926:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	f3bf 8f4f 	dsb	sy
 8005930:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005934:	f000 fdea 	bl	800650c <vPortExitCritical>

	return xAlreadyYielded;
 8005938:	68bb      	ldr	r3, [r7, #8]
}
 800593a:	4618      	mov	r0, r3
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	200006d0 	.word	0x200006d0
 8005948:	200006a8 	.word	0x200006a8
 800594c:	20000668 	.word	0x20000668
 8005950:	200006b0 	.word	0x200006b0
 8005954:	200005ac 	.word	0x200005ac
 8005958:	200005a8 	.word	0x200005a8
 800595c:	200006bc 	.word	0x200006bc
 8005960:	200006b8 	.word	0x200006b8
 8005964:	e000ed04 	.word	0xe000ed04

08005968 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b086      	sub	sp, #24
 800596c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800596e:	2300      	movs	r3, #0
 8005970:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005972:	4b4f      	ldr	r3, [pc, #316]	@ (8005ab0 <xTaskIncrementTick+0x148>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	f040 808f 	bne.w	8005a9a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800597c:	4b4d      	ldr	r3, [pc, #308]	@ (8005ab4 <xTaskIncrementTick+0x14c>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	3301      	adds	r3, #1
 8005982:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005984:	4a4b      	ldr	r2, [pc, #300]	@ (8005ab4 <xTaskIncrementTick+0x14c>)
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d121      	bne.n	80059d4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005990:	4b49      	ldr	r3, [pc, #292]	@ (8005ab8 <xTaskIncrementTick+0x150>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00b      	beq.n	80059b2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800599a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800599e:	f383 8811 	msr	BASEPRI, r3
 80059a2:	f3bf 8f6f 	isb	sy
 80059a6:	f3bf 8f4f 	dsb	sy
 80059aa:	603b      	str	r3, [r7, #0]
}
 80059ac:	bf00      	nop
 80059ae:	bf00      	nop
 80059b0:	e7fd      	b.n	80059ae <xTaskIncrementTick+0x46>
 80059b2:	4b41      	ldr	r3, [pc, #260]	@ (8005ab8 <xTaskIncrementTick+0x150>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	60fb      	str	r3, [r7, #12]
 80059b8:	4b40      	ldr	r3, [pc, #256]	@ (8005abc <xTaskIncrementTick+0x154>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a3e      	ldr	r2, [pc, #248]	@ (8005ab8 <xTaskIncrementTick+0x150>)
 80059be:	6013      	str	r3, [r2, #0]
 80059c0:	4a3e      	ldr	r2, [pc, #248]	@ (8005abc <xTaskIncrementTick+0x154>)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6013      	str	r3, [r2, #0]
 80059c6:	4b3e      	ldr	r3, [pc, #248]	@ (8005ac0 <xTaskIncrementTick+0x158>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	3301      	adds	r3, #1
 80059cc:	4a3c      	ldr	r2, [pc, #240]	@ (8005ac0 <xTaskIncrementTick+0x158>)
 80059ce:	6013      	str	r3, [r2, #0]
 80059d0:	f000 fb10 	bl	8005ff4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80059d4:	4b3b      	ldr	r3, [pc, #236]	@ (8005ac4 <xTaskIncrementTick+0x15c>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d348      	bcc.n	8005a70 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059de:	4b36      	ldr	r3, [pc, #216]	@ (8005ab8 <xTaskIncrementTick+0x150>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d104      	bne.n	80059f2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059e8:	4b36      	ldr	r3, [pc, #216]	@ (8005ac4 <xTaskIncrementTick+0x15c>)
 80059ea:	f04f 32ff 	mov.w	r2, #4294967295
 80059ee:	601a      	str	r2, [r3, #0]
					break;
 80059f0:	e03e      	b.n	8005a70 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059f2:	4b31      	ldr	r3, [pc, #196]	@ (8005ab8 <xTaskIncrementTick+0x150>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d203      	bcs.n	8005a12 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a0a:	4a2e      	ldr	r2, [pc, #184]	@ (8005ac4 <xTaskIncrementTick+0x15c>)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005a10:	e02e      	b.n	8005a70 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	3304      	adds	r3, #4
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7fe ff22 	bl	8004860 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d004      	beq.n	8005a2e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	3318      	adds	r3, #24
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7fe ff19 	bl	8004860 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a32:	2201      	movs	r2, #1
 8005a34:	409a      	lsls	r2, r3
 8005a36:	4b24      	ldr	r3, [pc, #144]	@ (8005ac8 <xTaskIncrementTick+0x160>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	4a22      	ldr	r2, [pc, #136]	@ (8005ac8 <xTaskIncrementTick+0x160>)
 8005a3e:	6013      	str	r3, [r2, #0]
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a44:	4613      	mov	r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	4413      	add	r3, r2
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	4a1f      	ldr	r2, [pc, #124]	@ (8005acc <xTaskIncrementTick+0x164>)
 8005a4e:	441a      	add	r2, r3
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	3304      	adds	r3, #4
 8005a54:	4619      	mov	r1, r3
 8005a56:	4610      	mov	r0, r2
 8005a58:	f7fe fea5 	bl	80047a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a60:	4b1b      	ldr	r3, [pc, #108]	@ (8005ad0 <xTaskIncrementTick+0x168>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d3b9      	bcc.n	80059de <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a6e:	e7b6      	b.n	80059de <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a70:	4b17      	ldr	r3, [pc, #92]	@ (8005ad0 <xTaskIncrementTick+0x168>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a76:	4915      	ldr	r1, [pc, #84]	@ (8005acc <xTaskIncrementTick+0x164>)
 8005a78:	4613      	mov	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4413      	add	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	440b      	add	r3, r1
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d901      	bls.n	8005a8c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005a8c:	4b11      	ldr	r3, [pc, #68]	@ (8005ad4 <xTaskIncrementTick+0x16c>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d007      	beq.n	8005aa4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005a94:	2301      	movs	r3, #1
 8005a96:	617b      	str	r3, [r7, #20]
 8005a98:	e004      	b.n	8005aa4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8005ad8 <xTaskIncrementTick+0x170>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	4a0d      	ldr	r2, [pc, #52]	@ (8005ad8 <xTaskIncrementTick+0x170>)
 8005aa2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005aa4:	697b      	ldr	r3, [r7, #20]
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3718      	adds	r7, #24
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
 8005aae:	bf00      	nop
 8005ab0:	200006d0 	.word	0x200006d0
 8005ab4:	200006ac 	.word	0x200006ac
 8005ab8:	20000660 	.word	0x20000660
 8005abc:	20000664 	.word	0x20000664
 8005ac0:	200006c0 	.word	0x200006c0
 8005ac4:	200006c8 	.word	0x200006c8
 8005ac8:	200006b0 	.word	0x200006b0
 8005acc:	200005ac 	.word	0x200005ac
 8005ad0:	200005a8 	.word	0x200005a8
 8005ad4:	200006bc 	.word	0x200006bc
 8005ad8:	200006b8 	.word	0x200006b8

08005adc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b088      	sub	sp, #32
 8005ae0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ae2:	4b3c      	ldr	r3, [pc, #240]	@ (8005bd4 <vTaskSwitchContext+0xf8>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d003      	beq.n	8005af2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005aea:	4b3b      	ldr	r3, [pc, #236]	@ (8005bd8 <vTaskSwitchContext+0xfc>)
 8005aec:	2201      	movs	r2, #1
 8005aee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005af0:	e06c      	b.n	8005bcc <vTaskSwitchContext+0xf0>
		xYieldPending = pdFALSE;
 8005af2:	4b39      	ldr	r3, [pc, #228]	@ (8005bd8 <vTaskSwitchContext+0xfc>)
 8005af4:	2200      	movs	r2, #0
 8005af6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8005af8:	4b38      	ldr	r3, [pc, #224]	@ (8005bdc <vTaskSwitchContext+0x100>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005afe:	61fb      	str	r3, [r7, #28]
 8005b00:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8005b04:	61bb      	str	r3, [r7, #24]
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	69ba      	ldr	r2, [r7, #24]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d111      	bne.n	8005b34 <vTaskSwitchContext+0x58>
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	3304      	adds	r3, #4
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	69ba      	ldr	r2, [r7, #24]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d10b      	bne.n	8005b34 <vTaskSwitchContext+0x58>
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	3308      	adds	r3, #8
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d105      	bne.n	8005b34 <vTaskSwitchContext+0x58>
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	330c      	adds	r3, #12
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	69ba      	ldr	r2, [r7, #24]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d008      	beq.n	8005b46 <vTaskSwitchContext+0x6a>
 8005b34:	4b29      	ldr	r3, [pc, #164]	@ (8005bdc <vTaskSwitchContext+0x100>)
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	4b28      	ldr	r3, [pc, #160]	@ (8005bdc <vTaskSwitchContext+0x100>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	3334      	adds	r3, #52	@ 0x34
 8005b3e:	4619      	mov	r1, r3
 8005b40:	4610      	mov	r0, r2
 8005b42:	f7fa fd63 	bl	800060c <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b46:	4b26      	ldr	r3, [pc, #152]	@ (8005be0 <vTaskSwitchContext+0x104>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	fab3 f383 	clz	r3, r3
 8005b52:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005b54:	7afb      	ldrb	r3, [r7, #11]
 8005b56:	f1c3 031f 	rsb	r3, r3, #31
 8005b5a:	617b      	str	r3, [r7, #20]
 8005b5c:	4921      	ldr	r1, [pc, #132]	@ (8005be4 <vTaskSwitchContext+0x108>)
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	4613      	mov	r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	440b      	add	r3, r1
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10b      	bne.n	8005b88 <vTaskSwitchContext+0xac>
	__asm volatile
 8005b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b74:	f383 8811 	msr	BASEPRI, r3
 8005b78:	f3bf 8f6f 	isb	sy
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	607b      	str	r3, [r7, #4]
}
 8005b82:	bf00      	nop
 8005b84:	bf00      	nop
 8005b86:	e7fd      	b.n	8005b84 <vTaskSwitchContext+0xa8>
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	4413      	add	r3, r2
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	4a14      	ldr	r2, [pc, #80]	@ (8005be4 <vTaskSwitchContext+0x108>)
 8005b94:	4413      	add	r3, r2
 8005b96:	613b      	str	r3, [r7, #16]
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	605a      	str	r2, [r3, #4]
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	3308      	adds	r3, #8
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d104      	bne.n	8005bb8 <vTaskSwitchContext+0xdc>
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	605a      	str	r2, [r3, #4]
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	4a07      	ldr	r2, [pc, #28]	@ (8005bdc <vTaskSwitchContext+0x100>)
 8005bc0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005bc2:	4b06      	ldr	r3, [pc, #24]	@ (8005bdc <vTaskSwitchContext+0x100>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	334c      	adds	r3, #76	@ 0x4c
 8005bc8:	4a07      	ldr	r2, [pc, #28]	@ (8005be8 <vTaskSwitchContext+0x10c>)
 8005bca:	6013      	str	r3, [r2, #0]
}
 8005bcc:	bf00      	nop
 8005bce:	3720      	adds	r7, #32
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	200006d0 	.word	0x200006d0
 8005bd8:	200006bc 	.word	0x200006bc
 8005bdc:	200005a8 	.word	0x200005a8
 8005be0:	200006b0 	.word	0x200006b0
 8005be4:	200005ac 	.word	0x200005ac
 8005be8:	20000034 	.word	0x20000034

08005bec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d10b      	bne.n	8005c14 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c00:	f383 8811 	msr	BASEPRI, r3
 8005c04:	f3bf 8f6f 	isb	sy
 8005c08:	f3bf 8f4f 	dsb	sy
 8005c0c:	60fb      	str	r3, [r7, #12]
}
 8005c0e:	bf00      	nop
 8005c10:	bf00      	nop
 8005c12:	e7fd      	b.n	8005c10 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c14:	4b07      	ldr	r3, [pc, #28]	@ (8005c34 <vTaskPlaceOnEventList+0x48>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	3318      	adds	r3, #24
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f7fe fde6 	bl	80047ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c22:	2101      	movs	r1, #1
 8005c24:	6838      	ldr	r0, [r7, #0]
 8005c26:	f000 faab 	bl	8006180 <prvAddCurrentTaskToDelayedList>
}
 8005c2a:	bf00      	nop
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	200005a8 	.word	0x200005a8

08005c38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b086      	sub	sp, #24
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d10b      	bne.n	8005c66 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c52:	f383 8811 	msr	BASEPRI, r3
 8005c56:	f3bf 8f6f 	isb	sy
 8005c5a:	f3bf 8f4f 	dsb	sy
 8005c5e:	60fb      	str	r3, [r7, #12]
}
 8005c60:	bf00      	nop
 8005c62:	bf00      	nop
 8005c64:	e7fd      	b.n	8005c62 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	3318      	adds	r3, #24
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7fe fdf8 	bl	8004860 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c70:	4b1d      	ldr	r3, [pc, #116]	@ (8005ce8 <xTaskRemoveFromEventList+0xb0>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d11c      	bne.n	8005cb2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	3304      	adds	r3, #4
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7fe fdef 	bl	8004860 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c86:	2201      	movs	r2, #1
 8005c88:	409a      	lsls	r2, r3
 8005c8a:	4b18      	ldr	r3, [pc, #96]	@ (8005cec <xTaskRemoveFromEventList+0xb4>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	4a16      	ldr	r2, [pc, #88]	@ (8005cec <xTaskRemoveFromEventList+0xb4>)
 8005c92:	6013      	str	r3, [r2, #0]
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c98:	4613      	mov	r3, r2
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4413      	add	r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4a13      	ldr	r2, [pc, #76]	@ (8005cf0 <xTaskRemoveFromEventList+0xb8>)
 8005ca2:	441a      	add	r2, r3
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	3304      	adds	r3, #4
 8005ca8:	4619      	mov	r1, r3
 8005caa:	4610      	mov	r0, r2
 8005cac:	f7fe fd7b 	bl	80047a6 <vListInsertEnd>
 8005cb0:	e005      	b.n	8005cbe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	3318      	adds	r3, #24
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	480e      	ldr	r0, [pc, #56]	@ (8005cf4 <xTaskRemoveFromEventList+0xbc>)
 8005cba:	f7fe fd74 	bl	80047a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8005cf8 <xTaskRemoveFromEventList+0xc0>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d905      	bls.n	8005cd8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8005cfc <xTaskRemoveFromEventList+0xc4>)
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	601a      	str	r2, [r3, #0]
 8005cd6:	e001      	b.n	8005cdc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005cdc:	697b      	ldr	r3, [r7, #20]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3718      	adds	r7, #24
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	200006d0 	.word	0x200006d0
 8005cec:	200006b0 	.word	0x200006b0
 8005cf0:	200005ac 	.word	0x200005ac
 8005cf4:	20000668 	.word	0x20000668
 8005cf8:	200005a8 	.word	0x200005a8
 8005cfc:	200006bc 	.word	0x200006bc

08005d00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d08:	4b06      	ldr	r3, [pc, #24]	@ (8005d24 <vTaskInternalSetTimeOutState+0x24>)
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d10:	4b05      	ldr	r3, [pc, #20]	@ (8005d28 <vTaskInternalSetTimeOutState+0x28>)
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	605a      	str	r2, [r3, #4]
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr
 8005d24:	200006c0 	.word	0x200006c0
 8005d28:	200006ac 	.word	0x200006ac

08005d2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b088      	sub	sp, #32
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d10b      	bne.n	8005d54 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d40:	f383 8811 	msr	BASEPRI, r3
 8005d44:	f3bf 8f6f 	isb	sy
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	613b      	str	r3, [r7, #16]
}
 8005d4e:	bf00      	nop
 8005d50:	bf00      	nop
 8005d52:	e7fd      	b.n	8005d50 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10b      	bne.n	8005d72 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d5e:	f383 8811 	msr	BASEPRI, r3
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	60fb      	str	r3, [r7, #12]
}
 8005d6c:	bf00      	nop
 8005d6e:	bf00      	nop
 8005d70:	e7fd      	b.n	8005d6e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005d72:	f000 fb99 	bl	80064a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005d76:	4b1d      	ldr	r3, [pc, #116]	@ (8005dec <xTaskCheckForTimeOut+0xc0>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8e:	d102      	bne.n	8005d96 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005d90:	2300      	movs	r3, #0
 8005d92:	61fb      	str	r3, [r7, #28]
 8005d94:	e023      	b.n	8005dde <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	4b15      	ldr	r3, [pc, #84]	@ (8005df0 <xTaskCheckForTimeOut+0xc4>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d007      	beq.n	8005db2 <xTaskCheckForTimeOut+0x86>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	69ba      	ldr	r2, [r7, #24]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d302      	bcc.n	8005db2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005dac:	2301      	movs	r3, #1
 8005dae:	61fb      	str	r3, [r7, #28]
 8005db0:	e015      	b.n	8005dde <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d20b      	bcs.n	8005dd4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	1ad2      	subs	r2, r2, r3
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f7ff ff99 	bl	8005d00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	61fb      	str	r3, [r7, #28]
 8005dd2:	e004      	b.n	8005dde <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005dde:	f000 fb95 	bl	800650c <vPortExitCritical>

	return xReturn;
 8005de2:	69fb      	ldr	r3, [r7, #28]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3720      	adds	r7, #32
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	200006ac 	.word	0x200006ac
 8005df0:	200006c0 	.word	0x200006c0

08005df4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005df4:	b480      	push	{r7}
 8005df6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005df8:	4b03      	ldr	r3, [pc, #12]	@ (8005e08 <vTaskMissedYield+0x14>)
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	601a      	str	r2, [r3, #0]
}
 8005dfe:	bf00      	nop
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr
 8005e08:	200006bc 	.word	0x200006bc

08005e0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e14:	f000 f852 	bl	8005ebc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e18:	4b06      	ldr	r3, [pc, #24]	@ (8005e34 <prvIdleTask+0x28>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d9f9      	bls.n	8005e14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e20:	4b05      	ldr	r3, [pc, #20]	@ (8005e38 <prvIdleTask+0x2c>)
 8005e22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e26:	601a      	str	r2, [r3, #0]
 8005e28:	f3bf 8f4f 	dsb	sy
 8005e2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e30:	e7f0      	b.n	8005e14 <prvIdleTask+0x8>
 8005e32:	bf00      	nop
 8005e34:	200005ac 	.word	0x200005ac
 8005e38:	e000ed04 	.word	0xe000ed04

08005e3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e42:	2300      	movs	r3, #0
 8005e44:	607b      	str	r3, [r7, #4]
 8005e46:	e00c      	b.n	8005e62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	4413      	add	r3, r2
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4a12      	ldr	r2, [pc, #72]	@ (8005e9c <prvInitialiseTaskLists+0x60>)
 8005e54:	4413      	add	r3, r2
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7fe fc78 	bl	800474c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	607b      	str	r3, [r7, #4]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2b06      	cmp	r3, #6
 8005e66:	d9ef      	bls.n	8005e48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e68:	480d      	ldr	r0, [pc, #52]	@ (8005ea0 <prvInitialiseTaskLists+0x64>)
 8005e6a:	f7fe fc6f 	bl	800474c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e6e:	480d      	ldr	r0, [pc, #52]	@ (8005ea4 <prvInitialiseTaskLists+0x68>)
 8005e70:	f7fe fc6c 	bl	800474c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e74:	480c      	ldr	r0, [pc, #48]	@ (8005ea8 <prvInitialiseTaskLists+0x6c>)
 8005e76:	f7fe fc69 	bl	800474c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e7a:	480c      	ldr	r0, [pc, #48]	@ (8005eac <prvInitialiseTaskLists+0x70>)
 8005e7c:	f7fe fc66 	bl	800474c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e80:	480b      	ldr	r0, [pc, #44]	@ (8005eb0 <prvInitialiseTaskLists+0x74>)
 8005e82:	f7fe fc63 	bl	800474c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e86:	4b0b      	ldr	r3, [pc, #44]	@ (8005eb4 <prvInitialiseTaskLists+0x78>)
 8005e88:	4a05      	ldr	r2, [pc, #20]	@ (8005ea0 <prvInitialiseTaskLists+0x64>)
 8005e8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8005eb8 <prvInitialiseTaskLists+0x7c>)
 8005e8e:	4a05      	ldr	r2, [pc, #20]	@ (8005ea4 <prvInitialiseTaskLists+0x68>)
 8005e90:	601a      	str	r2, [r3, #0]
}
 8005e92:	bf00      	nop
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	200005ac 	.word	0x200005ac
 8005ea0:	20000638 	.word	0x20000638
 8005ea4:	2000064c 	.word	0x2000064c
 8005ea8:	20000668 	.word	0x20000668
 8005eac:	2000067c 	.word	0x2000067c
 8005eb0:	20000694 	.word	0x20000694
 8005eb4:	20000660 	.word	0x20000660
 8005eb8:	20000664 	.word	0x20000664

08005ebc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ec2:	e019      	b.n	8005ef8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ec4:	f000 faf0 	bl	80064a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ec8:	4b10      	ldr	r3, [pc, #64]	@ (8005f0c <prvCheckTasksWaitingTermination+0x50>)
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	3304      	adds	r3, #4
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7fe fcc3 	bl	8004860 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005eda:	4b0d      	ldr	r3, [pc, #52]	@ (8005f10 <prvCheckTasksWaitingTermination+0x54>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	4a0b      	ldr	r2, [pc, #44]	@ (8005f10 <prvCheckTasksWaitingTermination+0x54>)
 8005ee2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8005f14 <prvCheckTasksWaitingTermination+0x58>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	4a0a      	ldr	r2, [pc, #40]	@ (8005f14 <prvCheckTasksWaitingTermination+0x58>)
 8005eec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005eee:	f000 fb0d 	bl	800650c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 f848 	bl	8005f88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ef8:	4b06      	ldr	r3, [pc, #24]	@ (8005f14 <prvCheckTasksWaitingTermination+0x58>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d1e1      	bne.n	8005ec4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f00:	bf00      	nop
 8005f02:	bf00      	nop
 8005f04:	3708      	adds	r7, #8
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	2000067c 	.word	0x2000067c
 8005f10:	200006a8 	.word	0x200006a8
 8005f14:	20000690 	.word	0x20000690

08005f18 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8005f20:	2300      	movs	r3, #0
 8005f22:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005f24:	e005      	b.n	8005f32 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	607b      	str	r3, [r7, #4]
			ulCount++;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	2ba5      	cmp	r3, #165	@ 0xa5
 8005f38:	d0f5      	beq.n	8005f26 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	089b      	lsrs	r3, r3, #2
 8005f3e:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	b29b      	uxth	r3, r3
	}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d102      	bne.n	8005f64 <uxTaskGetStackHighWaterMark+0x14>
 8005f5e:	4b09      	ldr	r3, [pc, #36]	@ (8005f84 <uxTaskGetStackHighWaterMark+0x34>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	e000      	b.n	8005f66 <uxTaskGetStackHighWaterMark+0x16>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f6c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8005f6e:	6938      	ldr	r0, [r7, #16]
 8005f70:	f7ff ffd2 	bl	8005f18 <prvTaskCheckFreeStackSpace>
 8005f74:	4603      	mov	r3, r0
 8005f76:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8005f78:	68fb      	ldr	r3, [r7, #12]
	}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3718      	adds	r7, #24
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	200005a8 	.word	0x200005a8

08005f88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	334c      	adds	r3, #76	@ 0x4c
 8005f94:	4618      	mov	r0, r3
 8005f96:	f001 f8bd 	bl	8007114 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d108      	bne.n	8005fb6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f000 fc6d 	bl	8006888 <vPortFree>
				vPortFree( pxTCB );
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 fc6a 	bl	8006888 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005fb4:	e019      	b.n	8005fea <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d103      	bne.n	8005fc8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 fc61 	bl	8006888 <vPortFree>
	}
 8005fc6:	e010      	b.n	8005fea <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d00b      	beq.n	8005fea <prvDeleteTCB+0x62>
	__asm volatile
 8005fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd6:	f383 8811 	msr	BASEPRI, r3
 8005fda:	f3bf 8f6f 	isb	sy
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	60fb      	str	r3, [r7, #12]
}
 8005fe4:	bf00      	nop
 8005fe6:	bf00      	nop
 8005fe8:	e7fd      	b.n	8005fe6 <prvDeleteTCB+0x5e>
	}
 8005fea:	bf00      	nop
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
	...

08005ff4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800602c <prvResetNextTaskUnblockTime+0x38>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d104      	bne.n	800600e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006004:	4b0a      	ldr	r3, [pc, #40]	@ (8006030 <prvResetNextTaskUnblockTime+0x3c>)
 8006006:	f04f 32ff 	mov.w	r2, #4294967295
 800600a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800600c:	e008      	b.n	8006020 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800600e:	4b07      	ldr	r3, [pc, #28]	@ (800602c <prvResetNextTaskUnblockTime+0x38>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	4a04      	ldr	r2, [pc, #16]	@ (8006030 <prvResetNextTaskUnblockTime+0x3c>)
 800601e:	6013      	str	r3, [r2, #0]
}
 8006020:	bf00      	nop
 8006022:	370c      	adds	r7, #12
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr
 800602c:	20000660 	.word	0x20000660
 8006030:	200006c8 	.word	0x200006c8

08006034 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800603a:	4b0b      	ldr	r3, [pc, #44]	@ (8006068 <xTaskGetSchedulerState+0x34>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d102      	bne.n	8006048 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006042:	2301      	movs	r3, #1
 8006044:	607b      	str	r3, [r7, #4]
 8006046:	e008      	b.n	800605a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006048:	4b08      	ldr	r3, [pc, #32]	@ (800606c <xTaskGetSchedulerState+0x38>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d102      	bne.n	8006056 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006050:	2302      	movs	r3, #2
 8006052:	607b      	str	r3, [r7, #4]
 8006054:	e001      	b.n	800605a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006056:	2300      	movs	r3, #0
 8006058:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800605a:	687b      	ldr	r3, [r7, #4]
	}
 800605c:	4618      	mov	r0, r3
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr
 8006068:	200006b4 	.word	0x200006b4
 800606c:	200006d0 	.word	0x200006d0

08006070 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800607c:	2300      	movs	r3, #0
 800607e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d070      	beq.n	8006168 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006086:	4b3b      	ldr	r3, [pc, #236]	@ (8006174 <xTaskPriorityDisinherit+0x104>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	429a      	cmp	r2, r3
 800608e:	d00b      	beq.n	80060a8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006094:	f383 8811 	msr	BASEPRI, r3
 8006098:	f3bf 8f6f 	isb	sy
 800609c:	f3bf 8f4f 	dsb	sy
 80060a0:	60fb      	str	r3, [r7, #12]
}
 80060a2:	bf00      	nop
 80060a4:	bf00      	nop
 80060a6:	e7fd      	b.n	80060a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10b      	bne.n	80060c8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80060b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b4:	f383 8811 	msr	BASEPRI, r3
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	60bb      	str	r3, [r7, #8]
}
 80060c2:	bf00      	nop
 80060c4:	bf00      	nop
 80060c6:	e7fd      	b.n	80060c4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060cc:	1e5a      	subs	r2, r3, #1
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060da:	429a      	cmp	r2, r3
 80060dc:	d044      	beq.n	8006168 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d140      	bne.n	8006168 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	3304      	adds	r3, #4
 80060ea:	4618      	mov	r0, r3
 80060ec:	f7fe fbb8 	bl	8004860 <uxListRemove>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d115      	bne.n	8006122 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060fa:	491f      	ldr	r1, [pc, #124]	@ (8006178 <xTaskPriorityDisinherit+0x108>)
 80060fc:	4613      	mov	r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4413      	add	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	440b      	add	r3, r1
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d10a      	bne.n	8006122 <xTaskPriorityDisinherit+0xb2>
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006110:	2201      	movs	r2, #1
 8006112:	fa02 f303 	lsl.w	r3, r2, r3
 8006116:	43da      	mvns	r2, r3
 8006118:	4b18      	ldr	r3, [pc, #96]	@ (800617c <xTaskPriorityDisinherit+0x10c>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4013      	ands	r3, r2
 800611e:	4a17      	ldr	r2, [pc, #92]	@ (800617c <xTaskPriorityDisinherit+0x10c>)
 8006120:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800612e:	f1c3 0207 	rsb	r2, r3, #7
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800613a:	2201      	movs	r2, #1
 800613c:	409a      	lsls	r2, r3
 800613e:	4b0f      	ldr	r3, [pc, #60]	@ (800617c <xTaskPriorityDisinherit+0x10c>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4313      	orrs	r3, r2
 8006144:	4a0d      	ldr	r2, [pc, #52]	@ (800617c <xTaskPriorityDisinherit+0x10c>)
 8006146:	6013      	str	r3, [r2, #0]
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800614c:	4613      	mov	r3, r2
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4413      	add	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4a08      	ldr	r2, [pc, #32]	@ (8006178 <xTaskPriorityDisinherit+0x108>)
 8006156:	441a      	add	r2, r3
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	3304      	adds	r3, #4
 800615c:	4619      	mov	r1, r3
 800615e:	4610      	mov	r0, r2
 8006160:	f7fe fb21 	bl	80047a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006164:	2301      	movs	r3, #1
 8006166:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006168:	697b      	ldr	r3, [r7, #20]
	}
 800616a:	4618      	mov	r0, r3
 800616c:	3718      	adds	r7, #24
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	200005a8 	.word	0x200005a8
 8006178:	200005ac 	.word	0x200005ac
 800617c:	200006b0 	.word	0x200006b0

08006180 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800618a:	4b29      	ldr	r3, [pc, #164]	@ (8006230 <prvAddCurrentTaskToDelayedList+0xb0>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006190:	4b28      	ldr	r3, [pc, #160]	@ (8006234 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	3304      	adds	r3, #4
 8006196:	4618      	mov	r0, r3
 8006198:	f7fe fb62 	bl	8004860 <uxListRemove>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d10b      	bne.n	80061ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80061a2:	4b24      	ldr	r3, [pc, #144]	@ (8006234 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a8:	2201      	movs	r2, #1
 80061aa:	fa02 f303 	lsl.w	r3, r2, r3
 80061ae:	43da      	mvns	r2, r3
 80061b0:	4b21      	ldr	r3, [pc, #132]	@ (8006238 <prvAddCurrentTaskToDelayedList+0xb8>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4013      	ands	r3, r2
 80061b6:	4a20      	ldr	r2, [pc, #128]	@ (8006238 <prvAddCurrentTaskToDelayedList+0xb8>)
 80061b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c0:	d10a      	bne.n	80061d8 <prvAddCurrentTaskToDelayedList+0x58>
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d007      	beq.n	80061d8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061c8:	4b1a      	ldr	r3, [pc, #104]	@ (8006234 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	3304      	adds	r3, #4
 80061ce:	4619      	mov	r1, r3
 80061d0:	481a      	ldr	r0, [pc, #104]	@ (800623c <prvAddCurrentTaskToDelayedList+0xbc>)
 80061d2:	f7fe fae8 	bl	80047a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80061d6:	e026      	b.n	8006226 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4413      	add	r3, r2
 80061de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80061e0:	4b14      	ldr	r3, [pc, #80]	@ (8006234 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d209      	bcs.n	8006204 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061f0:	4b13      	ldr	r3, [pc, #76]	@ (8006240 <prvAddCurrentTaskToDelayedList+0xc0>)
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	4b0f      	ldr	r3, [pc, #60]	@ (8006234 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	3304      	adds	r3, #4
 80061fa:	4619      	mov	r1, r3
 80061fc:	4610      	mov	r0, r2
 80061fe:	f7fe faf6 	bl	80047ee <vListInsert>
}
 8006202:	e010      	b.n	8006226 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006204:	4b0f      	ldr	r3, [pc, #60]	@ (8006244 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	4b0a      	ldr	r3, [pc, #40]	@ (8006234 <prvAddCurrentTaskToDelayedList+0xb4>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	3304      	adds	r3, #4
 800620e:	4619      	mov	r1, r3
 8006210:	4610      	mov	r0, r2
 8006212:	f7fe faec 	bl	80047ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006216:	4b0c      	ldr	r3, [pc, #48]	@ (8006248 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	429a      	cmp	r2, r3
 800621e:	d202      	bcs.n	8006226 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006220:	4a09      	ldr	r2, [pc, #36]	@ (8006248 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	6013      	str	r3, [r2, #0]
}
 8006226:	bf00      	nop
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	200006ac 	.word	0x200006ac
 8006234:	200005a8 	.word	0x200005a8
 8006238:	200006b0 	.word	0x200006b0
 800623c:	20000694 	.word	0x20000694
 8006240:	20000664 	.word	0x20000664
 8006244:	20000660 	.word	0x20000660
 8006248:	200006c8 	.word	0x200006c8

0800624c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	3b04      	subs	r3, #4
 800625c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006264:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	3b04      	subs	r3, #4
 800626a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	f023 0201 	bic.w	r2, r3, #1
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	3b04      	subs	r3, #4
 800627a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800627c:	4a0c      	ldr	r2, [pc, #48]	@ (80062b0 <pxPortInitialiseStack+0x64>)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	3b14      	subs	r3, #20
 8006286:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	3b04      	subs	r3, #4
 8006292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f06f 0202 	mvn.w	r2, #2
 800629a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	3b20      	subs	r3, #32
 80062a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80062a2:	68fb      	ldr	r3, [r7, #12]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3714      	adds	r7, #20
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	080062b5 	.word	0x080062b5

080062b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80062ba:	2300      	movs	r3, #0
 80062bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80062be:	4b13      	ldr	r3, [pc, #76]	@ (800630c <prvTaskExitError+0x58>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c6:	d00b      	beq.n	80062e0 <prvTaskExitError+0x2c>
	__asm volatile
 80062c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062cc:	f383 8811 	msr	BASEPRI, r3
 80062d0:	f3bf 8f6f 	isb	sy
 80062d4:	f3bf 8f4f 	dsb	sy
 80062d8:	60fb      	str	r3, [r7, #12]
}
 80062da:	bf00      	nop
 80062dc:	bf00      	nop
 80062de:	e7fd      	b.n	80062dc <prvTaskExitError+0x28>
	__asm volatile
 80062e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	60bb      	str	r3, [r7, #8]
}
 80062f2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80062f4:	bf00      	nop
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d0fc      	beq.n	80062f6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80062fc:	bf00      	nop
 80062fe:	bf00      	nop
 8006300:	3714      	adds	r7, #20
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	20000024 	.word	0x20000024

08006310 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006310:	4b07      	ldr	r3, [pc, #28]	@ (8006330 <pxCurrentTCBConst2>)
 8006312:	6819      	ldr	r1, [r3, #0]
 8006314:	6808      	ldr	r0, [r1, #0]
 8006316:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800631a:	f380 8809 	msr	PSP, r0
 800631e:	f3bf 8f6f 	isb	sy
 8006322:	f04f 0000 	mov.w	r0, #0
 8006326:	f380 8811 	msr	BASEPRI, r0
 800632a:	4770      	bx	lr
 800632c:	f3af 8000 	nop.w

08006330 <pxCurrentTCBConst2>:
 8006330:	200005a8 	.word	0x200005a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006334:	bf00      	nop
 8006336:	bf00      	nop

08006338 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006338:	4808      	ldr	r0, [pc, #32]	@ (800635c <prvPortStartFirstTask+0x24>)
 800633a:	6800      	ldr	r0, [r0, #0]
 800633c:	6800      	ldr	r0, [r0, #0]
 800633e:	f380 8808 	msr	MSP, r0
 8006342:	f04f 0000 	mov.w	r0, #0
 8006346:	f380 8814 	msr	CONTROL, r0
 800634a:	b662      	cpsie	i
 800634c:	b661      	cpsie	f
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	f3bf 8f6f 	isb	sy
 8006356:	df00      	svc	0
 8006358:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800635a:	bf00      	nop
 800635c:	e000ed08 	.word	0xe000ed08

08006360 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006366:	4b47      	ldr	r3, [pc, #284]	@ (8006484 <xPortStartScheduler+0x124>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a47      	ldr	r2, [pc, #284]	@ (8006488 <xPortStartScheduler+0x128>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d10b      	bne.n	8006388 <xPortStartScheduler+0x28>
	__asm volatile
 8006370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006374:	f383 8811 	msr	BASEPRI, r3
 8006378:	f3bf 8f6f 	isb	sy
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	613b      	str	r3, [r7, #16]
}
 8006382:	bf00      	nop
 8006384:	bf00      	nop
 8006386:	e7fd      	b.n	8006384 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006388:	4b3e      	ldr	r3, [pc, #248]	@ (8006484 <xPortStartScheduler+0x124>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a3f      	ldr	r2, [pc, #252]	@ (800648c <xPortStartScheduler+0x12c>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d10b      	bne.n	80063aa <xPortStartScheduler+0x4a>
	__asm volatile
 8006392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006396:	f383 8811 	msr	BASEPRI, r3
 800639a:	f3bf 8f6f 	isb	sy
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	60fb      	str	r3, [r7, #12]
}
 80063a4:	bf00      	nop
 80063a6:	bf00      	nop
 80063a8:	e7fd      	b.n	80063a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80063aa:	4b39      	ldr	r3, [pc, #228]	@ (8006490 <xPortStartScheduler+0x130>)
 80063ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	22ff      	movs	r2, #255	@ 0xff
 80063ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80063c4:	78fb      	ldrb	r3, [r7, #3]
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80063cc:	b2da      	uxtb	r2, r3
 80063ce:	4b31      	ldr	r3, [pc, #196]	@ (8006494 <xPortStartScheduler+0x134>)
 80063d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80063d2:	4b31      	ldr	r3, [pc, #196]	@ (8006498 <xPortStartScheduler+0x138>)
 80063d4:	2207      	movs	r2, #7
 80063d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063d8:	e009      	b.n	80063ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80063da:	4b2f      	ldr	r3, [pc, #188]	@ (8006498 <xPortStartScheduler+0x138>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	3b01      	subs	r3, #1
 80063e0:	4a2d      	ldr	r2, [pc, #180]	@ (8006498 <xPortStartScheduler+0x138>)
 80063e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80063e4:	78fb      	ldrb	r3, [r7, #3]
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	005b      	lsls	r3, r3, #1
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063ee:	78fb      	ldrb	r3, [r7, #3]
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063f6:	2b80      	cmp	r3, #128	@ 0x80
 80063f8:	d0ef      	beq.n	80063da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80063fa:	4b27      	ldr	r3, [pc, #156]	@ (8006498 <xPortStartScheduler+0x138>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f1c3 0307 	rsb	r3, r3, #7
 8006402:	2b04      	cmp	r3, #4
 8006404:	d00b      	beq.n	800641e <xPortStartScheduler+0xbe>
	__asm volatile
 8006406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800640a:	f383 8811 	msr	BASEPRI, r3
 800640e:	f3bf 8f6f 	isb	sy
 8006412:	f3bf 8f4f 	dsb	sy
 8006416:	60bb      	str	r3, [r7, #8]
}
 8006418:	bf00      	nop
 800641a:	bf00      	nop
 800641c:	e7fd      	b.n	800641a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800641e:	4b1e      	ldr	r3, [pc, #120]	@ (8006498 <xPortStartScheduler+0x138>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	021b      	lsls	r3, r3, #8
 8006424:	4a1c      	ldr	r2, [pc, #112]	@ (8006498 <xPortStartScheduler+0x138>)
 8006426:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006428:	4b1b      	ldr	r3, [pc, #108]	@ (8006498 <xPortStartScheduler+0x138>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006430:	4a19      	ldr	r2, [pc, #100]	@ (8006498 <xPortStartScheduler+0x138>)
 8006432:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	b2da      	uxtb	r2, r3
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800643c:	4b17      	ldr	r3, [pc, #92]	@ (800649c <xPortStartScheduler+0x13c>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a16      	ldr	r2, [pc, #88]	@ (800649c <xPortStartScheduler+0x13c>)
 8006442:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006446:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006448:	4b14      	ldr	r3, [pc, #80]	@ (800649c <xPortStartScheduler+0x13c>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a13      	ldr	r2, [pc, #76]	@ (800649c <xPortStartScheduler+0x13c>)
 800644e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006452:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006454:	f000 f8da 	bl	800660c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006458:	4b11      	ldr	r3, [pc, #68]	@ (80064a0 <xPortStartScheduler+0x140>)
 800645a:	2200      	movs	r2, #0
 800645c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800645e:	f000 f8f9 	bl	8006654 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006462:	4b10      	ldr	r3, [pc, #64]	@ (80064a4 <xPortStartScheduler+0x144>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a0f      	ldr	r2, [pc, #60]	@ (80064a4 <xPortStartScheduler+0x144>)
 8006468:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800646c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800646e:	f7ff ff63 	bl	8006338 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006472:	f7ff fb33 	bl	8005adc <vTaskSwitchContext>
	prvTaskExitError();
 8006476:	f7ff ff1d 	bl	80062b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3718      	adds	r7, #24
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	e000ed00 	.word	0xe000ed00
 8006488:	410fc271 	.word	0x410fc271
 800648c:	410fc270 	.word	0x410fc270
 8006490:	e000e400 	.word	0xe000e400
 8006494:	200006d4 	.word	0x200006d4
 8006498:	200006d8 	.word	0x200006d8
 800649c:	e000ed20 	.word	0xe000ed20
 80064a0:	20000024 	.word	0x20000024
 80064a4:	e000ef34 	.word	0xe000ef34

080064a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
	__asm volatile
 80064ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b2:	f383 8811 	msr	BASEPRI, r3
 80064b6:	f3bf 8f6f 	isb	sy
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	607b      	str	r3, [r7, #4]
}
 80064c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80064c2:	4b10      	ldr	r3, [pc, #64]	@ (8006504 <vPortEnterCritical+0x5c>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	3301      	adds	r3, #1
 80064c8:	4a0e      	ldr	r2, [pc, #56]	@ (8006504 <vPortEnterCritical+0x5c>)
 80064ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80064cc:	4b0d      	ldr	r3, [pc, #52]	@ (8006504 <vPortEnterCritical+0x5c>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d110      	bne.n	80064f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80064d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006508 <vPortEnterCritical+0x60>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00b      	beq.n	80064f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80064de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e2:	f383 8811 	msr	BASEPRI, r3
 80064e6:	f3bf 8f6f 	isb	sy
 80064ea:	f3bf 8f4f 	dsb	sy
 80064ee:	603b      	str	r3, [r7, #0]
}
 80064f0:	bf00      	nop
 80064f2:	bf00      	nop
 80064f4:	e7fd      	b.n	80064f2 <vPortEnterCritical+0x4a>
	}
}
 80064f6:	bf00      	nop
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	20000024 	.word	0x20000024
 8006508:	e000ed04 	.word	0xe000ed04

0800650c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006512:	4b12      	ldr	r3, [pc, #72]	@ (800655c <vPortExitCritical+0x50>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10b      	bne.n	8006532 <vPortExitCritical+0x26>
	__asm volatile
 800651a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800651e:	f383 8811 	msr	BASEPRI, r3
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	f3bf 8f4f 	dsb	sy
 800652a:	607b      	str	r3, [r7, #4]
}
 800652c:	bf00      	nop
 800652e:	bf00      	nop
 8006530:	e7fd      	b.n	800652e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006532:	4b0a      	ldr	r3, [pc, #40]	@ (800655c <vPortExitCritical+0x50>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	3b01      	subs	r3, #1
 8006538:	4a08      	ldr	r2, [pc, #32]	@ (800655c <vPortExitCritical+0x50>)
 800653a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800653c:	4b07      	ldr	r3, [pc, #28]	@ (800655c <vPortExitCritical+0x50>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d105      	bne.n	8006550 <vPortExitCritical+0x44>
 8006544:	2300      	movs	r3, #0
 8006546:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	f383 8811 	msr	BASEPRI, r3
}
 800654e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr
 800655c:	20000024 	.word	0x20000024

08006560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006560:	f3ef 8009 	mrs	r0, PSP
 8006564:	f3bf 8f6f 	isb	sy
 8006568:	4b15      	ldr	r3, [pc, #84]	@ (80065c0 <pxCurrentTCBConst>)
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	f01e 0f10 	tst.w	lr, #16
 8006570:	bf08      	it	eq
 8006572:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006576:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800657a:	6010      	str	r0, [r2, #0]
 800657c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006580:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006584:	f380 8811 	msr	BASEPRI, r0
 8006588:	f3bf 8f4f 	dsb	sy
 800658c:	f3bf 8f6f 	isb	sy
 8006590:	f7ff faa4 	bl	8005adc <vTaskSwitchContext>
 8006594:	f04f 0000 	mov.w	r0, #0
 8006598:	f380 8811 	msr	BASEPRI, r0
 800659c:	bc09      	pop	{r0, r3}
 800659e:	6819      	ldr	r1, [r3, #0]
 80065a0:	6808      	ldr	r0, [r1, #0]
 80065a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a6:	f01e 0f10 	tst.w	lr, #16
 80065aa:	bf08      	it	eq
 80065ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80065b0:	f380 8809 	msr	PSP, r0
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	f3af 8000 	nop.w

080065c0 <pxCurrentTCBConst>:
 80065c0:	200005a8 	.word	0x200005a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80065c4:	bf00      	nop
 80065c6:	bf00      	nop

080065c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
	__asm volatile
 80065ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065d2:	f383 8811 	msr	BASEPRI, r3
 80065d6:	f3bf 8f6f 	isb	sy
 80065da:	f3bf 8f4f 	dsb	sy
 80065de:	607b      	str	r3, [r7, #4]
}
 80065e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80065e2:	f7ff f9c1 	bl	8005968 <xTaskIncrementTick>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d003      	beq.n	80065f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80065ec:	4b06      	ldr	r3, [pc, #24]	@ (8006608 <SysTick_Handler+0x40>)
 80065ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065f2:	601a      	str	r2, [r3, #0]
 80065f4:	2300      	movs	r3, #0
 80065f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	f383 8811 	msr	BASEPRI, r3
}
 80065fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006600:	bf00      	nop
 8006602:	3708      	adds	r7, #8
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	e000ed04 	.word	0xe000ed04

0800660c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800660c:	b480      	push	{r7}
 800660e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006610:	4b0b      	ldr	r3, [pc, #44]	@ (8006640 <vPortSetupTimerInterrupt+0x34>)
 8006612:	2200      	movs	r2, #0
 8006614:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006616:	4b0b      	ldr	r3, [pc, #44]	@ (8006644 <vPortSetupTimerInterrupt+0x38>)
 8006618:	2200      	movs	r2, #0
 800661a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800661c:	4b0a      	ldr	r3, [pc, #40]	@ (8006648 <vPortSetupTimerInterrupt+0x3c>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a0a      	ldr	r2, [pc, #40]	@ (800664c <vPortSetupTimerInterrupt+0x40>)
 8006622:	fba2 2303 	umull	r2, r3, r2, r3
 8006626:	099b      	lsrs	r3, r3, #6
 8006628:	4a09      	ldr	r2, [pc, #36]	@ (8006650 <vPortSetupTimerInterrupt+0x44>)
 800662a:	3b01      	subs	r3, #1
 800662c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800662e:	4b04      	ldr	r3, [pc, #16]	@ (8006640 <vPortSetupTimerInterrupt+0x34>)
 8006630:	2207      	movs	r2, #7
 8006632:	601a      	str	r2, [r3, #0]
}
 8006634:	bf00      	nop
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	e000e010 	.word	0xe000e010
 8006644:	e000e018 	.word	0xe000e018
 8006648:	20000018 	.word	0x20000018
 800664c:	10624dd3 	.word	0x10624dd3
 8006650:	e000e014 	.word	0xe000e014

08006654 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006654:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006664 <vPortEnableVFP+0x10>
 8006658:	6801      	ldr	r1, [r0, #0]
 800665a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800665e:	6001      	str	r1, [r0, #0]
 8006660:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006662:	bf00      	nop
 8006664:	e000ed88 	.word	0xe000ed88

08006668 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800666e:	f3ef 8305 	mrs	r3, IPSR
 8006672:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2b0f      	cmp	r3, #15
 8006678:	d915      	bls.n	80066a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800667a:	4a18      	ldr	r2, [pc, #96]	@ (80066dc <vPortValidateInterruptPriority+0x74>)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	4413      	add	r3, r2
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006684:	4b16      	ldr	r3, [pc, #88]	@ (80066e0 <vPortValidateInterruptPriority+0x78>)
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	7afa      	ldrb	r2, [r7, #11]
 800668a:	429a      	cmp	r2, r3
 800668c:	d20b      	bcs.n	80066a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800668e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006692:	f383 8811 	msr	BASEPRI, r3
 8006696:	f3bf 8f6f 	isb	sy
 800669a:	f3bf 8f4f 	dsb	sy
 800669e:	607b      	str	r3, [r7, #4]
}
 80066a0:	bf00      	nop
 80066a2:	bf00      	nop
 80066a4:	e7fd      	b.n	80066a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80066a6:	4b0f      	ldr	r3, [pc, #60]	@ (80066e4 <vPortValidateInterruptPriority+0x7c>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80066ae:	4b0e      	ldr	r3, [pc, #56]	@ (80066e8 <vPortValidateInterruptPriority+0x80>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d90b      	bls.n	80066ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80066b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ba:	f383 8811 	msr	BASEPRI, r3
 80066be:	f3bf 8f6f 	isb	sy
 80066c2:	f3bf 8f4f 	dsb	sy
 80066c6:	603b      	str	r3, [r7, #0]
}
 80066c8:	bf00      	nop
 80066ca:	bf00      	nop
 80066cc:	e7fd      	b.n	80066ca <vPortValidateInterruptPriority+0x62>
	}
 80066ce:	bf00      	nop
 80066d0:	3714      	adds	r7, #20
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	e000e3f0 	.word	0xe000e3f0
 80066e0:	200006d4 	.word	0x200006d4
 80066e4:	e000ed0c 	.word	0xe000ed0c
 80066e8:	200006d8 	.word	0x200006d8

080066ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b08a      	sub	sp, #40	@ 0x28
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80066f4:	2300      	movs	r3, #0
 80066f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80066f8:	f7ff f88a 	bl	8005810 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80066fc:	4b5c      	ldr	r3, [pc, #368]	@ (8006870 <pvPortMalloc+0x184>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d101      	bne.n	8006708 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006704:	f000 f924 	bl	8006950 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006708:	4b5a      	ldr	r3, [pc, #360]	@ (8006874 <pvPortMalloc+0x188>)
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4013      	ands	r3, r2
 8006710:	2b00      	cmp	r3, #0
 8006712:	f040 8095 	bne.w	8006840 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d01e      	beq.n	800675a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800671c:	2208      	movs	r2, #8
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4413      	add	r3, r2
 8006722:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f003 0307 	and.w	r3, r3, #7
 800672a:	2b00      	cmp	r3, #0
 800672c:	d015      	beq.n	800675a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f023 0307 	bic.w	r3, r3, #7
 8006734:	3308      	adds	r3, #8
 8006736:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f003 0307 	and.w	r3, r3, #7
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00b      	beq.n	800675a <pvPortMalloc+0x6e>
	__asm volatile
 8006742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006746:	f383 8811 	msr	BASEPRI, r3
 800674a:	f3bf 8f6f 	isb	sy
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	617b      	str	r3, [r7, #20]
}
 8006754:	bf00      	nop
 8006756:	bf00      	nop
 8006758:	e7fd      	b.n	8006756 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d06f      	beq.n	8006840 <pvPortMalloc+0x154>
 8006760:	4b45      	ldr	r3, [pc, #276]	@ (8006878 <pvPortMalloc+0x18c>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	429a      	cmp	r2, r3
 8006768:	d86a      	bhi.n	8006840 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800676a:	4b44      	ldr	r3, [pc, #272]	@ (800687c <pvPortMalloc+0x190>)
 800676c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800676e:	4b43      	ldr	r3, [pc, #268]	@ (800687c <pvPortMalloc+0x190>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006774:	e004      	b.n	8006780 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006778:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800677a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	429a      	cmp	r2, r3
 8006788:	d903      	bls.n	8006792 <pvPortMalloc+0xa6>
 800678a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1f1      	bne.n	8006776 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006792:	4b37      	ldr	r3, [pc, #220]	@ (8006870 <pvPortMalloc+0x184>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006798:	429a      	cmp	r2, r3
 800679a:	d051      	beq.n	8006840 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800679c:	6a3b      	ldr	r3, [r7, #32]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2208      	movs	r2, #8
 80067a2:	4413      	add	r3, r2
 80067a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80067a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	6a3b      	ldr	r3, [r7, #32]
 80067ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80067ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b0:	685a      	ldr	r2, [r3, #4]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	1ad2      	subs	r2, r2, r3
 80067b6:	2308      	movs	r3, #8
 80067b8:	005b      	lsls	r3, r3, #1
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d920      	bls.n	8006800 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80067be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4413      	add	r3, r2
 80067c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	f003 0307 	and.w	r3, r3, #7
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00b      	beq.n	80067e8 <pvPortMalloc+0xfc>
	__asm volatile
 80067d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d4:	f383 8811 	msr	BASEPRI, r3
 80067d8:	f3bf 8f6f 	isb	sy
 80067dc:	f3bf 8f4f 	dsb	sy
 80067e0:	613b      	str	r3, [r7, #16]
}
 80067e2:	bf00      	nop
 80067e4:	bf00      	nop
 80067e6:	e7fd      	b.n	80067e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80067e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ea:	685a      	ldr	r2, [r3, #4]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	1ad2      	subs	r2, r2, r3
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80067f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80067fa:	69b8      	ldr	r0, [r7, #24]
 80067fc:	f000 f90a 	bl	8006a14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006800:	4b1d      	ldr	r3, [pc, #116]	@ (8006878 <pvPortMalloc+0x18c>)
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	4a1b      	ldr	r2, [pc, #108]	@ (8006878 <pvPortMalloc+0x18c>)
 800680c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800680e:	4b1a      	ldr	r3, [pc, #104]	@ (8006878 <pvPortMalloc+0x18c>)
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	4b1b      	ldr	r3, [pc, #108]	@ (8006880 <pvPortMalloc+0x194>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	429a      	cmp	r2, r3
 8006818:	d203      	bcs.n	8006822 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800681a:	4b17      	ldr	r3, [pc, #92]	@ (8006878 <pvPortMalloc+0x18c>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a18      	ldr	r2, [pc, #96]	@ (8006880 <pvPortMalloc+0x194>)
 8006820:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006824:	685a      	ldr	r2, [r3, #4]
 8006826:	4b13      	ldr	r3, [pc, #76]	@ (8006874 <pvPortMalloc+0x188>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	431a      	orrs	r2, r3
 800682c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006832:	2200      	movs	r2, #0
 8006834:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006836:	4b13      	ldr	r3, [pc, #76]	@ (8006884 <pvPortMalloc+0x198>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	3301      	adds	r3, #1
 800683c:	4a11      	ldr	r2, [pc, #68]	@ (8006884 <pvPortMalloc+0x198>)
 800683e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006840:	f7fe fff4 	bl	800582c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	f003 0307 	and.w	r3, r3, #7
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00b      	beq.n	8006866 <pvPortMalloc+0x17a>
	__asm volatile
 800684e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006852:	f383 8811 	msr	BASEPRI, r3
 8006856:	f3bf 8f6f 	isb	sy
 800685a:	f3bf 8f4f 	dsb	sy
 800685e:	60fb      	str	r3, [r7, #12]
}
 8006860:	bf00      	nop
 8006862:	bf00      	nop
 8006864:	e7fd      	b.n	8006862 <pvPortMalloc+0x176>
	return pvReturn;
 8006866:	69fb      	ldr	r3, [r7, #28]
}
 8006868:	4618      	mov	r0, r3
 800686a:	3728      	adds	r7, #40	@ 0x28
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	200042e4 	.word	0x200042e4
 8006874:	200042f8 	.word	0x200042f8
 8006878:	200042e8 	.word	0x200042e8
 800687c:	200042dc 	.word	0x200042dc
 8006880:	200042ec 	.word	0x200042ec
 8006884:	200042f0 	.word	0x200042f0

08006888 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b086      	sub	sp, #24
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d04f      	beq.n	800693a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800689a:	2308      	movs	r3, #8
 800689c:	425b      	negs	r3, r3
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	4413      	add	r3, r2
 80068a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	685a      	ldr	r2, [r3, #4]
 80068ac:	4b25      	ldr	r3, [pc, #148]	@ (8006944 <vPortFree+0xbc>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4013      	ands	r3, r2
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d10b      	bne.n	80068ce <vPortFree+0x46>
	__asm volatile
 80068b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ba:	f383 8811 	msr	BASEPRI, r3
 80068be:	f3bf 8f6f 	isb	sy
 80068c2:	f3bf 8f4f 	dsb	sy
 80068c6:	60fb      	str	r3, [r7, #12]
}
 80068c8:	bf00      	nop
 80068ca:	bf00      	nop
 80068cc:	e7fd      	b.n	80068ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00b      	beq.n	80068ee <vPortFree+0x66>
	__asm volatile
 80068d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068da:	f383 8811 	msr	BASEPRI, r3
 80068de:	f3bf 8f6f 	isb	sy
 80068e2:	f3bf 8f4f 	dsb	sy
 80068e6:	60bb      	str	r3, [r7, #8]
}
 80068e8:	bf00      	nop
 80068ea:	bf00      	nop
 80068ec:	e7fd      	b.n	80068ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	685a      	ldr	r2, [r3, #4]
 80068f2:	4b14      	ldr	r3, [pc, #80]	@ (8006944 <vPortFree+0xbc>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4013      	ands	r3, r2
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d01e      	beq.n	800693a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d11a      	bne.n	800693a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	685a      	ldr	r2, [r3, #4]
 8006908:	4b0e      	ldr	r3, [pc, #56]	@ (8006944 <vPortFree+0xbc>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	43db      	mvns	r3, r3
 800690e:	401a      	ands	r2, r3
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006914:	f7fe ff7c 	bl	8005810 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	685a      	ldr	r2, [r3, #4]
 800691c:	4b0a      	ldr	r3, [pc, #40]	@ (8006948 <vPortFree+0xc0>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4413      	add	r3, r2
 8006922:	4a09      	ldr	r2, [pc, #36]	@ (8006948 <vPortFree+0xc0>)
 8006924:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006926:	6938      	ldr	r0, [r7, #16]
 8006928:	f000 f874 	bl	8006a14 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800692c:	4b07      	ldr	r3, [pc, #28]	@ (800694c <vPortFree+0xc4>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	3301      	adds	r3, #1
 8006932:	4a06      	ldr	r2, [pc, #24]	@ (800694c <vPortFree+0xc4>)
 8006934:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006936:	f7fe ff79 	bl	800582c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800693a:	bf00      	nop
 800693c:	3718      	adds	r7, #24
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}
 8006942:	bf00      	nop
 8006944:	200042f8 	.word	0x200042f8
 8006948:	200042e8 	.word	0x200042e8
 800694c:	200042f4 	.word	0x200042f4

08006950 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006956:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800695a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800695c:	4b27      	ldr	r3, [pc, #156]	@ (80069fc <prvHeapInit+0xac>)
 800695e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f003 0307 	and.w	r3, r3, #7
 8006966:	2b00      	cmp	r3, #0
 8006968:	d00c      	beq.n	8006984 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	3307      	adds	r3, #7
 800696e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f023 0307 	bic.w	r3, r3, #7
 8006976:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	1ad3      	subs	r3, r2, r3
 800697e:	4a1f      	ldr	r2, [pc, #124]	@ (80069fc <prvHeapInit+0xac>)
 8006980:	4413      	add	r3, r2
 8006982:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006988:	4a1d      	ldr	r2, [pc, #116]	@ (8006a00 <prvHeapInit+0xb0>)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800698e:	4b1c      	ldr	r3, [pc, #112]	@ (8006a00 <prvHeapInit+0xb0>)
 8006990:	2200      	movs	r2, #0
 8006992:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	4413      	add	r3, r2
 800699a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800699c:	2208      	movs	r2, #8
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	1a9b      	subs	r3, r3, r2
 80069a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f023 0307 	bic.w	r3, r3, #7
 80069aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	4a15      	ldr	r2, [pc, #84]	@ (8006a04 <prvHeapInit+0xb4>)
 80069b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80069b2:	4b14      	ldr	r3, [pc, #80]	@ (8006a04 <prvHeapInit+0xb4>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2200      	movs	r2, #0
 80069b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80069ba:	4b12      	ldr	r3, [pc, #72]	@ (8006a04 <prvHeapInit+0xb4>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2200      	movs	r2, #0
 80069c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	1ad2      	subs	r2, r2, r3
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80069d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006a04 <prvHeapInit+0xb4>)
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	4a0a      	ldr	r2, [pc, #40]	@ (8006a08 <prvHeapInit+0xb8>)
 80069de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	4a09      	ldr	r2, [pc, #36]	@ (8006a0c <prvHeapInit+0xbc>)
 80069e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80069e8:	4b09      	ldr	r3, [pc, #36]	@ (8006a10 <prvHeapInit+0xc0>)
 80069ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80069ee:	601a      	str	r2, [r3, #0]
}
 80069f0:	bf00      	nop
 80069f2:	3714      	adds	r7, #20
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr
 80069fc:	200006dc 	.word	0x200006dc
 8006a00:	200042dc 	.word	0x200042dc
 8006a04:	200042e4 	.word	0x200042e4
 8006a08:	200042ec 	.word	0x200042ec
 8006a0c:	200042e8 	.word	0x200042e8
 8006a10:	200042f8 	.word	0x200042f8

08006a14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a1c:	4b28      	ldr	r3, [pc, #160]	@ (8006ac0 <prvInsertBlockIntoFreeList+0xac>)
 8006a1e:	60fb      	str	r3, [r7, #12]
 8006a20:	e002      	b.n	8006a28 <prvInsertBlockIntoFreeList+0x14>
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	60fb      	str	r3, [r7, #12]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d8f7      	bhi.n	8006a22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	68ba      	ldr	r2, [r7, #8]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d108      	bne.n	8006a56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	685a      	ldr	r2, [r3, #4]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	441a      	add	r2, r3
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	68ba      	ldr	r2, [r7, #8]
 8006a60:	441a      	add	r2, r3
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d118      	bne.n	8006a9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	4b15      	ldr	r3, [pc, #84]	@ (8006ac4 <prvInsertBlockIntoFreeList+0xb0>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d00d      	beq.n	8006a92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	685a      	ldr	r2, [r3, #4]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	441a      	add	r2, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	601a      	str	r2, [r3, #0]
 8006a90:	e008      	b.n	8006aa4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a92:	4b0c      	ldr	r3, [pc, #48]	@ (8006ac4 <prvInsertBlockIntoFreeList+0xb0>)
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	601a      	str	r2, [r3, #0]
 8006a9a:	e003      	b.n	8006aa4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d002      	beq.n	8006ab2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ab2:	bf00      	nop
 8006ab4:	3714      	adds	r7, #20
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	200042dc 	.word	0x200042dc
 8006ac4:	200042e4 	.word	0x200042e4

08006ac8 <atoi>:
 8006ac8:	220a      	movs	r2, #10
 8006aca:	2100      	movs	r1, #0
 8006acc:	f000 b87a 	b.w	8006bc4 <strtol>

08006ad0 <_strtol_l.constprop.0>:
 8006ad0:	2b24      	cmp	r3, #36	@ 0x24
 8006ad2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ad6:	4686      	mov	lr, r0
 8006ad8:	4690      	mov	r8, r2
 8006ada:	d801      	bhi.n	8006ae0 <_strtol_l.constprop.0+0x10>
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d106      	bne.n	8006aee <_strtol_l.constprop.0+0x1e>
 8006ae0:	f000 fba4 	bl	800722c <__errno>
 8006ae4:	2316      	movs	r3, #22
 8006ae6:	6003      	str	r3, [r0, #0]
 8006ae8:	2000      	movs	r0, #0
 8006aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aee:	4834      	ldr	r0, [pc, #208]	@ (8006bc0 <_strtol_l.constprop.0+0xf0>)
 8006af0:	460d      	mov	r5, r1
 8006af2:	462a      	mov	r2, r5
 8006af4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006af8:	5d06      	ldrb	r6, [r0, r4]
 8006afa:	f016 0608 	ands.w	r6, r6, #8
 8006afe:	d1f8      	bne.n	8006af2 <_strtol_l.constprop.0+0x22>
 8006b00:	2c2d      	cmp	r4, #45	@ 0x2d
 8006b02:	d12d      	bne.n	8006b60 <_strtol_l.constprop.0+0x90>
 8006b04:	782c      	ldrb	r4, [r5, #0]
 8006b06:	2601      	movs	r6, #1
 8006b08:	1c95      	adds	r5, r2, #2
 8006b0a:	f033 0210 	bics.w	r2, r3, #16
 8006b0e:	d109      	bne.n	8006b24 <_strtol_l.constprop.0+0x54>
 8006b10:	2c30      	cmp	r4, #48	@ 0x30
 8006b12:	d12a      	bne.n	8006b6a <_strtol_l.constprop.0+0x9a>
 8006b14:	782a      	ldrb	r2, [r5, #0]
 8006b16:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006b1a:	2a58      	cmp	r2, #88	@ 0x58
 8006b1c:	d125      	bne.n	8006b6a <_strtol_l.constprop.0+0x9a>
 8006b1e:	786c      	ldrb	r4, [r5, #1]
 8006b20:	2310      	movs	r3, #16
 8006b22:	3502      	adds	r5, #2
 8006b24:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006b28:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	fbbc f9f3 	udiv	r9, ip, r3
 8006b32:	4610      	mov	r0, r2
 8006b34:	fb03 ca19 	mls	sl, r3, r9, ip
 8006b38:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006b3c:	2f09      	cmp	r7, #9
 8006b3e:	d81b      	bhi.n	8006b78 <_strtol_l.constprop.0+0xa8>
 8006b40:	463c      	mov	r4, r7
 8006b42:	42a3      	cmp	r3, r4
 8006b44:	dd27      	ble.n	8006b96 <_strtol_l.constprop.0+0xc6>
 8006b46:	1c57      	adds	r7, r2, #1
 8006b48:	d007      	beq.n	8006b5a <_strtol_l.constprop.0+0x8a>
 8006b4a:	4581      	cmp	r9, r0
 8006b4c:	d320      	bcc.n	8006b90 <_strtol_l.constprop.0+0xc0>
 8006b4e:	d101      	bne.n	8006b54 <_strtol_l.constprop.0+0x84>
 8006b50:	45a2      	cmp	sl, r4
 8006b52:	db1d      	blt.n	8006b90 <_strtol_l.constprop.0+0xc0>
 8006b54:	fb00 4003 	mla	r0, r0, r3, r4
 8006b58:	2201      	movs	r2, #1
 8006b5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006b5e:	e7eb      	b.n	8006b38 <_strtol_l.constprop.0+0x68>
 8006b60:	2c2b      	cmp	r4, #43	@ 0x2b
 8006b62:	bf04      	itt	eq
 8006b64:	782c      	ldrbeq	r4, [r5, #0]
 8006b66:	1c95      	addeq	r5, r2, #2
 8006b68:	e7cf      	b.n	8006b0a <_strtol_l.constprop.0+0x3a>
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1da      	bne.n	8006b24 <_strtol_l.constprop.0+0x54>
 8006b6e:	2c30      	cmp	r4, #48	@ 0x30
 8006b70:	bf0c      	ite	eq
 8006b72:	2308      	moveq	r3, #8
 8006b74:	230a      	movne	r3, #10
 8006b76:	e7d5      	b.n	8006b24 <_strtol_l.constprop.0+0x54>
 8006b78:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006b7c:	2f19      	cmp	r7, #25
 8006b7e:	d801      	bhi.n	8006b84 <_strtol_l.constprop.0+0xb4>
 8006b80:	3c37      	subs	r4, #55	@ 0x37
 8006b82:	e7de      	b.n	8006b42 <_strtol_l.constprop.0+0x72>
 8006b84:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006b88:	2f19      	cmp	r7, #25
 8006b8a:	d804      	bhi.n	8006b96 <_strtol_l.constprop.0+0xc6>
 8006b8c:	3c57      	subs	r4, #87	@ 0x57
 8006b8e:	e7d8      	b.n	8006b42 <_strtol_l.constprop.0+0x72>
 8006b90:	f04f 32ff 	mov.w	r2, #4294967295
 8006b94:	e7e1      	b.n	8006b5a <_strtol_l.constprop.0+0x8a>
 8006b96:	1c53      	adds	r3, r2, #1
 8006b98:	d108      	bne.n	8006bac <_strtol_l.constprop.0+0xdc>
 8006b9a:	2322      	movs	r3, #34	@ 0x22
 8006b9c:	f8ce 3000 	str.w	r3, [lr]
 8006ba0:	4660      	mov	r0, ip
 8006ba2:	f1b8 0f00 	cmp.w	r8, #0
 8006ba6:	d0a0      	beq.n	8006aea <_strtol_l.constprop.0+0x1a>
 8006ba8:	1e69      	subs	r1, r5, #1
 8006baa:	e006      	b.n	8006bba <_strtol_l.constprop.0+0xea>
 8006bac:	b106      	cbz	r6, 8006bb0 <_strtol_l.constprop.0+0xe0>
 8006bae:	4240      	negs	r0, r0
 8006bb0:	f1b8 0f00 	cmp.w	r8, #0
 8006bb4:	d099      	beq.n	8006aea <_strtol_l.constprop.0+0x1a>
 8006bb6:	2a00      	cmp	r2, #0
 8006bb8:	d1f6      	bne.n	8006ba8 <_strtol_l.constprop.0+0xd8>
 8006bba:	f8c8 1000 	str.w	r1, [r8]
 8006bbe:	e794      	b.n	8006aea <_strtol_l.constprop.0+0x1a>
 8006bc0:	08008305 	.word	0x08008305

08006bc4 <strtol>:
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	460a      	mov	r2, r1
 8006bc8:	4601      	mov	r1, r0
 8006bca:	4802      	ldr	r0, [pc, #8]	@ (8006bd4 <strtol+0x10>)
 8006bcc:	6800      	ldr	r0, [r0, #0]
 8006bce:	f7ff bf7f 	b.w	8006ad0 <_strtol_l.constprop.0>
 8006bd2:	bf00      	nop
 8006bd4:	20000034 	.word	0x20000034

08006bd8 <std>:
 8006bd8:	2300      	movs	r3, #0
 8006bda:	b510      	push	{r4, lr}
 8006bdc:	4604      	mov	r4, r0
 8006bde:	e9c0 3300 	strd	r3, r3, [r0]
 8006be2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006be6:	6083      	str	r3, [r0, #8]
 8006be8:	8181      	strh	r1, [r0, #12]
 8006bea:	6643      	str	r3, [r0, #100]	@ 0x64
 8006bec:	81c2      	strh	r2, [r0, #14]
 8006bee:	6183      	str	r3, [r0, #24]
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	2208      	movs	r2, #8
 8006bf4:	305c      	adds	r0, #92	@ 0x5c
 8006bf6:	f000 fa19 	bl	800702c <memset>
 8006bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8006c30 <std+0x58>)
 8006bfc:	6263      	str	r3, [r4, #36]	@ 0x24
 8006bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8006c34 <std+0x5c>)
 8006c00:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006c02:	4b0d      	ldr	r3, [pc, #52]	@ (8006c38 <std+0x60>)
 8006c04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006c06:	4b0d      	ldr	r3, [pc, #52]	@ (8006c3c <std+0x64>)
 8006c08:	6323      	str	r3, [r4, #48]	@ 0x30
 8006c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8006c40 <std+0x68>)
 8006c0c:	6224      	str	r4, [r4, #32]
 8006c0e:	429c      	cmp	r4, r3
 8006c10:	d006      	beq.n	8006c20 <std+0x48>
 8006c12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006c16:	4294      	cmp	r4, r2
 8006c18:	d002      	beq.n	8006c20 <std+0x48>
 8006c1a:	33d0      	adds	r3, #208	@ 0xd0
 8006c1c:	429c      	cmp	r4, r3
 8006c1e:	d105      	bne.n	8006c2c <std+0x54>
 8006c20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c28:	f000 bb2a 	b.w	8007280 <__retarget_lock_init_recursive>
 8006c2c:	bd10      	pop	{r4, pc}
 8006c2e:	bf00      	nop
 8006c30:	08006e7d 	.word	0x08006e7d
 8006c34:	08006e9f 	.word	0x08006e9f
 8006c38:	08006ed7 	.word	0x08006ed7
 8006c3c:	08006efb 	.word	0x08006efb
 8006c40:	200042fc 	.word	0x200042fc

08006c44 <stdio_exit_handler>:
 8006c44:	4a02      	ldr	r2, [pc, #8]	@ (8006c50 <stdio_exit_handler+0xc>)
 8006c46:	4903      	ldr	r1, [pc, #12]	@ (8006c54 <stdio_exit_handler+0x10>)
 8006c48:	4803      	ldr	r0, [pc, #12]	@ (8006c58 <stdio_exit_handler+0x14>)
 8006c4a:	f000 b869 	b.w	8006d20 <_fwalk_sglue>
 8006c4e:	bf00      	nop
 8006c50:	20000028 	.word	0x20000028
 8006c54:	08007e49 	.word	0x08007e49
 8006c58:	20000038 	.word	0x20000038

08006c5c <cleanup_stdio>:
 8006c5c:	6841      	ldr	r1, [r0, #4]
 8006c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8006c90 <cleanup_stdio+0x34>)
 8006c60:	4299      	cmp	r1, r3
 8006c62:	b510      	push	{r4, lr}
 8006c64:	4604      	mov	r4, r0
 8006c66:	d001      	beq.n	8006c6c <cleanup_stdio+0x10>
 8006c68:	f001 f8ee 	bl	8007e48 <_fflush_r>
 8006c6c:	68a1      	ldr	r1, [r4, #8]
 8006c6e:	4b09      	ldr	r3, [pc, #36]	@ (8006c94 <cleanup_stdio+0x38>)
 8006c70:	4299      	cmp	r1, r3
 8006c72:	d002      	beq.n	8006c7a <cleanup_stdio+0x1e>
 8006c74:	4620      	mov	r0, r4
 8006c76:	f001 f8e7 	bl	8007e48 <_fflush_r>
 8006c7a:	68e1      	ldr	r1, [r4, #12]
 8006c7c:	4b06      	ldr	r3, [pc, #24]	@ (8006c98 <cleanup_stdio+0x3c>)
 8006c7e:	4299      	cmp	r1, r3
 8006c80:	d004      	beq.n	8006c8c <cleanup_stdio+0x30>
 8006c82:	4620      	mov	r0, r4
 8006c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c88:	f001 b8de 	b.w	8007e48 <_fflush_r>
 8006c8c:	bd10      	pop	{r4, pc}
 8006c8e:	bf00      	nop
 8006c90:	200042fc 	.word	0x200042fc
 8006c94:	20004364 	.word	0x20004364
 8006c98:	200043cc 	.word	0x200043cc

08006c9c <global_stdio_init.part.0>:
 8006c9c:	b510      	push	{r4, lr}
 8006c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8006ccc <global_stdio_init.part.0+0x30>)
 8006ca0:	4c0b      	ldr	r4, [pc, #44]	@ (8006cd0 <global_stdio_init.part.0+0x34>)
 8006ca2:	4a0c      	ldr	r2, [pc, #48]	@ (8006cd4 <global_stdio_init.part.0+0x38>)
 8006ca4:	601a      	str	r2, [r3, #0]
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	2200      	movs	r2, #0
 8006caa:	2104      	movs	r1, #4
 8006cac:	f7ff ff94 	bl	8006bd8 <std>
 8006cb0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	2109      	movs	r1, #9
 8006cb8:	f7ff ff8e 	bl	8006bd8 <std>
 8006cbc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006cc0:	2202      	movs	r2, #2
 8006cc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cc6:	2112      	movs	r1, #18
 8006cc8:	f7ff bf86 	b.w	8006bd8 <std>
 8006ccc:	20004434 	.word	0x20004434
 8006cd0:	200042fc 	.word	0x200042fc
 8006cd4:	08006c45 	.word	0x08006c45

08006cd8 <__sfp_lock_acquire>:
 8006cd8:	4801      	ldr	r0, [pc, #4]	@ (8006ce0 <__sfp_lock_acquire+0x8>)
 8006cda:	f000 bad2 	b.w	8007282 <__retarget_lock_acquire_recursive>
 8006cde:	bf00      	nop
 8006ce0:	2000443d 	.word	0x2000443d

08006ce4 <__sfp_lock_release>:
 8006ce4:	4801      	ldr	r0, [pc, #4]	@ (8006cec <__sfp_lock_release+0x8>)
 8006ce6:	f000 bacd 	b.w	8007284 <__retarget_lock_release_recursive>
 8006cea:	bf00      	nop
 8006cec:	2000443d 	.word	0x2000443d

08006cf0 <__sinit>:
 8006cf0:	b510      	push	{r4, lr}
 8006cf2:	4604      	mov	r4, r0
 8006cf4:	f7ff fff0 	bl	8006cd8 <__sfp_lock_acquire>
 8006cf8:	6a23      	ldr	r3, [r4, #32]
 8006cfa:	b11b      	cbz	r3, 8006d04 <__sinit+0x14>
 8006cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d00:	f7ff bff0 	b.w	8006ce4 <__sfp_lock_release>
 8006d04:	4b04      	ldr	r3, [pc, #16]	@ (8006d18 <__sinit+0x28>)
 8006d06:	6223      	str	r3, [r4, #32]
 8006d08:	4b04      	ldr	r3, [pc, #16]	@ (8006d1c <__sinit+0x2c>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d1f5      	bne.n	8006cfc <__sinit+0xc>
 8006d10:	f7ff ffc4 	bl	8006c9c <global_stdio_init.part.0>
 8006d14:	e7f2      	b.n	8006cfc <__sinit+0xc>
 8006d16:	bf00      	nop
 8006d18:	08006c5d 	.word	0x08006c5d
 8006d1c:	20004434 	.word	0x20004434

08006d20 <_fwalk_sglue>:
 8006d20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d24:	4607      	mov	r7, r0
 8006d26:	4688      	mov	r8, r1
 8006d28:	4614      	mov	r4, r2
 8006d2a:	2600      	movs	r6, #0
 8006d2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d30:	f1b9 0901 	subs.w	r9, r9, #1
 8006d34:	d505      	bpl.n	8006d42 <_fwalk_sglue+0x22>
 8006d36:	6824      	ldr	r4, [r4, #0]
 8006d38:	2c00      	cmp	r4, #0
 8006d3a:	d1f7      	bne.n	8006d2c <_fwalk_sglue+0xc>
 8006d3c:	4630      	mov	r0, r6
 8006d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d42:	89ab      	ldrh	r3, [r5, #12]
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d907      	bls.n	8006d58 <_fwalk_sglue+0x38>
 8006d48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	d003      	beq.n	8006d58 <_fwalk_sglue+0x38>
 8006d50:	4629      	mov	r1, r5
 8006d52:	4638      	mov	r0, r7
 8006d54:	47c0      	blx	r8
 8006d56:	4306      	orrs	r6, r0
 8006d58:	3568      	adds	r5, #104	@ 0x68
 8006d5a:	e7e9      	b.n	8006d30 <_fwalk_sglue+0x10>

08006d5c <iprintf>:
 8006d5c:	b40f      	push	{r0, r1, r2, r3}
 8006d5e:	b507      	push	{r0, r1, r2, lr}
 8006d60:	4906      	ldr	r1, [pc, #24]	@ (8006d7c <iprintf+0x20>)
 8006d62:	ab04      	add	r3, sp, #16
 8006d64:	6808      	ldr	r0, [r1, #0]
 8006d66:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d6a:	6881      	ldr	r1, [r0, #8]
 8006d6c:	9301      	str	r3, [sp, #4]
 8006d6e:	f000 fd41 	bl	80077f4 <_vfiprintf_r>
 8006d72:	b003      	add	sp, #12
 8006d74:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d78:	b004      	add	sp, #16
 8006d7a:	4770      	bx	lr
 8006d7c:	20000034 	.word	0x20000034

08006d80 <_puts_r>:
 8006d80:	6a03      	ldr	r3, [r0, #32]
 8006d82:	b570      	push	{r4, r5, r6, lr}
 8006d84:	6884      	ldr	r4, [r0, #8]
 8006d86:	4605      	mov	r5, r0
 8006d88:	460e      	mov	r6, r1
 8006d8a:	b90b      	cbnz	r3, 8006d90 <_puts_r+0x10>
 8006d8c:	f7ff ffb0 	bl	8006cf0 <__sinit>
 8006d90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d92:	07db      	lsls	r3, r3, #31
 8006d94:	d405      	bmi.n	8006da2 <_puts_r+0x22>
 8006d96:	89a3      	ldrh	r3, [r4, #12]
 8006d98:	0598      	lsls	r0, r3, #22
 8006d9a:	d402      	bmi.n	8006da2 <_puts_r+0x22>
 8006d9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d9e:	f000 fa70 	bl	8007282 <__retarget_lock_acquire_recursive>
 8006da2:	89a3      	ldrh	r3, [r4, #12]
 8006da4:	0719      	lsls	r1, r3, #28
 8006da6:	d502      	bpl.n	8006dae <_puts_r+0x2e>
 8006da8:	6923      	ldr	r3, [r4, #16]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d135      	bne.n	8006e1a <_puts_r+0x9a>
 8006dae:	4621      	mov	r1, r4
 8006db0:	4628      	mov	r0, r5
 8006db2:	f000 f8e5 	bl	8006f80 <__swsetup_r>
 8006db6:	b380      	cbz	r0, 8006e1a <_puts_r+0x9a>
 8006db8:	f04f 35ff 	mov.w	r5, #4294967295
 8006dbc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006dbe:	07da      	lsls	r2, r3, #31
 8006dc0:	d405      	bmi.n	8006dce <_puts_r+0x4e>
 8006dc2:	89a3      	ldrh	r3, [r4, #12]
 8006dc4:	059b      	lsls	r3, r3, #22
 8006dc6:	d402      	bmi.n	8006dce <_puts_r+0x4e>
 8006dc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006dca:	f000 fa5b 	bl	8007284 <__retarget_lock_release_recursive>
 8006dce:	4628      	mov	r0, r5
 8006dd0:	bd70      	pop	{r4, r5, r6, pc}
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	da04      	bge.n	8006de0 <_puts_r+0x60>
 8006dd6:	69a2      	ldr	r2, [r4, #24]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	dc17      	bgt.n	8006e0c <_puts_r+0x8c>
 8006ddc:	290a      	cmp	r1, #10
 8006dde:	d015      	beq.n	8006e0c <_puts_r+0x8c>
 8006de0:	6823      	ldr	r3, [r4, #0]
 8006de2:	1c5a      	adds	r2, r3, #1
 8006de4:	6022      	str	r2, [r4, #0]
 8006de6:	7019      	strb	r1, [r3, #0]
 8006de8:	68a3      	ldr	r3, [r4, #8]
 8006dea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006dee:	3b01      	subs	r3, #1
 8006df0:	60a3      	str	r3, [r4, #8]
 8006df2:	2900      	cmp	r1, #0
 8006df4:	d1ed      	bne.n	8006dd2 <_puts_r+0x52>
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	da11      	bge.n	8006e1e <_puts_r+0x9e>
 8006dfa:	4622      	mov	r2, r4
 8006dfc:	210a      	movs	r1, #10
 8006dfe:	4628      	mov	r0, r5
 8006e00:	f000 f87f 	bl	8006f02 <__swbuf_r>
 8006e04:	3001      	adds	r0, #1
 8006e06:	d0d7      	beq.n	8006db8 <_puts_r+0x38>
 8006e08:	250a      	movs	r5, #10
 8006e0a:	e7d7      	b.n	8006dbc <_puts_r+0x3c>
 8006e0c:	4622      	mov	r2, r4
 8006e0e:	4628      	mov	r0, r5
 8006e10:	f000 f877 	bl	8006f02 <__swbuf_r>
 8006e14:	3001      	adds	r0, #1
 8006e16:	d1e7      	bne.n	8006de8 <_puts_r+0x68>
 8006e18:	e7ce      	b.n	8006db8 <_puts_r+0x38>
 8006e1a:	3e01      	subs	r6, #1
 8006e1c:	e7e4      	b.n	8006de8 <_puts_r+0x68>
 8006e1e:	6823      	ldr	r3, [r4, #0]
 8006e20:	1c5a      	adds	r2, r3, #1
 8006e22:	6022      	str	r2, [r4, #0]
 8006e24:	220a      	movs	r2, #10
 8006e26:	701a      	strb	r2, [r3, #0]
 8006e28:	e7ee      	b.n	8006e08 <_puts_r+0x88>
	...

08006e2c <puts>:
 8006e2c:	4b02      	ldr	r3, [pc, #8]	@ (8006e38 <puts+0xc>)
 8006e2e:	4601      	mov	r1, r0
 8006e30:	6818      	ldr	r0, [r3, #0]
 8006e32:	f7ff bfa5 	b.w	8006d80 <_puts_r>
 8006e36:	bf00      	nop
 8006e38:	20000034 	.word	0x20000034

08006e3c <siprintf>:
 8006e3c:	b40e      	push	{r1, r2, r3}
 8006e3e:	b500      	push	{lr}
 8006e40:	b09c      	sub	sp, #112	@ 0x70
 8006e42:	ab1d      	add	r3, sp, #116	@ 0x74
 8006e44:	9002      	str	r0, [sp, #8]
 8006e46:	9006      	str	r0, [sp, #24]
 8006e48:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006e4c:	4809      	ldr	r0, [pc, #36]	@ (8006e74 <siprintf+0x38>)
 8006e4e:	9107      	str	r1, [sp, #28]
 8006e50:	9104      	str	r1, [sp, #16]
 8006e52:	4909      	ldr	r1, [pc, #36]	@ (8006e78 <siprintf+0x3c>)
 8006e54:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e58:	9105      	str	r1, [sp, #20]
 8006e5a:	6800      	ldr	r0, [r0, #0]
 8006e5c:	9301      	str	r3, [sp, #4]
 8006e5e:	a902      	add	r1, sp, #8
 8006e60:	f000 fba2 	bl	80075a8 <_svfiprintf_r>
 8006e64:	9b02      	ldr	r3, [sp, #8]
 8006e66:	2200      	movs	r2, #0
 8006e68:	701a      	strb	r2, [r3, #0]
 8006e6a:	b01c      	add	sp, #112	@ 0x70
 8006e6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e70:	b003      	add	sp, #12
 8006e72:	4770      	bx	lr
 8006e74:	20000034 	.word	0x20000034
 8006e78:	ffff0208 	.word	0xffff0208

08006e7c <__sread>:
 8006e7c:	b510      	push	{r4, lr}
 8006e7e:	460c      	mov	r4, r1
 8006e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e84:	f000 f9ae 	bl	80071e4 <_read_r>
 8006e88:	2800      	cmp	r0, #0
 8006e8a:	bfab      	itete	ge
 8006e8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006e8e:	89a3      	ldrhlt	r3, [r4, #12]
 8006e90:	181b      	addge	r3, r3, r0
 8006e92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006e96:	bfac      	ite	ge
 8006e98:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006e9a:	81a3      	strhlt	r3, [r4, #12]
 8006e9c:	bd10      	pop	{r4, pc}

08006e9e <__swrite>:
 8006e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ea2:	461f      	mov	r7, r3
 8006ea4:	898b      	ldrh	r3, [r1, #12]
 8006ea6:	05db      	lsls	r3, r3, #23
 8006ea8:	4605      	mov	r5, r0
 8006eaa:	460c      	mov	r4, r1
 8006eac:	4616      	mov	r6, r2
 8006eae:	d505      	bpl.n	8006ebc <__swrite+0x1e>
 8006eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f000 f982 	bl	80071c0 <_lseek_r>
 8006ebc:	89a3      	ldrh	r3, [r4, #12]
 8006ebe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ec2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ec6:	81a3      	strh	r3, [r4, #12]
 8006ec8:	4632      	mov	r2, r6
 8006eca:	463b      	mov	r3, r7
 8006ecc:	4628      	mov	r0, r5
 8006ece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ed2:	f000 b999 	b.w	8007208 <_write_r>

08006ed6 <__sseek>:
 8006ed6:	b510      	push	{r4, lr}
 8006ed8:	460c      	mov	r4, r1
 8006eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ede:	f000 f96f 	bl	80071c0 <_lseek_r>
 8006ee2:	1c43      	adds	r3, r0, #1
 8006ee4:	89a3      	ldrh	r3, [r4, #12]
 8006ee6:	bf15      	itete	ne
 8006ee8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006eea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006eee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006ef2:	81a3      	strheq	r3, [r4, #12]
 8006ef4:	bf18      	it	ne
 8006ef6:	81a3      	strhne	r3, [r4, #12]
 8006ef8:	bd10      	pop	{r4, pc}

08006efa <__sclose>:
 8006efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006efe:	f000 b8f9 	b.w	80070f4 <_close_r>

08006f02 <__swbuf_r>:
 8006f02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f04:	460e      	mov	r6, r1
 8006f06:	4614      	mov	r4, r2
 8006f08:	4605      	mov	r5, r0
 8006f0a:	b118      	cbz	r0, 8006f14 <__swbuf_r+0x12>
 8006f0c:	6a03      	ldr	r3, [r0, #32]
 8006f0e:	b90b      	cbnz	r3, 8006f14 <__swbuf_r+0x12>
 8006f10:	f7ff feee 	bl	8006cf0 <__sinit>
 8006f14:	69a3      	ldr	r3, [r4, #24]
 8006f16:	60a3      	str	r3, [r4, #8]
 8006f18:	89a3      	ldrh	r3, [r4, #12]
 8006f1a:	071a      	lsls	r2, r3, #28
 8006f1c:	d501      	bpl.n	8006f22 <__swbuf_r+0x20>
 8006f1e:	6923      	ldr	r3, [r4, #16]
 8006f20:	b943      	cbnz	r3, 8006f34 <__swbuf_r+0x32>
 8006f22:	4621      	mov	r1, r4
 8006f24:	4628      	mov	r0, r5
 8006f26:	f000 f82b 	bl	8006f80 <__swsetup_r>
 8006f2a:	b118      	cbz	r0, 8006f34 <__swbuf_r+0x32>
 8006f2c:	f04f 37ff 	mov.w	r7, #4294967295
 8006f30:	4638      	mov	r0, r7
 8006f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f34:	6823      	ldr	r3, [r4, #0]
 8006f36:	6922      	ldr	r2, [r4, #16]
 8006f38:	1a98      	subs	r0, r3, r2
 8006f3a:	6963      	ldr	r3, [r4, #20]
 8006f3c:	b2f6      	uxtb	r6, r6
 8006f3e:	4283      	cmp	r3, r0
 8006f40:	4637      	mov	r7, r6
 8006f42:	dc05      	bgt.n	8006f50 <__swbuf_r+0x4e>
 8006f44:	4621      	mov	r1, r4
 8006f46:	4628      	mov	r0, r5
 8006f48:	f000 ff7e 	bl	8007e48 <_fflush_r>
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	d1ed      	bne.n	8006f2c <__swbuf_r+0x2a>
 8006f50:	68a3      	ldr	r3, [r4, #8]
 8006f52:	3b01      	subs	r3, #1
 8006f54:	60a3      	str	r3, [r4, #8]
 8006f56:	6823      	ldr	r3, [r4, #0]
 8006f58:	1c5a      	adds	r2, r3, #1
 8006f5a:	6022      	str	r2, [r4, #0]
 8006f5c:	701e      	strb	r6, [r3, #0]
 8006f5e:	6962      	ldr	r2, [r4, #20]
 8006f60:	1c43      	adds	r3, r0, #1
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d004      	beq.n	8006f70 <__swbuf_r+0x6e>
 8006f66:	89a3      	ldrh	r3, [r4, #12]
 8006f68:	07db      	lsls	r3, r3, #31
 8006f6a:	d5e1      	bpl.n	8006f30 <__swbuf_r+0x2e>
 8006f6c:	2e0a      	cmp	r6, #10
 8006f6e:	d1df      	bne.n	8006f30 <__swbuf_r+0x2e>
 8006f70:	4621      	mov	r1, r4
 8006f72:	4628      	mov	r0, r5
 8006f74:	f000 ff68 	bl	8007e48 <_fflush_r>
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	d0d9      	beq.n	8006f30 <__swbuf_r+0x2e>
 8006f7c:	e7d6      	b.n	8006f2c <__swbuf_r+0x2a>
	...

08006f80 <__swsetup_r>:
 8006f80:	b538      	push	{r3, r4, r5, lr}
 8006f82:	4b29      	ldr	r3, [pc, #164]	@ (8007028 <__swsetup_r+0xa8>)
 8006f84:	4605      	mov	r5, r0
 8006f86:	6818      	ldr	r0, [r3, #0]
 8006f88:	460c      	mov	r4, r1
 8006f8a:	b118      	cbz	r0, 8006f94 <__swsetup_r+0x14>
 8006f8c:	6a03      	ldr	r3, [r0, #32]
 8006f8e:	b90b      	cbnz	r3, 8006f94 <__swsetup_r+0x14>
 8006f90:	f7ff feae 	bl	8006cf0 <__sinit>
 8006f94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f98:	0719      	lsls	r1, r3, #28
 8006f9a:	d422      	bmi.n	8006fe2 <__swsetup_r+0x62>
 8006f9c:	06da      	lsls	r2, r3, #27
 8006f9e:	d407      	bmi.n	8006fb0 <__swsetup_r+0x30>
 8006fa0:	2209      	movs	r2, #9
 8006fa2:	602a      	str	r2, [r5, #0]
 8006fa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fa8:	81a3      	strh	r3, [r4, #12]
 8006faa:	f04f 30ff 	mov.w	r0, #4294967295
 8006fae:	e033      	b.n	8007018 <__swsetup_r+0x98>
 8006fb0:	0758      	lsls	r0, r3, #29
 8006fb2:	d512      	bpl.n	8006fda <__swsetup_r+0x5a>
 8006fb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006fb6:	b141      	cbz	r1, 8006fca <__swsetup_r+0x4a>
 8006fb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006fbc:	4299      	cmp	r1, r3
 8006fbe:	d002      	beq.n	8006fc6 <__swsetup_r+0x46>
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	f000 f995 	bl	80072f0 <_free_r>
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	6363      	str	r3, [r4, #52]	@ 0x34
 8006fca:	89a3      	ldrh	r3, [r4, #12]
 8006fcc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006fd0:	81a3      	strh	r3, [r4, #12]
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	6063      	str	r3, [r4, #4]
 8006fd6:	6923      	ldr	r3, [r4, #16]
 8006fd8:	6023      	str	r3, [r4, #0]
 8006fda:	89a3      	ldrh	r3, [r4, #12]
 8006fdc:	f043 0308 	orr.w	r3, r3, #8
 8006fe0:	81a3      	strh	r3, [r4, #12]
 8006fe2:	6923      	ldr	r3, [r4, #16]
 8006fe4:	b94b      	cbnz	r3, 8006ffa <__swsetup_r+0x7a>
 8006fe6:	89a3      	ldrh	r3, [r4, #12]
 8006fe8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006fec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ff0:	d003      	beq.n	8006ffa <__swsetup_r+0x7a>
 8006ff2:	4621      	mov	r1, r4
 8006ff4:	4628      	mov	r0, r5
 8006ff6:	f000 ff87 	bl	8007f08 <__smakebuf_r>
 8006ffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ffe:	f013 0201 	ands.w	r2, r3, #1
 8007002:	d00a      	beq.n	800701a <__swsetup_r+0x9a>
 8007004:	2200      	movs	r2, #0
 8007006:	60a2      	str	r2, [r4, #8]
 8007008:	6962      	ldr	r2, [r4, #20]
 800700a:	4252      	negs	r2, r2
 800700c:	61a2      	str	r2, [r4, #24]
 800700e:	6922      	ldr	r2, [r4, #16]
 8007010:	b942      	cbnz	r2, 8007024 <__swsetup_r+0xa4>
 8007012:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007016:	d1c5      	bne.n	8006fa4 <__swsetup_r+0x24>
 8007018:	bd38      	pop	{r3, r4, r5, pc}
 800701a:	0799      	lsls	r1, r3, #30
 800701c:	bf58      	it	pl
 800701e:	6962      	ldrpl	r2, [r4, #20]
 8007020:	60a2      	str	r2, [r4, #8]
 8007022:	e7f4      	b.n	800700e <__swsetup_r+0x8e>
 8007024:	2000      	movs	r0, #0
 8007026:	e7f7      	b.n	8007018 <__swsetup_r+0x98>
 8007028:	20000034 	.word	0x20000034

0800702c <memset>:
 800702c:	4402      	add	r2, r0
 800702e:	4603      	mov	r3, r0
 8007030:	4293      	cmp	r3, r2
 8007032:	d100      	bne.n	8007036 <memset+0xa>
 8007034:	4770      	bx	lr
 8007036:	f803 1b01 	strb.w	r1, [r3], #1
 800703a:	e7f9      	b.n	8007030 <memset+0x4>

0800703c <strtok>:
 800703c:	4b16      	ldr	r3, [pc, #88]	@ (8007098 <strtok+0x5c>)
 800703e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007042:	681f      	ldr	r7, [r3, #0]
 8007044:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8007046:	4605      	mov	r5, r0
 8007048:	460e      	mov	r6, r1
 800704a:	b9ec      	cbnz	r4, 8007088 <strtok+0x4c>
 800704c:	2050      	movs	r0, #80	@ 0x50
 800704e:	f000 f999 	bl	8007384 <malloc>
 8007052:	4602      	mov	r2, r0
 8007054:	6478      	str	r0, [r7, #68]	@ 0x44
 8007056:	b920      	cbnz	r0, 8007062 <strtok+0x26>
 8007058:	4b10      	ldr	r3, [pc, #64]	@ (800709c <strtok+0x60>)
 800705a:	4811      	ldr	r0, [pc, #68]	@ (80070a0 <strtok+0x64>)
 800705c:	215b      	movs	r1, #91	@ 0x5b
 800705e:	f000 f929 	bl	80072b4 <__assert_func>
 8007062:	e9c0 4400 	strd	r4, r4, [r0]
 8007066:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800706a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800706e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8007072:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8007076:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800707a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800707e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8007082:	6184      	str	r4, [r0, #24]
 8007084:	7704      	strb	r4, [r0, #28]
 8007086:	6244      	str	r4, [r0, #36]	@ 0x24
 8007088:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800708a:	4631      	mov	r1, r6
 800708c:	4628      	mov	r0, r5
 800708e:	2301      	movs	r3, #1
 8007090:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007094:	f000 b806 	b.w	80070a4 <__strtok_r>
 8007098:	20000034 	.word	0x20000034
 800709c:	08008405 	.word	0x08008405
 80070a0:	0800841c 	.word	0x0800841c

080070a4 <__strtok_r>:
 80070a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070a6:	4604      	mov	r4, r0
 80070a8:	b908      	cbnz	r0, 80070ae <__strtok_r+0xa>
 80070aa:	6814      	ldr	r4, [r2, #0]
 80070ac:	b144      	cbz	r4, 80070c0 <__strtok_r+0x1c>
 80070ae:	4620      	mov	r0, r4
 80070b0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80070b4:	460f      	mov	r7, r1
 80070b6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80070ba:	b91e      	cbnz	r6, 80070c4 <__strtok_r+0x20>
 80070bc:	b965      	cbnz	r5, 80070d8 <__strtok_r+0x34>
 80070be:	6015      	str	r5, [r2, #0]
 80070c0:	2000      	movs	r0, #0
 80070c2:	e005      	b.n	80070d0 <__strtok_r+0x2c>
 80070c4:	42b5      	cmp	r5, r6
 80070c6:	d1f6      	bne.n	80070b6 <__strtok_r+0x12>
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1f0      	bne.n	80070ae <__strtok_r+0xa>
 80070cc:	6014      	str	r4, [r2, #0]
 80070ce:	7003      	strb	r3, [r0, #0]
 80070d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070d2:	461c      	mov	r4, r3
 80070d4:	e00c      	b.n	80070f0 <__strtok_r+0x4c>
 80070d6:	b915      	cbnz	r5, 80070de <__strtok_r+0x3a>
 80070d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80070dc:	460e      	mov	r6, r1
 80070de:	f816 5b01 	ldrb.w	r5, [r6], #1
 80070e2:	42ab      	cmp	r3, r5
 80070e4:	d1f7      	bne.n	80070d6 <__strtok_r+0x32>
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d0f3      	beq.n	80070d2 <__strtok_r+0x2e>
 80070ea:	2300      	movs	r3, #0
 80070ec:	f804 3c01 	strb.w	r3, [r4, #-1]
 80070f0:	6014      	str	r4, [r2, #0]
 80070f2:	e7ed      	b.n	80070d0 <__strtok_r+0x2c>

080070f4 <_close_r>:
 80070f4:	b538      	push	{r3, r4, r5, lr}
 80070f6:	4d06      	ldr	r5, [pc, #24]	@ (8007110 <_close_r+0x1c>)
 80070f8:	2300      	movs	r3, #0
 80070fa:	4604      	mov	r4, r0
 80070fc:	4608      	mov	r0, r1
 80070fe:	602b      	str	r3, [r5, #0]
 8007100:	f7f9 ff34 	bl	8000f6c <_close>
 8007104:	1c43      	adds	r3, r0, #1
 8007106:	d102      	bne.n	800710e <_close_r+0x1a>
 8007108:	682b      	ldr	r3, [r5, #0]
 800710a:	b103      	cbz	r3, 800710e <_close_r+0x1a>
 800710c:	6023      	str	r3, [r4, #0]
 800710e:	bd38      	pop	{r3, r4, r5, pc}
 8007110:	20004438 	.word	0x20004438

08007114 <_reclaim_reent>:
 8007114:	4b29      	ldr	r3, [pc, #164]	@ (80071bc <_reclaim_reent+0xa8>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4283      	cmp	r3, r0
 800711a:	b570      	push	{r4, r5, r6, lr}
 800711c:	4604      	mov	r4, r0
 800711e:	d04b      	beq.n	80071b8 <_reclaim_reent+0xa4>
 8007120:	69c3      	ldr	r3, [r0, #28]
 8007122:	b1ab      	cbz	r3, 8007150 <_reclaim_reent+0x3c>
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	b16b      	cbz	r3, 8007144 <_reclaim_reent+0x30>
 8007128:	2500      	movs	r5, #0
 800712a:	69e3      	ldr	r3, [r4, #28]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	5959      	ldr	r1, [r3, r5]
 8007130:	2900      	cmp	r1, #0
 8007132:	d13b      	bne.n	80071ac <_reclaim_reent+0x98>
 8007134:	3504      	adds	r5, #4
 8007136:	2d80      	cmp	r5, #128	@ 0x80
 8007138:	d1f7      	bne.n	800712a <_reclaim_reent+0x16>
 800713a:	69e3      	ldr	r3, [r4, #28]
 800713c:	4620      	mov	r0, r4
 800713e:	68d9      	ldr	r1, [r3, #12]
 8007140:	f000 f8d6 	bl	80072f0 <_free_r>
 8007144:	69e3      	ldr	r3, [r4, #28]
 8007146:	6819      	ldr	r1, [r3, #0]
 8007148:	b111      	cbz	r1, 8007150 <_reclaim_reent+0x3c>
 800714a:	4620      	mov	r0, r4
 800714c:	f000 f8d0 	bl	80072f0 <_free_r>
 8007150:	6961      	ldr	r1, [r4, #20]
 8007152:	b111      	cbz	r1, 800715a <_reclaim_reent+0x46>
 8007154:	4620      	mov	r0, r4
 8007156:	f000 f8cb 	bl	80072f0 <_free_r>
 800715a:	69e1      	ldr	r1, [r4, #28]
 800715c:	b111      	cbz	r1, 8007164 <_reclaim_reent+0x50>
 800715e:	4620      	mov	r0, r4
 8007160:	f000 f8c6 	bl	80072f0 <_free_r>
 8007164:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007166:	b111      	cbz	r1, 800716e <_reclaim_reent+0x5a>
 8007168:	4620      	mov	r0, r4
 800716a:	f000 f8c1 	bl	80072f0 <_free_r>
 800716e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007170:	b111      	cbz	r1, 8007178 <_reclaim_reent+0x64>
 8007172:	4620      	mov	r0, r4
 8007174:	f000 f8bc 	bl	80072f0 <_free_r>
 8007178:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800717a:	b111      	cbz	r1, 8007182 <_reclaim_reent+0x6e>
 800717c:	4620      	mov	r0, r4
 800717e:	f000 f8b7 	bl	80072f0 <_free_r>
 8007182:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007184:	b111      	cbz	r1, 800718c <_reclaim_reent+0x78>
 8007186:	4620      	mov	r0, r4
 8007188:	f000 f8b2 	bl	80072f0 <_free_r>
 800718c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800718e:	b111      	cbz	r1, 8007196 <_reclaim_reent+0x82>
 8007190:	4620      	mov	r0, r4
 8007192:	f000 f8ad 	bl	80072f0 <_free_r>
 8007196:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007198:	b111      	cbz	r1, 80071a0 <_reclaim_reent+0x8c>
 800719a:	4620      	mov	r0, r4
 800719c:	f000 f8a8 	bl	80072f0 <_free_r>
 80071a0:	6a23      	ldr	r3, [r4, #32]
 80071a2:	b14b      	cbz	r3, 80071b8 <_reclaim_reent+0xa4>
 80071a4:	4620      	mov	r0, r4
 80071a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80071aa:	4718      	bx	r3
 80071ac:	680e      	ldr	r6, [r1, #0]
 80071ae:	4620      	mov	r0, r4
 80071b0:	f000 f89e 	bl	80072f0 <_free_r>
 80071b4:	4631      	mov	r1, r6
 80071b6:	e7bb      	b.n	8007130 <_reclaim_reent+0x1c>
 80071b8:	bd70      	pop	{r4, r5, r6, pc}
 80071ba:	bf00      	nop
 80071bc:	20000034 	.word	0x20000034

080071c0 <_lseek_r>:
 80071c0:	b538      	push	{r3, r4, r5, lr}
 80071c2:	4d07      	ldr	r5, [pc, #28]	@ (80071e0 <_lseek_r+0x20>)
 80071c4:	4604      	mov	r4, r0
 80071c6:	4608      	mov	r0, r1
 80071c8:	4611      	mov	r1, r2
 80071ca:	2200      	movs	r2, #0
 80071cc:	602a      	str	r2, [r5, #0]
 80071ce:	461a      	mov	r2, r3
 80071d0:	f7f9 fef3 	bl	8000fba <_lseek>
 80071d4:	1c43      	adds	r3, r0, #1
 80071d6:	d102      	bne.n	80071de <_lseek_r+0x1e>
 80071d8:	682b      	ldr	r3, [r5, #0]
 80071da:	b103      	cbz	r3, 80071de <_lseek_r+0x1e>
 80071dc:	6023      	str	r3, [r4, #0]
 80071de:	bd38      	pop	{r3, r4, r5, pc}
 80071e0:	20004438 	.word	0x20004438

080071e4 <_read_r>:
 80071e4:	b538      	push	{r3, r4, r5, lr}
 80071e6:	4d07      	ldr	r5, [pc, #28]	@ (8007204 <_read_r+0x20>)
 80071e8:	4604      	mov	r4, r0
 80071ea:	4608      	mov	r0, r1
 80071ec:	4611      	mov	r1, r2
 80071ee:	2200      	movs	r2, #0
 80071f0:	602a      	str	r2, [r5, #0]
 80071f2:	461a      	mov	r2, r3
 80071f4:	f7f9 fe81 	bl	8000efa <_read>
 80071f8:	1c43      	adds	r3, r0, #1
 80071fa:	d102      	bne.n	8007202 <_read_r+0x1e>
 80071fc:	682b      	ldr	r3, [r5, #0]
 80071fe:	b103      	cbz	r3, 8007202 <_read_r+0x1e>
 8007200:	6023      	str	r3, [r4, #0]
 8007202:	bd38      	pop	{r3, r4, r5, pc}
 8007204:	20004438 	.word	0x20004438

08007208 <_write_r>:
 8007208:	b538      	push	{r3, r4, r5, lr}
 800720a:	4d07      	ldr	r5, [pc, #28]	@ (8007228 <_write_r+0x20>)
 800720c:	4604      	mov	r4, r0
 800720e:	4608      	mov	r0, r1
 8007210:	4611      	mov	r1, r2
 8007212:	2200      	movs	r2, #0
 8007214:	602a      	str	r2, [r5, #0]
 8007216:	461a      	mov	r2, r3
 8007218:	f7f9 fe8c 	bl	8000f34 <_write>
 800721c:	1c43      	adds	r3, r0, #1
 800721e:	d102      	bne.n	8007226 <_write_r+0x1e>
 8007220:	682b      	ldr	r3, [r5, #0]
 8007222:	b103      	cbz	r3, 8007226 <_write_r+0x1e>
 8007224:	6023      	str	r3, [r4, #0]
 8007226:	bd38      	pop	{r3, r4, r5, pc}
 8007228:	20004438 	.word	0x20004438

0800722c <__errno>:
 800722c:	4b01      	ldr	r3, [pc, #4]	@ (8007234 <__errno+0x8>)
 800722e:	6818      	ldr	r0, [r3, #0]
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	20000034 	.word	0x20000034

08007238 <__libc_init_array>:
 8007238:	b570      	push	{r4, r5, r6, lr}
 800723a:	4d0d      	ldr	r5, [pc, #52]	@ (8007270 <__libc_init_array+0x38>)
 800723c:	4c0d      	ldr	r4, [pc, #52]	@ (8007274 <__libc_init_array+0x3c>)
 800723e:	1b64      	subs	r4, r4, r5
 8007240:	10a4      	asrs	r4, r4, #2
 8007242:	2600      	movs	r6, #0
 8007244:	42a6      	cmp	r6, r4
 8007246:	d109      	bne.n	800725c <__libc_init_array+0x24>
 8007248:	4d0b      	ldr	r5, [pc, #44]	@ (8007278 <__libc_init_array+0x40>)
 800724a:	4c0c      	ldr	r4, [pc, #48]	@ (800727c <__libc_init_array+0x44>)
 800724c:	f000 ff66 	bl	800811c <_init>
 8007250:	1b64      	subs	r4, r4, r5
 8007252:	10a4      	asrs	r4, r4, #2
 8007254:	2600      	movs	r6, #0
 8007256:	42a6      	cmp	r6, r4
 8007258:	d105      	bne.n	8007266 <__libc_init_array+0x2e>
 800725a:	bd70      	pop	{r4, r5, r6, pc}
 800725c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007260:	4798      	blx	r3
 8007262:	3601      	adds	r6, #1
 8007264:	e7ee      	b.n	8007244 <__libc_init_array+0xc>
 8007266:	f855 3b04 	ldr.w	r3, [r5], #4
 800726a:	4798      	blx	r3
 800726c:	3601      	adds	r6, #1
 800726e:	e7f2      	b.n	8007256 <__libc_init_array+0x1e>
 8007270:	080084f0 	.word	0x080084f0
 8007274:	080084f0 	.word	0x080084f0
 8007278:	080084f0 	.word	0x080084f0
 800727c:	080084f4 	.word	0x080084f4

08007280 <__retarget_lock_init_recursive>:
 8007280:	4770      	bx	lr

08007282 <__retarget_lock_acquire_recursive>:
 8007282:	4770      	bx	lr

08007284 <__retarget_lock_release_recursive>:
 8007284:	4770      	bx	lr

08007286 <strcpy>:
 8007286:	4603      	mov	r3, r0
 8007288:	f811 2b01 	ldrb.w	r2, [r1], #1
 800728c:	f803 2b01 	strb.w	r2, [r3], #1
 8007290:	2a00      	cmp	r2, #0
 8007292:	d1f9      	bne.n	8007288 <strcpy+0x2>
 8007294:	4770      	bx	lr

08007296 <memcpy>:
 8007296:	440a      	add	r2, r1
 8007298:	4291      	cmp	r1, r2
 800729a:	f100 33ff 	add.w	r3, r0, #4294967295
 800729e:	d100      	bne.n	80072a2 <memcpy+0xc>
 80072a0:	4770      	bx	lr
 80072a2:	b510      	push	{r4, lr}
 80072a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072ac:	4291      	cmp	r1, r2
 80072ae:	d1f9      	bne.n	80072a4 <memcpy+0xe>
 80072b0:	bd10      	pop	{r4, pc}
	...

080072b4 <__assert_func>:
 80072b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80072b6:	4614      	mov	r4, r2
 80072b8:	461a      	mov	r2, r3
 80072ba:	4b09      	ldr	r3, [pc, #36]	@ (80072e0 <__assert_func+0x2c>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4605      	mov	r5, r0
 80072c0:	68d8      	ldr	r0, [r3, #12]
 80072c2:	b954      	cbnz	r4, 80072da <__assert_func+0x26>
 80072c4:	4b07      	ldr	r3, [pc, #28]	@ (80072e4 <__assert_func+0x30>)
 80072c6:	461c      	mov	r4, r3
 80072c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80072cc:	9100      	str	r1, [sp, #0]
 80072ce:	462b      	mov	r3, r5
 80072d0:	4905      	ldr	r1, [pc, #20]	@ (80072e8 <__assert_func+0x34>)
 80072d2:	f000 fde1 	bl	8007e98 <fiprintf>
 80072d6:	f000 fe9f 	bl	8008018 <abort>
 80072da:	4b04      	ldr	r3, [pc, #16]	@ (80072ec <__assert_func+0x38>)
 80072dc:	e7f4      	b.n	80072c8 <__assert_func+0x14>
 80072de:	bf00      	nop
 80072e0:	20000034 	.word	0x20000034
 80072e4:	080084b1 	.word	0x080084b1
 80072e8:	08008483 	.word	0x08008483
 80072ec:	08008476 	.word	0x08008476

080072f0 <_free_r>:
 80072f0:	b538      	push	{r3, r4, r5, lr}
 80072f2:	4605      	mov	r5, r0
 80072f4:	2900      	cmp	r1, #0
 80072f6:	d041      	beq.n	800737c <_free_r+0x8c>
 80072f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072fc:	1f0c      	subs	r4, r1, #4
 80072fe:	2b00      	cmp	r3, #0
 8007300:	bfb8      	it	lt
 8007302:	18e4      	addlt	r4, r4, r3
 8007304:	f000 f8e8 	bl	80074d8 <__malloc_lock>
 8007308:	4a1d      	ldr	r2, [pc, #116]	@ (8007380 <_free_r+0x90>)
 800730a:	6813      	ldr	r3, [r2, #0]
 800730c:	b933      	cbnz	r3, 800731c <_free_r+0x2c>
 800730e:	6063      	str	r3, [r4, #4]
 8007310:	6014      	str	r4, [r2, #0]
 8007312:	4628      	mov	r0, r5
 8007314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007318:	f000 b8e4 	b.w	80074e4 <__malloc_unlock>
 800731c:	42a3      	cmp	r3, r4
 800731e:	d908      	bls.n	8007332 <_free_r+0x42>
 8007320:	6820      	ldr	r0, [r4, #0]
 8007322:	1821      	adds	r1, r4, r0
 8007324:	428b      	cmp	r3, r1
 8007326:	bf01      	itttt	eq
 8007328:	6819      	ldreq	r1, [r3, #0]
 800732a:	685b      	ldreq	r3, [r3, #4]
 800732c:	1809      	addeq	r1, r1, r0
 800732e:	6021      	streq	r1, [r4, #0]
 8007330:	e7ed      	b.n	800730e <_free_r+0x1e>
 8007332:	461a      	mov	r2, r3
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	b10b      	cbz	r3, 800733c <_free_r+0x4c>
 8007338:	42a3      	cmp	r3, r4
 800733a:	d9fa      	bls.n	8007332 <_free_r+0x42>
 800733c:	6811      	ldr	r1, [r2, #0]
 800733e:	1850      	adds	r0, r2, r1
 8007340:	42a0      	cmp	r0, r4
 8007342:	d10b      	bne.n	800735c <_free_r+0x6c>
 8007344:	6820      	ldr	r0, [r4, #0]
 8007346:	4401      	add	r1, r0
 8007348:	1850      	adds	r0, r2, r1
 800734a:	4283      	cmp	r3, r0
 800734c:	6011      	str	r1, [r2, #0]
 800734e:	d1e0      	bne.n	8007312 <_free_r+0x22>
 8007350:	6818      	ldr	r0, [r3, #0]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	6053      	str	r3, [r2, #4]
 8007356:	4408      	add	r0, r1
 8007358:	6010      	str	r0, [r2, #0]
 800735a:	e7da      	b.n	8007312 <_free_r+0x22>
 800735c:	d902      	bls.n	8007364 <_free_r+0x74>
 800735e:	230c      	movs	r3, #12
 8007360:	602b      	str	r3, [r5, #0]
 8007362:	e7d6      	b.n	8007312 <_free_r+0x22>
 8007364:	6820      	ldr	r0, [r4, #0]
 8007366:	1821      	adds	r1, r4, r0
 8007368:	428b      	cmp	r3, r1
 800736a:	bf04      	itt	eq
 800736c:	6819      	ldreq	r1, [r3, #0]
 800736e:	685b      	ldreq	r3, [r3, #4]
 8007370:	6063      	str	r3, [r4, #4]
 8007372:	bf04      	itt	eq
 8007374:	1809      	addeq	r1, r1, r0
 8007376:	6021      	streq	r1, [r4, #0]
 8007378:	6054      	str	r4, [r2, #4]
 800737a:	e7ca      	b.n	8007312 <_free_r+0x22>
 800737c:	bd38      	pop	{r3, r4, r5, pc}
 800737e:	bf00      	nop
 8007380:	20004444 	.word	0x20004444

08007384 <malloc>:
 8007384:	4b02      	ldr	r3, [pc, #8]	@ (8007390 <malloc+0xc>)
 8007386:	4601      	mov	r1, r0
 8007388:	6818      	ldr	r0, [r3, #0]
 800738a:	f000 b825 	b.w	80073d8 <_malloc_r>
 800738e:	bf00      	nop
 8007390:	20000034 	.word	0x20000034

08007394 <sbrk_aligned>:
 8007394:	b570      	push	{r4, r5, r6, lr}
 8007396:	4e0f      	ldr	r6, [pc, #60]	@ (80073d4 <sbrk_aligned+0x40>)
 8007398:	460c      	mov	r4, r1
 800739a:	6831      	ldr	r1, [r6, #0]
 800739c:	4605      	mov	r5, r0
 800739e:	b911      	cbnz	r1, 80073a6 <sbrk_aligned+0x12>
 80073a0:	f000 fe2a 	bl	8007ff8 <_sbrk_r>
 80073a4:	6030      	str	r0, [r6, #0]
 80073a6:	4621      	mov	r1, r4
 80073a8:	4628      	mov	r0, r5
 80073aa:	f000 fe25 	bl	8007ff8 <_sbrk_r>
 80073ae:	1c43      	adds	r3, r0, #1
 80073b0:	d103      	bne.n	80073ba <sbrk_aligned+0x26>
 80073b2:	f04f 34ff 	mov.w	r4, #4294967295
 80073b6:	4620      	mov	r0, r4
 80073b8:	bd70      	pop	{r4, r5, r6, pc}
 80073ba:	1cc4      	adds	r4, r0, #3
 80073bc:	f024 0403 	bic.w	r4, r4, #3
 80073c0:	42a0      	cmp	r0, r4
 80073c2:	d0f8      	beq.n	80073b6 <sbrk_aligned+0x22>
 80073c4:	1a21      	subs	r1, r4, r0
 80073c6:	4628      	mov	r0, r5
 80073c8:	f000 fe16 	bl	8007ff8 <_sbrk_r>
 80073cc:	3001      	adds	r0, #1
 80073ce:	d1f2      	bne.n	80073b6 <sbrk_aligned+0x22>
 80073d0:	e7ef      	b.n	80073b2 <sbrk_aligned+0x1e>
 80073d2:	bf00      	nop
 80073d4:	20004440 	.word	0x20004440

080073d8 <_malloc_r>:
 80073d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073dc:	1ccd      	adds	r5, r1, #3
 80073de:	f025 0503 	bic.w	r5, r5, #3
 80073e2:	3508      	adds	r5, #8
 80073e4:	2d0c      	cmp	r5, #12
 80073e6:	bf38      	it	cc
 80073e8:	250c      	movcc	r5, #12
 80073ea:	2d00      	cmp	r5, #0
 80073ec:	4606      	mov	r6, r0
 80073ee:	db01      	blt.n	80073f4 <_malloc_r+0x1c>
 80073f0:	42a9      	cmp	r1, r5
 80073f2:	d904      	bls.n	80073fe <_malloc_r+0x26>
 80073f4:	230c      	movs	r3, #12
 80073f6:	6033      	str	r3, [r6, #0]
 80073f8:	2000      	movs	r0, #0
 80073fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80074d4 <_malloc_r+0xfc>
 8007402:	f000 f869 	bl	80074d8 <__malloc_lock>
 8007406:	f8d8 3000 	ldr.w	r3, [r8]
 800740a:	461c      	mov	r4, r3
 800740c:	bb44      	cbnz	r4, 8007460 <_malloc_r+0x88>
 800740e:	4629      	mov	r1, r5
 8007410:	4630      	mov	r0, r6
 8007412:	f7ff ffbf 	bl	8007394 <sbrk_aligned>
 8007416:	1c43      	adds	r3, r0, #1
 8007418:	4604      	mov	r4, r0
 800741a:	d158      	bne.n	80074ce <_malloc_r+0xf6>
 800741c:	f8d8 4000 	ldr.w	r4, [r8]
 8007420:	4627      	mov	r7, r4
 8007422:	2f00      	cmp	r7, #0
 8007424:	d143      	bne.n	80074ae <_malloc_r+0xd6>
 8007426:	2c00      	cmp	r4, #0
 8007428:	d04b      	beq.n	80074c2 <_malloc_r+0xea>
 800742a:	6823      	ldr	r3, [r4, #0]
 800742c:	4639      	mov	r1, r7
 800742e:	4630      	mov	r0, r6
 8007430:	eb04 0903 	add.w	r9, r4, r3
 8007434:	f000 fde0 	bl	8007ff8 <_sbrk_r>
 8007438:	4581      	cmp	r9, r0
 800743a:	d142      	bne.n	80074c2 <_malloc_r+0xea>
 800743c:	6821      	ldr	r1, [r4, #0]
 800743e:	1a6d      	subs	r5, r5, r1
 8007440:	4629      	mov	r1, r5
 8007442:	4630      	mov	r0, r6
 8007444:	f7ff ffa6 	bl	8007394 <sbrk_aligned>
 8007448:	3001      	adds	r0, #1
 800744a:	d03a      	beq.n	80074c2 <_malloc_r+0xea>
 800744c:	6823      	ldr	r3, [r4, #0]
 800744e:	442b      	add	r3, r5
 8007450:	6023      	str	r3, [r4, #0]
 8007452:	f8d8 3000 	ldr.w	r3, [r8]
 8007456:	685a      	ldr	r2, [r3, #4]
 8007458:	bb62      	cbnz	r2, 80074b4 <_malloc_r+0xdc>
 800745a:	f8c8 7000 	str.w	r7, [r8]
 800745e:	e00f      	b.n	8007480 <_malloc_r+0xa8>
 8007460:	6822      	ldr	r2, [r4, #0]
 8007462:	1b52      	subs	r2, r2, r5
 8007464:	d420      	bmi.n	80074a8 <_malloc_r+0xd0>
 8007466:	2a0b      	cmp	r2, #11
 8007468:	d917      	bls.n	800749a <_malloc_r+0xc2>
 800746a:	1961      	adds	r1, r4, r5
 800746c:	42a3      	cmp	r3, r4
 800746e:	6025      	str	r5, [r4, #0]
 8007470:	bf18      	it	ne
 8007472:	6059      	strne	r1, [r3, #4]
 8007474:	6863      	ldr	r3, [r4, #4]
 8007476:	bf08      	it	eq
 8007478:	f8c8 1000 	streq.w	r1, [r8]
 800747c:	5162      	str	r2, [r4, r5]
 800747e:	604b      	str	r3, [r1, #4]
 8007480:	4630      	mov	r0, r6
 8007482:	f000 f82f 	bl	80074e4 <__malloc_unlock>
 8007486:	f104 000b 	add.w	r0, r4, #11
 800748a:	1d23      	adds	r3, r4, #4
 800748c:	f020 0007 	bic.w	r0, r0, #7
 8007490:	1ac2      	subs	r2, r0, r3
 8007492:	bf1c      	itt	ne
 8007494:	1a1b      	subne	r3, r3, r0
 8007496:	50a3      	strne	r3, [r4, r2]
 8007498:	e7af      	b.n	80073fa <_malloc_r+0x22>
 800749a:	6862      	ldr	r2, [r4, #4]
 800749c:	42a3      	cmp	r3, r4
 800749e:	bf0c      	ite	eq
 80074a0:	f8c8 2000 	streq.w	r2, [r8]
 80074a4:	605a      	strne	r2, [r3, #4]
 80074a6:	e7eb      	b.n	8007480 <_malloc_r+0xa8>
 80074a8:	4623      	mov	r3, r4
 80074aa:	6864      	ldr	r4, [r4, #4]
 80074ac:	e7ae      	b.n	800740c <_malloc_r+0x34>
 80074ae:	463c      	mov	r4, r7
 80074b0:	687f      	ldr	r7, [r7, #4]
 80074b2:	e7b6      	b.n	8007422 <_malloc_r+0x4a>
 80074b4:	461a      	mov	r2, r3
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	42a3      	cmp	r3, r4
 80074ba:	d1fb      	bne.n	80074b4 <_malloc_r+0xdc>
 80074bc:	2300      	movs	r3, #0
 80074be:	6053      	str	r3, [r2, #4]
 80074c0:	e7de      	b.n	8007480 <_malloc_r+0xa8>
 80074c2:	230c      	movs	r3, #12
 80074c4:	6033      	str	r3, [r6, #0]
 80074c6:	4630      	mov	r0, r6
 80074c8:	f000 f80c 	bl	80074e4 <__malloc_unlock>
 80074cc:	e794      	b.n	80073f8 <_malloc_r+0x20>
 80074ce:	6005      	str	r5, [r0, #0]
 80074d0:	e7d6      	b.n	8007480 <_malloc_r+0xa8>
 80074d2:	bf00      	nop
 80074d4:	20004444 	.word	0x20004444

080074d8 <__malloc_lock>:
 80074d8:	4801      	ldr	r0, [pc, #4]	@ (80074e0 <__malloc_lock+0x8>)
 80074da:	f7ff bed2 	b.w	8007282 <__retarget_lock_acquire_recursive>
 80074de:	bf00      	nop
 80074e0:	2000443c 	.word	0x2000443c

080074e4 <__malloc_unlock>:
 80074e4:	4801      	ldr	r0, [pc, #4]	@ (80074ec <__malloc_unlock+0x8>)
 80074e6:	f7ff becd 	b.w	8007284 <__retarget_lock_release_recursive>
 80074ea:	bf00      	nop
 80074ec:	2000443c 	.word	0x2000443c

080074f0 <__ssputs_r>:
 80074f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074f4:	688e      	ldr	r6, [r1, #8]
 80074f6:	461f      	mov	r7, r3
 80074f8:	42be      	cmp	r6, r7
 80074fa:	680b      	ldr	r3, [r1, #0]
 80074fc:	4682      	mov	sl, r0
 80074fe:	460c      	mov	r4, r1
 8007500:	4690      	mov	r8, r2
 8007502:	d82d      	bhi.n	8007560 <__ssputs_r+0x70>
 8007504:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007508:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800750c:	d026      	beq.n	800755c <__ssputs_r+0x6c>
 800750e:	6965      	ldr	r5, [r4, #20]
 8007510:	6909      	ldr	r1, [r1, #16]
 8007512:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007516:	eba3 0901 	sub.w	r9, r3, r1
 800751a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800751e:	1c7b      	adds	r3, r7, #1
 8007520:	444b      	add	r3, r9
 8007522:	106d      	asrs	r5, r5, #1
 8007524:	429d      	cmp	r5, r3
 8007526:	bf38      	it	cc
 8007528:	461d      	movcc	r5, r3
 800752a:	0553      	lsls	r3, r2, #21
 800752c:	d527      	bpl.n	800757e <__ssputs_r+0x8e>
 800752e:	4629      	mov	r1, r5
 8007530:	f7ff ff52 	bl	80073d8 <_malloc_r>
 8007534:	4606      	mov	r6, r0
 8007536:	b360      	cbz	r0, 8007592 <__ssputs_r+0xa2>
 8007538:	6921      	ldr	r1, [r4, #16]
 800753a:	464a      	mov	r2, r9
 800753c:	f7ff feab 	bl	8007296 <memcpy>
 8007540:	89a3      	ldrh	r3, [r4, #12]
 8007542:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007546:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800754a:	81a3      	strh	r3, [r4, #12]
 800754c:	6126      	str	r6, [r4, #16]
 800754e:	6165      	str	r5, [r4, #20]
 8007550:	444e      	add	r6, r9
 8007552:	eba5 0509 	sub.w	r5, r5, r9
 8007556:	6026      	str	r6, [r4, #0]
 8007558:	60a5      	str	r5, [r4, #8]
 800755a:	463e      	mov	r6, r7
 800755c:	42be      	cmp	r6, r7
 800755e:	d900      	bls.n	8007562 <__ssputs_r+0x72>
 8007560:	463e      	mov	r6, r7
 8007562:	6820      	ldr	r0, [r4, #0]
 8007564:	4632      	mov	r2, r6
 8007566:	4641      	mov	r1, r8
 8007568:	f000 fd0a 	bl	8007f80 <memmove>
 800756c:	68a3      	ldr	r3, [r4, #8]
 800756e:	1b9b      	subs	r3, r3, r6
 8007570:	60a3      	str	r3, [r4, #8]
 8007572:	6823      	ldr	r3, [r4, #0]
 8007574:	4433      	add	r3, r6
 8007576:	6023      	str	r3, [r4, #0]
 8007578:	2000      	movs	r0, #0
 800757a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800757e:	462a      	mov	r2, r5
 8007580:	f000 fd51 	bl	8008026 <_realloc_r>
 8007584:	4606      	mov	r6, r0
 8007586:	2800      	cmp	r0, #0
 8007588:	d1e0      	bne.n	800754c <__ssputs_r+0x5c>
 800758a:	6921      	ldr	r1, [r4, #16]
 800758c:	4650      	mov	r0, sl
 800758e:	f7ff feaf 	bl	80072f0 <_free_r>
 8007592:	230c      	movs	r3, #12
 8007594:	f8ca 3000 	str.w	r3, [sl]
 8007598:	89a3      	ldrh	r3, [r4, #12]
 800759a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800759e:	81a3      	strh	r3, [r4, #12]
 80075a0:	f04f 30ff 	mov.w	r0, #4294967295
 80075a4:	e7e9      	b.n	800757a <__ssputs_r+0x8a>
	...

080075a8 <_svfiprintf_r>:
 80075a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ac:	4698      	mov	r8, r3
 80075ae:	898b      	ldrh	r3, [r1, #12]
 80075b0:	061b      	lsls	r3, r3, #24
 80075b2:	b09d      	sub	sp, #116	@ 0x74
 80075b4:	4607      	mov	r7, r0
 80075b6:	460d      	mov	r5, r1
 80075b8:	4614      	mov	r4, r2
 80075ba:	d510      	bpl.n	80075de <_svfiprintf_r+0x36>
 80075bc:	690b      	ldr	r3, [r1, #16]
 80075be:	b973      	cbnz	r3, 80075de <_svfiprintf_r+0x36>
 80075c0:	2140      	movs	r1, #64	@ 0x40
 80075c2:	f7ff ff09 	bl	80073d8 <_malloc_r>
 80075c6:	6028      	str	r0, [r5, #0]
 80075c8:	6128      	str	r0, [r5, #16]
 80075ca:	b930      	cbnz	r0, 80075da <_svfiprintf_r+0x32>
 80075cc:	230c      	movs	r3, #12
 80075ce:	603b      	str	r3, [r7, #0]
 80075d0:	f04f 30ff 	mov.w	r0, #4294967295
 80075d4:	b01d      	add	sp, #116	@ 0x74
 80075d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075da:	2340      	movs	r3, #64	@ 0x40
 80075dc:	616b      	str	r3, [r5, #20]
 80075de:	2300      	movs	r3, #0
 80075e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80075e2:	2320      	movs	r3, #32
 80075e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80075e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80075ec:	2330      	movs	r3, #48	@ 0x30
 80075ee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800778c <_svfiprintf_r+0x1e4>
 80075f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80075f6:	f04f 0901 	mov.w	r9, #1
 80075fa:	4623      	mov	r3, r4
 80075fc:	469a      	mov	sl, r3
 80075fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007602:	b10a      	cbz	r2, 8007608 <_svfiprintf_r+0x60>
 8007604:	2a25      	cmp	r2, #37	@ 0x25
 8007606:	d1f9      	bne.n	80075fc <_svfiprintf_r+0x54>
 8007608:	ebba 0b04 	subs.w	fp, sl, r4
 800760c:	d00b      	beq.n	8007626 <_svfiprintf_r+0x7e>
 800760e:	465b      	mov	r3, fp
 8007610:	4622      	mov	r2, r4
 8007612:	4629      	mov	r1, r5
 8007614:	4638      	mov	r0, r7
 8007616:	f7ff ff6b 	bl	80074f0 <__ssputs_r>
 800761a:	3001      	adds	r0, #1
 800761c:	f000 80a7 	beq.w	800776e <_svfiprintf_r+0x1c6>
 8007620:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007622:	445a      	add	r2, fp
 8007624:	9209      	str	r2, [sp, #36]	@ 0x24
 8007626:	f89a 3000 	ldrb.w	r3, [sl]
 800762a:	2b00      	cmp	r3, #0
 800762c:	f000 809f 	beq.w	800776e <_svfiprintf_r+0x1c6>
 8007630:	2300      	movs	r3, #0
 8007632:	f04f 32ff 	mov.w	r2, #4294967295
 8007636:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800763a:	f10a 0a01 	add.w	sl, sl, #1
 800763e:	9304      	str	r3, [sp, #16]
 8007640:	9307      	str	r3, [sp, #28]
 8007642:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007646:	931a      	str	r3, [sp, #104]	@ 0x68
 8007648:	4654      	mov	r4, sl
 800764a:	2205      	movs	r2, #5
 800764c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007650:	484e      	ldr	r0, [pc, #312]	@ (800778c <_svfiprintf_r+0x1e4>)
 8007652:	f7f8 fddd 	bl	8000210 <memchr>
 8007656:	9a04      	ldr	r2, [sp, #16]
 8007658:	b9d8      	cbnz	r0, 8007692 <_svfiprintf_r+0xea>
 800765a:	06d0      	lsls	r0, r2, #27
 800765c:	bf44      	itt	mi
 800765e:	2320      	movmi	r3, #32
 8007660:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007664:	0711      	lsls	r1, r2, #28
 8007666:	bf44      	itt	mi
 8007668:	232b      	movmi	r3, #43	@ 0x2b
 800766a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800766e:	f89a 3000 	ldrb.w	r3, [sl]
 8007672:	2b2a      	cmp	r3, #42	@ 0x2a
 8007674:	d015      	beq.n	80076a2 <_svfiprintf_r+0xfa>
 8007676:	9a07      	ldr	r2, [sp, #28]
 8007678:	4654      	mov	r4, sl
 800767a:	2000      	movs	r0, #0
 800767c:	f04f 0c0a 	mov.w	ip, #10
 8007680:	4621      	mov	r1, r4
 8007682:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007686:	3b30      	subs	r3, #48	@ 0x30
 8007688:	2b09      	cmp	r3, #9
 800768a:	d94b      	bls.n	8007724 <_svfiprintf_r+0x17c>
 800768c:	b1b0      	cbz	r0, 80076bc <_svfiprintf_r+0x114>
 800768e:	9207      	str	r2, [sp, #28]
 8007690:	e014      	b.n	80076bc <_svfiprintf_r+0x114>
 8007692:	eba0 0308 	sub.w	r3, r0, r8
 8007696:	fa09 f303 	lsl.w	r3, r9, r3
 800769a:	4313      	orrs	r3, r2
 800769c:	9304      	str	r3, [sp, #16]
 800769e:	46a2      	mov	sl, r4
 80076a0:	e7d2      	b.n	8007648 <_svfiprintf_r+0xa0>
 80076a2:	9b03      	ldr	r3, [sp, #12]
 80076a4:	1d19      	adds	r1, r3, #4
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	9103      	str	r1, [sp, #12]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	bfbb      	ittet	lt
 80076ae:	425b      	neglt	r3, r3
 80076b0:	f042 0202 	orrlt.w	r2, r2, #2
 80076b4:	9307      	strge	r3, [sp, #28]
 80076b6:	9307      	strlt	r3, [sp, #28]
 80076b8:	bfb8      	it	lt
 80076ba:	9204      	strlt	r2, [sp, #16]
 80076bc:	7823      	ldrb	r3, [r4, #0]
 80076be:	2b2e      	cmp	r3, #46	@ 0x2e
 80076c0:	d10a      	bne.n	80076d8 <_svfiprintf_r+0x130>
 80076c2:	7863      	ldrb	r3, [r4, #1]
 80076c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80076c6:	d132      	bne.n	800772e <_svfiprintf_r+0x186>
 80076c8:	9b03      	ldr	r3, [sp, #12]
 80076ca:	1d1a      	adds	r2, r3, #4
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	9203      	str	r2, [sp, #12]
 80076d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80076d4:	3402      	adds	r4, #2
 80076d6:	9305      	str	r3, [sp, #20]
 80076d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800779c <_svfiprintf_r+0x1f4>
 80076dc:	7821      	ldrb	r1, [r4, #0]
 80076de:	2203      	movs	r2, #3
 80076e0:	4650      	mov	r0, sl
 80076e2:	f7f8 fd95 	bl	8000210 <memchr>
 80076e6:	b138      	cbz	r0, 80076f8 <_svfiprintf_r+0x150>
 80076e8:	9b04      	ldr	r3, [sp, #16]
 80076ea:	eba0 000a 	sub.w	r0, r0, sl
 80076ee:	2240      	movs	r2, #64	@ 0x40
 80076f0:	4082      	lsls	r2, r0
 80076f2:	4313      	orrs	r3, r2
 80076f4:	3401      	adds	r4, #1
 80076f6:	9304      	str	r3, [sp, #16]
 80076f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076fc:	4824      	ldr	r0, [pc, #144]	@ (8007790 <_svfiprintf_r+0x1e8>)
 80076fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007702:	2206      	movs	r2, #6
 8007704:	f7f8 fd84 	bl	8000210 <memchr>
 8007708:	2800      	cmp	r0, #0
 800770a:	d036      	beq.n	800777a <_svfiprintf_r+0x1d2>
 800770c:	4b21      	ldr	r3, [pc, #132]	@ (8007794 <_svfiprintf_r+0x1ec>)
 800770e:	bb1b      	cbnz	r3, 8007758 <_svfiprintf_r+0x1b0>
 8007710:	9b03      	ldr	r3, [sp, #12]
 8007712:	3307      	adds	r3, #7
 8007714:	f023 0307 	bic.w	r3, r3, #7
 8007718:	3308      	adds	r3, #8
 800771a:	9303      	str	r3, [sp, #12]
 800771c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800771e:	4433      	add	r3, r6
 8007720:	9309      	str	r3, [sp, #36]	@ 0x24
 8007722:	e76a      	b.n	80075fa <_svfiprintf_r+0x52>
 8007724:	fb0c 3202 	mla	r2, ip, r2, r3
 8007728:	460c      	mov	r4, r1
 800772a:	2001      	movs	r0, #1
 800772c:	e7a8      	b.n	8007680 <_svfiprintf_r+0xd8>
 800772e:	2300      	movs	r3, #0
 8007730:	3401      	adds	r4, #1
 8007732:	9305      	str	r3, [sp, #20]
 8007734:	4619      	mov	r1, r3
 8007736:	f04f 0c0a 	mov.w	ip, #10
 800773a:	4620      	mov	r0, r4
 800773c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007740:	3a30      	subs	r2, #48	@ 0x30
 8007742:	2a09      	cmp	r2, #9
 8007744:	d903      	bls.n	800774e <_svfiprintf_r+0x1a6>
 8007746:	2b00      	cmp	r3, #0
 8007748:	d0c6      	beq.n	80076d8 <_svfiprintf_r+0x130>
 800774a:	9105      	str	r1, [sp, #20]
 800774c:	e7c4      	b.n	80076d8 <_svfiprintf_r+0x130>
 800774e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007752:	4604      	mov	r4, r0
 8007754:	2301      	movs	r3, #1
 8007756:	e7f0      	b.n	800773a <_svfiprintf_r+0x192>
 8007758:	ab03      	add	r3, sp, #12
 800775a:	9300      	str	r3, [sp, #0]
 800775c:	462a      	mov	r2, r5
 800775e:	4b0e      	ldr	r3, [pc, #56]	@ (8007798 <_svfiprintf_r+0x1f0>)
 8007760:	a904      	add	r1, sp, #16
 8007762:	4638      	mov	r0, r7
 8007764:	f3af 8000 	nop.w
 8007768:	1c42      	adds	r2, r0, #1
 800776a:	4606      	mov	r6, r0
 800776c:	d1d6      	bne.n	800771c <_svfiprintf_r+0x174>
 800776e:	89ab      	ldrh	r3, [r5, #12]
 8007770:	065b      	lsls	r3, r3, #25
 8007772:	f53f af2d 	bmi.w	80075d0 <_svfiprintf_r+0x28>
 8007776:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007778:	e72c      	b.n	80075d4 <_svfiprintf_r+0x2c>
 800777a:	ab03      	add	r3, sp, #12
 800777c:	9300      	str	r3, [sp, #0]
 800777e:	462a      	mov	r2, r5
 8007780:	4b05      	ldr	r3, [pc, #20]	@ (8007798 <_svfiprintf_r+0x1f0>)
 8007782:	a904      	add	r1, sp, #16
 8007784:	4638      	mov	r0, r7
 8007786:	f000 f9bb 	bl	8007b00 <_printf_i>
 800778a:	e7ed      	b.n	8007768 <_svfiprintf_r+0x1c0>
 800778c:	080084b2 	.word	0x080084b2
 8007790:	080084bc 	.word	0x080084bc
 8007794:	00000000 	.word	0x00000000
 8007798:	080074f1 	.word	0x080074f1
 800779c:	080084b8 	.word	0x080084b8

080077a0 <__sfputc_r>:
 80077a0:	6893      	ldr	r3, [r2, #8]
 80077a2:	3b01      	subs	r3, #1
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	b410      	push	{r4}
 80077a8:	6093      	str	r3, [r2, #8]
 80077aa:	da08      	bge.n	80077be <__sfputc_r+0x1e>
 80077ac:	6994      	ldr	r4, [r2, #24]
 80077ae:	42a3      	cmp	r3, r4
 80077b0:	db01      	blt.n	80077b6 <__sfputc_r+0x16>
 80077b2:	290a      	cmp	r1, #10
 80077b4:	d103      	bne.n	80077be <__sfputc_r+0x1e>
 80077b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077ba:	f7ff bba2 	b.w	8006f02 <__swbuf_r>
 80077be:	6813      	ldr	r3, [r2, #0]
 80077c0:	1c58      	adds	r0, r3, #1
 80077c2:	6010      	str	r0, [r2, #0]
 80077c4:	7019      	strb	r1, [r3, #0]
 80077c6:	4608      	mov	r0, r1
 80077c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077cc:	4770      	bx	lr

080077ce <__sfputs_r>:
 80077ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077d0:	4606      	mov	r6, r0
 80077d2:	460f      	mov	r7, r1
 80077d4:	4614      	mov	r4, r2
 80077d6:	18d5      	adds	r5, r2, r3
 80077d8:	42ac      	cmp	r4, r5
 80077da:	d101      	bne.n	80077e0 <__sfputs_r+0x12>
 80077dc:	2000      	movs	r0, #0
 80077de:	e007      	b.n	80077f0 <__sfputs_r+0x22>
 80077e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077e4:	463a      	mov	r2, r7
 80077e6:	4630      	mov	r0, r6
 80077e8:	f7ff ffda 	bl	80077a0 <__sfputc_r>
 80077ec:	1c43      	adds	r3, r0, #1
 80077ee:	d1f3      	bne.n	80077d8 <__sfputs_r+0xa>
 80077f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080077f4 <_vfiprintf_r>:
 80077f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f8:	460d      	mov	r5, r1
 80077fa:	b09d      	sub	sp, #116	@ 0x74
 80077fc:	4614      	mov	r4, r2
 80077fe:	4698      	mov	r8, r3
 8007800:	4606      	mov	r6, r0
 8007802:	b118      	cbz	r0, 800780c <_vfiprintf_r+0x18>
 8007804:	6a03      	ldr	r3, [r0, #32]
 8007806:	b90b      	cbnz	r3, 800780c <_vfiprintf_r+0x18>
 8007808:	f7ff fa72 	bl	8006cf0 <__sinit>
 800780c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800780e:	07d9      	lsls	r1, r3, #31
 8007810:	d405      	bmi.n	800781e <_vfiprintf_r+0x2a>
 8007812:	89ab      	ldrh	r3, [r5, #12]
 8007814:	059a      	lsls	r2, r3, #22
 8007816:	d402      	bmi.n	800781e <_vfiprintf_r+0x2a>
 8007818:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800781a:	f7ff fd32 	bl	8007282 <__retarget_lock_acquire_recursive>
 800781e:	89ab      	ldrh	r3, [r5, #12]
 8007820:	071b      	lsls	r3, r3, #28
 8007822:	d501      	bpl.n	8007828 <_vfiprintf_r+0x34>
 8007824:	692b      	ldr	r3, [r5, #16]
 8007826:	b99b      	cbnz	r3, 8007850 <_vfiprintf_r+0x5c>
 8007828:	4629      	mov	r1, r5
 800782a:	4630      	mov	r0, r6
 800782c:	f7ff fba8 	bl	8006f80 <__swsetup_r>
 8007830:	b170      	cbz	r0, 8007850 <_vfiprintf_r+0x5c>
 8007832:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007834:	07dc      	lsls	r4, r3, #31
 8007836:	d504      	bpl.n	8007842 <_vfiprintf_r+0x4e>
 8007838:	f04f 30ff 	mov.w	r0, #4294967295
 800783c:	b01d      	add	sp, #116	@ 0x74
 800783e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007842:	89ab      	ldrh	r3, [r5, #12]
 8007844:	0598      	lsls	r0, r3, #22
 8007846:	d4f7      	bmi.n	8007838 <_vfiprintf_r+0x44>
 8007848:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800784a:	f7ff fd1b 	bl	8007284 <__retarget_lock_release_recursive>
 800784e:	e7f3      	b.n	8007838 <_vfiprintf_r+0x44>
 8007850:	2300      	movs	r3, #0
 8007852:	9309      	str	r3, [sp, #36]	@ 0x24
 8007854:	2320      	movs	r3, #32
 8007856:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800785a:	f8cd 800c 	str.w	r8, [sp, #12]
 800785e:	2330      	movs	r3, #48	@ 0x30
 8007860:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007a10 <_vfiprintf_r+0x21c>
 8007864:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007868:	f04f 0901 	mov.w	r9, #1
 800786c:	4623      	mov	r3, r4
 800786e:	469a      	mov	sl, r3
 8007870:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007874:	b10a      	cbz	r2, 800787a <_vfiprintf_r+0x86>
 8007876:	2a25      	cmp	r2, #37	@ 0x25
 8007878:	d1f9      	bne.n	800786e <_vfiprintf_r+0x7a>
 800787a:	ebba 0b04 	subs.w	fp, sl, r4
 800787e:	d00b      	beq.n	8007898 <_vfiprintf_r+0xa4>
 8007880:	465b      	mov	r3, fp
 8007882:	4622      	mov	r2, r4
 8007884:	4629      	mov	r1, r5
 8007886:	4630      	mov	r0, r6
 8007888:	f7ff ffa1 	bl	80077ce <__sfputs_r>
 800788c:	3001      	adds	r0, #1
 800788e:	f000 80a7 	beq.w	80079e0 <_vfiprintf_r+0x1ec>
 8007892:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007894:	445a      	add	r2, fp
 8007896:	9209      	str	r2, [sp, #36]	@ 0x24
 8007898:	f89a 3000 	ldrb.w	r3, [sl]
 800789c:	2b00      	cmp	r3, #0
 800789e:	f000 809f 	beq.w	80079e0 <_vfiprintf_r+0x1ec>
 80078a2:	2300      	movs	r3, #0
 80078a4:	f04f 32ff 	mov.w	r2, #4294967295
 80078a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078ac:	f10a 0a01 	add.w	sl, sl, #1
 80078b0:	9304      	str	r3, [sp, #16]
 80078b2:	9307      	str	r3, [sp, #28]
 80078b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80078b8:	931a      	str	r3, [sp, #104]	@ 0x68
 80078ba:	4654      	mov	r4, sl
 80078bc:	2205      	movs	r2, #5
 80078be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078c2:	4853      	ldr	r0, [pc, #332]	@ (8007a10 <_vfiprintf_r+0x21c>)
 80078c4:	f7f8 fca4 	bl	8000210 <memchr>
 80078c8:	9a04      	ldr	r2, [sp, #16]
 80078ca:	b9d8      	cbnz	r0, 8007904 <_vfiprintf_r+0x110>
 80078cc:	06d1      	lsls	r1, r2, #27
 80078ce:	bf44      	itt	mi
 80078d0:	2320      	movmi	r3, #32
 80078d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80078d6:	0713      	lsls	r3, r2, #28
 80078d8:	bf44      	itt	mi
 80078da:	232b      	movmi	r3, #43	@ 0x2b
 80078dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80078e0:	f89a 3000 	ldrb.w	r3, [sl]
 80078e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80078e6:	d015      	beq.n	8007914 <_vfiprintf_r+0x120>
 80078e8:	9a07      	ldr	r2, [sp, #28]
 80078ea:	4654      	mov	r4, sl
 80078ec:	2000      	movs	r0, #0
 80078ee:	f04f 0c0a 	mov.w	ip, #10
 80078f2:	4621      	mov	r1, r4
 80078f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078f8:	3b30      	subs	r3, #48	@ 0x30
 80078fa:	2b09      	cmp	r3, #9
 80078fc:	d94b      	bls.n	8007996 <_vfiprintf_r+0x1a2>
 80078fe:	b1b0      	cbz	r0, 800792e <_vfiprintf_r+0x13a>
 8007900:	9207      	str	r2, [sp, #28]
 8007902:	e014      	b.n	800792e <_vfiprintf_r+0x13a>
 8007904:	eba0 0308 	sub.w	r3, r0, r8
 8007908:	fa09 f303 	lsl.w	r3, r9, r3
 800790c:	4313      	orrs	r3, r2
 800790e:	9304      	str	r3, [sp, #16]
 8007910:	46a2      	mov	sl, r4
 8007912:	e7d2      	b.n	80078ba <_vfiprintf_r+0xc6>
 8007914:	9b03      	ldr	r3, [sp, #12]
 8007916:	1d19      	adds	r1, r3, #4
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	9103      	str	r1, [sp, #12]
 800791c:	2b00      	cmp	r3, #0
 800791e:	bfbb      	ittet	lt
 8007920:	425b      	neglt	r3, r3
 8007922:	f042 0202 	orrlt.w	r2, r2, #2
 8007926:	9307      	strge	r3, [sp, #28]
 8007928:	9307      	strlt	r3, [sp, #28]
 800792a:	bfb8      	it	lt
 800792c:	9204      	strlt	r2, [sp, #16]
 800792e:	7823      	ldrb	r3, [r4, #0]
 8007930:	2b2e      	cmp	r3, #46	@ 0x2e
 8007932:	d10a      	bne.n	800794a <_vfiprintf_r+0x156>
 8007934:	7863      	ldrb	r3, [r4, #1]
 8007936:	2b2a      	cmp	r3, #42	@ 0x2a
 8007938:	d132      	bne.n	80079a0 <_vfiprintf_r+0x1ac>
 800793a:	9b03      	ldr	r3, [sp, #12]
 800793c:	1d1a      	adds	r2, r3, #4
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	9203      	str	r2, [sp, #12]
 8007942:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007946:	3402      	adds	r4, #2
 8007948:	9305      	str	r3, [sp, #20]
 800794a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007a20 <_vfiprintf_r+0x22c>
 800794e:	7821      	ldrb	r1, [r4, #0]
 8007950:	2203      	movs	r2, #3
 8007952:	4650      	mov	r0, sl
 8007954:	f7f8 fc5c 	bl	8000210 <memchr>
 8007958:	b138      	cbz	r0, 800796a <_vfiprintf_r+0x176>
 800795a:	9b04      	ldr	r3, [sp, #16]
 800795c:	eba0 000a 	sub.w	r0, r0, sl
 8007960:	2240      	movs	r2, #64	@ 0x40
 8007962:	4082      	lsls	r2, r0
 8007964:	4313      	orrs	r3, r2
 8007966:	3401      	adds	r4, #1
 8007968:	9304      	str	r3, [sp, #16]
 800796a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800796e:	4829      	ldr	r0, [pc, #164]	@ (8007a14 <_vfiprintf_r+0x220>)
 8007970:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007974:	2206      	movs	r2, #6
 8007976:	f7f8 fc4b 	bl	8000210 <memchr>
 800797a:	2800      	cmp	r0, #0
 800797c:	d03f      	beq.n	80079fe <_vfiprintf_r+0x20a>
 800797e:	4b26      	ldr	r3, [pc, #152]	@ (8007a18 <_vfiprintf_r+0x224>)
 8007980:	bb1b      	cbnz	r3, 80079ca <_vfiprintf_r+0x1d6>
 8007982:	9b03      	ldr	r3, [sp, #12]
 8007984:	3307      	adds	r3, #7
 8007986:	f023 0307 	bic.w	r3, r3, #7
 800798a:	3308      	adds	r3, #8
 800798c:	9303      	str	r3, [sp, #12]
 800798e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007990:	443b      	add	r3, r7
 8007992:	9309      	str	r3, [sp, #36]	@ 0x24
 8007994:	e76a      	b.n	800786c <_vfiprintf_r+0x78>
 8007996:	fb0c 3202 	mla	r2, ip, r2, r3
 800799a:	460c      	mov	r4, r1
 800799c:	2001      	movs	r0, #1
 800799e:	e7a8      	b.n	80078f2 <_vfiprintf_r+0xfe>
 80079a0:	2300      	movs	r3, #0
 80079a2:	3401      	adds	r4, #1
 80079a4:	9305      	str	r3, [sp, #20]
 80079a6:	4619      	mov	r1, r3
 80079a8:	f04f 0c0a 	mov.w	ip, #10
 80079ac:	4620      	mov	r0, r4
 80079ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079b2:	3a30      	subs	r2, #48	@ 0x30
 80079b4:	2a09      	cmp	r2, #9
 80079b6:	d903      	bls.n	80079c0 <_vfiprintf_r+0x1cc>
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d0c6      	beq.n	800794a <_vfiprintf_r+0x156>
 80079bc:	9105      	str	r1, [sp, #20]
 80079be:	e7c4      	b.n	800794a <_vfiprintf_r+0x156>
 80079c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80079c4:	4604      	mov	r4, r0
 80079c6:	2301      	movs	r3, #1
 80079c8:	e7f0      	b.n	80079ac <_vfiprintf_r+0x1b8>
 80079ca:	ab03      	add	r3, sp, #12
 80079cc:	9300      	str	r3, [sp, #0]
 80079ce:	462a      	mov	r2, r5
 80079d0:	4b12      	ldr	r3, [pc, #72]	@ (8007a1c <_vfiprintf_r+0x228>)
 80079d2:	a904      	add	r1, sp, #16
 80079d4:	4630      	mov	r0, r6
 80079d6:	f3af 8000 	nop.w
 80079da:	4607      	mov	r7, r0
 80079dc:	1c78      	adds	r0, r7, #1
 80079de:	d1d6      	bne.n	800798e <_vfiprintf_r+0x19a>
 80079e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80079e2:	07d9      	lsls	r1, r3, #31
 80079e4:	d405      	bmi.n	80079f2 <_vfiprintf_r+0x1fe>
 80079e6:	89ab      	ldrh	r3, [r5, #12]
 80079e8:	059a      	lsls	r2, r3, #22
 80079ea:	d402      	bmi.n	80079f2 <_vfiprintf_r+0x1fe>
 80079ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80079ee:	f7ff fc49 	bl	8007284 <__retarget_lock_release_recursive>
 80079f2:	89ab      	ldrh	r3, [r5, #12]
 80079f4:	065b      	lsls	r3, r3, #25
 80079f6:	f53f af1f 	bmi.w	8007838 <_vfiprintf_r+0x44>
 80079fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80079fc:	e71e      	b.n	800783c <_vfiprintf_r+0x48>
 80079fe:	ab03      	add	r3, sp, #12
 8007a00:	9300      	str	r3, [sp, #0]
 8007a02:	462a      	mov	r2, r5
 8007a04:	4b05      	ldr	r3, [pc, #20]	@ (8007a1c <_vfiprintf_r+0x228>)
 8007a06:	a904      	add	r1, sp, #16
 8007a08:	4630      	mov	r0, r6
 8007a0a:	f000 f879 	bl	8007b00 <_printf_i>
 8007a0e:	e7e4      	b.n	80079da <_vfiprintf_r+0x1e6>
 8007a10:	080084b2 	.word	0x080084b2
 8007a14:	080084bc 	.word	0x080084bc
 8007a18:	00000000 	.word	0x00000000
 8007a1c:	080077cf 	.word	0x080077cf
 8007a20:	080084b8 	.word	0x080084b8

08007a24 <_printf_common>:
 8007a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a28:	4616      	mov	r6, r2
 8007a2a:	4698      	mov	r8, r3
 8007a2c:	688a      	ldr	r2, [r1, #8]
 8007a2e:	690b      	ldr	r3, [r1, #16]
 8007a30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a34:	4293      	cmp	r3, r2
 8007a36:	bfb8      	it	lt
 8007a38:	4613      	movlt	r3, r2
 8007a3a:	6033      	str	r3, [r6, #0]
 8007a3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007a40:	4607      	mov	r7, r0
 8007a42:	460c      	mov	r4, r1
 8007a44:	b10a      	cbz	r2, 8007a4a <_printf_common+0x26>
 8007a46:	3301      	adds	r3, #1
 8007a48:	6033      	str	r3, [r6, #0]
 8007a4a:	6823      	ldr	r3, [r4, #0]
 8007a4c:	0699      	lsls	r1, r3, #26
 8007a4e:	bf42      	ittt	mi
 8007a50:	6833      	ldrmi	r3, [r6, #0]
 8007a52:	3302      	addmi	r3, #2
 8007a54:	6033      	strmi	r3, [r6, #0]
 8007a56:	6825      	ldr	r5, [r4, #0]
 8007a58:	f015 0506 	ands.w	r5, r5, #6
 8007a5c:	d106      	bne.n	8007a6c <_printf_common+0x48>
 8007a5e:	f104 0a19 	add.w	sl, r4, #25
 8007a62:	68e3      	ldr	r3, [r4, #12]
 8007a64:	6832      	ldr	r2, [r6, #0]
 8007a66:	1a9b      	subs	r3, r3, r2
 8007a68:	42ab      	cmp	r3, r5
 8007a6a:	dc26      	bgt.n	8007aba <_printf_common+0x96>
 8007a6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007a70:	6822      	ldr	r2, [r4, #0]
 8007a72:	3b00      	subs	r3, #0
 8007a74:	bf18      	it	ne
 8007a76:	2301      	movne	r3, #1
 8007a78:	0692      	lsls	r2, r2, #26
 8007a7a:	d42b      	bmi.n	8007ad4 <_printf_common+0xb0>
 8007a7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007a80:	4641      	mov	r1, r8
 8007a82:	4638      	mov	r0, r7
 8007a84:	47c8      	blx	r9
 8007a86:	3001      	adds	r0, #1
 8007a88:	d01e      	beq.n	8007ac8 <_printf_common+0xa4>
 8007a8a:	6823      	ldr	r3, [r4, #0]
 8007a8c:	6922      	ldr	r2, [r4, #16]
 8007a8e:	f003 0306 	and.w	r3, r3, #6
 8007a92:	2b04      	cmp	r3, #4
 8007a94:	bf02      	ittt	eq
 8007a96:	68e5      	ldreq	r5, [r4, #12]
 8007a98:	6833      	ldreq	r3, [r6, #0]
 8007a9a:	1aed      	subeq	r5, r5, r3
 8007a9c:	68a3      	ldr	r3, [r4, #8]
 8007a9e:	bf0c      	ite	eq
 8007aa0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007aa4:	2500      	movne	r5, #0
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	bfc4      	itt	gt
 8007aaa:	1a9b      	subgt	r3, r3, r2
 8007aac:	18ed      	addgt	r5, r5, r3
 8007aae:	2600      	movs	r6, #0
 8007ab0:	341a      	adds	r4, #26
 8007ab2:	42b5      	cmp	r5, r6
 8007ab4:	d11a      	bne.n	8007aec <_printf_common+0xc8>
 8007ab6:	2000      	movs	r0, #0
 8007ab8:	e008      	b.n	8007acc <_printf_common+0xa8>
 8007aba:	2301      	movs	r3, #1
 8007abc:	4652      	mov	r2, sl
 8007abe:	4641      	mov	r1, r8
 8007ac0:	4638      	mov	r0, r7
 8007ac2:	47c8      	blx	r9
 8007ac4:	3001      	adds	r0, #1
 8007ac6:	d103      	bne.n	8007ad0 <_printf_common+0xac>
 8007ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8007acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ad0:	3501      	adds	r5, #1
 8007ad2:	e7c6      	b.n	8007a62 <_printf_common+0x3e>
 8007ad4:	18e1      	adds	r1, r4, r3
 8007ad6:	1c5a      	adds	r2, r3, #1
 8007ad8:	2030      	movs	r0, #48	@ 0x30
 8007ada:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007ade:	4422      	add	r2, r4
 8007ae0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007ae4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007ae8:	3302      	adds	r3, #2
 8007aea:	e7c7      	b.n	8007a7c <_printf_common+0x58>
 8007aec:	2301      	movs	r3, #1
 8007aee:	4622      	mov	r2, r4
 8007af0:	4641      	mov	r1, r8
 8007af2:	4638      	mov	r0, r7
 8007af4:	47c8      	blx	r9
 8007af6:	3001      	adds	r0, #1
 8007af8:	d0e6      	beq.n	8007ac8 <_printf_common+0xa4>
 8007afa:	3601      	adds	r6, #1
 8007afc:	e7d9      	b.n	8007ab2 <_printf_common+0x8e>
	...

08007b00 <_printf_i>:
 8007b00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b04:	7e0f      	ldrb	r7, [r1, #24]
 8007b06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007b08:	2f78      	cmp	r7, #120	@ 0x78
 8007b0a:	4691      	mov	r9, r2
 8007b0c:	4680      	mov	r8, r0
 8007b0e:	460c      	mov	r4, r1
 8007b10:	469a      	mov	sl, r3
 8007b12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007b16:	d807      	bhi.n	8007b28 <_printf_i+0x28>
 8007b18:	2f62      	cmp	r7, #98	@ 0x62
 8007b1a:	d80a      	bhi.n	8007b32 <_printf_i+0x32>
 8007b1c:	2f00      	cmp	r7, #0
 8007b1e:	f000 80d2 	beq.w	8007cc6 <_printf_i+0x1c6>
 8007b22:	2f58      	cmp	r7, #88	@ 0x58
 8007b24:	f000 80b9 	beq.w	8007c9a <_printf_i+0x19a>
 8007b28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007b30:	e03a      	b.n	8007ba8 <_printf_i+0xa8>
 8007b32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007b36:	2b15      	cmp	r3, #21
 8007b38:	d8f6      	bhi.n	8007b28 <_printf_i+0x28>
 8007b3a:	a101      	add	r1, pc, #4	@ (adr r1, 8007b40 <_printf_i+0x40>)
 8007b3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b40:	08007b99 	.word	0x08007b99
 8007b44:	08007bad 	.word	0x08007bad
 8007b48:	08007b29 	.word	0x08007b29
 8007b4c:	08007b29 	.word	0x08007b29
 8007b50:	08007b29 	.word	0x08007b29
 8007b54:	08007b29 	.word	0x08007b29
 8007b58:	08007bad 	.word	0x08007bad
 8007b5c:	08007b29 	.word	0x08007b29
 8007b60:	08007b29 	.word	0x08007b29
 8007b64:	08007b29 	.word	0x08007b29
 8007b68:	08007b29 	.word	0x08007b29
 8007b6c:	08007cad 	.word	0x08007cad
 8007b70:	08007bd7 	.word	0x08007bd7
 8007b74:	08007c67 	.word	0x08007c67
 8007b78:	08007b29 	.word	0x08007b29
 8007b7c:	08007b29 	.word	0x08007b29
 8007b80:	08007ccf 	.word	0x08007ccf
 8007b84:	08007b29 	.word	0x08007b29
 8007b88:	08007bd7 	.word	0x08007bd7
 8007b8c:	08007b29 	.word	0x08007b29
 8007b90:	08007b29 	.word	0x08007b29
 8007b94:	08007c6f 	.word	0x08007c6f
 8007b98:	6833      	ldr	r3, [r6, #0]
 8007b9a:	1d1a      	adds	r2, r3, #4
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	6032      	str	r2, [r6, #0]
 8007ba0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ba4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e09d      	b.n	8007ce8 <_printf_i+0x1e8>
 8007bac:	6833      	ldr	r3, [r6, #0]
 8007bae:	6820      	ldr	r0, [r4, #0]
 8007bb0:	1d19      	adds	r1, r3, #4
 8007bb2:	6031      	str	r1, [r6, #0]
 8007bb4:	0606      	lsls	r6, r0, #24
 8007bb6:	d501      	bpl.n	8007bbc <_printf_i+0xbc>
 8007bb8:	681d      	ldr	r5, [r3, #0]
 8007bba:	e003      	b.n	8007bc4 <_printf_i+0xc4>
 8007bbc:	0645      	lsls	r5, r0, #25
 8007bbe:	d5fb      	bpl.n	8007bb8 <_printf_i+0xb8>
 8007bc0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007bc4:	2d00      	cmp	r5, #0
 8007bc6:	da03      	bge.n	8007bd0 <_printf_i+0xd0>
 8007bc8:	232d      	movs	r3, #45	@ 0x2d
 8007bca:	426d      	negs	r5, r5
 8007bcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bd0:	4859      	ldr	r0, [pc, #356]	@ (8007d38 <_printf_i+0x238>)
 8007bd2:	230a      	movs	r3, #10
 8007bd4:	e011      	b.n	8007bfa <_printf_i+0xfa>
 8007bd6:	6821      	ldr	r1, [r4, #0]
 8007bd8:	6833      	ldr	r3, [r6, #0]
 8007bda:	0608      	lsls	r0, r1, #24
 8007bdc:	f853 5b04 	ldr.w	r5, [r3], #4
 8007be0:	d402      	bmi.n	8007be8 <_printf_i+0xe8>
 8007be2:	0649      	lsls	r1, r1, #25
 8007be4:	bf48      	it	mi
 8007be6:	b2ad      	uxthmi	r5, r5
 8007be8:	2f6f      	cmp	r7, #111	@ 0x6f
 8007bea:	4853      	ldr	r0, [pc, #332]	@ (8007d38 <_printf_i+0x238>)
 8007bec:	6033      	str	r3, [r6, #0]
 8007bee:	bf14      	ite	ne
 8007bf0:	230a      	movne	r3, #10
 8007bf2:	2308      	moveq	r3, #8
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007bfa:	6866      	ldr	r6, [r4, #4]
 8007bfc:	60a6      	str	r6, [r4, #8]
 8007bfe:	2e00      	cmp	r6, #0
 8007c00:	bfa2      	ittt	ge
 8007c02:	6821      	ldrge	r1, [r4, #0]
 8007c04:	f021 0104 	bicge.w	r1, r1, #4
 8007c08:	6021      	strge	r1, [r4, #0]
 8007c0a:	b90d      	cbnz	r5, 8007c10 <_printf_i+0x110>
 8007c0c:	2e00      	cmp	r6, #0
 8007c0e:	d04b      	beq.n	8007ca8 <_printf_i+0x1a8>
 8007c10:	4616      	mov	r6, r2
 8007c12:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c16:	fb03 5711 	mls	r7, r3, r1, r5
 8007c1a:	5dc7      	ldrb	r7, [r0, r7]
 8007c1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c20:	462f      	mov	r7, r5
 8007c22:	42bb      	cmp	r3, r7
 8007c24:	460d      	mov	r5, r1
 8007c26:	d9f4      	bls.n	8007c12 <_printf_i+0x112>
 8007c28:	2b08      	cmp	r3, #8
 8007c2a:	d10b      	bne.n	8007c44 <_printf_i+0x144>
 8007c2c:	6823      	ldr	r3, [r4, #0]
 8007c2e:	07df      	lsls	r7, r3, #31
 8007c30:	d508      	bpl.n	8007c44 <_printf_i+0x144>
 8007c32:	6923      	ldr	r3, [r4, #16]
 8007c34:	6861      	ldr	r1, [r4, #4]
 8007c36:	4299      	cmp	r1, r3
 8007c38:	bfde      	ittt	le
 8007c3a:	2330      	movle	r3, #48	@ 0x30
 8007c3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c40:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c44:	1b92      	subs	r2, r2, r6
 8007c46:	6122      	str	r2, [r4, #16]
 8007c48:	f8cd a000 	str.w	sl, [sp]
 8007c4c:	464b      	mov	r3, r9
 8007c4e:	aa03      	add	r2, sp, #12
 8007c50:	4621      	mov	r1, r4
 8007c52:	4640      	mov	r0, r8
 8007c54:	f7ff fee6 	bl	8007a24 <_printf_common>
 8007c58:	3001      	adds	r0, #1
 8007c5a:	d14a      	bne.n	8007cf2 <_printf_i+0x1f2>
 8007c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c60:	b004      	add	sp, #16
 8007c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c66:	6823      	ldr	r3, [r4, #0]
 8007c68:	f043 0320 	orr.w	r3, r3, #32
 8007c6c:	6023      	str	r3, [r4, #0]
 8007c6e:	4833      	ldr	r0, [pc, #204]	@ (8007d3c <_printf_i+0x23c>)
 8007c70:	2778      	movs	r7, #120	@ 0x78
 8007c72:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007c76:	6823      	ldr	r3, [r4, #0]
 8007c78:	6831      	ldr	r1, [r6, #0]
 8007c7a:	061f      	lsls	r7, r3, #24
 8007c7c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007c80:	d402      	bmi.n	8007c88 <_printf_i+0x188>
 8007c82:	065f      	lsls	r7, r3, #25
 8007c84:	bf48      	it	mi
 8007c86:	b2ad      	uxthmi	r5, r5
 8007c88:	6031      	str	r1, [r6, #0]
 8007c8a:	07d9      	lsls	r1, r3, #31
 8007c8c:	bf44      	itt	mi
 8007c8e:	f043 0320 	orrmi.w	r3, r3, #32
 8007c92:	6023      	strmi	r3, [r4, #0]
 8007c94:	b11d      	cbz	r5, 8007c9e <_printf_i+0x19e>
 8007c96:	2310      	movs	r3, #16
 8007c98:	e7ac      	b.n	8007bf4 <_printf_i+0xf4>
 8007c9a:	4827      	ldr	r0, [pc, #156]	@ (8007d38 <_printf_i+0x238>)
 8007c9c:	e7e9      	b.n	8007c72 <_printf_i+0x172>
 8007c9e:	6823      	ldr	r3, [r4, #0]
 8007ca0:	f023 0320 	bic.w	r3, r3, #32
 8007ca4:	6023      	str	r3, [r4, #0]
 8007ca6:	e7f6      	b.n	8007c96 <_printf_i+0x196>
 8007ca8:	4616      	mov	r6, r2
 8007caa:	e7bd      	b.n	8007c28 <_printf_i+0x128>
 8007cac:	6833      	ldr	r3, [r6, #0]
 8007cae:	6825      	ldr	r5, [r4, #0]
 8007cb0:	6961      	ldr	r1, [r4, #20]
 8007cb2:	1d18      	adds	r0, r3, #4
 8007cb4:	6030      	str	r0, [r6, #0]
 8007cb6:	062e      	lsls	r6, r5, #24
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	d501      	bpl.n	8007cc0 <_printf_i+0x1c0>
 8007cbc:	6019      	str	r1, [r3, #0]
 8007cbe:	e002      	b.n	8007cc6 <_printf_i+0x1c6>
 8007cc0:	0668      	lsls	r0, r5, #25
 8007cc2:	d5fb      	bpl.n	8007cbc <_printf_i+0x1bc>
 8007cc4:	8019      	strh	r1, [r3, #0]
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	6123      	str	r3, [r4, #16]
 8007cca:	4616      	mov	r6, r2
 8007ccc:	e7bc      	b.n	8007c48 <_printf_i+0x148>
 8007cce:	6833      	ldr	r3, [r6, #0]
 8007cd0:	1d1a      	adds	r2, r3, #4
 8007cd2:	6032      	str	r2, [r6, #0]
 8007cd4:	681e      	ldr	r6, [r3, #0]
 8007cd6:	6862      	ldr	r2, [r4, #4]
 8007cd8:	2100      	movs	r1, #0
 8007cda:	4630      	mov	r0, r6
 8007cdc:	f7f8 fa98 	bl	8000210 <memchr>
 8007ce0:	b108      	cbz	r0, 8007ce6 <_printf_i+0x1e6>
 8007ce2:	1b80      	subs	r0, r0, r6
 8007ce4:	6060      	str	r0, [r4, #4]
 8007ce6:	6863      	ldr	r3, [r4, #4]
 8007ce8:	6123      	str	r3, [r4, #16]
 8007cea:	2300      	movs	r3, #0
 8007cec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007cf0:	e7aa      	b.n	8007c48 <_printf_i+0x148>
 8007cf2:	6923      	ldr	r3, [r4, #16]
 8007cf4:	4632      	mov	r2, r6
 8007cf6:	4649      	mov	r1, r9
 8007cf8:	4640      	mov	r0, r8
 8007cfa:	47d0      	blx	sl
 8007cfc:	3001      	adds	r0, #1
 8007cfe:	d0ad      	beq.n	8007c5c <_printf_i+0x15c>
 8007d00:	6823      	ldr	r3, [r4, #0]
 8007d02:	079b      	lsls	r3, r3, #30
 8007d04:	d413      	bmi.n	8007d2e <_printf_i+0x22e>
 8007d06:	68e0      	ldr	r0, [r4, #12]
 8007d08:	9b03      	ldr	r3, [sp, #12]
 8007d0a:	4298      	cmp	r0, r3
 8007d0c:	bfb8      	it	lt
 8007d0e:	4618      	movlt	r0, r3
 8007d10:	e7a6      	b.n	8007c60 <_printf_i+0x160>
 8007d12:	2301      	movs	r3, #1
 8007d14:	4632      	mov	r2, r6
 8007d16:	4649      	mov	r1, r9
 8007d18:	4640      	mov	r0, r8
 8007d1a:	47d0      	blx	sl
 8007d1c:	3001      	adds	r0, #1
 8007d1e:	d09d      	beq.n	8007c5c <_printf_i+0x15c>
 8007d20:	3501      	adds	r5, #1
 8007d22:	68e3      	ldr	r3, [r4, #12]
 8007d24:	9903      	ldr	r1, [sp, #12]
 8007d26:	1a5b      	subs	r3, r3, r1
 8007d28:	42ab      	cmp	r3, r5
 8007d2a:	dcf2      	bgt.n	8007d12 <_printf_i+0x212>
 8007d2c:	e7eb      	b.n	8007d06 <_printf_i+0x206>
 8007d2e:	2500      	movs	r5, #0
 8007d30:	f104 0619 	add.w	r6, r4, #25
 8007d34:	e7f5      	b.n	8007d22 <_printf_i+0x222>
 8007d36:	bf00      	nop
 8007d38:	080084c3 	.word	0x080084c3
 8007d3c:	080084d4 	.word	0x080084d4

08007d40 <__sflush_r>:
 8007d40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d48:	0716      	lsls	r6, r2, #28
 8007d4a:	4605      	mov	r5, r0
 8007d4c:	460c      	mov	r4, r1
 8007d4e:	d454      	bmi.n	8007dfa <__sflush_r+0xba>
 8007d50:	684b      	ldr	r3, [r1, #4]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	dc02      	bgt.n	8007d5c <__sflush_r+0x1c>
 8007d56:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	dd48      	ble.n	8007dee <__sflush_r+0xae>
 8007d5c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007d5e:	2e00      	cmp	r6, #0
 8007d60:	d045      	beq.n	8007dee <__sflush_r+0xae>
 8007d62:	2300      	movs	r3, #0
 8007d64:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007d68:	682f      	ldr	r7, [r5, #0]
 8007d6a:	6a21      	ldr	r1, [r4, #32]
 8007d6c:	602b      	str	r3, [r5, #0]
 8007d6e:	d030      	beq.n	8007dd2 <__sflush_r+0x92>
 8007d70:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007d72:	89a3      	ldrh	r3, [r4, #12]
 8007d74:	0759      	lsls	r1, r3, #29
 8007d76:	d505      	bpl.n	8007d84 <__sflush_r+0x44>
 8007d78:	6863      	ldr	r3, [r4, #4]
 8007d7a:	1ad2      	subs	r2, r2, r3
 8007d7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007d7e:	b10b      	cbz	r3, 8007d84 <__sflush_r+0x44>
 8007d80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007d82:	1ad2      	subs	r2, r2, r3
 8007d84:	2300      	movs	r3, #0
 8007d86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007d88:	6a21      	ldr	r1, [r4, #32]
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	47b0      	blx	r6
 8007d8e:	1c43      	adds	r3, r0, #1
 8007d90:	89a3      	ldrh	r3, [r4, #12]
 8007d92:	d106      	bne.n	8007da2 <__sflush_r+0x62>
 8007d94:	6829      	ldr	r1, [r5, #0]
 8007d96:	291d      	cmp	r1, #29
 8007d98:	d82b      	bhi.n	8007df2 <__sflush_r+0xb2>
 8007d9a:	4a2a      	ldr	r2, [pc, #168]	@ (8007e44 <__sflush_r+0x104>)
 8007d9c:	410a      	asrs	r2, r1
 8007d9e:	07d6      	lsls	r6, r2, #31
 8007da0:	d427      	bmi.n	8007df2 <__sflush_r+0xb2>
 8007da2:	2200      	movs	r2, #0
 8007da4:	6062      	str	r2, [r4, #4]
 8007da6:	04d9      	lsls	r1, r3, #19
 8007da8:	6922      	ldr	r2, [r4, #16]
 8007daa:	6022      	str	r2, [r4, #0]
 8007dac:	d504      	bpl.n	8007db8 <__sflush_r+0x78>
 8007dae:	1c42      	adds	r2, r0, #1
 8007db0:	d101      	bne.n	8007db6 <__sflush_r+0x76>
 8007db2:	682b      	ldr	r3, [r5, #0]
 8007db4:	b903      	cbnz	r3, 8007db8 <__sflush_r+0x78>
 8007db6:	6560      	str	r0, [r4, #84]	@ 0x54
 8007db8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007dba:	602f      	str	r7, [r5, #0]
 8007dbc:	b1b9      	cbz	r1, 8007dee <__sflush_r+0xae>
 8007dbe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007dc2:	4299      	cmp	r1, r3
 8007dc4:	d002      	beq.n	8007dcc <__sflush_r+0x8c>
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	f7ff fa92 	bl	80072f0 <_free_r>
 8007dcc:	2300      	movs	r3, #0
 8007dce:	6363      	str	r3, [r4, #52]	@ 0x34
 8007dd0:	e00d      	b.n	8007dee <__sflush_r+0xae>
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	4628      	mov	r0, r5
 8007dd6:	47b0      	blx	r6
 8007dd8:	4602      	mov	r2, r0
 8007dda:	1c50      	adds	r0, r2, #1
 8007ddc:	d1c9      	bne.n	8007d72 <__sflush_r+0x32>
 8007dde:	682b      	ldr	r3, [r5, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d0c6      	beq.n	8007d72 <__sflush_r+0x32>
 8007de4:	2b1d      	cmp	r3, #29
 8007de6:	d001      	beq.n	8007dec <__sflush_r+0xac>
 8007de8:	2b16      	cmp	r3, #22
 8007dea:	d11e      	bne.n	8007e2a <__sflush_r+0xea>
 8007dec:	602f      	str	r7, [r5, #0]
 8007dee:	2000      	movs	r0, #0
 8007df0:	e022      	b.n	8007e38 <__sflush_r+0xf8>
 8007df2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007df6:	b21b      	sxth	r3, r3
 8007df8:	e01b      	b.n	8007e32 <__sflush_r+0xf2>
 8007dfa:	690f      	ldr	r7, [r1, #16]
 8007dfc:	2f00      	cmp	r7, #0
 8007dfe:	d0f6      	beq.n	8007dee <__sflush_r+0xae>
 8007e00:	0793      	lsls	r3, r2, #30
 8007e02:	680e      	ldr	r6, [r1, #0]
 8007e04:	bf08      	it	eq
 8007e06:	694b      	ldreq	r3, [r1, #20]
 8007e08:	600f      	str	r7, [r1, #0]
 8007e0a:	bf18      	it	ne
 8007e0c:	2300      	movne	r3, #0
 8007e0e:	eba6 0807 	sub.w	r8, r6, r7
 8007e12:	608b      	str	r3, [r1, #8]
 8007e14:	f1b8 0f00 	cmp.w	r8, #0
 8007e18:	dde9      	ble.n	8007dee <__sflush_r+0xae>
 8007e1a:	6a21      	ldr	r1, [r4, #32]
 8007e1c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007e1e:	4643      	mov	r3, r8
 8007e20:	463a      	mov	r2, r7
 8007e22:	4628      	mov	r0, r5
 8007e24:	47b0      	blx	r6
 8007e26:	2800      	cmp	r0, #0
 8007e28:	dc08      	bgt.n	8007e3c <__sflush_r+0xfc>
 8007e2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e32:	81a3      	strh	r3, [r4, #12]
 8007e34:	f04f 30ff 	mov.w	r0, #4294967295
 8007e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e3c:	4407      	add	r7, r0
 8007e3e:	eba8 0800 	sub.w	r8, r8, r0
 8007e42:	e7e7      	b.n	8007e14 <__sflush_r+0xd4>
 8007e44:	dfbffffe 	.word	0xdfbffffe

08007e48 <_fflush_r>:
 8007e48:	b538      	push	{r3, r4, r5, lr}
 8007e4a:	690b      	ldr	r3, [r1, #16]
 8007e4c:	4605      	mov	r5, r0
 8007e4e:	460c      	mov	r4, r1
 8007e50:	b913      	cbnz	r3, 8007e58 <_fflush_r+0x10>
 8007e52:	2500      	movs	r5, #0
 8007e54:	4628      	mov	r0, r5
 8007e56:	bd38      	pop	{r3, r4, r5, pc}
 8007e58:	b118      	cbz	r0, 8007e62 <_fflush_r+0x1a>
 8007e5a:	6a03      	ldr	r3, [r0, #32]
 8007e5c:	b90b      	cbnz	r3, 8007e62 <_fflush_r+0x1a>
 8007e5e:	f7fe ff47 	bl	8006cf0 <__sinit>
 8007e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d0f3      	beq.n	8007e52 <_fflush_r+0xa>
 8007e6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007e6c:	07d0      	lsls	r0, r2, #31
 8007e6e:	d404      	bmi.n	8007e7a <_fflush_r+0x32>
 8007e70:	0599      	lsls	r1, r3, #22
 8007e72:	d402      	bmi.n	8007e7a <_fflush_r+0x32>
 8007e74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e76:	f7ff fa04 	bl	8007282 <__retarget_lock_acquire_recursive>
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	4621      	mov	r1, r4
 8007e7e:	f7ff ff5f 	bl	8007d40 <__sflush_r>
 8007e82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e84:	07da      	lsls	r2, r3, #31
 8007e86:	4605      	mov	r5, r0
 8007e88:	d4e4      	bmi.n	8007e54 <_fflush_r+0xc>
 8007e8a:	89a3      	ldrh	r3, [r4, #12]
 8007e8c:	059b      	lsls	r3, r3, #22
 8007e8e:	d4e1      	bmi.n	8007e54 <_fflush_r+0xc>
 8007e90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e92:	f7ff f9f7 	bl	8007284 <__retarget_lock_release_recursive>
 8007e96:	e7dd      	b.n	8007e54 <_fflush_r+0xc>

08007e98 <fiprintf>:
 8007e98:	b40e      	push	{r1, r2, r3}
 8007e9a:	b503      	push	{r0, r1, lr}
 8007e9c:	4601      	mov	r1, r0
 8007e9e:	ab03      	add	r3, sp, #12
 8007ea0:	4805      	ldr	r0, [pc, #20]	@ (8007eb8 <fiprintf+0x20>)
 8007ea2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ea6:	6800      	ldr	r0, [r0, #0]
 8007ea8:	9301      	str	r3, [sp, #4]
 8007eaa:	f7ff fca3 	bl	80077f4 <_vfiprintf_r>
 8007eae:	b002      	add	sp, #8
 8007eb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007eb4:	b003      	add	sp, #12
 8007eb6:	4770      	bx	lr
 8007eb8:	20000034 	.word	0x20000034

08007ebc <__swhatbuf_r>:
 8007ebc:	b570      	push	{r4, r5, r6, lr}
 8007ebe:	460c      	mov	r4, r1
 8007ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ec4:	2900      	cmp	r1, #0
 8007ec6:	b096      	sub	sp, #88	@ 0x58
 8007ec8:	4615      	mov	r5, r2
 8007eca:	461e      	mov	r6, r3
 8007ecc:	da0d      	bge.n	8007eea <__swhatbuf_r+0x2e>
 8007ece:	89a3      	ldrh	r3, [r4, #12]
 8007ed0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007ed4:	f04f 0100 	mov.w	r1, #0
 8007ed8:	bf14      	ite	ne
 8007eda:	2340      	movne	r3, #64	@ 0x40
 8007edc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007ee0:	2000      	movs	r0, #0
 8007ee2:	6031      	str	r1, [r6, #0]
 8007ee4:	602b      	str	r3, [r5, #0]
 8007ee6:	b016      	add	sp, #88	@ 0x58
 8007ee8:	bd70      	pop	{r4, r5, r6, pc}
 8007eea:	466a      	mov	r2, sp
 8007eec:	f000 f862 	bl	8007fb4 <_fstat_r>
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	dbec      	blt.n	8007ece <__swhatbuf_r+0x12>
 8007ef4:	9901      	ldr	r1, [sp, #4]
 8007ef6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007efa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007efe:	4259      	negs	r1, r3
 8007f00:	4159      	adcs	r1, r3
 8007f02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007f06:	e7eb      	b.n	8007ee0 <__swhatbuf_r+0x24>

08007f08 <__smakebuf_r>:
 8007f08:	898b      	ldrh	r3, [r1, #12]
 8007f0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f0c:	079d      	lsls	r5, r3, #30
 8007f0e:	4606      	mov	r6, r0
 8007f10:	460c      	mov	r4, r1
 8007f12:	d507      	bpl.n	8007f24 <__smakebuf_r+0x1c>
 8007f14:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007f18:	6023      	str	r3, [r4, #0]
 8007f1a:	6123      	str	r3, [r4, #16]
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	6163      	str	r3, [r4, #20]
 8007f20:	b003      	add	sp, #12
 8007f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f24:	ab01      	add	r3, sp, #4
 8007f26:	466a      	mov	r2, sp
 8007f28:	f7ff ffc8 	bl	8007ebc <__swhatbuf_r>
 8007f2c:	9f00      	ldr	r7, [sp, #0]
 8007f2e:	4605      	mov	r5, r0
 8007f30:	4639      	mov	r1, r7
 8007f32:	4630      	mov	r0, r6
 8007f34:	f7ff fa50 	bl	80073d8 <_malloc_r>
 8007f38:	b948      	cbnz	r0, 8007f4e <__smakebuf_r+0x46>
 8007f3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f3e:	059a      	lsls	r2, r3, #22
 8007f40:	d4ee      	bmi.n	8007f20 <__smakebuf_r+0x18>
 8007f42:	f023 0303 	bic.w	r3, r3, #3
 8007f46:	f043 0302 	orr.w	r3, r3, #2
 8007f4a:	81a3      	strh	r3, [r4, #12]
 8007f4c:	e7e2      	b.n	8007f14 <__smakebuf_r+0xc>
 8007f4e:	89a3      	ldrh	r3, [r4, #12]
 8007f50:	6020      	str	r0, [r4, #0]
 8007f52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f56:	81a3      	strh	r3, [r4, #12]
 8007f58:	9b01      	ldr	r3, [sp, #4]
 8007f5a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007f5e:	b15b      	cbz	r3, 8007f78 <__smakebuf_r+0x70>
 8007f60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f64:	4630      	mov	r0, r6
 8007f66:	f000 f837 	bl	8007fd8 <_isatty_r>
 8007f6a:	b128      	cbz	r0, 8007f78 <__smakebuf_r+0x70>
 8007f6c:	89a3      	ldrh	r3, [r4, #12]
 8007f6e:	f023 0303 	bic.w	r3, r3, #3
 8007f72:	f043 0301 	orr.w	r3, r3, #1
 8007f76:	81a3      	strh	r3, [r4, #12]
 8007f78:	89a3      	ldrh	r3, [r4, #12]
 8007f7a:	431d      	orrs	r5, r3
 8007f7c:	81a5      	strh	r5, [r4, #12]
 8007f7e:	e7cf      	b.n	8007f20 <__smakebuf_r+0x18>

08007f80 <memmove>:
 8007f80:	4288      	cmp	r0, r1
 8007f82:	b510      	push	{r4, lr}
 8007f84:	eb01 0402 	add.w	r4, r1, r2
 8007f88:	d902      	bls.n	8007f90 <memmove+0x10>
 8007f8a:	4284      	cmp	r4, r0
 8007f8c:	4623      	mov	r3, r4
 8007f8e:	d807      	bhi.n	8007fa0 <memmove+0x20>
 8007f90:	1e43      	subs	r3, r0, #1
 8007f92:	42a1      	cmp	r1, r4
 8007f94:	d008      	beq.n	8007fa8 <memmove+0x28>
 8007f96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f9e:	e7f8      	b.n	8007f92 <memmove+0x12>
 8007fa0:	4402      	add	r2, r0
 8007fa2:	4601      	mov	r1, r0
 8007fa4:	428a      	cmp	r2, r1
 8007fa6:	d100      	bne.n	8007faa <memmove+0x2a>
 8007fa8:	bd10      	pop	{r4, pc}
 8007faa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007fae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007fb2:	e7f7      	b.n	8007fa4 <memmove+0x24>

08007fb4 <_fstat_r>:
 8007fb4:	b538      	push	{r3, r4, r5, lr}
 8007fb6:	4d07      	ldr	r5, [pc, #28]	@ (8007fd4 <_fstat_r+0x20>)
 8007fb8:	2300      	movs	r3, #0
 8007fba:	4604      	mov	r4, r0
 8007fbc:	4608      	mov	r0, r1
 8007fbe:	4611      	mov	r1, r2
 8007fc0:	602b      	str	r3, [r5, #0]
 8007fc2:	f7f8 ffdf 	bl	8000f84 <_fstat>
 8007fc6:	1c43      	adds	r3, r0, #1
 8007fc8:	d102      	bne.n	8007fd0 <_fstat_r+0x1c>
 8007fca:	682b      	ldr	r3, [r5, #0]
 8007fcc:	b103      	cbz	r3, 8007fd0 <_fstat_r+0x1c>
 8007fce:	6023      	str	r3, [r4, #0]
 8007fd0:	bd38      	pop	{r3, r4, r5, pc}
 8007fd2:	bf00      	nop
 8007fd4:	20004438 	.word	0x20004438

08007fd8 <_isatty_r>:
 8007fd8:	b538      	push	{r3, r4, r5, lr}
 8007fda:	4d06      	ldr	r5, [pc, #24]	@ (8007ff4 <_isatty_r+0x1c>)
 8007fdc:	2300      	movs	r3, #0
 8007fde:	4604      	mov	r4, r0
 8007fe0:	4608      	mov	r0, r1
 8007fe2:	602b      	str	r3, [r5, #0]
 8007fe4:	f7f8 ffde 	bl	8000fa4 <_isatty>
 8007fe8:	1c43      	adds	r3, r0, #1
 8007fea:	d102      	bne.n	8007ff2 <_isatty_r+0x1a>
 8007fec:	682b      	ldr	r3, [r5, #0]
 8007fee:	b103      	cbz	r3, 8007ff2 <_isatty_r+0x1a>
 8007ff0:	6023      	str	r3, [r4, #0]
 8007ff2:	bd38      	pop	{r3, r4, r5, pc}
 8007ff4:	20004438 	.word	0x20004438

08007ff8 <_sbrk_r>:
 8007ff8:	b538      	push	{r3, r4, r5, lr}
 8007ffa:	4d06      	ldr	r5, [pc, #24]	@ (8008014 <_sbrk_r+0x1c>)
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	4604      	mov	r4, r0
 8008000:	4608      	mov	r0, r1
 8008002:	602b      	str	r3, [r5, #0]
 8008004:	f7f8 ffe6 	bl	8000fd4 <_sbrk>
 8008008:	1c43      	adds	r3, r0, #1
 800800a:	d102      	bne.n	8008012 <_sbrk_r+0x1a>
 800800c:	682b      	ldr	r3, [r5, #0]
 800800e:	b103      	cbz	r3, 8008012 <_sbrk_r+0x1a>
 8008010:	6023      	str	r3, [r4, #0]
 8008012:	bd38      	pop	{r3, r4, r5, pc}
 8008014:	20004438 	.word	0x20004438

08008018 <abort>:
 8008018:	b508      	push	{r3, lr}
 800801a:	2006      	movs	r0, #6
 800801c:	f000 f85a 	bl	80080d4 <raise>
 8008020:	2001      	movs	r0, #1
 8008022:	f7f8 ff5f 	bl	8000ee4 <_exit>

08008026 <_realloc_r>:
 8008026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800802a:	4680      	mov	r8, r0
 800802c:	4615      	mov	r5, r2
 800802e:	460c      	mov	r4, r1
 8008030:	b921      	cbnz	r1, 800803c <_realloc_r+0x16>
 8008032:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008036:	4611      	mov	r1, r2
 8008038:	f7ff b9ce 	b.w	80073d8 <_malloc_r>
 800803c:	b92a      	cbnz	r2, 800804a <_realloc_r+0x24>
 800803e:	f7ff f957 	bl	80072f0 <_free_r>
 8008042:	2400      	movs	r4, #0
 8008044:	4620      	mov	r0, r4
 8008046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800804a:	f000 f85f 	bl	800810c <_malloc_usable_size_r>
 800804e:	4285      	cmp	r5, r0
 8008050:	4606      	mov	r6, r0
 8008052:	d802      	bhi.n	800805a <_realloc_r+0x34>
 8008054:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008058:	d8f4      	bhi.n	8008044 <_realloc_r+0x1e>
 800805a:	4629      	mov	r1, r5
 800805c:	4640      	mov	r0, r8
 800805e:	f7ff f9bb 	bl	80073d8 <_malloc_r>
 8008062:	4607      	mov	r7, r0
 8008064:	2800      	cmp	r0, #0
 8008066:	d0ec      	beq.n	8008042 <_realloc_r+0x1c>
 8008068:	42b5      	cmp	r5, r6
 800806a:	462a      	mov	r2, r5
 800806c:	4621      	mov	r1, r4
 800806e:	bf28      	it	cs
 8008070:	4632      	movcs	r2, r6
 8008072:	f7ff f910 	bl	8007296 <memcpy>
 8008076:	4621      	mov	r1, r4
 8008078:	4640      	mov	r0, r8
 800807a:	f7ff f939 	bl	80072f0 <_free_r>
 800807e:	463c      	mov	r4, r7
 8008080:	e7e0      	b.n	8008044 <_realloc_r+0x1e>

08008082 <_raise_r>:
 8008082:	291f      	cmp	r1, #31
 8008084:	b538      	push	{r3, r4, r5, lr}
 8008086:	4605      	mov	r5, r0
 8008088:	460c      	mov	r4, r1
 800808a:	d904      	bls.n	8008096 <_raise_r+0x14>
 800808c:	2316      	movs	r3, #22
 800808e:	6003      	str	r3, [r0, #0]
 8008090:	f04f 30ff 	mov.w	r0, #4294967295
 8008094:	bd38      	pop	{r3, r4, r5, pc}
 8008096:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008098:	b112      	cbz	r2, 80080a0 <_raise_r+0x1e>
 800809a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800809e:	b94b      	cbnz	r3, 80080b4 <_raise_r+0x32>
 80080a0:	4628      	mov	r0, r5
 80080a2:	f000 f831 	bl	8008108 <_getpid_r>
 80080a6:	4622      	mov	r2, r4
 80080a8:	4601      	mov	r1, r0
 80080aa:	4628      	mov	r0, r5
 80080ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080b0:	f000 b818 	b.w	80080e4 <_kill_r>
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d00a      	beq.n	80080ce <_raise_r+0x4c>
 80080b8:	1c59      	adds	r1, r3, #1
 80080ba:	d103      	bne.n	80080c4 <_raise_r+0x42>
 80080bc:	2316      	movs	r3, #22
 80080be:	6003      	str	r3, [r0, #0]
 80080c0:	2001      	movs	r0, #1
 80080c2:	e7e7      	b.n	8008094 <_raise_r+0x12>
 80080c4:	2100      	movs	r1, #0
 80080c6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80080ca:	4620      	mov	r0, r4
 80080cc:	4798      	blx	r3
 80080ce:	2000      	movs	r0, #0
 80080d0:	e7e0      	b.n	8008094 <_raise_r+0x12>
	...

080080d4 <raise>:
 80080d4:	4b02      	ldr	r3, [pc, #8]	@ (80080e0 <raise+0xc>)
 80080d6:	4601      	mov	r1, r0
 80080d8:	6818      	ldr	r0, [r3, #0]
 80080da:	f7ff bfd2 	b.w	8008082 <_raise_r>
 80080de:	bf00      	nop
 80080e0:	20000034 	.word	0x20000034

080080e4 <_kill_r>:
 80080e4:	b538      	push	{r3, r4, r5, lr}
 80080e6:	4d07      	ldr	r5, [pc, #28]	@ (8008104 <_kill_r+0x20>)
 80080e8:	2300      	movs	r3, #0
 80080ea:	4604      	mov	r4, r0
 80080ec:	4608      	mov	r0, r1
 80080ee:	4611      	mov	r1, r2
 80080f0:	602b      	str	r3, [r5, #0]
 80080f2:	f7f8 fee7 	bl	8000ec4 <_kill>
 80080f6:	1c43      	adds	r3, r0, #1
 80080f8:	d102      	bne.n	8008100 <_kill_r+0x1c>
 80080fa:	682b      	ldr	r3, [r5, #0]
 80080fc:	b103      	cbz	r3, 8008100 <_kill_r+0x1c>
 80080fe:	6023      	str	r3, [r4, #0]
 8008100:	bd38      	pop	{r3, r4, r5, pc}
 8008102:	bf00      	nop
 8008104:	20004438 	.word	0x20004438

08008108 <_getpid_r>:
 8008108:	f7f8 bed4 	b.w	8000eb4 <_getpid>

0800810c <_malloc_usable_size_r>:
 800810c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008110:	1f18      	subs	r0, r3, #4
 8008112:	2b00      	cmp	r3, #0
 8008114:	bfbc      	itt	lt
 8008116:	580b      	ldrlt	r3, [r1, r0]
 8008118:	18c0      	addlt	r0, r0, r3
 800811a:	4770      	bx	lr

0800811c <_init>:
 800811c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800811e:	bf00      	nop
 8008120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008122:	bc08      	pop	{r3}
 8008124:	469e      	mov	lr, r3
 8008126:	4770      	bx	lr

08008128 <_fini>:
 8008128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800812a:	bf00      	nop
 800812c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800812e:	bc08      	pop	{r3}
 8008130:	469e      	mov	lr, r3
 8008132:	4770      	bx	lr
