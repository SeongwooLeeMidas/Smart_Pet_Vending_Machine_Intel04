
Vending_Machine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061e0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000384  08006380  08006380  00007380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006704  08006704  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006704  08006704  00007704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800670c  0800670c  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800670c  0800670c  0000770c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006710  08006710  00007710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006714  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042b8  2000006c  08006780  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004324  08006780  00008324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000146ed  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003318  00000000  00000000  0001c789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001250  00000000  00000000  0001faa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e24  00000000  00000000  00020cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001972f  00000000  00000000  00021b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015773  00000000  00000000  0003b24b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000991d9  00000000  00000000  000509be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9b97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057fc  00000000  00000000  000e9bdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000ef3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006368 	.word	0x08006368

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08006368 	.word	0x08006368

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	4a07      	ldr	r2, [pc, #28]	@ (80005cc <vApplicationGetIdleTaskMemory+0x2c>)
 80005b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	4a06      	ldr	r2, [pc, #24]	@ (80005d0 <vApplicationGetIdleTaskMemory+0x30>)
 80005b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2280      	movs	r2, #128	@ 0x80
 80005bc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005be:	bf00      	nop
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20000090 	.word	0x20000090
 80005d0:	20000130 	.word	0x20000130

080005d4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005d4:	b5b0      	push	{r4, r5, r7, lr}
 80005d6:	b08e      	sub	sp, #56	@ 0x38
 80005d8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of UART_Task */
  osThreadDef(UART_Task, UART_Task_Func, osPriorityNormal, 0, 256);
 80005da:	4b14      	ldr	r3, [pc, #80]	@ (800062c <MX_FREERTOS_Init+0x58>)
 80005dc:	f107 041c 	add.w	r4, r7, #28
 80005e0:	461d      	mov	r5, r3
 80005e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART_TaskHandle = osThreadCreate(osThread(UART_Task), NULL);
 80005ee:	f107 031c 	add.w	r3, r7, #28
 80005f2:	2100      	movs	r1, #0
 80005f4:	4618      	mov	r0, r3
 80005f6:	f003 f8bc 	bl	8003772 <osThreadCreate>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000630 <MX_FREERTOS_Init+0x5c>)
 80005fe:	6013      	str	r3, [r2, #0]

  /* definition and creation of IR_Task */
  osThreadDef(IR_Task, IR_Task_Func, osPriorityHigh, 0, 256);
 8000600:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <MX_FREERTOS_Init+0x60>)
 8000602:	463c      	mov	r4, r7
 8000604:	461d      	mov	r5, r3
 8000606:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000608:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800060e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IR_TaskHandle = osThreadCreate(osThread(IR_Task), NULL);
 8000612:	463b      	mov	r3, r7
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f003 f8ab 	bl	8003772 <osThreadCreate>
 800061c:	4603      	mov	r3, r0
 800061e:	4a06      	ldr	r2, [pc, #24]	@ (8000638 <MX_FREERTOS_Init+0x64>)
 8000620:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000622:	bf00      	nop
 8000624:	3738      	adds	r7, #56	@ 0x38
 8000626:	46bd      	mov	sp, r7
 8000628:	bdb0      	pop	{r4, r5, r7, pc}
 800062a:	bf00      	nop
 800062c:	0800638c 	.word	0x0800638c
 8000630:	20000088 	.word	0x20000088
 8000634:	080063b0 	.word	0x080063b0
 8000638:	2000008c 	.word	0x2000008c

0800063c <UART_Task_Func>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_UART_Task_Func */
void UART_Task_Func(void const * argument)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  {

  	// 태스크의 스택 사용량 확인
		//UBaseType_t uxHighWaterMark = uxTaskGetStackHighWaterMark(NULL);  // 현재 태스크의 스택 사용량
		//printf("UART Task stack high watermark: %lu\r\n", uxHighWaterMark);
  	if(rx2Flag)
 8000644:	4b0d      	ldr	r3, [pc, #52]	@ (800067c <UART_Task_Func+0x40>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	2b00      	cmp	r3, #0
 800064c:	d006      	beq.n	800065c <UART_Task_Func+0x20>
		{
			printf("recv2 : %s\r\n",rx2Data);
 800064e:	490c      	ldr	r1, [pc, #48]	@ (8000680 <UART_Task_Func+0x44>)
 8000650:	480c      	ldr	r0, [pc, #48]	@ (8000684 <UART_Task_Func+0x48>)
 8000652:	f004 fca9 	bl	8004fa8 <iprintf>
			rx2Flag =0;
 8000656:	4b09      	ldr	r3, [pc, #36]	@ (800067c <UART_Task_Func+0x40>)
 8000658:	2200      	movs	r2, #0
 800065a:	701a      	strb	r2, [r3, #0]
	//	    HAL_UART_Transmit(&huart6, (uint8_t *)buf, strlen(buf), 0xFFFF);
		}
		if(btFlag)
 800065c:	4b0a      	ldr	r3, [pc, #40]	@ (8000688 <UART_Task_Func+0x4c>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	b2db      	uxtb	r3, r3
 8000662:	2b00      	cmp	r3, #0
 8000664:	d004      	beq.n	8000670 <UART_Task_Func+0x34>
		{
//		printf("bt : %s\r\n",btData);
			btFlag =0;
 8000666:	4b08      	ldr	r3, [pc, #32]	@ (8000688 <UART_Task_Func+0x4c>)
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
			bluetooth_Event();
 800066c:	f000 f830 	bl	80006d0 <bluetooth_Event>
		}
    osDelay(500);
 8000670:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000674:	f003 f8c9 	bl	800380a <osDelay>
  	if(rx2Flag)
 8000678:	e7e4      	b.n	8000644 <UART_Task_Func+0x8>
 800067a:	bf00      	nop
 800067c:	2000037d 	.word	0x2000037d
 8000680:	20000380 	.word	0x20000380
 8000684:	080063cc 	.word	0x080063cc
 8000688:	200003b2 	.word	0x200003b2

0800068c <IR_Task_Func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_IR_Task_Func */
void IR_Task_Func(void const * argument)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IR_Task_Func */

  /* Infinite loop */
  for(;;)
  {
  	UBaseType_t uxHighWaterMark = uxTaskGetStackHighWaterMark(NULL);  // 현재 태스크의 스택 사용량
 8000694:	2000      	movs	r0, #0
 8000696:	f003 fe67 	bl	8004368 <uxTaskGetStackHighWaterMark>
 800069a:	60f8      	str	r0, [r7, #12]
  	printf("IR Task stack high watermark: %lu\r\n", uxHighWaterMark);
 800069c:	68f9      	ldr	r1, [r7, #12]
 800069e:	4804      	ldr	r0, [pc, #16]	@ (80006b0 <IR_Task_Func+0x24>)
 80006a0:	f004 fc82 	bl	8004fa8 <iprintf>
				}
			}
		}
		*/

  	osDelay(50);
 80006a4:	2032      	movs	r0, #50	@ 0x32
 80006a6:	f003 f8b0 	bl	800380a <osDelay>
  {
 80006aa:	bf00      	nop
 80006ac:	e7f2      	b.n	8000694 <IR_Task_Func+0x8>
 80006ae:	bf00      	nop
 80006b0:	080063dc 	.word	0x080063dc

080006b4 <vApplicationStackOverflowHook>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void vApplicationStackOverflowHook(TaskHandle_t xTask, char *pcTaskName)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]
    // 스택 오버플로우가 발생한 태스크의 이름을 출력
    printf("Stack overflow detected in task: %s\r\n", pcTaskName);
 80006be:	6839      	ldr	r1, [r7, #0]
 80006c0:	4802      	ldr	r0, [pc, #8]	@ (80006cc <vApplicationStackOverflowHook+0x18>)
 80006c2:	f004 fc71 	bl	8004fa8 <iprintf>

    // 문제 해결을 위해 시스템을 멈추거나 복구 작업을 할 수 있음
    while (1) {
 80006c6:	bf00      	nop
 80006c8:	e7fd      	b.n	80006c6 <vApplicationStackOverflowHook+0x12>
 80006ca:	bf00      	nop
 80006cc:	08006400 	.word	0x08006400

080006d0 <bluetooth_Event>:
  }
  return (highCount > count / 2) ? GPIO_PIN_SET : GPIO_PIN_RESET;
}

void bluetooth_Event()
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b0a6      	sub	sp, #152	@ 0x98
 80006d4:	af02      	add	r7, sp, #8

  int i=0;
 80006d6:	2300      	movs	r3, #0
 80006d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  int motorNumber = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  char * pToken;
  char * pArray[ARR_CNT]={0};
 80006e2:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]
  char recvBuf[CMD_SIZE]={0};
 80006f2:	2300      	movs	r3, #0
 80006f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80006f6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80006fa:	222e      	movs	r2, #46	@ 0x2e
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f004 fdba 	bl	8005278 <memset>
  char sendBuf[CMD_SIZE]={0};
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	222e      	movs	r2, #46	@ 0x2e
 800070e:	2100      	movs	r1, #0
 8000710:	4618      	mov	r0, r3
 8000712:	f004 fdb1 	bl	8005278 <memset>
  strcpy(recvBuf,btData);
 8000716:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800071a:	4942      	ldr	r1, [pc, #264]	@ (8000824 <bluetooth_Event+0x154>)
 800071c:	4618      	mov	r0, r3
 800071e:	f004 fed8 	bl	80054d2 <strcpy>
  printf("btData : %s\r\n",btData);
 8000722:	4940      	ldr	r1, [pc, #256]	@ (8000824 <bluetooth_Event+0x154>)
 8000724:	4840      	ldr	r0, [pc, #256]	@ (8000828 <bluetooth_Event+0x158>)
 8000726:	f004 fc3f 	bl	8004fa8 <iprintf>

  pToken = strtok(recvBuf,"[@]");
 800072a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800072e:	493f      	ldr	r1, [pc, #252]	@ (800082c <bluetooth_Event+0x15c>)
 8000730:	4618      	mov	r0, r3
 8000732:	f004 fda9 	bl	8005288 <strtok>
 8000736:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
  while(pToken != NULL)
 800073a:	e017      	b.n	800076c <bluetooth_Event+0x9c>
  {
    pArray[i] =  pToken;
 800073c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	3390      	adds	r3, #144	@ 0x90
 8000744:	443b      	add	r3, r7
 8000746:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800074a:	f843 2c24 	str.w	r2, [r3, #-36]
    if(++i >= ARR_CNT)
 800074e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000752:	3301      	adds	r3, #1
 8000754:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000758:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800075c:	2b04      	cmp	r3, #4
 800075e:	dc0a      	bgt.n	8000776 <bluetooth_Event+0xa6>
      break;
    pToken = strtok(NULL,"[@]");
 8000760:	4932      	ldr	r1, [pc, #200]	@ (800082c <bluetooth_Event+0x15c>)
 8000762:	2000      	movs	r0, #0
 8000764:	f004 fd90 	bl	8005288 <strtok>
 8000768:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
  while(pToken != NULL)
 800076c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000770:	2b00      	cmp	r3, #0
 8000772:	d1e3      	bne.n	800073c <bluetooth_Event+0x6c>
 8000774:	e000      	b.n	8000778 <bluetooth_Event+0xa8>
      break;
 8000776:	bf00      	nop
  }

  if(!strcmp(pArray[1],"MOTOR"))
 8000778:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800077a:	492d      	ldr	r1, [pc, #180]	@ (8000830 <bluetooth_Event+0x160>)
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff fd2f 	bl	80001e0 <strcmp>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d124      	bne.n	80007d2 <bluetooth_Event+0x102>
  {
  	motorNumber = atoi(pArray[2]);
 8000788:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800078a:	4618      	mov	r0, r3
 800078c:	f004 fac2 	bl	8004d14 <atoi>
 8000790:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
  	if(motorNumber >= 1 && motorNumber <= NUM_MOTOR_PINS) {
 8000794:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000798:	2b00      	cmp	r3, #0
 800079a:	dd2a      	ble.n	80007f2 <bluetooth_Event+0x122>
 800079c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80007a0:	2b06      	cmp	r3, #6
 80007a2:	dc26      	bgt.n	80007f2 <bluetooth_Event+0x122>
				//HAL_GPIO_WritePin(MOTOR_PORT, motorPins[motorNumber - 1], GPIO_PIN_SET);
				printf("MOTOR %d ON\r\n",motorNumber);
 80007a4:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 80007a8:	4822      	ldr	r0, [pc, #136]	@ (8000834 <bluetooth_Event+0x164>)
 80007aa:	f004 fbfd 	bl	8004fa8 <iprintf>
				UBaseType_t uxHighWaterMark = uxTaskGetStackHighWaterMark(NULL);  // 현재 태스크의 스택 사용량
 80007ae:	2000      	movs	r0, #0
 80007b0:	f003 fdda 	bl	8004368 <uxTaskGetStackHighWaterMark>
 80007b4:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
				printf("BT Func stack high watermark: %lu\r\n", uxHighWaterMark);
 80007b8:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 80007bc:	481e      	ldr	r0, [pc, #120]	@ (8000838 <bluetooth_Event+0x168>)
 80007be:	f004 fbf3 	bl	8004fa8 <iprintf>
			  if(uxHighWaterMark == 0)
 80007c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d113      	bne.n	80007f2 <bluetooth_Event+0x122>
			  {
			  	printf("Stack overflow detected in task: BT Func\r\n");
 80007ca:	481c      	ldr	r0, [pc, #112]	@ (800083c <bluetooth_Event+0x16c>)
 80007cc:	f004 fc54 	bl	8005078 <puts>
 80007d0:	e00f      	b.n	80007f2 <bluetooth_Event+0x122>
			  }
		}
  }
  else if(!strncmp(pArray[1]," New conn",sizeof(" New conn")))
 80007d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80007d4:	491a      	ldr	r1, [pc, #104]	@ (8000840 <bluetooth_Event+0x170>)
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff fd02 	bl	80001e0 <strcmp>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d01c      	beq.n	800081c <bluetooth_Event+0x14c>
  {
      return;
  }
  else if(!strncmp(pArray[1]," Already log",sizeof(" Already log")))
 80007e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80007e4:	4917      	ldr	r1, [pc, #92]	@ (8000844 <bluetooth_Event+0x174>)
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff fcfa 	bl	80001e0 <strcmp>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
  {
      return;
  }
  else
      return;
 80007f0:	e015      	b.n	800081e <bluetooth_Event+0x14e>

  sprintf(sendBuf,"[%s]%s@%s\n",pArray[0],pArray[1],pArray[2]);
 80007f2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80007f4:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80007f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80007f8:	1d38      	adds	r0, r7, #4
 80007fa:	9300      	str	r3, [sp, #0]
 80007fc:	460b      	mov	r3, r1
 80007fe:	4912      	ldr	r1, [pc, #72]	@ (8000848 <bluetooth_Event+0x178>)
 8000800:	f004 fc42 	bl	8005088 <siprintf>
  HAL_UART_Transmit(&huart6, (uint8_t *)sendBuf, strlen(sendBuf), 100);
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff fcf4 	bl	80001f4 <strlen>
 800080c:	4603      	mov	r3, r0
 800080e:	b29a      	uxth	r2, r3
 8000810:	1d39      	adds	r1, r7, #4
 8000812:	2364      	movs	r3, #100	@ 0x64
 8000814:	480d      	ldr	r0, [pc, #52]	@ (800084c <bluetooth_Event+0x17c>)
 8000816:	f001 ff87 	bl	8002728 <HAL_UART_Transmit>
 800081a:	e000      	b.n	800081e <bluetooth_Event+0x14e>
      return;
 800081c:	bf00      	nop
}
 800081e:	3790      	adds	r7, #144	@ 0x90
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	200003b4 	.word	0x200003b4
 8000828:	0800644c 	.word	0x0800644c
 800082c:	0800645c 	.word	0x0800645c
 8000830:	08006460 	.word	0x08006460
 8000834:	08006468 	.word	0x08006468
 8000838:	08006478 	.word	0x08006478
 800083c:	0800649c 	.word	0x0800649c
 8000840:	080064c8 	.word	0x080064c8
 8000844:	080064d4 	.word	0x080064d4
 8000848:	080064e4 	.word	0x080064e4
 800084c:	20000430 	.word	0x20000430

08000850 <__io_putchar>:
PUTCHAR_PROTOTYPE
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART6 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000858:	1d39      	adds	r1, r7, #4
 800085a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800085e:	2201      	movs	r2, #1
 8000860:	4803      	ldr	r0, [pc, #12]	@ (8000870 <__io_putchar+0x20>)
 8000862:	f001 ff61 	bl	8002728 <HAL_UART_Transmit>

  return ch;
 8000866:	687b      	ldr	r3, [r7, #4]
}
 8000868:	4618      	mov	r0, r3
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	200003e8 	.word	0x200003e8

08000874 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	@ 0x28
 8000878:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
 800088e:	4b34      	ldr	r3, [pc, #208]	@ (8000960 <MX_GPIO_Init+0xec>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	4a33      	ldr	r2, [pc, #204]	@ (8000960 <MX_GPIO_Init+0xec>)
 8000894:	f043 0304 	orr.w	r3, r3, #4
 8000898:	6313      	str	r3, [r2, #48]	@ 0x30
 800089a:	4b31      	ldr	r3, [pc, #196]	@ (8000960 <MX_GPIO_Init+0xec>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	f003 0304 	and.w	r3, r3, #4
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000960 <MX_GPIO_Init+0xec>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	4a2c      	ldr	r2, [pc, #176]	@ (8000960 <MX_GPIO_Init+0xec>)
 80008b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b6:	4b2a      	ldr	r3, [pc, #168]	@ (8000960 <MX_GPIO_Init+0xec>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	4b26      	ldr	r3, [pc, #152]	@ (8000960 <MX_GPIO_Init+0xec>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	4a25      	ldr	r2, [pc, #148]	@ (8000960 <MX_GPIO_Init+0xec>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d2:	4b23      	ldr	r3, [pc, #140]	@ (8000960 <MX_GPIO_Init+0xec>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000960 <MX_GPIO_Init+0xec>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a1e      	ldr	r2, [pc, #120]	@ (8000960 <MX_GPIO_Init+0xec>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b1c      	ldr	r3, [pc, #112]	@ (8000960 <MX_GPIO_Init+0xec>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80008fa:	2200      	movs	r2, #0
 80008fc:	21f3      	movs	r1, #243	@ 0xf3
 80008fe:	4819      	ldr	r0, [pc, #100]	@ (8000964 <MX_GPIO_Init+0xf0>)
 8000900:	f000 ff6a 	bl	80017d8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000904:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800090a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800090e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	4619      	mov	r1, r3
 800091a:	4813      	ldr	r0, [pc, #76]	@ (8000968 <MX_GPIO_Init+0xf4>)
 800091c:	f000 fdd8 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000920:	23f3      	movs	r3, #243	@ 0xf3
 8000922:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4619      	mov	r1, r3
 8000936:	480b      	ldr	r0, [pc, #44]	@ (8000964 <MX_GPIO_Init+0xf0>)
 8000938:	f000 fdca 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13
 800093c:	f24e 0307 	movw	r3, #57351	@ 0xe007
 8000940:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000942:	2300      	movs	r3, #0
 8000944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	4619      	mov	r1, r3
 8000950:	4806      	ldr	r0, [pc, #24]	@ (800096c <MX_GPIO_Init+0xf8>)
 8000952:	f000 fdbd 	bl	80014d0 <HAL_GPIO_Init>

}
 8000956:	bf00      	nop
 8000958:	3728      	adds	r7, #40	@ 0x28
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800
 8000964:	40020000 	.word	0x40020000
 8000968:	40020800 	.word	0x40020800
 800096c:	40020400 	.word	0x40020400

08000970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int ret = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800097a:	f000 fbf3 	bl	8001164 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097e:	f000 f823 	bl	80009c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000982:	f7ff ff77 	bl	8000874 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000986:	f000 fa51 	bl	8000e2c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 800098a:	f000 fa79 	bl	8000e80 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  ret |= drv_uart_init();
 800098e:	f000 fb27 	bl	8000fe0 <drv_uart_init>
 8000992:	4602      	mov	r2, r0
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4313      	orrs	r3, r2
 8000998:	607b      	str	r3, [r7, #4]
	ret |= drv_esp_init();
 800099a:	f000 fb2f 	bl	8000ffc <drv_esp_init>
 800099e:	4602      	mov	r2, r0
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	607b      	str	r3, [r7, #4]
	if(ret != 0) Error_Handler();
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <main+0x40>
 80009ac:	f000 f888 	bl	8000ac0 <Error_Handler>
	printf("start main()\r\n");
 80009b0:	4804      	ldr	r0, [pc, #16]	@ (80009c4 <main+0x54>)
 80009b2:	f004 fb61 	bl	8005078 <puts>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80009b6:	f7ff fe0d 	bl	80005d4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80009ba:	f002 fed3 	bl	8003764 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009be:	bf00      	nop
 80009c0:	e7fd      	b.n	80009be <main+0x4e>
 80009c2:	bf00      	nop
 80009c4:	080064f0 	.word	0x080064f0

080009c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b094      	sub	sp, #80	@ 0x50
 80009cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ce:	f107 0320 	add.w	r3, r7, #32
 80009d2:	2230      	movs	r2, #48	@ 0x30
 80009d4:	2100      	movs	r1, #0
 80009d6:	4618      	mov	r0, r3
 80009d8:	f004 fc4e 	bl	8005278 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ec:	2300      	movs	r3, #0
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	4b28      	ldr	r3, [pc, #160]	@ (8000a94 <SystemClock_Config+0xcc>)
 80009f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f4:	4a27      	ldr	r2, [pc, #156]	@ (8000a94 <SystemClock_Config+0xcc>)
 80009f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80009fc:	4b25      	ldr	r3, [pc, #148]	@ (8000a94 <SystemClock_Config+0xcc>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a08:	2300      	movs	r3, #0
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	4b22      	ldr	r3, [pc, #136]	@ (8000a98 <SystemClock_Config+0xd0>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a21      	ldr	r2, [pc, #132]	@ (8000a98 <SystemClock_Config+0xd0>)
 8000a12:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a16:	6013      	str	r3, [r2, #0]
 8000a18:	4b1f      	ldr	r3, [pc, #124]	@ (8000a98 <SystemClock_Config+0xd0>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a24:	2302      	movs	r3, #2
 8000a26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a2c:	2310      	movs	r3, #16
 8000a2e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a30:	2302      	movs	r3, #2
 8000a32:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a34:	2300      	movs	r3, #0
 8000a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a38:	2310      	movs	r3, #16
 8000a3a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a3c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a40:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a42:	2304      	movs	r3, #4
 8000a44:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a46:	2304      	movs	r3, #4
 8000a48:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a4a:	f107 0320 	add.w	r3, r7, #32
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 fedc 	bl	800180c <HAL_RCC_OscConfig>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a5a:	f000 f831 	bl	8000ac0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5e:	230f      	movs	r3, #15
 8000a60:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a62:	2302      	movs	r3, #2
 8000a64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a66:	2300      	movs	r3, #0
 8000a68:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	2102      	movs	r1, #2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f001 f93e 	bl	8001cfc <HAL_RCC_ClockConfig>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a86:	f000 f81b 	bl	8000ac0 <Error_Handler>
  }
}
 8000a8a:	bf00      	nop
 8000a8c:	3750      	adds	r7, #80	@ 0x50
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40007000 	.word	0x40007000

08000a9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a04      	ldr	r2, [pc, #16]	@ (8000abc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d101      	bne.n	8000ab2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aae:	f000 fb7b 	bl	80011a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40000400 	.word	0x40000400

08000ac0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac4:	b672      	cpsid	i
}
 8000ac6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac8:	bf00      	nop
 8000aca:	e7fd      	b.n	8000ac8 <Error_Handler+0x8>

08000acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	4b12      	ldr	r3, [pc, #72]	@ (8000b20 <HAL_MspInit+0x54>)
 8000ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ada:	4a11      	ldr	r2, [pc, #68]	@ (8000b20 <HAL_MspInit+0x54>)
 8000adc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ae0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <HAL_MspInit+0x54>)
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b20 <HAL_MspInit+0x54>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b20 <HAL_MspInit+0x54>)
 8000af8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000afc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000afe:	4b08      	ldr	r3, [pc, #32]	@ (8000b20 <HAL_MspInit+0x54>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	210f      	movs	r1, #15
 8000b0e:	f06f 0001 	mvn.w	r0, #1
 8000b12:	f000 fc21 	bl	8001358 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b16:	bf00      	nop
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800

08000b24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b08e      	sub	sp, #56	@ 0x38
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b30:	2300      	movs	r3, #0
 8000b32:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	4b33      	ldr	r3, [pc, #204]	@ (8000c08 <HAL_InitTick+0xe4>)
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3c:	4a32      	ldr	r2, [pc, #200]	@ (8000c08 <HAL_InitTick+0xe4>)
 8000b3e:	f043 0302 	orr.w	r3, r3, #2
 8000b42:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b44:	4b30      	ldr	r3, [pc, #192]	@ (8000c08 <HAL_InitTick+0xe4>)
 8000b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b48:	f003 0302 	and.w	r3, r3, #2
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b50:	f107 0210 	add.w	r2, r7, #16
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4611      	mov	r1, r2
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f001 faee 	bl	800213c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b60:	6a3b      	ldr	r3, [r7, #32]
 8000b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d103      	bne.n	8000b72 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b6a:	f001 fabf 	bl	80020ec <HAL_RCC_GetPCLK1Freq>
 8000b6e:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b70:	e004      	b.n	8000b7c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b72:	f001 fabb 	bl	80020ec <HAL_RCC_GetPCLK1Freq>
 8000b76:	4603      	mov	r3, r0
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b7e:	4a23      	ldr	r2, [pc, #140]	@ (8000c0c <HAL_InitTick+0xe8>)
 8000b80:	fba2 2303 	umull	r2, r3, r2, r3
 8000b84:	0c9b      	lsrs	r3, r3, #18
 8000b86:	3b01      	subs	r3, #1
 8000b88:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000b8a:	4b21      	ldr	r3, [pc, #132]	@ (8000c10 <HAL_InitTick+0xec>)
 8000b8c:	4a21      	ldr	r2, [pc, #132]	@ (8000c14 <HAL_InitTick+0xf0>)
 8000b8e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000b90:	4b1f      	ldr	r3, [pc, #124]	@ (8000c10 <HAL_InitTick+0xec>)
 8000b92:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b96:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000b98:	4a1d      	ldr	r2, [pc, #116]	@ (8000c10 <HAL_InitTick+0xec>)
 8000b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b9c:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000b9e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c10 <HAL_InitTick+0xec>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c10 <HAL_InitTick+0xec>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000baa:	4b19      	ldr	r3, [pc, #100]	@ (8000c10 <HAL_InitTick+0xec>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000bb0:	4817      	ldr	r0, [pc, #92]	@ (8000c10 <HAL_InitTick+0xec>)
 8000bb2:	f001 faf5 	bl	80021a0 <HAL_TIM_Base_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000bbc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d11b      	bne.n	8000bfc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000bc4:	4812      	ldr	r0, [pc, #72]	@ (8000c10 <HAL_InitTick+0xec>)
 8000bc6:	f001 fb45 	bl	8002254 <HAL_TIM_Base_Start_IT>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000bd0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d111      	bne.n	8000bfc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000bd8:	201d      	movs	r0, #29
 8000bda:	f000 fbd9 	bl	8001390 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b0f      	cmp	r3, #15
 8000be2:	d808      	bhi.n	8000bf6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000be4:	2200      	movs	r2, #0
 8000be6:	6879      	ldr	r1, [r7, #4]
 8000be8:	201d      	movs	r0, #29
 8000bea:	f000 fbb5 	bl	8001358 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bee:	4a0a      	ldr	r2, [pc, #40]	@ (8000c18 <HAL_InitTick+0xf4>)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6013      	str	r3, [r2, #0]
 8000bf4:	e002      	b.n	8000bfc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bfc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3738      	adds	r7, #56	@ 0x38
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	431bde83 	.word	0x431bde83
 8000c10:	20000330 	.word	0x20000330
 8000c14:	40000400 	.word	0x40000400
 8000c18:	20000004 	.word	0x20000004

08000c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <NMI_Handler+0x4>

08000c24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <HardFault_Handler+0x4>

08000c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <MemManage_Handler+0x4>

08000c34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <BusFault_Handler+0x4>

08000c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <UsageFault_Handler+0x4>

08000c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
	...

08000c54 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c58:	4802      	ldr	r0, [pc, #8]	@ (8000c64 <TIM3_IRQHandler+0x10>)
 8000c5a:	f001 fb5d 	bl	8002318 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000330 	.word	0x20000330

08000c68 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000c6c:	4802      	ldr	r0, [pc, #8]	@ (8000c78 <USART6_IRQHandler+0x10>)
 8000c6e:	f001 fe0b 	bl	8002888 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000430 	.word	0x20000430

08000c7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return 1;
 8000c80:	2301      	movs	r3, #1
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <_kill>:

int _kill(int pid, int sig)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000c96:	f004 fbef 	bl	8005478 <__errno>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2216      	movs	r2, #22
 8000c9e:	601a      	str	r2, [r3, #0]
  return -1;
 8000ca0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <_exit>:

void _exit (int status)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000cb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f7ff ffe7 	bl	8000c8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000cbe:	bf00      	nop
 8000cc0:	e7fd      	b.n	8000cbe <_exit+0x12>

08000cc2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b086      	sub	sp, #24
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	60f8      	str	r0, [r7, #12]
 8000cca:	60b9      	str	r1, [r7, #8]
 8000ccc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cce:	2300      	movs	r3, #0
 8000cd0:	617b      	str	r3, [r7, #20]
 8000cd2:	e00a      	b.n	8000cea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cd4:	f3af 8000 	nop.w
 8000cd8:	4601      	mov	r1, r0
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	1c5a      	adds	r2, r3, #1
 8000cde:	60ba      	str	r2, [r7, #8]
 8000ce0:	b2ca      	uxtb	r2, r1
 8000ce2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	617b      	str	r3, [r7, #20]
 8000cea:	697a      	ldr	r2, [r7, #20]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	dbf0      	blt.n	8000cd4 <_read+0x12>
  }

  return len;
 8000cf2:	687b      	ldr	r3, [r7, #4]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3718      	adds	r7, #24
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	e009      	b.n	8000d22 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	1c5a      	adds	r2, r3, #1
 8000d12:	60ba      	str	r2, [r7, #8]
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fd9a 	bl	8000850 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	617b      	str	r3, [r7, #20]
 8000d22:	697a      	ldr	r2, [r7, #20]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	429a      	cmp	r2, r3
 8000d28:	dbf1      	blt.n	8000d0e <_write+0x12>
  }
  return len;
 8000d2a:	687b      	ldr	r3, [r7, #4]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <_close>:

int _close(int file)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d5c:	605a      	str	r2, [r3, #4]
  return 0;
 8000d5e:	2300      	movs	r3, #0
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <_isatty>:

int _isatty(int file)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d74:	2301      	movs	r3, #1
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b085      	sub	sp, #20
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	60f8      	str	r0, [r7, #12]
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d8e:	2300      	movs	r3, #0
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da4:	4a14      	ldr	r2, [pc, #80]	@ (8000df8 <_sbrk+0x5c>)
 8000da6:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <_sbrk+0x60>)
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db0:	4b13      	ldr	r3, [pc, #76]	@ (8000e00 <_sbrk+0x64>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d102      	bne.n	8000dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db8:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <_sbrk+0x64>)
 8000dba:	4a12      	ldr	r2, [pc, #72]	@ (8000e04 <_sbrk+0x68>)
 8000dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dbe:	4b10      	ldr	r3, [pc, #64]	@ (8000e00 <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d207      	bcs.n	8000ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dcc:	f004 fb54 	bl	8005478 <__errno>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dda:	e009      	b.n	8000df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ddc:	4b08      	ldr	r3, [pc, #32]	@ (8000e00 <_sbrk+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de2:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	4a05      	ldr	r2, [pc, #20]	@ (8000e00 <_sbrk+0x64>)
 8000dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dee:	68fb      	ldr	r3, [r7, #12]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20020000 	.word	0x20020000
 8000dfc:	00000400 	.word	0x00000400
 8000e00:	20000378 	.word	0x20000378
 8000e04:	20004328 	.word	0x20004328

08000e08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e0c:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <SystemInit+0x20>)
 8000e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e12:	4a05      	ldr	r2, [pc, #20]	@ (8000e28 <SystemInit+0x20>)
 8000e14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e30:	4b11      	ldr	r3, [pc, #68]	@ (8000e78 <MX_USART2_UART_Init+0x4c>)
 8000e32:	4a12      	ldr	r2, [pc, #72]	@ (8000e7c <MX_USART2_UART_Init+0x50>)
 8000e34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e36:	4b10      	ldr	r3, [pc, #64]	@ (8000e78 <MX_USART2_UART_Init+0x4c>)
 8000e38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e78 <MX_USART2_UART_Init+0x4c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e44:	4b0c      	ldr	r3, [pc, #48]	@ (8000e78 <MX_USART2_UART_Init+0x4c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e78 <MX_USART2_UART_Init+0x4c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e50:	4b09      	ldr	r3, [pc, #36]	@ (8000e78 <MX_USART2_UART_Init+0x4c>)
 8000e52:	220c      	movs	r2, #12
 8000e54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e56:	4b08      	ldr	r3, [pc, #32]	@ (8000e78 <MX_USART2_UART_Init+0x4c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <MX_USART2_UART_Init+0x4c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e62:	4805      	ldr	r0, [pc, #20]	@ (8000e78 <MX_USART2_UART_Init+0x4c>)
 8000e64:	f001 fc10 	bl	8002688 <HAL_UART_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e6e:	f7ff fe27 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	200003e8 	.word	0x200003e8
 8000e7c:	40004400 	.word	0x40004400

08000e80 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000e84:	4b11      	ldr	r3, [pc, #68]	@ (8000ecc <MX_USART6_UART_Init+0x4c>)
 8000e86:	4a12      	ldr	r2, [pc, #72]	@ (8000ed0 <MX_USART6_UART_Init+0x50>)
 8000e88:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000e8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ecc <MX_USART6_UART_Init+0x4c>)
 8000e8c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000e90:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000e92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ecc <MX_USART6_UART_Init+0x4c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000e98:	4b0c      	ldr	r3, [pc, #48]	@ (8000ecc <MX_USART6_UART_Init+0x4c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000ecc <MX_USART6_UART_Init+0x4c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000ea4:	4b09      	ldr	r3, [pc, #36]	@ (8000ecc <MX_USART6_UART_Init+0x4c>)
 8000ea6:	220c      	movs	r2, #12
 8000ea8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eaa:	4b08      	ldr	r3, [pc, #32]	@ (8000ecc <MX_USART6_UART_Init+0x4c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <MX_USART6_UART_Init+0x4c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000eb6:	4805      	ldr	r0, [pc, #20]	@ (8000ecc <MX_USART6_UART_Init+0x4c>)
 8000eb8:	f001 fbe6 	bl	8002688 <HAL_UART_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000ec2:	f7ff fdfd 	bl	8000ac0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000430 	.word	0x20000430
 8000ed0:	40011400 	.word	0x40011400

08000ed4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08c      	sub	sp, #48	@ 0x30
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 031c 	add.w	r3, r7, #28
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a36      	ldr	r2, [pc, #216]	@ (8000fcc <HAL_UART_MspInit+0xf8>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d12c      	bne.n	8000f50 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
 8000efa:	4b35      	ldr	r3, [pc, #212]	@ (8000fd0 <HAL_UART_MspInit+0xfc>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efe:	4a34      	ldr	r2, [pc, #208]	@ (8000fd0 <HAL_UART_MspInit+0xfc>)
 8000f00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f06:	4b32      	ldr	r3, [pc, #200]	@ (8000fd0 <HAL_UART_MspInit+0xfc>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f0e:	61bb      	str	r3, [r7, #24]
 8000f10:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	4b2e      	ldr	r3, [pc, #184]	@ (8000fd0 <HAL_UART_MspInit+0xfc>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	4a2d      	ldr	r2, [pc, #180]	@ (8000fd0 <HAL_UART_MspInit+0xfc>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f22:	4b2b      	ldr	r3, [pc, #172]	@ (8000fd0 <HAL_UART_MspInit+0xfc>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f2e:	230c      	movs	r3, #12
 8000f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f3e:	2307      	movs	r3, #7
 8000f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f42:	f107 031c 	add.w	r3, r7, #28
 8000f46:	4619      	mov	r1, r3
 8000f48:	4822      	ldr	r0, [pc, #136]	@ (8000fd4 <HAL_UART_MspInit+0x100>)
 8000f4a:	f000 fac1 	bl	80014d0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8000f4e:	e038      	b.n	8000fc2 <HAL_UART_MspInit+0xee>
  else if(uartHandle->Instance==USART6)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a20      	ldr	r2, [pc, #128]	@ (8000fd8 <HAL_UART_MspInit+0x104>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d133      	bne.n	8000fc2 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	613b      	str	r3, [r7, #16]
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <HAL_UART_MspInit+0xfc>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f62:	4a1b      	ldr	r2, [pc, #108]	@ (8000fd0 <HAL_UART_MspInit+0xfc>)
 8000f64:	f043 0320 	orr.w	r3, r3, #32
 8000f68:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f6a:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <HAL_UART_MspInit+0xfc>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f6e:	f003 0320 	and.w	r3, r3, #32
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	4b15      	ldr	r3, [pc, #84]	@ (8000fd0 <HAL_UART_MspInit+0xfc>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	4a14      	ldr	r2, [pc, #80]	@ (8000fd0 <HAL_UART_MspInit+0xfc>)
 8000f80:	f043 0304 	orr.w	r3, r3, #4
 8000f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f86:	4b12      	ldr	r3, [pc, #72]	@ (8000fd0 <HAL_UART_MspInit+0xfc>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	f003 0304 	and.w	r3, r3, #4
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f92:	23c0      	movs	r3, #192	@ 0xc0
 8000f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000fa2:	2308      	movs	r3, #8
 8000fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa6:	f107 031c 	add.w	r3, r7, #28
 8000faa:	4619      	mov	r1, r3
 8000fac:	480b      	ldr	r0, [pc, #44]	@ (8000fdc <HAL_UART_MspInit+0x108>)
 8000fae:	f000 fa8f 	bl	80014d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2105      	movs	r1, #5
 8000fb6:	2047      	movs	r0, #71	@ 0x47
 8000fb8:	f000 f9ce 	bl	8001358 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000fbc:	2047      	movs	r0, #71	@ 0x47
 8000fbe:	f000 f9e7 	bl	8001390 <HAL_NVIC_EnableIRQ>
}
 8000fc2:	bf00      	nop
 8000fc4:	3730      	adds	r7, #48	@ 0x30
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40004400 	.word	0x40004400
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40020000 	.word	0x40020000
 8000fd8:	40011400 	.word	0x40011400
 8000fdc:	40020800 	.word	0x40020800

08000fe0 <drv_uart_init>:
  }
}

/* USER CODE BEGIN 1 */
int drv_uart_init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &rx2char,1);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	4903      	ldr	r1, [pc, #12]	@ (8000ff4 <drv_uart_init+0x14>)
 8000fe8:	4803      	ldr	r0, [pc, #12]	@ (8000ff8 <drv_uart_init+0x18>)
 8000fea:	f001 fc28 	bl	800283e <HAL_UART_Receive_IT>
	return 0;
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	2000037c 	.word	0x2000037c
 8000ff8:	200003e8 	.word	0x200003e8

08000ffc <drv_esp_init>:
int drv_esp_init(void) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart6, &btchar, 1);  // Initialize UART for ESP communication
 8001000:	2201      	movs	r2, #1
 8001002:	4903      	ldr	r1, [pc, #12]	@ (8001010 <drv_esp_init+0x14>)
 8001004:	4803      	ldr	r0, [pc, #12]	@ (8001014 <drv_esp_init+0x18>)
 8001006:	f001 fc1a 	bl	800283e <HAL_UART_Receive_IT>
	return 0;  // Return 0 if successful
 800100a:	2300      	movs	r3, #0
}
 800100c:	4618      	mov	r0, r3
 800100e:	bd80      	pop	{r7, pc}
 8001010:	200003b3 	.word	0x200003b3
 8001014:	20000430 	.word	0x20000430

08001018 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART2)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a2e      	ldr	r2, [pc, #184]	@ (80010e0 <HAL_UART_RxCpltCallback+0xc8>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d128      	bne.n	800107c <HAL_UART_RxCpltCallback+0x64>
    {
    	static int i=0;
    	rx2Data[i] = rx2char;
 800102a:	4b2e      	ldr	r3, [pc, #184]	@ (80010e4 <HAL_UART_RxCpltCallback+0xcc>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a2e      	ldr	r2, [pc, #184]	@ (80010e8 <HAL_UART_RxCpltCallback+0xd0>)
 8001030:	7811      	ldrb	r1, [r2, #0]
 8001032:	4a2e      	ldr	r2, [pc, #184]	@ (80010ec <HAL_UART_RxCpltCallback+0xd4>)
 8001034:	54d1      	strb	r1, [r2, r3]
    	if((rx2Data[i] == '\r')||(btData[i] == '\n'))
 8001036:	4b2b      	ldr	r3, [pc, #172]	@ (80010e4 <HAL_UART_RxCpltCallback+0xcc>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a2c      	ldr	r2, [pc, #176]	@ (80010ec <HAL_UART_RxCpltCallback+0xd4>)
 800103c:	5cd3      	ldrb	r3, [r2, r3]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b0d      	cmp	r3, #13
 8001042:	d005      	beq.n	8001050 <HAL_UART_RxCpltCallback+0x38>
 8001044:	4b27      	ldr	r3, [pc, #156]	@ (80010e4 <HAL_UART_RxCpltCallback+0xcc>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a29      	ldr	r2, [pc, #164]	@ (80010f0 <HAL_UART_RxCpltCallback+0xd8>)
 800104a:	5cd3      	ldrb	r3, [r2, r3]
 800104c:	2b0a      	cmp	r3, #10
 800104e:	d10b      	bne.n	8001068 <HAL_UART_RxCpltCallback+0x50>
    	{
    		rx2Data[i] = '\0';
 8001050:	4b24      	ldr	r3, [pc, #144]	@ (80010e4 <HAL_UART_RxCpltCallback+0xcc>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a25      	ldr	r2, [pc, #148]	@ (80010ec <HAL_UART_RxCpltCallback+0xd4>)
 8001056:	2100      	movs	r1, #0
 8001058:	54d1      	strb	r1, [r2, r3]
    		rx2Flag = 1;
 800105a:	4b26      	ldr	r3, [pc, #152]	@ (80010f4 <HAL_UART_RxCpltCallback+0xdc>)
 800105c:	2201      	movs	r2, #1
 800105e:	701a      	strb	r2, [r3, #0]
    		i = 0;
 8001060:	4b20      	ldr	r3, [pc, #128]	@ (80010e4 <HAL_UART_RxCpltCallback+0xcc>)
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	e004      	b.n	8001072 <HAL_UART_RxCpltCallback+0x5a>
    	}
    	else
    	{
    		i++;
 8001068:	4b1e      	ldr	r3, [pc, #120]	@ (80010e4 <HAL_UART_RxCpltCallback+0xcc>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	3301      	adds	r3, #1
 800106e:	4a1d      	ldr	r2, [pc, #116]	@ (80010e4 <HAL_UART_RxCpltCallback+0xcc>)
 8001070:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(&huart2, &rx2char,1);
 8001072:	2201      	movs	r2, #1
 8001074:	491c      	ldr	r1, [pc, #112]	@ (80010e8 <HAL_UART_RxCpltCallback+0xd0>)
 8001076:	4820      	ldr	r0, [pc, #128]	@ (80010f8 <HAL_UART_RxCpltCallback+0xe0>)
 8001078:	f001 fbe1 	bl	800283e <HAL_UART_Receive_IT>
    }
    if(huart->Instance == USART6)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a1e      	ldr	r2, [pc, #120]	@ (80010fc <HAL_UART_RxCpltCallback+0xe4>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d127      	bne.n	80010d6 <HAL_UART_RxCpltCallback+0xbe>
    {
    	static int i=0;
    	btData[i] = btchar;
 8001086:	4b1e      	ldr	r3, [pc, #120]	@ (8001100 <HAL_UART_RxCpltCallback+0xe8>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a1e      	ldr	r2, [pc, #120]	@ (8001104 <HAL_UART_RxCpltCallback+0xec>)
 800108c:	7811      	ldrb	r1, [r2, #0]
 800108e:	4a18      	ldr	r2, [pc, #96]	@ (80010f0 <HAL_UART_RxCpltCallback+0xd8>)
 8001090:	54d1      	strb	r1, [r2, r3]
    	if((btData[i] == '\n') || btData[i] == '\r')
 8001092:	4b1b      	ldr	r3, [pc, #108]	@ (8001100 <HAL_UART_RxCpltCallback+0xe8>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a16      	ldr	r2, [pc, #88]	@ (80010f0 <HAL_UART_RxCpltCallback+0xd8>)
 8001098:	5cd3      	ldrb	r3, [r2, r3]
 800109a:	2b0a      	cmp	r3, #10
 800109c:	d005      	beq.n	80010aa <HAL_UART_RxCpltCallback+0x92>
 800109e:	4b18      	ldr	r3, [pc, #96]	@ (8001100 <HAL_UART_RxCpltCallback+0xe8>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a13      	ldr	r2, [pc, #76]	@ (80010f0 <HAL_UART_RxCpltCallback+0xd8>)
 80010a4:	5cd3      	ldrb	r3, [r2, r3]
 80010a6:	2b0d      	cmp	r3, #13
 80010a8:	d10b      	bne.n	80010c2 <HAL_UART_RxCpltCallback+0xaa>
    	{
    		btData[i] = '\0';
 80010aa:	4b15      	ldr	r3, [pc, #84]	@ (8001100 <HAL_UART_RxCpltCallback+0xe8>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a10      	ldr	r2, [pc, #64]	@ (80010f0 <HAL_UART_RxCpltCallback+0xd8>)
 80010b0:	2100      	movs	r1, #0
 80010b2:	54d1      	strb	r1, [r2, r3]
    		btFlag = 1;
 80010b4:	4b14      	ldr	r3, [pc, #80]	@ (8001108 <HAL_UART_RxCpltCallback+0xf0>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	701a      	strb	r2, [r3, #0]
    		i = 0;
 80010ba:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <HAL_UART_RxCpltCallback+0xe8>)
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	e004      	b.n	80010cc <HAL_UART_RxCpltCallback+0xb4>
    	}
    	else
    	{
    		i++;
 80010c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001100 <HAL_UART_RxCpltCallback+0xe8>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	3301      	adds	r3, #1
 80010c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001100 <HAL_UART_RxCpltCallback+0xe8>)
 80010ca:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(&huart6, &btchar,1);
 80010cc:	2201      	movs	r2, #1
 80010ce:	490d      	ldr	r1, [pc, #52]	@ (8001104 <HAL_UART_RxCpltCallback+0xec>)
 80010d0:	480e      	ldr	r0, [pc, #56]	@ (800110c <HAL_UART_RxCpltCallback+0xf4>)
 80010d2:	f001 fbb4 	bl	800283e <HAL_UART_Receive_IT>
    }
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40004400 	.word	0x40004400
 80010e4:	20000478 	.word	0x20000478
 80010e8:	2000037c 	.word	0x2000037c
 80010ec:	20000380 	.word	0x20000380
 80010f0:	200003b4 	.word	0x200003b4
 80010f4:	2000037d 	.word	0x2000037d
 80010f8:	200003e8 	.word	0x200003e8
 80010fc:	40011400 	.word	0x40011400
 8001100:	2000047c 	.word	0x2000047c
 8001104:	200003b3 	.word	0x200003b3
 8001108:	200003b2 	.word	0x200003b2
 800110c:	20000430 	.word	0x20000430

08001110 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001110:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001148 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001114:	f7ff fe78 	bl	8000e08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001118:	480c      	ldr	r0, [pc, #48]	@ (800114c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800111a:	490d      	ldr	r1, [pc, #52]	@ (8001150 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800111c:	4a0d      	ldr	r2, [pc, #52]	@ (8001154 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800111e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001120:	e002      	b.n	8001128 <LoopCopyDataInit>

08001122 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001122:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001124:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001126:	3304      	adds	r3, #4

08001128 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001128:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800112a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800112c:	d3f9      	bcc.n	8001122 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112e:	4a0a      	ldr	r2, [pc, #40]	@ (8001158 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001130:	4c0a      	ldr	r4, [pc, #40]	@ (800115c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001132:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001134:	e001      	b.n	800113a <LoopFillZerobss>

08001136 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001136:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001138:	3204      	adds	r2, #4

0800113a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800113a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800113c:	d3fb      	bcc.n	8001136 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800113e:	f004 f9a1 	bl	8005484 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001142:	f7ff fc15 	bl	8000970 <main>
  bx  lr    
 8001146:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001148:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800114c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001150:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001154:	08006714 	.word	0x08006714
  ldr r2, =_sbss
 8001158:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800115c:	20004324 	.word	0x20004324

08001160 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001160:	e7fe      	b.n	8001160 <ADC_IRQHandler>
	...

08001164 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001168:	4b0e      	ldr	r3, [pc, #56]	@ (80011a4 <HAL_Init+0x40>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a0d      	ldr	r2, [pc, #52]	@ (80011a4 <HAL_Init+0x40>)
 800116e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001172:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001174:	4b0b      	ldr	r3, [pc, #44]	@ (80011a4 <HAL_Init+0x40>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a0a      	ldr	r2, [pc, #40]	@ (80011a4 <HAL_Init+0x40>)
 800117a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800117e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001180:	4b08      	ldr	r3, [pc, #32]	@ (80011a4 <HAL_Init+0x40>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a07      	ldr	r2, [pc, #28]	@ (80011a4 <HAL_Init+0x40>)
 8001186:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800118a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800118c:	2003      	movs	r0, #3
 800118e:	f000 f8d8 	bl	8001342 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001192:	200f      	movs	r0, #15
 8001194:	f7ff fcc6 	bl	8000b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001198:	f7ff fc98 	bl	8000acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40023c00 	.word	0x40023c00

080011a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ac:	4b06      	ldr	r3, [pc, #24]	@ (80011c8 <HAL_IncTick+0x20>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <HAL_IncTick+0x24>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4413      	add	r3, r2
 80011b8:	4a04      	ldr	r2, [pc, #16]	@ (80011cc <HAL_IncTick+0x24>)
 80011ba:	6013      	str	r3, [r2, #0]
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	20000008 	.word	0x20000008
 80011cc:	20000480 	.word	0x20000480

080011d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return uwTick;
 80011d4:	4b03      	ldr	r3, [pc, #12]	@ (80011e4 <HAL_GetTick+0x14>)
 80011d6:	681b      	ldr	r3, [r3, #0]
}
 80011d8:	4618      	mov	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	20000480 	.word	0x20000480

080011e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f8:	4b0c      	ldr	r3, [pc, #48]	@ (800122c <__NVIC_SetPriorityGrouping+0x44>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001204:	4013      	ands	r3, r2
 8001206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001210:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001214:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800121a:	4a04      	ldr	r2, [pc, #16]	@ (800122c <__NVIC_SetPriorityGrouping+0x44>)
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	60d3      	str	r3, [r2, #12]
}
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001234:	4b04      	ldr	r3, [pc, #16]	@ (8001248 <__NVIC_GetPriorityGrouping+0x18>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	0a1b      	lsrs	r3, r3, #8
 800123a:	f003 0307 	and.w	r3, r3, #7
}
 800123e:	4618      	mov	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	2b00      	cmp	r3, #0
 800125c:	db0b      	blt.n	8001276 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	f003 021f 	and.w	r2, r3, #31
 8001264:	4907      	ldr	r1, [pc, #28]	@ (8001284 <__NVIC_EnableIRQ+0x38>)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	095b      	lsrs	r3, r3, #5
 800126c:	2001      	movs	r0, #1
 800126e:	fa00 f202 	lsl.w	r2, r0, r2
 8001272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	e000e100 	.word	0xe000e100

08001288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	6039      	str	r1, [r7, #0]
 8001292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001298:	2b00      	cmp	r3, #0
 800129a:	db0a      	blt.n	80012b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	490c      	ldr	r1, [pc, #48]	@ (80012d4 <__NVIC_SetPriority+0x4c>)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	0112      	lsls	r2, r2, #4
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	440b      	add	r3, r1
 80012ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012b0:	e00a      	b.n	80012c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	4908      	ldr	r1, [pc, #32]	@ (80012d8 <__NVIC_SetPriority+0x50>)
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	f003 030f 	and.w	r3, r3, #15
 80012be:	3b04      	subs	r3, #4
 80012c0:	0112      	lsls	r2, r2, #4
 80012c2:	b2d2      	uxtb	r2, r2
 80012c4:	440b      	add	r3, r1
 80012c6:	761a      	strb	r2, [r3, #24]
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	e000e100 	.word	0xe000e100
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012dc:	b480      	push	{r7}
 80012de:	b089      	sub	sp, #36	@ 0x24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f1c3 0307 	rsb	r3, r3, #7
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	bf28      	it	cs
 80012fa:	2304      	movcs	r3, #4
 80012fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3304      	adds	r3, #4
 8001302:	2b06      	cmp	r3, #6
 8001304:	d902      	bls.n	800130c <NVIC_EncodePriority+0x30>
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3b03      	subs	r3, #3
 800130a:	e000      	b.n	800130e <NVIC_EncodePriority+0x32>
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001310:	f04f 32ff 	mov.w	r2, #4294967295
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43da      	mvns	r2, r3
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	401a      	ands	r2, r3
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001324:	f04f 31ff 	mov.w	r1, #4294967295
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	fa01 f303 	lsl.w	r3, r1, r3
 800132e:	43d9      	mvns	r1, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001334:	4313      	orrs	r3, r2
         );
}
 8001336:	4618      	mov	r0, r3
 8001338:	3724      	adds	r7, #36	@ 0x24
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ff4c 	bl	80011e8 <__NVIC_SetPriorityGrouping>
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
 8001364:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800136a:	f7ff ff61 	bl	8001230 <__NVIC_GetPriorityGrouping>
 800136e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	68b9      	ldr	r1, [r7, #8]
 8001374:	6978      	ldr	r0, [r7, #20]
 8001376:	f7ff ffb1 	bl	80012dc <NVIC_EncodePriority>
 800137a:	4602      	mov	r2, r0
 800137c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001380:	4611      	mov	r1, r2
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff ff80 	bl	8001288 <__NVIC_SetPriority>
}
 8001388:	bf00      	nop
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff ff54 	bl	800124c <__NVIC_EnableIRQ>
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013b8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013ba:	f7ff ff09 	bl	80011d0 <HAL_GetTick>
 80013be:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d008      	beq.n	80013de <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2280      	movs	r2, #128	@ 0x80
 80013d0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e052      	b.n	8001484 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 0216 	bic.w	r2, r2, #22
 80013ec:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	695a      	ldr	r2, [r3, #20]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80013fc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001402:	2b00      	cmp	r3, #0
 8001404:	d103      	bne.n	800140e <HAL_DMA_Abort+0x62>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800140a:	2b00      	cmp	r3, #0
 800140c:	d007      	beq.n	800141e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f022 0208 	bic.w	r2, r2, #8
 800141c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f022 0201 	bic.w	r2, r2, #1
 800142c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800142e:	e013      	b.n	8001458 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001430:	f7ff fece 	bl	80011d0 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b05      	cmp	r3, #5
 800143c:	d90c      	bls.n	8001458 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2220      	movs	r2, #32
 8001442:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2203      	movs	r2, #3
 8001448:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e015      	b.n	8001484 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1e4      	bne.n	8001430 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800146a:	223f      	movs	r2, #63	@ 0x3f
 800146c:	409a      	lsls	r2, r3
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2201      	movs	r2, #1
 8001476:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800149a:	b2db      	uxtb	r3, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d004      	beq.n	80014aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2280      	movs	r2, #128	@ 0x80
 80014a4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e00c      	b.n	80014c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2205      	movs	r2, #5
 80014ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f022 0201 	bic.w	r2, r2, #1
 80014c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b089      	sub	sp, #36	@ 0x24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
 80014ea:	e159      	b.n	80017a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014ec:	2201      	movs	r2, #1
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	697a      	ldr	r2, [r7, #20]
 80014fc:	4013      	ands	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	429a      	cmp	r2, r3
 8001506:	f040 8148 	bne.w	800179a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f003 0303 	and.w	r3, r3, #3
 8001512:	2b01      	cmp	r3, #1
 8001514:	d005      	beq.n	8001522 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800151e:	2b02      	cmp	r3, #2
 8001520:	d130      	bne.n	8001584 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	2203      	movs	r2, #3
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43db      	mvns	r3, r3
 8001534:	69ba      	ldr	r2, [r7, #24]
 8001536:	4013      	ands	r3, r2
 8001538:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	68da      	ldr	r2, [r3, #12]
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	69ba      	ldr	r2, [r7, #24]
 8001548:	4313      	orrs	r3, r2
 800154a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001558:	2201      	movs	r2, #1
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4013      	ands	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	091b      	lsrs	r3, r3, #4
 800156e:	f003 0201 	and.w	r2, r3, #1
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4313      	orrs	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f003 0303 	and.w	r3, r3, #3
 800158c:	2b03      	cmp	r3, #3
 800158e:	d017      	beq.n	80015c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	2203      	movs	r2, #3
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4013      	ands	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 0303 	and.w	r3, r3, #3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d123      	bne.n	8001614 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	08da      	lsrs	r2, r3, #3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	3208      	adds	r2, #8
 80015d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	f003 0307 	and.w	r3, r3, #7
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	220f      	movs	r2, #15
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	691a      	ldr	r2, [r3, #16]
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4313      	orrs	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	08da      	lsrs	r2, r3, #3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3208      	adds	r2, #8
 800160e:	69b9      	ldr	r1, [r7, #24]
 8001610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	2203      	movs	r2, #3
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	4013      	ands	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 0203 	and.w	r2, r3, #3
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001650:	2b00      	cmp	r3, #0
 8001652:	f000 80a2 	beq.w	800179a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	4b57      	ldr	r3, [pc, #348]	@ (80017b8 <HAL_GPIO_Init+0x2e8>)
 800165c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800165e:	4a56      	ldr	r2, [pc, #344]	@ (80017b8 <HAL_GPIO_Init+0x2e8>)
 8001660:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001664:	6453      	str	r3, [r2, #68]	@ 0x44
 8001666:	4b54      	ldr	r3, [pc, #336]	@ (80017b8 <HAL_GPIO_Init+0x2e8>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001672:	4a52      	ldr	r2, [pc, #328]	@ (80017bc <HAL_GPIO_Init+0x2ec>)
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	089b      	lsrs	r3, r3, #2
 8001678:	3302      	adds	r3, #2
 800167a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	f003 0303 	and.w	r3, r3, #3
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	220f      	movs	r2, #15
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43db      	mvns	r3, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4013      	ands	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a49      	ldr	r2, [pc, #292]	@ (80017c0 <HAL_GPIO_Init+0x2f0>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d019      	beq.n	80016d2 <HAL_GPIO_Init+0x202>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a48      	ldr	r2, [pc, #288]	@ (80017c4 <HAL_GPIO_Init+0x2f4>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d013      	beq.n	80016ce <HAL_GPIO_Init+0x1fe>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a47      	ldr	r2, [pc, #284]	@ (80017c8 <HAL_GPIO_Init+0x2f8>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d00d      	beq.n	80016ca <HAL_GPIO_Init+0x1fa>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4a46      	ldr	r2, [pc, #280]	@ (80017cc <HAL_GPIO_Init+0x2fc>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d007      	beq.n	80016c6 <HAL_GPIO_Init+0x1f6>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a45      	ldr	r2, [pc, #276]	@ (80017d0 <HAL_GPIO_Init+0x300>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d101      	bne.n	80016c2 <HAL_GPIO_Init+0x1f2>
 80016be:	2304      	movs	r3, #4
 80016c0:	e008      	b.n	80016d4 <HAL_GPIO_Init+0x204>
 80016c2:	2307      	movs	r3, #7
 80016c4:	e006      	b.n	80016d4 <HAL_GPIO_Init+0x204>
 80016c6:	2303      	movs	r3, #3
 80016c8:	e004      	b.n	80016d4 <HAL_GPIO_Init+0x204>
 80016ca:	2302      	movs	r3, #2
 80016cc:	e002      	b.n	80016d4 <HAL_GPIO_Init+0x204>
 80016ce:	2301      	movs	r3, #1
 80016d0:	e000      	b.n	80016d4 <HAL_GPIO_Init+0x204>
 80016d2:	2300      	movs	r3, #0
 80016d4:	69fa      	ldr	r2, [r7, #28]
 80016d6:	f002 0203 	and.w	r2, r2, #3
 80016da:	0092      	lsls	r2, r2, #2
 80016dc:	4093      	lsls	r3, r2
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016e4:	4935      	ldr	r1, [pc, #212]	@ (80017bc <HAL_GPIO_Init+0x2ec>)
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	089b      	lsrs	r3, r3, #2
 80016ea:	3302      	adds	r3, #2
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016f2:	4b38      	ldr	r3, [pc, #224]	@ (80017d4 <HAL_GPIO_Init+0x304>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	43db      	mvns	r3, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4013      	ands	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	4313      	orrs	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001716:	4a2f      	ldr	r2, [pc, #188]	@ (80017d4 <HAL_GPIO_Init+0x304>)
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800171c:	4b2d      	ldr	r3, [pc, #180]	@ (80017d4 <HAL_GPIO_Init+0x304>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	43db      	mvns	r3, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4013      	ands	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d003      	beq.n	8001740 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001738:	69ba      	ldr	r2, [r7, #24]
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	4313      	orrs	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001740:	4a24      	ldr	r2, [pc, #144]	@ (80017d4 <HAL_GPIO_Init+0x304>)
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001746:	4b23      	ldr	r3, [pc, #140]	@ (80017d4 <HAL_GPIO_Init+0x304>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	43db      	mvns	r3, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4013      	ands	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	4313      	orrs	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800176a:	4a1a      	ldr	r2, [pc, #104]	@ (80017d4 <HAL_GPIO_Init+0x304>)
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001770:	4b18      	ldr	r3, [pc, #96]	@ (80017d4 <HAL_GPIO_Init+0x304>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d003      	beq.n	8001794 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	4313      	orrs	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001794:	4a0f      	ldr	r2, [pc, #60]	@ (80017d4 <HAL_GPIO_Init+0x304>)
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3301      	adds	r3, #1
 800179e:	61fb      	str	r3, [r7, #28]
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	2b0f      	cmp	r3, #15
 80017a4:	f67f aea2 	bls.w	80014ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	3724      	adds	r7, #36	@ 0x24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40013800 	.word	0x40013800
 80017c0:	40020000 	.word	0x40020000
 80017c4:	40020400 	.word	0x40020400
 80017c8:	40020800 	.word	0x40020800
 80017cc:	40020c00 	.word	0x40020c00
 80017d0:	40021000 	.word	0x40021000
 80017d4:	40013c00 	.word	0x40013c00

080017d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	807b      	strh	r3, [r7, #2]
 80017e4:	4613      	mov	r3, r2
 80017e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017e8:	787b      	ldrb	r3, [r7, #1]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ee:	887a      	ldrh	r2, [r7, #2]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017f4:	e003      	b.n	80017fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017f6:	887b      	ldrh	r3, [r7, #2]
 80017f8:	041a      	lsls	r2, r3, #16
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	619a      	str	r2, [r3, #24]
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
	...

0800180c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e267      	b.n	8001cee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0301 	and.w	r3, r3, #1
 8001826:	2b00      	cmp	r3, #0
 8001828:	d075      	beq.n	8001916 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800182a:	4b88      	ldr	r3, [pc, #544]	@ (8001a4c <HAL_RCC_OscConfig+0x240>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 030c 	and.w	r3, r3, #12
 8001832:	2b04      	cmp	r3, #4
 8001834:	d00c      	beq.n	8001850 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001836:	4b85      	ldr	r3, [pc, #532]	@ (8001a4c <HAL_RCC_OscConfig+0x240>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800183e:	2b08      	cmp	r3, #8
 8001840:	d112      	bne.n	8001868 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001842:	4b82      	ldr	r3, [pc, #520]	@ (8001a4c <HAL_RCC_OscConfig+0x240>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800184a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800184e:	d10b      	bne.n	8001868 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001850:	4b7e      	ldr	r3, [pc, #504]	@ (8001a4c <HAL_RCC_OscConfig+0x240>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d05b      	beq.n	8001914 <HAL_RCC_OscConfig+0x108>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d157      	bne.n	8001914 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e242      	b.n	8001cee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001870:	d106      	bne.n	8001880 <HAL_RCC_OscConfig+0x74>
 8001872:	4b76      	ldr	r3, [pc, #472]	@ (8001a4c <HAL_RCC_OscConfig+0x240>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a75      	ldr	r2, [pc, #468]	@ (8001a4c <HAL_RCC_OscConfig+0x240>)
 8001878:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	e01d      	b.n	80018bc <HAL_RCC_OscConfig+0xb0>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001888:	d10c      	bne.n	80018a4 <HAL_RCC_OscConfig+0x98>
 800188a:	4b70      	ldr	r3, [pc, #448]	@ (8001a4c <HAL_RCC_OscConfig+0x240>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a6f      	ldr	r2, [pc, #444]	@ (8001a4c <HAL_RCC_OscConfig+0x240>)
 8001890:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	4b6d      	ldr	r3, [pc, #436]	@ (8001a4c <HAL_RCC_OscConfig+0x240>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a6c      	ldr	r2, [pc, #432]	@ (8001a4c <HAL_RCC_OscConfig+0x240>)
 800189c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	e00b      	b.n	80018bc <HAL_RCC_OscConfig+0xb0>
 80018a4:	4b69      	ldr	r3, [pc, #420]	@ (8001a4c <HAL_RCC_OscConfig+0x240>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a68      	ldr	r2, [pc, #416]	@ (8001a4c <HAL_RCC_OscConfig+0x240>)
 80018aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018ae:	6013      	str	r3, [r2, #0]
 80018b0:	4b66      	ldr	r3, [pc, #408]	@ (8001a4c <HAL_RCC_OscConfig+0x240>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a65      	ldr	r2, [pc, #404]	@ (8001a4c <HAL_RCC_OscConfig+0x240>)
 80018b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d013      	beq.n	80018ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c4:	f7ff fc84 	bl	80011d0 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018cc:	f7ff fc80 	bl	80011d0 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b64      	cmp	r3, #100	@ 0x64
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e207      	b.n	8001cee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018de:	4b5b      	ldr	r3, [pc, #364]	@ (8001a4c <HAL_RCC_OscConfig+0x240>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0f0      	beq.n	80018cc <HAL_RCC_OscConfig+0xc0>
 80018ea:	e014      	b.n	8001916 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ec:	f7ff fc70 	bl	80011d0 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018f4:	f7ff fc6c 	bl	80011d0 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b64      	cmp	r3, #100	@ 0x64
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e1f3      	b.n	8001cee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001906:	4b51      	ldr	r3, [pc, #324]	@ (8001a4c <HAL_RCC_OscConfig+0x240>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1f0      	bne.n	80018f4 <HAL_RCC_OscConfig+0xe8>
 8001912:	e000      	b.n	8001916 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001914:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d063      	beq.n	80019ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001922:	4b4a      	ldr	r3, [pc, #296]	@ (8001a4c <HAL_RCC_OscConfig+0x240>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 030c 	and.w	r3, r3, #12
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00b      	beq.n	8001946 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800192e:	4b47      	ldr	r3, [pc, #284]	@ (8001a4c <HAL_RCC_OscConfig+0x240>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001936:	2b08      	cmp	r3, #8
 8001938:	d11c      	bne.n	8001974 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800193a:	4b44      	ldr	r3, [pc, #272]	@ (8001a4c <HAL_RCC_OscConfig+0x240>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d116      	bne.n	8001974 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001946:	4b41      	ldr	r3, [pc, #260]	@ (8001a4c <HAL_RCC_OscConfig+0x240>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d005      	beq.n	800195e <HAL_RCC_OscConfig+0x152>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d001      	beq.n	800195e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e1c7      	b.n	8001cee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800195e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a4c <HAL_RCC_OscConfig+0x240>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	4937      	ldr	r1, [pc, #220]	@ (8001a4c <HAL_RCC_OscConfig+0x240>)
 800196e:	4313      	orrs	r3, r2
 8001970:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001972:	e03a      	b.n	80019ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d020      	beq.n	80019be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800197c:	4b34      	ldr	r3, [pc, #208]	@ (8001a50 <HAL_RCC_OscConfig+0x244>)
 800197e:	2201      	movs	r2, #1
 8001980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001982:	f7ff fc25 	bl	80011d0 <HAL_GetTick>
 8001986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001988:	e008      	b.n	800199c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800198a:	f7ff fc21 	bl	80011d0 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e1a8      	b.n	8001cee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199c:	4b2b      	ldr	r3, [pc, #172]	@ (8001a4c <HAL_RCC_OscConfig+0x240>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d0f0      	beq.n	800198a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a8:	4b28      	ldr	r3, [pc, #160]	@ (8001a4c <HAL_RCC_OscConfig+0x240>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	4925      	ldr	r1, [pc, #148]	@ (8001a4c <HAL_RCC_OscConfig+0x240>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	600b      	str	r3, [r1, #0]
 80019bc:	e015      	b.n	80019ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019be:	4b24      	ldr	r3, [pc, #144]	@ (8001a50 <HAL_RCC_OscConfig+0x244>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c4:	f7ff fc04 	bl	80011d0 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019cc:	f7ff fc00 	bl	80011d0 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e187      	b.n	8001cee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019de:	4b1b      	ldr	r3, [pc, #108]	@ (8001a4c <HAL_RCC_OscConfig+0x240>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f0      	bne.n	80019cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0308 	and.w	r3, r3, #8
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d036      	beq.n	8001a64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d016      	beq.n	8001a2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019fe:	4b15      	ldr	r3, [pc, #84]	@ (8001a54 <HAL_RCC_OscConfig+0x248>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a04:	f7ff fbe4 	bl	80011d0 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a0c:	f7ff fbe0 	bl	80011d0 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e167      	b.n	8001cee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a4c <HAL_RCC_OscConfig+0x240>)
 8001a20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0x200>
 8001a2a:	e01b      	b.n	8001a64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a2c:	4b09      	ldr	r3, [pc, #36]	@ (8001a54 <HAL_RCC_OscConfig+0x248>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a32:	f7ff fbcd 	bl	80011d0 <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a38:	e00e      	b.n	8001a58 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a3a:	f7ff fbc9 	bl	80011d0 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d907      	bls.n	8001a58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e150      	b.n	8001cee <HAL_RCC_OscConfig+0x4e2>
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	42470000 	.word	0x42470000
 8001a54:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a58:	4b88      	ldr	r3, [pc, #544]	@ (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001a5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a5c:	f003 0302 	and.w	r3, r3, #2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1ea      	bne.n	8001a3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f000 8097 	beq.w	8001ba0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a72:	2300      	movs	r3, #0
 8001a74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a76:	4b81      	ldr	r3, [pc, #516]	@ (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d10f      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	4b7d      	ldr	r3, [pc, #500]	@ (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8a:	4a7c      	ldr	r2, [pc, #496]	@ (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001a8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a92:	4b7a      	ldr	r3, [pc, #488]	@ (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa2:	4b77      	ldr	r3, [pc, #476]	@ (8001c80 <HAL_RCC_OscConfig+0x474>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d118      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001aae:	4b74      	ldr	r3, [pc, #464]	@ (8001c80 <HAL_RCC_OscConfig+0x474>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a73      	ldr	r2, [pc, #460]	@ (8001c80 <HAL_RCC_OscConfig+0x474>)
 8001ab4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ab8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aba:	f7ff fb89 	bl	80011d0 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ac2:	f7ff fb85 	bl	80011d0 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e10c      	b.n	8001cee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad4:	4b6a      	ldr	r3, [pc, #424]	@ (8001c80 <HAL_RCC_OscConfig+0x474>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0f0      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d106      	bne.n	8001af6 <HAL_RCC_OscConfig+0x2ea>
 8001ae8:	4b64      	ldr	r3, [pc, #400]	@ (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aec:	4a63      	ldr	r2, [pc, #396]	@ (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001af4:	e01c      	b.n	8001b30 <HAL_RCC_OscConfig+0x324>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	2b05      	cmp	r3, #5
 8001afc:	d10c      	bne.n	8001b18 <HAL_RCC_OscConfig+0x30c>
 8001afe:	4b5f      	ldr	r3, [pc, #380]	@ (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b02:	4a5e      	ldr	r2, [pc, #376]	@ (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001b04:	f043 0304 	orr.w	r3, r3, #4
 8001b08:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b0a:	4b5c      	ldr	r3, [pc, #368]	@ (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b0e:	4a5b      	ldr	r2, [pc, #364]	@ (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b16:	e00b      	b.n	8001b30 <HAL_RCC_OscConfig+0x324>
 8001b18:	4b58      	ldr	r3, [pc, #352]	@ (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001b1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b1c:	4a57      	ldr	r2, [pc, #348]	@ (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001b1e:	f023 0301 	bic.w	r3, r3, #1
 8001b22:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b24:	4b55      	ldr	r3, [pc, #340]	@ (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b28:	4a54      	ldr	r2, [pc, #336]	@ (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001b2a:	f023 0304 	bic.w	r3, r3, #4
 8001b2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d015      	beq.n	8001b64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b38:	f7ff fb4a 	bl	80011d0 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b3e:	e00a      	b.n	8001b56 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b40:	f7ff fb46 	bl	80011d0 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e0cb      	b.n	8001cee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b56:	4b49      	ldr	r3, [pc, #292]	@ (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0ee      	beq.n	8001b40 <HAL_RCC_OscConfig+0x334>
 8001b62:	e014      	b.n	8001b8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b64:	f7ff fb34 	bl	80011d0 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b6a:	e00a      	b.n	8001b82 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b6c:	f7ff fb30 	bl	80011d0 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e0b5      	b.n	8001cee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b82:	4b3e      	ldr	r3, [pc, #248]	@ (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1ee      	bne.n	8001b6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b8e:	7dfb      	ldrb	r3, [r7, #23]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d105      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b94:	4b39      	ldr	r3, [pc, #228]	@ (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b98:	4a38      	ldr	r2, [pc, #224]	@ (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001b9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 80a1 	beq.w	8001cec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001baa:	4b34      	ldr	r3, [pc, #208]	@ (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 030c 	and.w	r3, r3, #12
 8001bb2:	2b08      	cmp	r3, #8
 8001bb4:	d05c      	beq.n	8001c70 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d141      	bne.n	8001c42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bbe:	4b31      	ldr	r3, [pc, #196]	@ (8001c84 <HAL_RCC_OscConfig+0x478>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc4:	f7ff fb04 	bl	80011d0 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bcc:	f7ff fb00 	bl	80011d0 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e087      	b.n	8001cee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bde:	4b27      	ldr	r3, [pc, #156]	@ (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69da      	ldr	r2, [r3, #28]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a1b      	ldr	r3, [r3, #32]
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf8:	019b      	lsls	r3, r3, #6
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c00:	085b      	lsrs	r3, r3, #1
 8001c02:	3b01      	subs	r3, #1
 8001c04:	041b      	lsls	r3, r3, #16
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c0c:	061b      	lsls	r3, r3, #24
 8001c0e:	491b      	ldr	r1, [pc, #108]	@ (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c14:	4b1b      	ldr	r3, [pc, #108]	@ (8001c84 <HAL_RCC_OscConfig+0x478>)
 8001c16:	2201      	movs	r2, #1
 8001c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1a:	f7ff fad9 	bl	80011d0 <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c22:	f7ff fad5 	bl	80011d0 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e05c      	b.n	8001cee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c34:	4b11      	ldr	r3, [pc, #68]	@ (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0f0      	beq.n	8001c22 <HAL_RCC_OscConfig+0x416>
 8001c40:	e054      	b.n	8001cec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c42:	4b10      	ldr	r3, [pc, #64]	@ (8001c84 <HAL_RCC_OscConfig+0x478>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c48:	f7ff fac2 	bl	80011d0 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c50:	f7ff fabe 	bl	80011d0 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e045      	b.n	8001cee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c62:	4b06      	ldr	r3, [pc, #24]	@ (8001c7c <HAL_RCC_OscConfig+0x470>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f0      	bne.n	8001c50 <HAL_RCC_OscConfig+0x444>
 8001c6e:	e03d      	b.n	8001cec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d107      	bne.n	8001c88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e038      	b.n	8001cee <HAL_RCC_OscConfig+0x4e2>
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40007000 	.word	0x40007000
 8001c84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c88:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf8 <HAL_RCC_OscConfig+0x4ec>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d028      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d121      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d11a      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001cb8:	4013      	ands	r3, r2
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001cbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d111      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cce:	085b      	lsrs	r3, r3, #1
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d107      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ce2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d001      	beq.n	8001cec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e000      	b.n	8001cee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40023800 	.word	0x40023800

08001cfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d101      	bne.n	8001d10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e0cc      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d10:	4b68      	ldr	r3, [pc, #416]	@ (8001eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d90c      	bls.n	8001d38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1e:	4b65      	ldr	r3, [pc, #404]	@ (8001eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d26:	4b63      	ldr	r3, [pc, #396]	@ (8001eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d001      	beq.n	8001d38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e0b8      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d020      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d005      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d50:	4b59      	ldr	r3, [pc, #356]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	4a58      	ldr	r2, [pc, #352]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0308 	and.w	r3, r3, #8
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d005      	beq.n	8001d74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d68:	4b53      	ldr	r3, [pc, #332]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	4a52      	ldr	r2, [pc, #328]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001d72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d74:	4b50      	ldr	r3, [pc, #320]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	494d      	ldr	r1, [pc, #308]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d82:	4313      	orrs	r3, r2
 8001d84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d044      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d107      	bne.n	8001daa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9a:	4b47      	ldr	r3, [pc, #284]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d119      	bne.n	8001dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e07f      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d003      	beq.n	8001dba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001db6:	2b03      	cmp	r3, #3
 8001db8:	d107      	bne.n	8001dca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dba:	4b3f      	ldr	r3, [pc, #252]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d109      	bne.n	8001dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e06f      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dca:	4b3b      	ldr	r3, [pc, #236]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e067      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dda:	4b37      	ldr	r3, [pc, #220]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f023 0203 	bic.w	r2, r3, #3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	4934      	ldr	r1, [pc, #208]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dec:	f7ff f9f0 	bl	80011d0 <HAL_GetTick>
 8001df0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df2:	e00a      	b.n	8001e0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df4:	f7ff f9ec 	bl	80011d0 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e04f      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e0a:	4b2b      	ldr	r3, [pc, #172]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 020c 	and.w	r2, r3, #12
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d1eb      	bne.n	8001df4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e1c:	4b25      	ldr	r3, [pc, #148]	@ (8001eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d20c      	bcs.n	8001e44 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2a:	4b22      	ldr	r3, [pc, #136]	@ (8001eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e32:	4b20      	ldr	r3, [pc, #128]	@ (8001eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d001      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e032      	b.n	8001eaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d008      	beq.n	8001e62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e50:	4b19      	ldr	r3, [pc, #100]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	4916      	ldr	r1, [pc, #88]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d009      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e6e:	4b12      	ldr	r3, [pc, #72]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	490e      	ldr	r1, [pc, #56]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e82:	f000 f821 	bl	8001ec8 <HAL_RCC_GetSysClockFreq>
 8001e86:	4602      	mov	r2, r0
 8001e88:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	091b      	lsrs	r3, r3, #4
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	490a      	ldr	r1, [pc, #40]	@ (8001ebc <HAL_RCC_ClockConfig+0x1c0>)
 8001e94:	5ccb      	ldrb	r3, [r1, r3]
 8001e96:	fa22 f303 	lsr.w	r3, r2, r3
 8001e9a:	4a09      	ldr	r2, [pc, #36]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001e9e:	4b09      	ldr	r3, [pc, #36]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f7fe fe3e 	bl	8000b24 <HAL_InitTick>

  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40023c00 	.word	0x40023c00
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	08006508 	.word	0x08006508
 8001ec0:	20000000 	.word	0x20000000
 8001ec4:	20000004 	.word	0x20000004

08001ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ecc:	b094      	sub	sp, #80	@ 0x50
 8001ece:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ee0:	4b79      	ldr	r3, [pc, #484]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f003 030c 	and.w	r3, r3, #12
 8001ee8:	2b08      	cmp	r3, #8
 8001eea:	d00d      	beq.n	8001f08 <HAL_RCC_GetSysClockFreq+0x40>
 8001eec:	2b08      	cmp	r3, #8
 8001eee:	f200 80e1 	bhi.w	80020b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d002      	beq.n	8001efc <HAL_RCC_GetSysClockFreq+0x34>
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	d003      	beq.n	8001f02 <HAL_RCC_GetSysClockFreq+0x3a>
 8001efa:	e0db      	b.n	80020b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001efc:	4b73      	ldr	r3, [pc, #460]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x204>)
 8001efe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f00:	e0db      	b.n	80020ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f02:	4b73      	ldr	r3, [pc, #460]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001f04:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f06:	e0d8      	b.n	80020ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f08:	4b6f      	ldr	r3, [pc, #444]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f10:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f12:	4b6d      	ldr	r3, [pc, #436]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d063      	beq.n	8001fe6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f1e:	4b6a      	ldr	r3, [pc, #424]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	099b      	lsrs	r3, r3, #6
 8001f24:	2200      	movs	r2, #0
 8001f26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f28:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f30:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f32:	2300      	movs	r3, #0
 8001f34:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f36:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001f3a:	4622      	mov	r2, r4
 8001f3c:	462b      	mov	r3, r5
 8001f3e:	f04f 0000 	mov.w	r0, #0
 8001f42:	f04f 0100 	mov.w	r1, #0
 8001f46:	0159      	lsls	r1, r3, #5
 8001f48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f4c:	0150      	lsls	r0, r2, #5
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	4621      	mov	r1, r4
 8001f54:	1a51      	subs	r1, r2, r1
 8001f56:	6139      	str	r1, [r7, #16]
 8001f58:	4629      	mov	r1, r5
 8001f5a:	eb63 0301 	sbc.w	r3, r3, r1
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	f04f 0200 	mov.w	r2, #0
 8001f64:	f04f 0300 	mov.w	r3, #0
 8001f68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f6c:	4659      	mov	r1, fp
 8001f6e:	018b      	lsls	r3, r1, #6
 8001f70:	4651      	mov	r1, sl
 8001f72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f76:	4651      	mov	r1, sl
 8001f78:	018a      	lsls	r2, r1, #6
 8001f7a:	4651      	mov	r1, sl
 8001f7c:	ebb2 0801 	subs.w	r8, r2, r1
 8001f80:	4659      	mov	r1, fp
 8001f82:	eb63 0901 	sbc.w	r9, r3, r1
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	f04f 0300 	mov.w	r3, #0
 8001f8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f9a:	4690      	mov	r8, r2
 8001f9c:	4699      	mov	r9, r3
 8001f9e:	4623      	mov	r3, r4
 8001fa0:	eb18 0303 	adds.w	r3, r8, r3
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	462b      	mov	r3, r5
 8001fa8:	eb49 0303 	adc.w	r3, r9, r3
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	f04f 0200 	mov.w	r2, #0
 8001fb2:	f04f 0300 	mov.w	r3, #0
 8001fb6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001fba:	4629      	mov	r1, r5
 8001fbc:	024b      	lsls	r3, r1, #9
 8001fbe:	4621      	mov	r1, r4
 8001fc0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001fc4:	4621      	mov	r1, r4
 8001fc6:	024a      	lsls	r2, r1, #9
 8001fc8:	4610      	mov	r0, r2
 8001fca:	4619      	mov	r1, r3
 8001fcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fce:	2200      	movs	r2, #0
 8001fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001fd4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001fd8:	f7fe f96a 	bl	80002b0 <__aeabi_uldivmod>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001fe4:	e058      	b.n	8002098 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fe6:	4b38      	ldr	r3, [pc, #224]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	099b      	lsrs	r3, r3, #6
 8001fec:	2200      	movs	r2, #0
 8001fee:	4618      	mov	r0, r3
 8001ff0:	4611      	mov	r1, r2
 8001ff2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ff6:	623b      	str	r3, [r7, #32]
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ffc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002000:	4642      	mov	r2, r8
 8002002:	464b      	mov	r3, r9
 8002004:	f04f 0000 	mov.w	r0, #0
 8002008:	f04f 0100 	mov.w	r1, #0
 800200c:	0159      	lsls	r1, r3, #5
 800200e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002012:	0150      	lsls	r0, r2, #5
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4641      	mov	r1, r8
 800201a:	ebb2 0a01 	subs.w	sl, r2, r1
 800201e:	4649      	mov	r1, r9
 8002020:	eb63 0b01 	sbc.w	fp, r3, r1
 8002024:	f04f 0200 	mov.w	r2, #0
 8002028:	f04f 0300 	mov.w	r3, #0
 800202c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002030:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002034:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002038:	ebb2 040a 	subs.w	r4, r2, sl
 800203c:	eb63 050b 	sbc.w	r5, r3, fp
 8002040:	f04f 0200 	mov.w	r2, #0
 8002044:	f04f 0300 	mov.w	r3, #0
 8002048:	00eb      	lsls	r3, r5, #3
 800204a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800204e:	00e2      	lsls	r2, r4, #3
 8002050:	4614      	mov	r4, r2
 8002052:	461d      	mov	r5, r3
 8002054:	4643      	mov	r3, r8
 8002056:	18e3      	adds	r3, r4, r3
 8002058:	603b      	str	r3, [r7, #0]
 800205a:	464b      	mov	r3, r9
 800205c:	eb45 0303 	adc.w	r3, r5, r3
 8002060:	607b      	str	r3, [r7, #4]
 8002062:	f04f 0200 	mov.w	r2, #0
 8002066:	f04f 0300 	mov.w	r3, #0
 800206a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800206e:	4629      	mov	r1, r5
 8002070:	028b      	lsls	r3, r1, #10
 8002072:	4621      	mov	r1, r4
 8002074:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002078:	4621      	mov	r1, r4
 800207a:	028a      	lsls	r2, r1, #10
 800207c:	4610      	mov	r0, r2
 800207e:	4619      	mov	r1, r3
 8002080:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002082:	2200      	movs	r2, #0
 8002084:	61bb      	str	r3, [r7, #24]
 8002086:	61fa      	str	r2, [r7, #28]
 8002088:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800208c:	f7fe f910 	bl	80002b0 <__aeabi_uldivmod>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4613      	mov	r3, r2
 8002096:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002098:	4b0b      	ldr	r3, [pc, #44]	@ (80020c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	0c1b      	lsrs	r3, r3, #16
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	3301      	adds	r3, #1
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80020a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80020aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80020b2:	e002      	b.n	80020ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020b4:	4b05      	ldr	r3, [pc, #20]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x204>)
 80020b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80020b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3750      	adds	r7, #80	@ 0x50
 80020c0:	46bd      	mov	sp, r7
 80020c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020c6:	bf00      	nop
 80020c8:	40023800 	.word	0x40023800
 80020cc:	00f42400 	.word	0x00f42400
 80020d0:	007a1200 	.word	0x007a1200

080020d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020d8:	4b03      	ldr	r3, [pc, #12]	@ (80020e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80020da:	681b      	ldr	r3, [r3, #0]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	20000000 	.word	0x20000000

080020ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020f0:	f7ff fff0 	bl	80020d4 <HAL_RCC_GetHCLKFreq>
 80020f4:	4602      	mov	r2, r0
 80020f6:	4b05      	ldr	r3, [pc, #20]	@ (800210c <HAL_RCC_GetPCLK1Freq+0x20>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	0a9b      	lsrs	r3, r3, #10
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	4903      	ldr	r1, [pc, #12]	@ (8002110 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002102:	5ccb      	ldrb	r3, [r1, r3]
 8002104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002108:	4618      	mov	r0, r3
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40023800 	.word	0x40023800
 8002110:	08006518 	.word	0x08006518

08002114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002118:	f7ff ffdc 	bl	80020d4 <HAL_RCC_GetHCLKFreq>
 800211c:	4602      	mov	r2, r0
 800211e:	4b05      	ldr	r3, [pc, #20]	@ (8002134 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	0b5b      	lsrs	r3, r3, #13
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	4903      	ldr	r1, [pc, #12]	@ (8002138 <HAL_RCC_GetPCLK2Freq+0x24>)
 800212a:	5ccb      	ldrb	r3, [r1, r3]
 800212c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002130:	4618      	mov	r0, r3
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40023800 	.word	0x40023800
 8002138:	08006518 	.word	0x08006518

0800213c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	220f      	movs	r2, #15
 800214a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800214c:	4b12      	ldr	r3, [pc, #72]	@ (8002198 <HAL_RCC_GetClockConfig+0x5c>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 0203 	and.w	r2, r3, #3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002158:	4b0f      	ldr	r3, [pc, #60]	@ (8002198 <HAL_RCC_GetClockConfig+0x5c>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002164:	4b0c      	ldr	r3, [pc, #48]	@ (8002198 <HAL_RCC_GetClockConfig+0x5c>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002170:	4b09      	ldr	r3, [pc, #36]	@ (8002198 <HAL_RCC_GetClockConfig+0x5c>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	08db      	lsrs	r3, r3, #3
 8002176:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800217e:	4b07      	ldr	r3, [pc, #28]	@ (800219c <HAL_RCC_GetClockConfig+0x60>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0207 	and.w	r2, r3, #7
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	601a      	str	r2, [r3, #0]
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	40023800 	.word	0x40023800
 800219c:	40023c00 	.word	0x40023c00

080021a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e041      	b.n	8002236 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d106      	bne.n	80021cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f839 	bl	800223e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2202      	movs	r2, #2
 80021d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	3304      	adds	r3, #4
 80021dc:	4619      	mov	r1, r3
 80021de:	4610      	mov	r0, r2
 80021e0:	f000 f9b2 	bl	8002548 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800223e:	b480      	push	{r7}
 8002240:	b083      	sub	sp, #12
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
	...

08002254 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b01      	cmp	r3, #1
 8002266:	d001      	beq.n	800226c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e044      	b.n	80022f6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2202      	movs	r2, #2
 8002270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68da      	ldr	r2, [r3, #12]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f042 0201 	orr.w	r2, r2, #1
 8002282:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a1e      	ldr	r2, [pc, #120]	@ (8002304 <HAL_TIM_Base_Start_IT+0xb0>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d018      	beq.n	80022c0 <HAL_TIM_Base_Start_IT+0x6c>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002296:	d013      	beq.n	80022c0 <HAL_TIM_Base_Start_IT+0x6c>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a1a      	ldr	r2, [pc, #104]	@ (8002308 <HAL_TIM_Base_Start_IT+0xb4>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d00e      	beq.n	80022c0 <HAL_TIM_Base_Start_IT+0x6c>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a19      	ldr	r2, [pc, #100]	@ (800230c <HAL_TIM_Base_Start_IT+0xb8>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d009      	beq.n	80022c0 <HAL_TIM_Base_Start_IT+0x6c>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a17      	ldr	r2, [pc, #92]	@ (8002310 <HAL_TIM_Base_Start_IT+0xbc>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d004      	beq.n	80022c0 <HAL_TIM_Base_Start_IT+0x6c>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a16      	ldr	r2, [pc, #88]	@ (8002314 <HAL_TIM_Base_Start_IT+0xc0>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d111      	bne.n	80022e4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2b06      	cmp	r3, #6
 80022d0:	d010      	beq.n	80022f4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f042 0201 	orr.w	r2, r2, #1
 80022e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022e2:	e007      	b.n	80022f4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0201 	orr.w	r2, r2, #1
 80022f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3714      	adds	r7, #20
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40010000 	.word	0x40010000
 8002308:	40000400 	.word	0x40000400
 800230c:	40000800 	.word	0x40000800
 8002310:	40000c00 	.word	0x40000c00
 8002314:	40014000 	.word	0x40014000

08002318 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d020      	beq.n	800237c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d01b      	beq.n	800237c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f06f 0202 	mvn.w	r2, #2
 800234c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2201      	movs	r2, #1
 8002352:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f8d2 	bl	800250c <HAL_TIM_IC_CaptureCallback>
 8002368:	e005      	b.n	8002376 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f8c4 	bl	80024f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 f8d5 	bl	8002520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	f003 0304 	and.w	r3, r3, #4
 8002382:	2b00      	cmp	r3, #0
 8002384:	d020      	beq.n	80023c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d01b      	beq.n	80023c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f06f 0204 	mvn.w	r2, #4
 8002398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2202      	movs	r2, #2
 800239e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f8ac 	bl	800250c <HAL_TIM_IC_CaptureCallback>
 80023b4:	e005      	b.n	80023c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f89e 	bl	80024f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f000 f8af 	bl	8002520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d020      	beq.n	8002414 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d01b      	beq.n	8002414 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f06f 0208 	mvn.w	r2, #8
 80023e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2204      	movs	r2, #4
 80023ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f886 	bl	800250c <HAL_TIM_IC_CaptureCallback>
 8002400:	e005      	b.n	800240e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f878 	bl	80024f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 f889 	bl	8002520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	f003 0310 	and.w	r3, r3, #16
 800241a:	2b00      	cmp	r3, #0
 800241c:	d020      	beq.n	8002460 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f003 0310 	and.w	r3, r3, #16
 8002424:	2b00      	cmp	r3, #0
 8002426:	d01b      	beq.n	8002460 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f06f 0210 	mvn.w	r2, #16
 8002430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2208      	movs	r2, #8
 8002436:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f860 	bl	800250c <HAL_TIM_IC_CaptureCallback>
 800244c:	e005      	b.n	800245a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 f852 	bl	80024f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 f863 	bl	8002520 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00c      	beq.n	8002484 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b00      	cmp	r3, #0
 8002472:	d007      	beq.n	8002484 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f06f 0201 	mvn.w	r2, #1
 800247c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7fe fb0c 	bl	8000a9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00c      	beq.n	80024a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002494:	2b00      	cmp	r3, #0
 8002496:	d007      	beq.n	80024a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80024a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f8e6 	bl	8002674 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00c      	beq.n	80024cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d007      	beq.n	80024cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80024c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f834 	bl	8002534 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	f003 0320 	and.w	r3, r3, #32
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00c      	beq.n	80024f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f003 0320 	and.w	r3, r3, #32
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d007      	beq.n	80024f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f06f 0220 	mvn.w	r2, #32
 80024e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f000 f8b8 	bl	8002660 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024f0:	bf00      	nop
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a3a      	ldr	r2, [pc, #232]	@ (8002644 <TIM_Base_SetConfig+0xfc>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d00f      	beq.n	8002580 <TIM_Base_SetConfig+0x38>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002566:	d00b      	beq.n	8002580 <TIM_Base_SetConfig+0x38>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a37      	ldr	r2, [pc, #220]	@ (8002648 <TIM_Base_SetConfig+0x100>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d007      	beq.n	8002580 <TIM_Base_SetConfig+0x38>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a36      	ldr	r2, [pc, #216]	@ (800264c <TIM_Base_SetConfig+0x104>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d003      	beq.n	8002580 <TIM_Base_SetConfig+0x38>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a35      	ldr	r2, [pc, #212]	@ (8002650 <TIM_Base_SetConfig+0x108>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d108      	bne.n	8002592 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002586:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	4313      	orrs	r3, r2
 8002590:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a2b      	ldr	r2, [pc, #172]	@ (8002644 <TIM_Base_SetConfig+0xfc>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d01b      	beq.n	80025d2 <TIM_Base_SetConfig+0x8a>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025a0:	d017      	beq.n	80025d2 <TIM_Base_SetConfig+0x8a>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a28      	ldr	r2, [pc, #160]	@ (8002648 <TIM_Base_SetConfig+0x100>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d013      	beq.n	80025d2 <TIM_Base_SetConfig+0x8a>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a27      	ldr	r2, [pc, #156]	@ (800264c <TIM_Base_SetConfig+0x104>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d00f      	beq.n	80025d2 <TIM_Base_SetConfig+0x8a>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a26      	ldr	r2, [pc, #152]	@ (8002650 <TIM_Base_SetConfig+0x108>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d00b      	beq.n	80025d2 <TIM_Base_SetConfig+0x8a>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a25      	ldr	r2, [pc, #148]	@ (8002654 <TIM_Base_SetConfig+0x10c>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d007      	beq.n	80025d2 <TIM_Base_SetConfig+0x8a>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a24      	ldr	r2, [pc, #144]	@ (8002658 <TIM_Base_SetConfig+0x110>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d003      	beq.n	80025d2 <TIM_Base_SetConfig+0x8a>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a23      	ldr	r2, [pc, #140]	@ (800265c <TIM_Base_SetConfig+0x114>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d108      	bne.n	80025e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68fa      	ldr	r2, [r7, #12]
 80025f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a0e      	ldr	r2, [pc, #56]	@ (8002644 <TIM_Base_SetConfig+0xfc>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d103      	bne.n	8002618 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	691a      	ldr	r2, [r3, #16]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b01      	cmp	r3, #1
 8002628:	d105      	bne.n	8002636 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	f023 0201 	bic.w	r2, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	611a      	str	r2, [r3, #16]
  }
}
 8002636:	bf00      	nop
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40010000 	.word	0x40010000
 8002648:	40000400 	.word	0x40000400
 800264c:	40000800 	.word	0x40000800
 8002650:	40000c00 	.word	0x40000c00
 8002654:	40014000 	.word	0x40014000
 8002658:	40014400 	.word	0x40014400
 800265c:	40014800 	.word	0x40014800

08002660 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d101      	bne.n	800269a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e042      	b.n	8002720 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d106      	bne.n	80026b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7fe fc10 	bl	8000ed4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2224      	movs	r2, #36	@ 0x24
 80026b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80026ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 fdbd 	bl	800324c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	691a      	ldr	r2, [r3, #16]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80026e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	695a      	ldr	r2, [r3, #20]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80026f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002700:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2220      	movs	r2, #32
 800270c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2220      	movs	r2, #32
 8002714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3708      	adds	r7, #8
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08a      	sub	sp, #40	@ 0x28
 800272c:	af02      	add	r7, sp, #8
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	603b      	str	r3, [r7, #0]
 8002734:	4613      	mov	r3, r2
 8002736:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b20      	cmp	r3, #32
 8002746:	d175      	bne.n	8002834 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d002      	beq.n	8002754 <HAL_UART_Transmit+0x2c>
 800274e:	88fb      	ldrh	r3, [r7, #6]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e06e      	b.n	8002836 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2221      	movs	r2, #33	@ 0x21
 8002762:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002766:	f7fe fd33 	bl	80011d0 <HAL_GetTick>
 800276a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	88fa      	ldrh	r2, [r7, #6]
 8002770:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	88fa      	ldrh	r2, [r7, #6]
 8002776:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002780:	d108      	bne.n	8002794 <HAL_UART_Transmit+0x6c>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d104      	bne.n	8002794 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800278a:	2300      	movs	r3, #0
 800278c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	61bb      	str	r3, [r7, #24]
 8002792:	e003      	b.n	800279c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002798:	2300      	movs	r3, #0
 800279a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800279c:	e02e      	b.n	80027fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	9300      	str	r3, [sp, #0]
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	2200      	movs	r2, #0
 80027a6:	2180      	movs	r1, #128	@ 0x80
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f000 fb1f 	bl	8002dec <UART_WaitOnFlagUntilTimeout>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d005      	beq.n	80027c0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2220      	movs	r2, #32
 80027b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e03a      	b.n	8002836 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10b      	bne.n	80027de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	881b      	ldrh	r3, [r3, #0]
 80027ca:	461a      	mov	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	3302      	adds	r3, #2
 80027da:	61bb      	str	r3, [r7, #24]
 80027dc:	e007      	b.n	80027ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	781a      	ldrb	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	3301      	adds	r3, #1
 80027ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	3b01      	subs	r3, #1
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002800:	b29b      	uxth	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1cb      	bne.n	800279e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	2200      	movs	r2, #0
 800280e:	2140      	movs	r1, #64	@ 0x40
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 faeb 	bl	8002dec <UART_WaitOnFlagUntilTimeout>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d005      	beq.n	8002828 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2220      	movs	r2, #32
 8002820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e006      	b.n	8002836 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2220      	movs	r2, #32
 800282c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002830:	2300      	movs	r3, #0
 8002832:	e000      	b.n	8002836 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002834:	2302      	movs	r3, #2
  }
}
 8002836:	4618      	mov	r0, r3
 8002838:	3720      	adds	r7, #32
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b084      	sub	sp, #16
 8002842:	af00      	add	r7, sp, #0
 8002844:	60f8      	str	r0, [r7, #12]
 8002846:	60b9      	str	r1, [r7, #8]
 8002848:	4613      	mov	r3, r2
 800284a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b20      	cmp	r3, #32
 8002856:	d112      	bne.n	800287e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d002      	beq.n	8002864 <HAL_UART_Receive_IT+0x26>
 800285e:	88fb      	ldrh	r3, [r7, #6]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e00b      	b.n	8002880 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800286e:	88fb      	ldrh	r3, [r7, #6]
 8002870:	461a      	mov	r2, r3
 8002872:	68b9      	ldr	r1, [r7, #8]
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 fb12 	bl	8002e9e <UART_Start_Receive_IT>
 800287a:	4603      	mov	r3, r0
 800287c:	e000      	b.n	8002880 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800287e:	2302      	movs	r3, #2
  }
}
 8002880:	4618      	mov	r0, r3
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b0ba      	sub	sp, #232	@ 0xe8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	695b      	ldr	r3, [r3, #20]
 80028aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80028ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80028c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10f      	bne.n	80028ee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028d2:	f003 0320 	and.w	r3, r3, #32
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d009      	beq.n	80028ee <HAL_UART_IRQHandler+0x66>
 80028da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028de:	f003 0320 	and.w	r3, r3, #32
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 fbf2 	bl	80030d0 <UART_Receive_IT>
      return;
 80028ec:	e25b      	b.n	8002da6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80028ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 80de 	beq.w	8002ab4 <HAL_UART_IRQHandler+0x22c>
 80028f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	2b00      	cmp	r3, #0
 8002902:	d106      	bne.n	8002912 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002908:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 80d1 	beq.w	8002ab4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00b      	beq.n	8002936 <HAL_UART_IRQHandler+0xae>
 800291e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002926:	2b00      	cmp	r3, #0
 8002928:	d005      	beq.n	8002936 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292e:	f043 0201 	orr.w	r2, r3, #1
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800293a:	f003 0304 	and.w	r3, r3, #4
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00b      	beq.n	800295a <HAL_UART_IRQHandler+0xd2>
 8002942:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d005      	beq.n	800295a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002952:	f043 0202 	orr.w	r2, r3, #2
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800295a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00b      	beq.n	800297e <HAL_UART_IRQHandler+0xf6>
 8002966:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d005      	beq.n	800297e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002976:	f043 0204 	orr.w	r2, r3, #4
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800297e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b00      	cmp	r3, #0
 8002988:	d011      	beq.n	80029ae <HAL_UART_IRQHandler+0x126>
 800298a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800298e:	f003 0320 	and.w	r3, r3, #32
 8002992:	2b00      	cmp	r3, #0
 8002994:	d105      	bne.n	80029a2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002996:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d005      	beq.n	80029ae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029a6:	f043 0208 	orr.w	r2, r3, #8
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 81f2 	beq.w	8002d9c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029bc:	f003 0320 	and.w	r3, r3, #32
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d008      	beq.n	80029d6 <HAL_UART_IRQHandler+0x14e>
 80029c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029c8:	f003 0320 	and.w	r3, r3, #32
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d002      	beq.n	80029d6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 fb7d 	bl	80030d0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029e0:	2b40      	cmp	r3, #64	@ 0x40
 80029e2:	bf0c      	ite	eq
 80029e4:	2301      	moveq	r3, #1
 80029e6:	2300      	movne	r3, #0
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d103      	bne.n	8002a02 <HAL_UART_IRQHandler+0x17a>
 80029fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d04f      	beq.n	8002aa2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 fa85 	bl	8002f12 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a12:	2b40      	cmp	r3, #64	@ 0x40
 8002a14:	d141      	bne.n	8002a9a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	3314      	adds	r3, #20
 8002a1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a24:	e853 3f00 	ldrex	r3, [r3]
 8002a28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002a2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	3314      	adds	r3, #20
 8002a3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002a42:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002a46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002a4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002a52:	e841 2300 	strex	r3, r2, [r1]
 8002a56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002a5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1d9      	bne.n	8002a16 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d013      	beq.n	8002a92 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a6e:	4a7e      	ldr	r2, [pc, #504]	@ (8002c68 <HAL_UART_IRQHandler+0x3e0>)
 8002a70:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fe fd08 	bl	800148c <HAL_DMA_Abort_IT>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d016      	beq.n	8002ab0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a90:	e00e      	b.n	8002ab0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f994 	bl	8002dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a98:	e00a      	b.n	8002ab0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f000 f990 	bl	8002dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aa0:	e006      	b.n	8002ab0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f98c 	bl	8002dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002aae:	e175      	b.n	8002d9c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab0:	bf00      	nop
    return;
 8002ab2:	e173      	b.n	8002d9c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	f040 814f 	bne.w	8002d5c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 8148 	beq.w	8002d5c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002acc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ad0:	f003 0310 	and.w	r3, r3, #16
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 8141 	beq.w	8002d5c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ada:	2300      	movs	r3, #0
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	60bb      	str	r3, [r7, #8]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	60bb      	str	r3, [r7, #8]
 8002aee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002afa:	2b40      	cmp	r3, #64	@ 0x40
 8002afc:	f040 80b6 	bne.w	8002c6c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b0c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 8145 	beq.w	8002da0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002b1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	f080 813e 	bcs.w	8002da0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002b2a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b36:	f000 8088 	beq.w	8002c4a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	330c      	adds	r3, #12
 8002b40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b44:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b48:	e853 3f00 	ldrex	r3, [r3]
 8002b4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002b50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	330c      	adds	r3, #12
 8002b62:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002b66:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002b6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002b72:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002b76:	e841 2300 	strex	r3, r2, [r1]
 8002b7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002b7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d1d9      	bne.n	8002b3a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	3314      	adds	r3, #20
 8002b8c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b90:	e853 3f00 	ldrex	r3, [r3]
 8002b94:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002b96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b98:	f023 0301 	bic.w	r3, r3, #1
 8002b9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	3314      	adds	r3, #20
 8002ba6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002baa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002bae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002bb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002bb6:	e841 2300 	strex	r3, r2, [r1]
 8002bba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002bbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1e1      	bne.n	8002b86 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	3314      	adds	r3, #20
 8002bc8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002bcc:	e853 3f00 	ldrex	r3, [r3]
 8002bd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002bd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	3314      	adds	r3, #20
 8002be2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002be6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002be8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002bec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002bee:	e841 2300 	strex	r3, r2, [r1]
 8002bf2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002bf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d1e3      	bne.n	8002bc2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	330c      	adds	r3, #12
 8002c0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c12:	e853 3f00 	ldrex	r3, [r3]
 8002c16:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002c18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c1a:	f023 0310 	bic.w	r3, r3, #16
 8002c1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	330c      	adds	r3, #12
 8002c28:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002c2c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002c2e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c30:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c32:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c34:	e841 2300 	strex	r3, r2, [r1]
 8002c38:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002c3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1e3      	bne.n	8002c08 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fe fbb1 	bl	80013ac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	4619      	mov	r1, r3
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 f8b7 	bl	8002dd4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c66:	e09b      	b.n	8002da0 <HAL_UART_IRQHandler+0x518>
 8002c68:	08002fd9 	.word	0x08002fd9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f000 808e 	beq.w	8002da4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002c88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 8089 	beq.w	8002da4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	330c      	adds	r3, #12
 8002c98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c9c:	e853 3f00 	ldrex	r3, [r3]
 8002ca0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ca4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ca8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	330c      	adds	r3, #12
 8002cb2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002cb6:	647a      	str	r2, [r7, #68]	@ 0x44
 8002cb8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002cbc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002cbe:	e841 2300 	strex	r3, r2, [r1]
 8002cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002cc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1e3      	bne.n	8002c92 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	3314      	adds	r3, #20
 8002cd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd4:	e853 3f00 	ldrex	r3, [r3]
 8002cd8:	623b      	str	r3, [r7, #32]
   return(result);
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	f023 0301 	bic.w	r3, r3, #1
 8002ce0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	3314      	adds	r3, #20
 8002cea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002cee:	633a      	str	r2, [r7, #48]	@ 0x30
 8002cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002cf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cf6:	e841 2300 	strex	r3, r2, [r1]
 8002cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1e3      	bne.n	8002cca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2220      	movs	r2, #32
 8002d06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	330c      	adds	r3, #12
 8002d16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	e853 3f00 	ldrex	r3, [r3]
 8002d1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f023 0310 	bic.w	r3, r3, #16
 8002d26:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	330c      	adds	r3, #12
 8002d30:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002d34:	61fa      	str	r2, [r7, #28]
 8002d36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d38:	69b9      	ldr	r1, [r7, #24]
 8002d3a:	69fa      	ldr	r2, [r7, #28]
 8002d3c:	e841 2300 	strex	r3, r2, [r1]
 8002d40:	617b      	str	r3, [r7, #20]
   return(result);
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d1e3      	bne.n	8002d10 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002d52:	4619      	mov	r1, r3
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 f83d 	bl	8002dd4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d5a:	e023      	b.n	8002da4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d009      	beq.n	8002d7c <HAL_UART_IRQHandler+0x4f4>
 8002d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d003      	beq.n	8002d7c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 f943 	bl	8003000 <UART_Transmit_IT>
    return;
 8002d7a:	e014      	b.n	8002da6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00e      	beq.n	8002da6 <HAL_UART_IRQHandler+0x51e>
 8002d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d008      	beq.n	8002da6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 f983 	bl	80030a0 <UART_EndTransmit_IT>
    return;
 8002d9a:	e004      	b.n	8002da6 <HAL_UART_IRQHandler+0x51e>
    return;
 8002d9c:	bf00      	nop
 8002d9e:	e002      	b.n	8002da6 <HAL_UART_IRQHandler+0x51e>
      return;
 8002da0:	bf00      	nop
 8002da2:	e000      	b.n	8002da6 <HAL_UART_IRQHandler+0x51e>
      return;
 8002da4:	bf00      	nop
  }
}
 8002da6:	37e8      	adds	r7, #232	@ 0xe8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	603b      	str	r3, [r7, #0]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dfc:	e03b      	b.n	8002e76 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e04:	d037      	beq.n	8002e76 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e06:	f7fe f9e3 	bl	80011d0 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	6a3a      	ldr	r2, [r7, #32]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d302      	bcc.n	8002e1c <UART_WaitOnFlagUntilTimeout+0x30>
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d101      	bne.n	8002e20 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e03a      	b.n	8002e96 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f003 0304 	and.w	r3, r3, #4
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d023      	beq.n	8002e76 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2b80      	cmp	r3, #128	@ 0x80
 8002e32:	d020      	beq.n	8002e76 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2b40      	cmp	r3, #64	@ 0x40
 8002e38:	d01d      	beq.n	8002e76 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0308 	and.w	r3, r3, #8
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	d116      	bne.n	8002e76 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002e48:	2300      	movs	r3, #0
 8002e4a:	617b      	str	r3, [r7, #20]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	617b      	str	r3, [r7, #20]
 8002e5c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 f857 	bl	8002f12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2208      	movs	r2, #8
 8002e68:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e00f      	b.n	8002e96 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	bf0c      	ite	eq
 8002e86:	2301      	moveq	r3, #1
 8002e88:	2300      	movne	r3, #0
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d0b4      	beq.n	8002dfe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b085      	sub	sp, #20
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	60f8      	str	r0, [r7, #12]
 8002ea6:	60b9      	str	r1, [r7, #8]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	88fa      	ldrh	r2, [r7, #6]
 8002eb6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	88fa      	ldrh	r2, [r7, #6]
 8002ebc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2222      	movs	r2, #34	@ 0x22
 8002ec8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d007      	beq.n	8002ee4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68da      	ldr	r2, [r3, #12]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ee2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	695a      	ldr	r2, [r3, #20]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0201 	orr.w	r2, r2, #1
 8002ef2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0220 	orr.w	r2, r2, #32
 8002f02:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b095      	sub	sp, #84	@ 0x54
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	330c      	adds	r3, #12
 8002f20:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f24:	e853 3f00 	ldrex	r3, [r3]
 8002f28:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f30:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	330c      	adds	r3, #12
 8002f38:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f3a:	643a      	str	r2, [r7, #64]	@ 0x40
 8002f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f3e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f40:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f42:	e841 2300 	strex	r3, r2, [r1]
 8002f46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1e5      	bne.n	8002f1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	3314      	adds	r3, #20
 8002f54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f56:	6a3b      	ldr	r3, [r7, #32]
 8002f58:	e853 3f00 	ldrex	r3, [r3]
 8002f5c:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	f023 0301 	bic.w	r3, r3, #1
 8002f64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	3314      	adds	r3, #20
 8002f6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f70:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f76:	e841 2300 	strex	r3, r2, [r1]
 8002f7a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1e5      	bne.n	8002f4e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d119      	bne.n	8002fbe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	330c      	adds	r3, #12
 8002f90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	e853 3f00 	ldrex	r3, [r3]
 8002f98:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	f023 0310 	bic.w	r3, r3, #16
 8002fa0:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	330c      	adds	r3, #12
 8002fa8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002faa:	61ba      	str	r2, [r7, #24]
 8002fac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fae:	6979      	ldr	r1, [r7, #20]
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	e841 2300 	strex	r3, r2, [r1]
 8002fb6:	613b      	str	r3, [r7, #16]
   return(result);
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1e5      	bne.n	8002f8a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2220      	movs	r2, #32
 8002fc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002fcc:	bf00      	nop
 8002fce:	3754      	adds	r7, #84	@ 0x54
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f7ff fee4 	bl	8002dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ff8:	bf00      	nop
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b21      	cmp	r3, #33	@ 0x21
 8003012:	d13e      	bne.n	8003092 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800301c:	d114      	bne.n	8003048 <UART_Transmit_IT+0x48>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d110      	bne.n	8003048 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	881b      	ldrh	r3, [r3, #0]
 8003030:	461a      	mov	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800303a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	1c9a      	adds	r2, r3, #2
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	621a      	str	r2, [r3, #32]
 8003046:	e008      	b.n	800305a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	1c59      	adds	r1, r3, #1
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6211      	str	r1, [r2, #32]
 8003052:	781a      	ldrb	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800305e:	b29b      	uxth	r3, r3
 8003060:	3b01      	subs	r3, #1
 8003062:	b29b      	uxth	r3, r3
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	4619      	mov	r1, r3
 8003068:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10f      	bne.n	800308e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68da      	ldr	r2, [r3, #12]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800307c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68da      	ldr	r2, [r3, #12]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800308c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800308e:	2300      	movs	r3, #0
 8003090:	e000      	b.n	8003094 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003092:	2302      	movs	r3, #2
  }
}
 8003094:	4618      	mov	r0, r3
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030b6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2220      	movs	r2, #32
 80030bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f7ff fe73 	bl	8002dac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b08c      	sub	sp, #48	@ 0x30
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b22      	cmp	r3, #34	@ 0x22
 80030e2:	f040 80ae 	bne.w	8003242 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030ee:	d117      	bne.n	8003120 <UART_Receive_IT+0x50>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d113      	bne.n	8003120 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80030f8:	2300      	movs	r3, #0
 80030fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003100:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	b29b      	uxth	r3, r3
 800310a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800310e:	b29a      	uxth	r2, r3
 8003110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003112:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003118:	1c9a      	adds	r2, r3, #2
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	629a      	str	r2, [r3, #40]	@ 0x28
 800311e:	e026      	b.n	800316e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003124:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003126:	2300      	movs	r3, #0
 8003128:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003132:	d007      	beq.n	8003144 <UART_Receive_IT+0x74>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10a      	bne.n	8003152 <UART_Receive_IT+0x82>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d106      	bne.n	8003152 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	b2da      	uxtb	r2, r3
 800314c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800314e:	701a      	strb	r2, [r3, #0]
 8003150:	e008      	b.n	8003164 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	b2db      	uxtb	r3, r3
 800315a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800315e:	b2da      	uxtb	r2, r3
 8003160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003162:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29b      	uxth	r3, r3
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	4619      	mov	r1, r3
 800317c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800317e:	2b00      	cmp	r3, #0
 8003180:	d15d      	bne.n	800323e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68da      	ldr	r2, [r3, #12]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0220 	bic.w	r2, r2, #32
 8003190:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695a      	ldr	r2, [r3, #20]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 0201 	bic.w	r2, r2, #1
 80031b0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2220      	movs	r2, #32
 80031b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d135      	bne.n	8003234 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	330c      	adds	r3, #12
 80031d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	e853 3f00 	ldrex	r3, [r3]
 80031dc:	613b      	str	r3, [r7, #16]
   return(result);
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	f023 0310 	bic.w	r3, r3, #16
 80031e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	330c      	adds	r3, #12
 80031ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031ee:	623a      	str	r2, [r7, #32]
 80031f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f2:	69f9      	ldr	r1, [r7, #28]
 80031f4:	6a3a      	ldr	r2, [r7, #32]
 80031f6:	e841 2300 	strex	r3, r2, [r1]
 80031fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1e5      	bne.n	80031ce <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0310 	and.w	r3, r3, #16
 800320c:	2b10      	cmp	r3, #16
 800320e:	d10a      	bne.n	8003226 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003210:	2300      	movs	r3, #0
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800322a:	4619      	mov	r1, r3
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f7ff fdd1 	bl	8002dd4 <HAL_UARTEx_RxEventCallback>
 8003232:	e002      	b.n	800323a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7fd feef 	bl	8001018 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800323a:	2300      	movs	r3, #0
 800323c:	e002      	b.n	8003244 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800323e:	2300      	movs	r3, #0
 8003240:	e000      	b.n	8003244 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003242:	2302      	movs	r3, #2
  }
}
 8003244:	4618      	mov	r0, r3
 8003246:	3730      	adds	r7, #48	@ 0x30
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800324c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003250:	b0c0      	sub	sp, #256	@ 0x100
 8003252:	af00      	add	r7, sp, #0
 8003254:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003268:	68d9      	ldr	r1, [r3, #12]
 800326a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	ea40 0301 	orr.w	r3, r0, r1
 8003274:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	431a      	orrs	r2, r3
 8003284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	431a      	orrs	r2, r3
 800328c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	4313      	orrs	r3, r2
 8003294:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80032a4:	f021 010c 	bic.w	r1, r1, #12
 80032a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80032b2:	430b      	orrs	r3, r1
 80032b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80032c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032c6:	6999      	ldr	r1, [r3, #24]
 80032c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	ea40 0301 	orr.w	r3, r0, r1
 80032d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80032d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	4b8f      	ldr	r3, [pc, #572]	@ (8003518 <UART_SetConfig+0x2cc>)
 80032dc:	429a      	cmp	r2, r3
 80032de:	d005      	beq.n	80032ec <UART_SetConfig+0xa0>
 80032e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	4b8d      	ldr	r3, [pc, #564]	@ (800351c <UART_SetConfig+0x2d0>)
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d104      	bne.n	80032f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80032ec:	f7fe ff12 	bl	8002114 <HAL_RCC_GetPCLK2Freq>
 80032f0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80032f4:	e003      	b.n	80032fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032f6:	f7fe fef9 	bl	80020ec <HAL_RCC_GetPCLK1Freq>
 80032fa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003302:	69db      	ldr	r3, [r3, #28]
 8003304:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003308:	f040 810c 	bne.w	8003524 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800330c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003310:	2200      	movs	r2, #0
 8003312:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003316:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800331a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800331e:	4622      	mov	r2, r4
 8003320:	462b      	mov	r3, r5
 8003322:	1891      	adds	r1, r2, r2
 8003324:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003326:	415b      	adcs	r3, r3
 8003328:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800332a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800332e:	4621      	mov	r1, r4
 8003330:	eb12 0801 	adds.w	r8, r2, r1
 8003334:	4629      	mov	r1, r5
 8003336:	eb43 0901 	adc.w	r9, r3, r1
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	f04f 0300 	mov.w	r3, #0
 8003342:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003346:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800334a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800334e:	4690      	mov	r8, r2
 8003350:	4699      	mov	r9, r3
 8003352:	4623      	mov	r3, r4
 8003354:	eb18 0303 	adds.w	r3, r8, r3
 8003358:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800335c:	462b      	mov	r3, r5
 800335e:	eb49 0303 	adc.w	r3, r9, r3
 8003362:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003372:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003376:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800337a:	460b      	mov	r3, r1
 800337c:	18db      	adds	r3, r3, r3
 800337e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003380:	4613      	mov	r3, r2
 8003382:	eb42 0303 	adc.w	r3, r2, r3
 8003386:	657b      	str	r3, [r7, #84]	@ 0x54
 8003388:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800338c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003390:	f7fc ff8e 	bl	80002b0 <__aeabi_uldivmod>
 8003394:	4602      	mov	r2, r0
 8003396:	460b      	mov	r3, r1
 8003398:	4b61      	ldr	r3, [pc, #388]	@ (8003520 <UART_SetConfig+0x2d4>)
 800339a:	fba3 2302 	umull	r2, r3, r3, r2
 800339e:	095b      	lsrs	r3, r3, #5
 80033a0:	011c      	lsls	r4, r3, #4
 80033a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033a6:	2200      	movs	r2, #0
 80033a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80033ac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80033b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80033b4:	4642      	mov	r2, r8
 80033b6:	464b      	mov	r3, r9
 80033b8:	1891      	adds	r1, r2, r2
 80033ba:	64b9      	str	r1, [r7, #72]	@ 0x48
 80033bc:	415b      	adcs	r3, r3
 80033be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80033c4:	4641      	mov	r1, r8
 80033c6:	eb12 0a01 	adds.w	sl, r2, r1
 80033ca:	4649      	mov	r1, r9
 80033cc:	eb43 0b01 	adc.w	fp, r3, r1
 80033d0:	f04f 0200 	mov.w	r2, #0
 80033d4:	f04f 0300 	mov.w	r3, #0
 80033d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033e4:	4692      	mov	sl, r2
 80033e6:	469b      	mov	fp, r3
 80033e8:	4643      	mov	r3, r8
 80033ea:	eb1a 0303 	adds.w	r3, sl, r3
 80033ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80033f2:	464b      	mov	r3, r9
 80033f4:	eb4b 0303 	adc.w	r3, fp, r3
 80033f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80033fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003408:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800340c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003410:	460b      	mov	r3, r1
 8003412:	18db      	adds	r3, r3, r3
 8003414:	643b      	str	r3, [r7, #64]	@ 0x40
 8003416:	4613      	mov	r3, r2
 8003418:	eb42 0303 	adc.w	r3, r2, r3
 800341c:	647b      	str	r3, [r7, #68]	@ 0x44
 800341e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003422:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003426:	f7fc ff43 	bl	80002b0 <__aeabi_uldivmod>
 800342a:	4602      	mov	r2, r0
 800342c:	460b      	mov	r3, r1
 800342e:	4611      	mov	r1, r2
 8003430:	4b3b      	ldr	r3, [pc, #236]	@ (8003520 <UART_SetConfig+0x2d4>)
 8003432:	fba3 2301 	umull	r2, r3, r3, r1
 8003436:	095b      	lsrs	r3, r3, #5
 8003438:	2264      	movs	r2, #100	@ 0x64
 800343a:	fb02 f303 	mul.w	r3, r2, r3
 800343e:	1acb      	subs	r3, r1, r3
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003446:	4b36      	ldr	r3, [pc, #216]	@ (8003520 <UART_SetConfig+0x2d4>)
 8003448:	fba3 2302 	umull	r2, r3, r3, r2
 800344c:	095b      	lsrs	r3, r3, #5
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003454:	441c      	add	r4, r3
 8003456:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800345a:	2200      	movs	r2, #0
 800345c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003460:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003464:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003468:	4642      	mov	r2, r8
 800346a:	464b      	mov	r3, r9
 800346c:	1891      	adds	r1, r2, r2
 800346e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003470:	415b      	adcs	r3, r3
 8003472:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003474:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003478:	4641      	mov	r1, r8
 800347a:	1851      	adds	r1, r2, r1
 800347c:	6339      	str	r1, [r7, #48]	@ 0x30
 800347e:	4649      	mov	r1, r9
 8003480:	414b      	adcs	r3, r1
 8003482:	637b      	str	r3, [r7, #52]	@ 0x34
 8003484:	f04f 0200 	mov.w	r2, #0
 8003488:	f04f 0300 	mov.w	r3, #0
 800348c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003490:	4659      	mov	r1, fp
 8003492:	00cb      	lsls	r3, r1, #3
 8003494:	4651      	mov	r1, sl
 8003496:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800349a:	4651      	mov	r1, sl
 800349c:	00ca      	lsls	r2, r1, #3
 800349e:	4610      	mov	r0, r2
 80034a0:	4619      	mov	r1, r3
 80034a2:	4603      	mov	r3, r0
 80034a4:	4642      	mov	r2, r8
 80034a6:	189b      	adds	r3, r3, r2
 80034a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80034ac:	464b      	mov	r3, r9
 80034ae:	460a      	mov	r2, r1
 80034b0:	eb42 0303 	adc.w	r3, r2, r3
 80034b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80034c4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80034c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80034cc:	460b      	mov	r3, r1
 80034ce:	18db      	adds	r3, r3, r3
 80034d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034d2:	4613      	mov	r3, r2
 80034d4:	eb42 0303 	adc.w	r3, r2, r3
 80034d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80034de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80034e2:	f7fc fee5 	bl	80002b0 <__aeabi_uldivmod>
 80034e6:	4602      	mov	r2, r0
 80034e8:	460b      	mov	r3, r1
 80034ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003520 <UART_SetConfig+0x2d4>)
 80034ec:	fba3 1302 	umull	r1, r3, r3, r2
 80034f0:	095b      	lsrs	r3, r3, #5
 80034f2:	2164      	movs	r1, #100	@ 0x64
 80034f4:	fb01 f303 	mul.w	r3, r1, r3
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	3332      	adds	r3, #50	@ 0x32
 80034fe:	4a08      	ldr	r2, [pc, #32]	@ (8003520 <UART_SetConfig+0x2d4>)
 8003500:	fba2 2303 	umull	r2, r3, r2, r3
 8003504:	095b      	lsrs	r3, r3, #5
 8003506:	f003 0207 	and.w	r2, r3, #7
 800350a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4422      	add	r2, r4
 8003512:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003514:	e106      	b.n	8003724 <UART_SetConfig+0x4d8>
 8003516:	bf00      	nop
 8003518:	40011000 	.word	0x40011000
 800351c:	40011400 	.word	0x40011400
 8003520:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003524:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003528:	2200      	movs	r2, #0
 800352a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800352e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003532:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003536:	4642      	mov	r2, r8
 8003538:	464b      	mov	r3, r9
 800353a:	1891      	adds	r1, r2, r2
 800353c:	6239      	str	r1, [r7, #32]
 800353e:	415b      	adcs	r3, r3
 8003540:	627b      	str	r3, [r7, #36]	@ 0x24
 8003542:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003546:	4641      	mov	r1, r8
 8003548:	1854      	adds	r4, r2, r1
 800354a:	4649      	mov	r1, r9
 800354c:	eb43 0501 	adc.w	r5, r3, r1
 8003550:	f04f 0200 	mov.w	r2, #0
 8003554:	f04f 0300 	mov.w	r3, #0
 8003558:	00eb      	lsls	r3, r5, #3
 800355a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800355e:	00e2      	lsls	r2, r4, #3
 8003560:	4614      	mov	r4, r2
 8003562:	461d      	mov	r5, r3
 8003564:	4643      	mov	r3, r8
 8003566:	18e3      	adds	r3, r4, r3
 8003568:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800356c:	464b      	mov	r3, r9
 800356e:	eb45 0303 	adc.w	r3, r5, r3
 8003572:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003582:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	f04f 0300 	mov.w	r3, #0
 800358e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003592:	4629      	mov	r1, r5
 8003594:	008b      	lsls	r3, r1, #2
 8003596:	4621      	mov	r1, r4
 8003598:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800359c:	4621      	mov	r1, r4
 800359e:	008a      	lsls	r2, r1, #2
 80035a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80035a4:	f7fc fe84 	bl	80002b0 <__aeabi_uldivmod>
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4b60      	ldr	r3, [pc, #384]	@ (8003730 <UART_SetConfig+0x4e4>)
 80035ae:	fba3 2302 	umull	r2, r3, r3, r2
 80035b2:	095b      	lsrs	r3, r3, #5
 80035b4:	011c      	lsls	r4, r3, #4
 80035b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035ba:	2200      	movs	r2, #0
 80035bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80035c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80035c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80035c8:	4642      	mov	r2, r8
 80035ca:	464b      	mov	r3, r9
 80035cc:	1891      	adds	r1, r2, r2
 80035ce:	61b9      	str	r1, [r7, #24]
 80035d0:	415b      	adcs	r3, r3
 80035d2:	61fb      	str	r3, [r7, #28]
 80035d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035d8:	4641      	mov	r1, r8
 80035da:	1851      	adds	r1, r2, r1
 80035dc:	6139      	str	r1, [r7, #16]
 80035de:	4649      	mov	r1, r9
 80035e0:	414b      	adcs	r3, r1
 80035e2:	617b      	str	r3, [r7, #20]
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	f04f 0300 	mov.w	r3, #0
 80035ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80035f0:	4659      	mov	r1, fp
 80035f2:	00cb      	lsls	r3, r1, #3
 80035f4:	4651      	mov	r1, sl
 80035f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035fa:	4651      	mov	r1, sl
 80035fc:	00ca      	lsls	r2, r1, #3
 80035fe:	4610      	mov	r0, r2
 8003600:	4619      	mov	r1, r3
 8003602:	4603      	mov	r3, r0
 8003604:	4642      	mov	r2, r8
 8003606:	189b      	adds	r3, r3, r2
 8003608:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800360c:	464b      	mov	r3, r9
 800360e:	460a      	mov	r2, r1
 8003610:	eb42 0303 	adc.w	r3, r2, r3
 8003614:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003622:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003624:	f04f 0200 	mov.w	r2, #0
 8003628:	f04f 0300 	mov.w	r3, #0
 800362c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003630:	4649      	mov	r1, r9
 8003632:	008b      	lsls	r3, r1, #2
 8003634:	4641      	mov	r1, r8
 8003636:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800363a:	4641      	mov	r1, r8
 800363c:	008a      	lsls	r2, r1, #2
 800363e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003642:	f7fc fe35 	bl	80002b0 <__aeabi_uldivmod>
 8003646:	4602      	mov	r2, r0
 8003648:	460b      	mov	r3, r1
 800364a:	4611      	mov	r1, r2
 800364c:	4b38      	ldr	r3, [pc, #224]	@ (8003730 <UART_SetConfig+0x4e4>)
 800364e:	fba3 2301 	umull	r2, r3, r3, r1
 8003652:	095b      	lsrs	r3, r3, #5
 8003654:	2264      	movs	r2, #100	@ 0x64
 8003656:	fb02 f303 	mul.w	r3, r2, r3
 800365a:	1acb      	subs	r3, r1, r3
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	3332      	adds	r3, #50	@ 0x32
 8003660:	4a33      	ldr	r2, [pc, #204]	@ (8003730 <UART_SetConfig+0x4e4>)
 8003662:	fba2 2303 	umull	r2, r3, r2, r3
 8003666:	095b      	lsrs	r3, r3, #5
 8003668:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800366c:	441c      	add	r4, r3
 800366e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003672:	2200      	movs	r2, #0
 8003674:	673b      	str	r3, [r7, #112]	@ 0x70
 8003676:	677a      	str	r2, [r7, #116]	@ 0x74
 8003678:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800367c:	4642      	mov	r2, r8
 800367e:	464b      	mov	r3, r9
 8003680:	1891      	adds	r1, r2, r2
 8003682:	60b9      	str	r1, [r7, #8]
 8003684:	415b      	adcs	r3, r3
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800368c:	4641      	mov	r1, r8
 800368e:	1851      	adds	r1, r2, r1
 8003690:	6039      	str	r1, [r7, #0]
 8003692:	4649      	mov	r1, r9
 8003694:	414b      	adcs	r3, r1
 8003696:	607b      	str	r3, [r7, #4]
 8003698:	f04f 0200 	mov.w	r2, #0
 800369c:	f04f 0300 	mov.w	r3, #0
 80036a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80036a4:	4659      	mov	r1, fp
 80036a6:	00cb      	lsls	r3, r1, #3
 80036a8:	4651      	mov	r1, sl
 80036aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036ae:	4651      	mov	r1, sl
 80036b0:	00ca      	lsls	r2, r1, #3
 80036b2:	4610      	mov	r0, r2
 80036b4:	4619      	mov	r1, r3
 80036b6:	4603      	mov	r3, r0
 80036b8:	4642      	mov	r2, r8
 80036ba:	189b      	adds	r3, r3, r2
 80036bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036be:	464b      	mov	r3, r9
 80036c0:	460a      	mov	r2, r1
 80036c2:	eb42 0303 	adc.w	r3, r2, r3
 80036c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80036c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80036d2:	667a      	str	r2, [r7, #100]	@ 0x64
 80036d4:	f04f 0200 	mov.w	r2, #0
 80036d8:	f04f 0300 	mov.w	r3, #0
 80036dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80036e0:	4649      	mov	r1, r9
 80036e2:	008b      	lsls	r3, r1, #2
 80036e4:	4641      	mov	r1, r8
 80036e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036ea:	4641      	mov	r1, r8
 80036ec:	008a      	lsls	r2, r1, #2
 80036ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80036f2:	f7fc fddd 	bl	80002b0 <__aeabi_uldivmod>
 80036f6:	4602      	mov	r2, r0
 80036f8:	460b      	mov	r3, r1
 80036fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003730 <UART_SetConfig+0x4e4>)
 80036fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003700:	095b      	lsrs	r3, r3, #5
 8003702:	2164      	movs	r1, #100	@ 0x64
 8003704:	fb01 f303 	mul.w	r3, r1, r3
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	3332      	adds	r3, #50	@ 0x32
 800370e:	4a08      	ldr	r2, [pc, #32]	@ (8003730 <UART_SetConfig+0x4e4>)
 8003710:	fba2 2303 	umull	r2, r3, r2, r3
 8003714:	095b      	lsrs	r3, r3, #5
 8003716:	f003 020f 	and.w	r2, r3, #15
 800371a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4422      	add	r2, r4
 8003722:	609a      	str	r2, [r3, #8]
}
 8003724:	bf00      	nop
 8003726:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800372a:	46bd      	mov	sp, r7
 800372c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003730:	51eb851f 	.word	0x51eb851f

08003734 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	4603      	mov	r3, r0
 800373c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800373e:	2300      	movs	r3, #0
 8003740:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003742:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003746:	2b84      	cmp	r3, #132	@ 0x84
 8003748:	d005      	beq.n	8003756 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800374a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	4413      	add	r3, r2
 8003752:	3303      	adds	r3, #3
 8003754:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003756:	68fb      	ldr	r3, [r7, #12]
}
 8003758:	4618      	mov	r0, r3
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003768:	f000 fb04 	bl	8003d74 <vTaskStartScheduler>
  
  return osOK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	bd80      	pop	{r7, pc}

08003772 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003772:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003774:	b089      	sub	sp, #36	@ 0x24
 8003776:	af04      	add	r7, sp, #16
 8003778:	6078      	str	r0, [r7, #4]
 800377a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d020      	beq.n	80037c6 <osThreadCreate+0x54>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d01c      	beq.n	80037c6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685c      	ldr	r4, [r3, #4]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	691e      	ldr	r6, [r3, #16]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800379e:	4618      	mov	r0, r3
 80037a0:	f7ff ffc8 	bl	8003734 <makeFreeRtosPriority>
 80037a4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037ae:	9202      	str	r2, [sp, #8]
 80037b0:	9301      	str	r3, [sp, #4]
 80037b2:	9100      	str	r1, [sp, #0]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	4632      	mov	r2, r6
 80037b8:	4629      	mov	r1, r5
 80037ba:	4620      	mov	r0, r4
 80037bc:	f000 f8ed 	bl	800399a <xTaskCreateStatic>
 80037c0:	4603      	mov	r3, r0
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	e01c      	b.n	8003800 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685c      	ldr	r4, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037d2:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80037da:	4618      	mov	r0, r3
 80037dc:	f7ff ffaa 	bl	8003734 <makeFreeRtosPriority>
 80037e0:	4602      	mov	r2, r0
 80037e2:	f107 030c 	add.w	r3, r7, #12
 80037e6:	9301      	str	r3, [sp, #4]
 80037e8:	9200      	str	r2, [sp, #0]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	4632      	mov	r2, r6
 80037ee:	4629      	mov	r1, r5
 80037f0:	4620      	mov	r0, r4
 80037f2:	f000 f932 	bl	8003a5a <xTaskCreate>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d001      	beq.n	8003800 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80037fc:	2300      	movs	r3, #0
 80037fe:	e000      	b.n	8003802 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003800:	68fb      	ldr	r3, [r7, #12]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3714      	adds	r7, #20
 8003806:	46bd      	mov	sp, r7
 8003808:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800380a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b084      	sub	sp, #16
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <osDelay+0x16>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	e000      	b.n	8003822 <osDelay+0x18>
 8003820:	2301      	movs	r3, #1
 8003822:	4618      	mov	r0, r3
 8003824:	f000 fa70 	bl	8003d08 <vTaskDelay>
  
  return osOK;
 8003828:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003832:	b480      	push	{r7}
 8003834:	b083      	sub	sp, #12
 8003836:	af00      	add	r7, sp, #0
 8003838:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f103 0208 	add.w	r2, r3, #8
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f04f 32ff 	mov.w	r2, #4294967295
 800384a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f103 0208 	add.w	r2, r3, #8
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f103 0208 	add.w	r2, r3, #8
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003872:	b480      	push	{r7}
 8003874:	b083      	sub	sp, #12
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	689a      	ldr	r2, [r3, #8]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	601a      	str	r2, [r3, #0]
}
 80038c8:	bf00      	nop
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ea:	d103      	bne.n	80038f4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	e00c      	b.n	800390e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3308      	adds	r3, #8
 80038f8:	60fb      	str	r3, [r7, #12]
 80038fa:	e002      	b.n	8003902 <vListInsert+0x2e>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	60fb      	str	r3, [r7, #12]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	429a      	cmp	r2, r3
 800390c:	d2f6      	bcs.n	80038fc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	601a      	str	r2, [r3, #0]
}
 800393a:	bf00      	nop
 800393c:	3714      	adds	r7, #20
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003946:	b480      	push	{r7}
 8003948:	b085      	sub	sp, #20
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6892      	ldr	r2, [r2, #8]
 800395c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	6852      	ldr	r2, [r2, #4]
 8003966:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	429a      	cmp	r2, r3
 8003970:	d103      	bne.n	800397a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	689a      	ldr	r2, [r3, #8]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	1e5a      	subs	r2, r3, #1
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
}
 800398e:	4618      	mov	r0, r3
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800399a:	b580      	push	{r7, lr}
 800399c:	b08e      	sub	sp, #56	@ 0x38
 800399e:	af04      	add	r7, sp, #16
 80039a0:	60f8      	str	r0, [r7, #12]
 80039a2:	60b9      	str	r1, [r7, #8]
 80039a4:	607a      	str	r2, [r7, #4]
 80039a6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80039a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10b      	bne.n	80039c6 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80039ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039b2:	f383 8811 	msr	BASEPRI, r3
 80039b6:	f3bf 8f6f 	isb	sy
 80039ba:	f3bf 8f4f 	dsb	sy
 80039be:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80039c0:	bf00      	nop
 80039c2:	bf00      	nop
 80039c4:	e7fd      	b.n	80039c2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80039c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10b      	bne.n	80039e4 <xTaskCreateStatic+0x4a>
	__asm volatile
 80039cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039d0:	f383 8811 	msr	BASEPRI, r3
 80039d4:	f3bf 8f6f 	isb	sy
 80039d8:	f3bf 8f4f 	dsb	sy
 80039dc:	61fb      	str	r3, [r7, #28]
}
 80039de:	bf00      	nop
 80039e0:	bf00      	nop
 80039e2:	e7fd      	b.n	80039e0 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80039e4:	23a0      	movs	r3, #160	@ 0xa0
 80039e6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	2ba0      	cmp	r3, #160	@ 0xa0
 80039ec:	d00b      	beq.n	8003a06 <xTaskCreateStatic+0x6c>
	__asm volatile
 80039ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f2:	f383 8811 	msr	BASEPRI, r3
 80039f6:	f3bf 8f6f 	isb	sy
 80039fa:	f3bf 8f4f 	dsb	sy
 80039fe:	61bb      	str	r3, [r7, #24]
}
 8003a00:	bf00      	nop
 8003a02:	bf00      	nop
 8003a04:	e7fd      	b.n	8003a02 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003a06:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d01e      	beq.n	8003a4c <xTaskCreateStatic+0xb2>
 8003a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d01b      	beq.n	8003a4c <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a16:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a1c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a20:	2202      	movs	r2, #2
 8003a22:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003a26:	2300      	movs	r3, #0
 8003a28:	9303      	str	r3, [sp, #12]
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a2c:	9302      	str	r3, [sp, #8]
 8003a2e:	f107 0314 	add.w	r3, r7, #20
 8003a32:	9301      	str	r3, [sp, #4]
 8003a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a36:	9300      	str	r3, [sp, #0]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	68b9      	ldr	r1, [r7, #8]
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f000 f850 	bl	8003ae4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a44:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003a46:	f000 f8f5 	bl	8003c34 <prvAddNewTaskToReadyList>
 8003a4a:	e001      	b.n	8003a50 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a50:	697b      	ldr	r3, [r7, #20]
	}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3728      	adds	r7, #40	@ 0x28
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b08c      	sub	sp, #48	@ 0x30
 8003a5e:	af04      	add	r7, sp, #16
 8003a60:	60f8      	str	r0, [r7, #12]
 8003a62:	60b9      	str	r1, [r7, #8]
 8003a64:	603b      	str	r3, [r7, #0]
 8003a66:	4613      	mov	r3, r2
 8003a68:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003a6a:	88fb      	ldrh	r3, [r7, #6]
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 ff62 	bl	8004938 <pvPortMalloc>
 8003a74:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00e      	beq.n	8003a9a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003a7c:	20a0      	movs	r0, #160	@ 0xa0
 8003a7e:	f000 ff5b 	bl	8004938 <pvPortMalloc>
 8003a82:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a90:	e005      	b.n	8003a9e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a92:	6978      	ldr	r0, [r7, #20]
 8003a94:	f001 f81e 	bl	8004ad4 <vPortFree>
 8003a98:	e001      	b.n	8003a9e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d017      	beq.n	8003ad4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003aac:	88fa      	ldrh	r2, [r7, #6]
 8003aae:	2300      	movs	r3, #0
 8003ab0:	9303      	str	r3, [sp, #12]
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	9302      	str	r3, [sp, #8]
 8003ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ab8:	9301      	str	r3, [sp, #4]
 8003aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003abc:	9300      	str	r3, [sp, #0]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	68b9      	ldr	r1, [r7, #8]
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f000 f80e 	bl	8003ae4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ac8:	69f8      	ldr	r0, [r7, #28]
 8003aca:	f000 f8b3 	bl	8003c34 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	61bb      	str	r3, [r7, #24]
 8003ad2:	e002      	b.n	8003ada <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003ada:	69bb      	ldr	r3, [r7, #24]
	}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3720      	adds	r7, #32
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b088      	sub	sp, #32
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
 8003af0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	461a      	mov	r2, r3
 8003afc:	21a5      	movs	r1, #165	@ 0xa5
 8003afe:	f001 fbbb 	bl	8005278 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	f023 0307 	bic.w	r3, r3, #7
 8003b1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	f003 0307 	and.w	r3, r3, #7
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00b      	beq.n	8003b3e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b2a:	f383 8811 	msr	BASEPRI, r3
 8003b2e:	f3bf 8f6f 	isb	sy
 8003b32:	f3bf 8f4f 	dsb	sy
 8003b36:	617b      	str	r3, [r7, #20]
}
 8003b38:	bf00      	nop
 8003b3a:	bf00      	nop
 8003b3c:	e7fd      	b.n	8003b3a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d01f      	beq.n	8003b84 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b44:	2300      	movs	r3, #0
 8003b46:	61fb      	str	r3, [r7, #28]
 8003b48:	e012      	b.n	8003b70 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b4a:	68ba      	ldr	r2, [r7, #8]
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	4413      	add	r3, r2
 8003b50:	7819      	ldrb	r1, [r3, #0]
 8003b52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	4413      	add	r3, r2
 8003b58:	3334      	adds	r3, #52	@ 0x34
 8003b5a:	460a      	mov	r2, r1
 8003b5c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	4413      	add	r3, r2
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d006      	beq.n	8003b78 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	61fb      	str	r3, [r7, #28]
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	2b0f      	cmp	r3, #15
 8003b74:	d9e9      	bls.n	8003b4a <prvInitialiseNewTask+0x66>
 8003b76:	e000      	b.n	8003b7a <prvInitialiseNewTask+0x96>
			{
				break;
 8003b78:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b82:	e003      	b.n	8003b8c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b8e:	2b06      	cmp	r3, #6
 8003b90:	d901      	bls.n	8003b96 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b92:	2306      	movs	r3, #6
 8003b94:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b9a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ba0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003baa:	3304      	adds	r3, #4
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7ff fe60 	bl	8003872 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb4:	3318      	adds	r3, #24
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7ff fe5b 	bl	8003872 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bc0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc4:	f1c3 0207 	rsb	r2, r3, #7
 8003bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bd0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be4:	334c      	adds	r3, #76	@ 0x4c
 8003be6:	224c      	movs	r2, #76	@ 0x4c
 8003be8:	2100      	movs	r1, #0
 8003bea:	4618      	mov	r0, r3
 8003bec:	f001 fb44 	bl	8005278 <memset>
 8003bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf2:	4a0d      	ldr	r2, [pc, #52]	@ (8003c28 <prvInitialiseNewTask+0x144>)
 8003bf4:	651a      	str	r2, [r3, #80]	@ 0x50
 8003bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf8:	4a0c      	ldr	r2, [pc, #48]	@ (8003c2c <prvInitialiseNewTask+0x148>)
 8003bfa:	655a      	str	r2, [r3, #84]	@ 0x54
 8003bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bfe:	4a0c      	ldr	r2, [pc, #48]	@ (8003c30 <prvInitialiseNewTask+0x14c>)
 8003c00:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	68f9      	ldr	r1, [r7, #12]
 8003c06:	69b8      	ldr	r0, [r7, #24]
 8003c08:	f000 fc86 	bl	8004518 <pxPortInitialiseStack>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c10:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d002      	beq.n	8003c1e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c1e:	bf00      	nop
 8003c20:	3720      	adds	r7, #32
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	200041d8 	.word	0x200041d8
 8003c2c:	20004240 	.word	0x20004240
 8003c30:	200042a8 	.word	0x200042a8

08003c34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c3c:	f000 fd9c 	bl	8004778 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003c40:	4b2a      	ldr	r3, [pc, #168]	@ (8003cec <prvAddNewTaskToReadyList+0xb8>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	3301      	adds	r3, #1
 8003c46:	4a29      	ldr	r2, [pc, #164]	@ (8003cec <prvAddNewTaskToReadyList+0xb8>)
 8003c48:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003c4a:	4b29      	ldr	r3, [pc, #164]	@ (8003cf0 <prvAddNewTaskToReadyList+0xbc>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d109      	bne.n	8003c66 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003c52:	4a27      	ldr	r2, [pc, #156]	@ (8003cf0 <prvAddNewTaskToReadyList+0xbc>)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c58:	4b24      	ldr	r3, [pc, #144]	@ (8003cec <prvAddNewTaskToReadyList+0xb8>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d110      	bne.n	8003c82 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003c60:	f000 faf8 	bl	8004254 <prvInitialiseTaskLists>
 8003c64:	e00d      	b.n	8003c82 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003c66:	4b23      	ldr	r3, [pc, #140]	@ (8003cf4 <prvAddNewTaskToReadyList+0xc0>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d109      	bne.n	8003c82 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c6e:	4b20      	ldr	r3, [pc, #128]	@ (8003cf0 <prvAddNewTaskToReadyList+0xbc>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d802      	bhi.n	8003c82 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c7c:	4a1c      	ldr	r2, [pc, #112]	@ (8003cf0 <prvAddNewTaskToReadyList+0xbc>)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c82:	4b1d      	ldr	r3, [pc, #116]	@ (8003cf8 <prvAddNewTaskToReadyList+0xc4>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	3301      	adds	r3, #1
 8003c88:	4a1b      	ldr	r2, [pc, #108]	@ (8003cf8 <prvAddNewTaskToReadyList+0xc4>)
 8003c8a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c90:	2201      	movs	r2, #1
 8003c92:	409a      	lsls	r2, r3
 8003c94:	4b19      	ldr	r3, [pc, #100]	@ (8003cfc <prvAddNewTaskToReadyList+0xc8>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	4a18      	ldr	r2, [pc, #96]	@ (8003cfc <prvAddNewTaskToReadyList+0xc8>)
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4413      	add	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	4a15      	ldr	r2, [pc, #84]	@ (8003d00 <prvAddNewTaskToReadyList+0xcc>)
 8003cac:	441a      	add	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	3304      	adds	r3, #4
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	4610      	mov	r0, r2
 8003cb6:	f7ff fde9 	bl	800388c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003cba:	f000 fd8f 	bl	80047dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8003cf4 <prvAddNewTaskToReadyList+0xc0>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00e      	beq.n	8003ce4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8003cf0 <prvAddNewTaskToReadyList+0xbc>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d207      	bcs.n	8003ce4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8003d04 <prvAddNewTaskToReadyList+0xd0>)
 8003cd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	f3bf 8f4f 	dsb	sy
 8003ce0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ce4:	bf00      	nop
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	20000584 	.word	0x20000584
 8003cf0:	20000484 	.word	0x20000484
 8003cf4:	20000590 	.word	0x20000590
 8003cf8:	200005a0 	.word	0x200005a0
 8003cfc:	2000058c 	.word	0x2000058c
 8003d00:	20000488 	.word	0x20000488
 8003d04:	e000ed04 	.word	0xe000ed04

08003d08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d10:	2300      	movs	r3, #0
 8003d12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d018      	beq.n	8003d4c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d1a:	4b14      	ldr	r3, [pc, #80]	@ (8003d6c <vTaskDelay+0x64>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00b      	beq.n	8003d3a <vTaskDelay+0x32>
	__asm volatile
 8003d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d26:	f383 8811 	msr	BASEPRI, r3
 8003d2a:	f3bf 8f6f 	isb	sy
 8003d2e:	f3bf 8f4f 	dsb	sy
 8003d32:	60bb      	str	r3, [r7, #8]
}
 8003d34:	bf00      	nop
 8003d36:	bf00      	nop
 8003d38:	e7fd      	b.n	8003d36 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003d3a:	f000 f885 	bl	8003e48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d3e:	2100      	movs	r1, #0
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 fb83 	bl	800444c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003d46:	f000 f88d 	bl	8003e64 <xTaskResumeAll>
 8003d4a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d107      	bne.n	8003d62 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003d52:	4b07      	ldr	r3, [pc, #28]	@ (8003d70 <vTaskDelay+0x68>)
 8003d54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	f3bf 8f4f 	dsb	sy
 8003d5e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d62:	bf00      	nop
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	200005ac 	.word	0x200005ac
 8003d70:	e000ed04 	.word	0xe000ed04

08003d74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b08a      	sub	sp, #40	@ 0x28
 8003d78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d82:	463a      	mov	r2, r7
 8003d84:	1d39      	adds	r1, r7, #4
 8003d86:	f107 0308 	add.w	r3, r7, #8
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7fc fc08 	bl	80005a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d90:	6839      	ldr	r1, [r7, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	9202      	str	r2, [sp, #8]
 8003d98:	9301      	str	r3, [sp, #4]
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	2300      	movs	r3, #0
 8003da0:	460a      	mov	r2, r1
 8003da2:	4921      	ldr	r1, [pc, #132]	@ (8003e28 <vTaskStartScheduler+0xb4>)
 8003da4:	4821      	ldr	r0, [pc, #132]	@ (8003e2c <vTaskStartScheduler+0xb8>)
 8003da6:	f7ff fdf8 	bl	800399a <xTaskCreateStatic>
 8003daa:	4603      	mov	r3, r0
 8003dac:	4a20      	ldr	r2, [pc, #128]	@ (8003e30 <vTaskStartScheduler+0xbc>)
 8003dae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003db0:	4b1f      	ldr	r3, [pc, #124]	@ (8003e30 <vTaskStartScheduler+0xbc>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d002      	beq.n	8003dbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003db8:	2301      	movs	r3, #1
 8003dba:	617b      	str	r3, [r7, #20]
 8003dbc:	e001      	b.n	8003dc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d11b      	bne.n	8003e00 <vTaskStartScheduler+0x8c>
	__asm volatile
 8003dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dcc:	f383 8811 	msr	BASEPRI, r3
 8003dd0:	f3bf 8f6f 	isb	sy
 8003dd4:	f3bf 8f4f 	dsb	sy
 8003dd8:	613b      	str	r3, [r7, #16]
}
 8003dda:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003ddc:	4b15      	ldr	r3, [pc, #84]	@ (8003e34 <vTaskStartScheduler+0xc0>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	334c      	adds	r3, #76	@ 0x4c
 8003de2:	4a15      	ldr	r2, [pc, #84]	@ (8003e38 <vTaskStartScheduler+0xc4>)
 8003de4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003de6:	4b15      	ldr	r3, [pc, #84]	@ (8003e3c <vTaskStartScheduler+0xc8>)
 8003de8:	f04f 32ff 	mov.w	r2, #4294967295
 8003dec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003dee:	4b14      	ldr	r3, [pc, #80]	@ (8003e40 <vTaskStartScheduler+0xcc>)
 8003df0:	2201      	movs	r2, #1
 8003df2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003df4:	4b13      	ldr	r3, [pc, #76]	@ (8003e44 <vTaskStartScheduler+0xd0>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003dfa:	f000 fc19 	bl	8004630 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003dfe:	e00f      	b.n	8003e20 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e06:	d10b      	bne.n	8003e20 <vTaskStartScheduler+0xac>
	__asm volatile
 8003e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e0c:	f383 8811 	msr	BASEPRI, r3
 8003e10:	f3bf 8f6f 	isb	sy
 8003e14:	f3bf 8f4f 	dsb	sy
 8003e18:	60fb      	str	r3, [r7, #12]
}
 8003e1a:	bf00      	nop
 8003e1c:	bf00      	nop
 8003e1e:	e7fd      	b.n	8003e1c <vTaskStartScheduler+0xa8>
}
 8003e20:	bf00      	nop
 8003e22:	3718      	adds	r7, #24
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	08006500 	.word	0x08006500
 8003e2c:	08004225 	.word	0x08004225
 8003e30:	200005a8 	.word	0x200005a8
 8003e34:	20000484 	.word	0x20000484
 8003e38:	2000001c 	.word	0x2000001c
 8003e3c:	200005a4 	.word	0x200005a4
 8003e40:	20000590 	.word	0x20000590
 8003e44:	20000588 	.word	0x20000588

08003e48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003e4c:	4b04      	ldr	r3, [pc, #16]	@ (8003e60 <vTaskSuspendAll+0x18>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3301      	adds	r3, #1
 8003e52:	4a03      	ldr	r2, [pc, #12]	@ (8003e60 <vTaskSuspendAll+0x18>)
 8003e54:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003e56:	bf00      	nop
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	200005ac 	.word	0x200005ac

08003e64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e72:	4b42      	ldr	r3, [pc, #264]	@ (8003f7c <xTaskResumeAll+0x118>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10b      	bne.n	8003e92 <xTaskResumeAll+0x2e>
	__asm volatile
 8003e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e7e:	f383 8811 	msr	BASEPRI, r3
 8003e82:	f3bf 8f6f 	isb	sy
 8003e86:	f3bf 8f4f 	dsb	sy
 8003e8a:	603b      	str	r3, [r7, #0]
}
 8003e8c:	bf00      	nop
 8003e8e:	bf00      	nop
 8003e90:	e7fd      	b.n	8003e8e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e92:	f000 fc71 	bl	8004778 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e96:	4b39      	ldr	r3, [pc, #228]	@ (8003f7c <xTaskResumeAll+0x118>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	4a37      	ldr	r2, [pc, #220]	@ (8003f7c <xTaskResumeAll+0x118>)
 8003e9e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ea0:	4b36      	ldr	r3, [pc, #216]	@ (8003f7c <xTaskResumeAll+0x118>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d161      	bne.n	8003f6c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003ea8:	4b35      	ldr	r3, [pc, #212]	@ (8003f80 <xTaskResumeAll+0x11c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d05d      	beq.n	8003f6c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003eb0:	e02e      	b.n	8003f10 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eb2:	4b34      	ldr	r3, [pc, #208]	@ (8003f84 <xTaskResumeAll+0x120>)
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	3318      	adds	r3, #24
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff fd41 	bl	8003946 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	3304      	adds	r3, #4
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7ff fd3c 	bl	8003946 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	409a      	lsls	r2, r3
 8003ed6:	4b2c      	ldr	r3, [pc, #176]	@ (8003f88 <xTaskResumeAll+0x124>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	4a2a      	ldr	r2, [pc, #168]	@ (8003f88 <xTaskResumeAll+0x124>)
 8003ede:	6013      	str	r3, [r2, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4a27      	ldr	r2, [pc, #156]	@ (8003f8c <xTaskResumeAll+0x128>)
 8003eee:	441a      	add	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	3304      	adds	r3, #4
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4610      	mov	r0, r2
 8003ef8:	f7ff fcc8 	bl	800388c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f00:	4b23      	ldr	r3, [pc, #140]	@ (8003f90 <xTaskResumeAll+0x12c>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d302      	bcc.n	8003f10 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003f0a:	4b22      	ldr	r3, [pc, #136]	@ (8003f94 <xTaskResumeAll+0x130>)
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f10:	4b1c      	ldr	r3, [pc, #112]	@ (8003f84 <xTaskResumeAll+0x120>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1cc      	bne.n	8003eb2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f1e:	f000 fa75 	bl	800440c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003f22:	4b1d      	ldr	r3, [pc, #116]	@ (8003f98 <xTaskResumeAll+0x134>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d010      	beq.n	8003f50 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f2e:	f000 f837 	bl	8003fa0 <xTaskIncrementTick>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d002      	beq.n	8003f3e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003f38:	4b16      	ldr	r3, [pc, #88]	@ (8003f94 <xTaskResumeAll+0x130>)
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	3b01      	subs	r3, #1
 8003f42:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1f1      	bne.n	8003f2e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003f4a:	4b13      	ldr	r3, [pc, #76]	@ (8003f98 <xTaskResumeAll+0x134>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003f50:	4b10      	ldr	r3, [pc, #64]	@ (8003f94 <xTaskResumeAll+0x130>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d009      	beq.n	8003f6c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f5c:	4b0f      	ldr	r3, [pc, #60]	@ (8003f9c <xTaskResumeAll+0x138>)
 8003f5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	f3bf 8f4f 	dsb	sy
 8003f68:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f6c:	f000 fc36 	bl	80047dc <vPortExitCritical>

	return xAlreadyYielded;
 8003f70:	68bb      	ldr	r3, [r7, #8]
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3710      	adds	r7, #16
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	200005ac 	.word	0x200005ac
 8003f80:	20000584 	.word	0x20000584
 8003f84:	20000544 	.word	0x20000544
 8003f88:	2000058c 	.word	0x2000058c
 8003f8c:	20000488 	.word	0x20000488
 8003f90:	20000484 	.word	0x20000484
 8003f94:	20000598 	.word	0x20000598
 8003f98:	20000594 	.word	0x20000594
 8003f9c:	e000ed04 	.word	0xe000ed04

08003fa0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003faa:	4b4f      	ldr	r3, [pc, #316]	@ (80040e8 <xTaskIncrementTick+0x148>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	f040 808f 	bne.w	80040d2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003fb4:	4b4d      	ldr	r3, [pc, #308]	@ (80040ec <xTaskIncrementTick+0x14c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003fbc:	4a4b      	ldr	r2, [pc, #300]	@ (80040ec <xTaskIncrementTick+0x14c>)
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d121      	bne.n	800400c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003fc8:	4b49      	ldr	r3, [pc, #292]	@ (80040f0 <xTaskIncrementTick+0x150>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00b      	beq.n	8003fea <xTaskIncrementTick+0x4a>
	__asm volatile
 8003fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fd6:	f383 8811 	msr	BASEPRI, r3
 8003fda:	f3bf 8f6f 	isb	sy
 8003fde:	f3bf 8f4f 	dsb	sy
 8003fe2:	603b      	str	r3, [r7, #0]
}
 8003fe4:	bf00      	nop
 8003fe6:	bf00      	nop
 8003fe8:	e7fd      	b.n	8003fe6 <xTaskIncrementTick+0x46>
 8003fea:	4b41      	ldr	r3, [pc, #260]	@ (80040f0 <xTaskIncrementTick+0x150>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	60fb      	str	r3, [r7, #12]
 8003ff0:	4b40      	ldr	r3, [pc, #256]	@ (80040f4 <xTaskIncrementTick+0x154>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a3e      	ldr	r2, [pc, #248]	@ (80040f0 <xTaskIncrementTick+0x150>)
 8003ff6:	6013      	str	r3, [r2, #0]
 8003ff8:	4a3e      	ldr	r2, [pc, #248]	@ (80040f4 <xTaskIncrementTick+0x154>)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6013      	str	r3, [r2, #0]
 8003ffe:	4b3e      	ldr	r3, [pc, #248]	@ (80040f8 <xTaskIncrementTick+0x158>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	3301      	adds	r3, #1
 8004004:	4a3c      	ldr	r2, [pc, #240]	@ (80040f8 <xTaskIncrementTick+0x158>)
 8004006:	6013      	str	r3, [r2, #0]
 8004008:	f000 fa00 	bl	800440c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800400c:	4b3b      	ldr	r3, [pc, #236]	@ (80040fc <xTaskIncrementTick+0x15c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	429a      	cmp	r2, r3
 8004014:	d348      	bcc.n	80040a8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004016:	4b36      	ldr	r3, [pc, #216]	@ (80040f0 <xTaskIncrementTick+0x150>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d104      	bne.n	800402a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004020:	4b36      	ldr	r3, [pc, #216]	@ (80040fc <xTaskIncrementTick+0x15c>)
 8004022:	f04f 32ff 	mov.w	r2, #4294967295
 8004026:	601a      	str	r2, [r3, #0]
					break;
 8004028:	e03e      	b.n	80040a8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800402a:	4b31      	ldr	r3, [pc, #196]	@ (80040f0 <xTaskIncrementTick+0x150>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	429a      	cmp	r2, r3
 8004040:	d203      	bcs.n	800404a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004042:	4a2e      	ldr	r2, [pc, #184]	@ (80040fc <xTaskIncrementTick+0x15c>)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004048:	e02e      	b.n	80040a8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	3304      	adds	r3, #4
 800404e:	4618      	mov	r0, r3
 8004050:	f7ff fc79 	bl	8003946 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004058:	2b00      	cmp	r3, #0
 800405a:	d004      	beq.n	8004066 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	3318      	adds	r3, #24
 8004060:	4618      	mov	r0, r3
 8004062:	f7ff fc70 	bl	8003946 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800406a:	2201      	movs	r2, #1
 800406c:	409a      	lsls	r2, r3
 800406e:	4b24      	ldr	r3, [pc, #144]	@ (8004100 <xTaskIncrementTick+0x160>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4313      	orrs	r3, r2
 8004074:	4a22      	ldr	r2, [pc, #136]	@ (8004100 <xTaskIncrementTick+0x160>)
 8004076:	6013      	str	r3, [r2, #0]
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800407c:	4613      	mov	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4413      	add	r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	4a1f      	ldr	r2, [pc, #124]	@ (8004104 <xTaskIncrementTick+0x164>)
 8004086:	441a      	add	r2, r3
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	3304      	adds	r3, #4
 800408c:	4619      	mov	r1, r3
 800408e:	4610      	mov	r0, r2
 8004090:	f7ff fbfc 	bl	800388c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004098:	4b1b      	ldr	r3, [pc, #108]	@ (8004108 <xTaskIncrementTick+0x168>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800409e:	429a      	cmp	r2, r3
 80040a0:	d3b9      	bcc.n	8004016 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80040a2:	2301      	movs	r3, #1
 80040a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040a6:	e7b6      	b.n	8004016 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80040a8:	4b17      	ldr	r3, [pc, #92]	@ (8004108 <xTaskIncrementTick+0x168>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040ae:	4915      	ldr	r1, [pc, #84]	@ (8004104 <xTaskIncrementTick+0x164>)
 80040b0:	4613      	mov	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	440b      	add	r3, r1
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d901      	bls.n	80040c4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80040c0:	2301      	movs	r3, #1
 80040c2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80040c4:	4b11      	ldr	r3, [pc, #68]	@ (800410c <xTaskIncrementTick+0x16c>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d007      	beq.n	80040dc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80040cc:	2301      	movs	r3, #1
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	e004      	b.n	80040dc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80040d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004110 <xTaskIncrementTick+0x170>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	3301      	adds	r3, #1
 80040d8:	4a0d      	ldr	r2, [pc, #52]	@ (8004110 <xTaskIncrementTick+0x170>)
 80040da:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80040dc:	697b      	ldr	r3, [r7, #20]
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3718      	adds	r7, #24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	200005ac 	.word	0x200005ac
 80040ec:	20000588 	.word	0x20000588
 80040f0:	2000053c 	.word	0x2000053c
 80040f4:	20000540 	.word	0x20000540
 80040f8:	2000059c 	.word	0x2000059c
 80040fc:	200005a4 	.word	0x200005a4
 8004100:	2000058c 	.word	0x2000058c
 8004104:	20000488 	.word	0x20000488
 8004108:	20000484 	.word	0x20000484
 800410c:	20000598 	.word	0x20000598
 8004110:	20000594 	.word	0x20000594

08004114 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b088      	sub	sp, #32
 8004118:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800411a:	4b3c      	ldr	r3, [pc, #240]	@ (800420c <vTaskSwitchContext+0xf8>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d003      	beq.n	800412a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004122:	4b3b      	ldr	r3, [pc, #236]	@ (8004210 <vTaskSwitchContext+0xfc>)
 8004124:	2201      	movs	r2, #1
 8004126:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004128:	e06c      	b.n	8004204 <vTaskSwitchContext+0xf0>
		xYieldPending = pdFALSE;
 800412a:	4b39      	ldr	r3, [pc, #228]	@ (8004210 <vTaskSwitchContext+0xfc>)
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8004130:	4b38      	ldr	r3, [pc, #224]	@ (8004214 <vTaskSwitchContext+0x100>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004136:	61fb      	str	r3, [r7, #28]
 8004138:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800413c:	61bb      	str	r3, [r7, #24]
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	429a      	cmp	r2, r3
 8004146:	d111      	bne.n	800416c <vTaskSwitchContext+0x58>
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	3304      	adds	r3, #4
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	429a      	cmp	r2, r3
 8004152:	d10b      	bne.n	800416c <vTaskSwitchContext+0x58>
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	3308      	adds	r3, #8
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	69ba      	ldr	r2, [r7, #24]
 800415c:	429a      	cmp	r2, r3
 800415e:	d105      	bne.n	800416c <vTaskSwitchContext+0x58>
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	330c      	adds	r3, #12
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	429a      	cmp	r2, r3
 800416a:	d008      	beq.n	800417e <vTaskSwitchContext+0x6a>
 800416c:	4b29      	ldr	r3, [pc, #164]	@ (8004214 <vTaskSwitchContext+0x100>)
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	4b28      	ldr	r3, [pc, #160]	@ (8004214 <vTaskSwitchContext+0x100>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	3334      	adds	r3, #52	@ 0x34
 8004176:	4619      	mov	r1, r3
 8004178:	4610      	mov	r0, r2
 800417a:	f7fc fa9b 	bl	80006b4 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800417e:	4b26      	ldr	r3, [pc, #152]	@ (8004218 <vTaskSwitchContext+0x104>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	fab3 f383 	clz	r3, r3
 800418a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800418c:	7afb      	ldrb	r3, [r7, #11]
 800418e:	f1c3 031f 	rsb	r3, r3, #31
 8004192:	617b      	str	r3, [r7, #20]
 8004194:	4921      	ldr	r1, [pc, #132]	@ (800421c <vTaskSwitchContext+0x108>)
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	4613      	mov	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	440b      	add	r3, r1
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10b      	bne.n	80041c0 <vTaskSwitchContext+0xac>
	__asm volatile
 80041a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ac:	f383 8811 	msr	BASEPRI, r3
 80041b0:	f3bf 8f6f 	isb	sy
 80041b4:	f3bf 8f4f 	dsb	sy
 80041b8:	607b      	str	r3, [r7, #4]
}
 80041ba:	bf00      	nop
 80041bc:	bf00      	nop
 80041be:	e7fd      	b.n	80041bc <vTaskSwitchContext+0xa8>
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	4613      	mov	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4a14      	ldr	r2, [pc, #80]	@ (800421c <vTaskSwitchContext+0x108>)
 80041cc:	4413      	add	r3, r2
 80041ce:	613b      	str	r3, [r7, #16]
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	605a      	str	r2, [r3, #4]
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	3308      	adds	r3, #8
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d104      	bne.n	80041f0 <vTaskSwitchContext+0xdc>
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	605a      	str	r2, [r3, #4]
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	4a07      	ldr	r2, [pc, #28]	@ (8004214 <vTaskSwitchContext+0x100>)
 80041f8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80041fa:	4b06      	ldr	r3, [pc, #24]	@ (8004214 <vTaskSwitchContext+0x100>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	334c      	adds	r3, #76	@ 0x4c
 8004200:	4a07      	ldr	r2, [pc, #28]	@ (8004220 <vTaskSwitchContext+0x10c>)
 8004202:	6013      	str	r3, [r2, #0]
}
 8004204:	bf00      	nop
 8004206:	3720      	adds	r7, #32
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	200005ac 	.word	0x200005ac
 8004210:	20000598 	.word	0x20000598
 8004214:	20000484 	.word	0x20000484
 8004218:	2000058c 	.word	0x2000058c
 800421c:	20000488 	.word	0x20000488
 8004220:	2000001c 	.word	0x2000001c

08004224 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800422c:	f000 f852 	bl	80042d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004230:	4b06      	ldr	r3, [pc, #24]	@ (800424c <prvIdleTask+0x28>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d9f9      	bls.n	800422c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004238:	4b05      	ldr	r3, [pc, #20]	@ (8004250 <prvIdleTask+0x2c>)
 800423a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	f3bf 8f4f 	dsb	sy
 8004244:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004248:	e7f0      	b.n	800422c <prvIdleTask+0x8>
 800424a:	bf00      	nop
 800424c:	20000488 	.word	0x20000488
 8004250:	e000ed04 	.word	0xe000ed04

08004254 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800425a:	2300      	movs	r3, #0
 800425c:	607b      	str	r3, [r7, #4]
 800425e:	e00c      	b.n	800427a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	4613      	mov	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4a12      	ldr	r2, [pc, #72]	@ (80042b4 <prvInitialiseTaskLists+0x60>)
 800426c:	4413      	add	r3, r2
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff fadf 	bl	8003832 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	3301      	adds	r3, #1
 8004278:	607b      	str	r3, [r7, #4]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b06      	cmp	r3, #6
 800427e:	d9ef      	bls.n	8004260 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004280:	480d      	ldr	r0, [pc, #52]	@ (80042b8 <prvInitialiseTaskLists+0x64>)
 8004282:	f7ff fad6 	bl	8003832 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004286:	480d      	ldr	r0, [pc, #52]	@ (80042bc <prvInitialiseTaskLists+0x68>)
 8004288:	f7ff fad3 	bl	8003832 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800428c:	480c      	ldr	r0, [pc, #48]	@ (80042c0 <prvInitialiseTaskLists+0x6c>)
 800428e:	f7ff fad0 	bl	8003832 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004292:	480c      	ldr	r0, [pc, #48]	@ (80042c4 <prvInitialiseTaskLists+0x70>)
 8004294:	f7ff facd 	bl	8003832 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004298:	480b      	ldr	r0, [pc, #44]	@ (80042c8 <prvInitialiseTaskLists+0x74>)
 800429a:	f7ff faca 	bl	8003832 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800429e:	4b0b      	ldr	r3, [pc, #44]	@ (80042cc <prvInitialiseTaskLists+0x78>)
 80042a0:	4a05      	ldr	r2, [pc, #20]	@ (80042b8 <prvInitialiseTaskLists+0x64>)
 80042a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80042a4:	4b0a      	ldr	r3, [pc, #40]	@ (80042d0 <prvInitialiseTaskLists+0x7c>)
 80042a6:	4a05      	ldr	r2, [pc, #20]	@ (80042bc <prvInitialiseTaskLists+0x68>)
 80042a8:	601a      	str	r2, [r3, #0]
}
 80042aa:	bf00      	nop
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	20000488 	.word	0x20000488
 80042b8:	20000514 	.word	0x20000514
 80042bc:	20000528 	.word	0x20000528
 80042c0:	20000544 	.word	0x20000544
 80042c4:	20000558 	.word	0x20000558
 80042c8:	20000570 	.word	0x20000570
 80042cc:	2000053c 	.word	0x2000053c
 80042d0:	20000540 	.word	0x20000540

080042d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042da:	e019      	b.n	8004310 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80042dc:	f000 fa4c 	bl	8004778 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042e0:	4b10      	ldr	r3, [pc, #64]	@ (8004324 <prvCheckTasksWaitingTermination+0x50>)
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3304      	adds	r3, #4
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7ff fb2a 	bl	8003946 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80042f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004328 <prvCheckTasksWaitingTermination+0x54>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	3b01      	subs	r3, #1
 80042f8:	4a0b      	ldr	r2, [pc, #44]	@ (8004328 <prvCheckTasksWaitingTermination+0x54>)
 80042fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80042fc:	4b0b      	ldr	r3, [pc, #44]	@ (800432c <prvCheckTasksWaitingTermination+0x58>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	3b01      	subs	r3, #1
 8004302:	4a0a      	ldr	r2, [pc, #40]	@ (800432c <prvCheckTasksWaitingTermination+0x58>)
 8004304:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004306:	f000 fa69 	bl	80047dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f848 	bl	80043a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004310:	4b06      	ldr	r3, [pc, #24]	@ (800432c <prvCheckTasksWaitingTermination+0x58>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1e1      	bne.n	80042dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004318:	bf00      	nop
 800431a:	bf00      	nop
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	20000558 	.word	0x20000558
 8004328:	20000584 	.word	0x20000584
 800432c:	2000056c 	.word	0x2000056c

08004330 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8004338:	2300      	movs	r3, #0
 800433a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800433c:	e005      	b.n	800434a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	3301      	adds	r3, #1
 8004342:	607b      	str	r3, [r7, #4]
			ulCount++;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	3301      	adds	r3, #1
 8004348:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	2ba5      	cmp	r3, #165	@ 0xa5
 8004350:	d0f5      	beq.n	800433e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	089b      	lsrs	r3, r3, #2
 8004356:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	b29b      	uxth	r3, r3
	}
 800435c:	4618      	mov	r0, r3
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d102      	bne.n	800437c <uxTaskGetStackHighWaterMark+0x14>
 8004376:	4b09      	ldr	r3, [pc, #36]	@ (800439c <uxTaskGetStackHighWaterMark+0x34>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	e000      	b.n	800437e <uxTaskGetStackHighWaterMark+0x16>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004384:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8004386:	6938      	ldr	r0, [r7, #16]
 8004388:	f7ff ffd2 	bl	8004330 <prvTaskCheckFreeStackSpace>
 800438c:	4603      	mov	r3, r0
 800438e:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8004390:	68fb      	ldr	r3, [r7, #12]
	}
 8004392:	4618      	mov	r0, r3
 8004394:	3718      	adds	r7, #24
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	20000484 	.word	0x20000484

080043a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	334c      	adds	r3, #76	@ 0x4c
 80043ac:	4618      	mov	r0, r3
 80043ae:	f000 ffd7 	bl	8005360 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d108      	bne.n	80043ce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c0:	4618      	mov	r0, r3
 80043c2:	f000 fb87 	bl	8004ad4 <vPortFree>
				vPortFree( pxTCB );
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 fb84 	bl	8004ad4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80043cc:	e019      	b.n	8004402 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d103      	bne.n	80043e0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 fb7b 	bl	8004ad4 <vPortFree>
	}
 80043de:	e010      	b.n	8004402 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d00b      	beq.n	8004402 <prvDeleteTCB+0x62>
	__asm volatile
 80043ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ee:	f383 8811 	msr	BASEPRI, r3
 80043f2:	f3bf 8f6f 	isb	sy
 80043f6:	f3bf 8f4f 	dsb	sy
 80043fa:	60fb      	str	r3, [r7, #12]
}
 80043fc:	bf00      	nop
 80043fe:	bf00      	nop
 8004400:	e7fd      	b.n	80043fe <prvDeleteTCB+0x5e>
	}
 8004402:	bf00      	nop
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
	...

0800440c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004412:	4b0c      	ldr	r3, [pc, #48]	@ (8004444 <prvResetNextTaskUnblockTime+0x38>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d104      	bne.n	8004426 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800441c:	4b0a      	ldr	r3, [pc, #40]	@ (8004448 <prvResetNextTaskUnblockTime+0x3c>)
 800441e:	f04f 32ff 	mov.w	r2, #4294967295
 8004422:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004424:	e008      	b.n	8004438 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004426:	4b07      	ldr	r3, [pc, #28]	@ (8004444 <prvResetNextTaskUnblockTime+0x38>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	4a04      	ldr	r2, [pc, #16]	@ (8004448 <prvResetNextTaskUnblockTime+0x3c>)
 8004436:	6013      	str	r3, [r2, #0]
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr
 8004444:	2000053c 	.word	0x2000053c
 8004448:	200005a4 	.word	0x200005a4

0800444c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004456:	4b29      	ldr	r3, [pc, #164]	@ (80044fc <prvAddCurrentTaskToDelayedList+0xb0>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800445c:	4b28      	ldr	r3, [pc, #160]	@ (8004500 <prvAddCurrentTaskToDelayedList+0xb4>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	3304      	adds	r3, #4
 8004462:	4618      	mov	r0, r3
 8004464:	f7ff fa6f 	bl	8003946 <uxListRemove>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10b      	bne.n	8004486 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800446e:	4b24      	ldr	r3, [pc, #144]	@ (8004500 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004474:	2201      	movs	r2, #1
 8004476:	fa02 f303 	lsl.w	r3, r2, r3
 800447a:	43da      	mvns	r2, r3
 800447c:	4b21      	ldr	r3, [pc, #132]	@ (8004504 <prvAddCurrentTaskToDelayedList+0xb8>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4013      	ands	r3, r2
 8004482:	4a20      	ldr	r2, [pc, #128]	@ (8004504 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004484:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448c:	d10a      	bne.n	80044a4 <prvAddCurrentTaskToDelayedList+0x58>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d007      	beq.n	80044a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004494:	4b1a      	ldr	r3, [pc, #104]	@ (8004500 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3304      	adds	r3, #4
 800449a:	4619      	mov	r1, r3
 800449c:	481a      	ldr	r0, [pc, #104]	@ (8004508 <prvAddCurrentTaskToDelayedList+0xbc>)
 800449e:	f7ff f9f5 	bl	800388c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80044a2:	e026      	b.n	80044f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4413      	add	r3, r2
 80044aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80044ac:	4b14      	ldr	r3, [pc, #80]	@ (8004500 <prvAddCurrentTaskToDelayedList+0xb4>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d209      	bcs.n	80044d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044bc:	4b13      	ldr	r3, [pc, #76]	@ (800450c <prvAddCurrentTaskToDelayedList+0xc0>)
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	4b0f      	ldr	r3, [pc, #60]	@ (8004500 <prvAddCurrentTaskToDelayedList+0xb4>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	3304      	adds	r3, #4
 80044c6:	4619      	mov	r1, r3
 80044c8:	4610      	mov	r0, r2
 80044ca:	f7ff fa03 	bl	80038d4 <vListInsert>
}
 80044ce:	e010      	b.n	80044f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004510 <prvAddCurrentTaskToDelayedList+0xc4>)
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	4b0a      	ldr	r3, [pc, #40]	@ (8004500 <prvAddCurrentTaskToDelayedList+0xb4>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	3304      	adds	r3, #4
 80044da:	4619      	mov	r1, r3
 80044dc:	4610      	mov	r0, r2
 80044de:	f7ff f9f9 	bl	80038d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80044e2:	4b0c      	ldr	r3, [pc, #48]	@ (8004514 <prvAddCurrentTaskToDelayedList+0xc8>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d202      	bcs.n	80044f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80044ec:	4a09      	ldr	r2, [pc, #36]	@ (8004514 <prvAddCurrentTaskToDelayedList+0xc8>)
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	6013      	str	r3, [r2, #0]
}
 80044f2:	bf00      	nop
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	20000588 	.word	0x20000588
 8004500:	20000484 	.word	0x20000484
 8004504:	2000058c 	.word	0x2000058c
 8004508:	20000570 	.word	0x20000570
 800450c:	20000540 	.word	0x20000540
 8004510:	2000053c 	.word	0x2000053c
 8004514:	200005a4 	.word	0x200005a4

08004518 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	3b04      	subs	r3, #4
 8004528:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004530:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	3b04      	subs	r3, #4
 8004536:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f023 0201 	bic.w	r2, r3, #1
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	3b04      	subs	r3, #4
 8004546:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004548:	4a0c      	ldr	r2, [pc, #48]	@ (800457c <pxPortInitialiseStack+0x64>)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	3b14      	subs	r3, #20
 8004552:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	3b04      	subs	r3, #4
 800455e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f06f 0202 	mvn.w	r2, #2
 8004566:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	3b20      	subs	r3, #32
 800456c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800456e:	68fb      	ldr	r3, [r7, #12]
}
 8004570:	4618      	mov	r0, r3
 8004572:	3714      	adds	r7, #20
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr
 800457c:	08004581 	.word	0x08004581

08004580 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004586:	2300      	movs	r3, #0
 8004588:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800458a:	4b13      	ldr	r3, [pc, #76]	@ (80045d8 <prvTaskExitError+0x58>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004592:	d00b      	beq.n	80045ac <prvTaskExitError+0x2c>
	__asm volatile
 8004594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004598:	f383 8811 	msr	BASEPRI, r3
 800459c:	f3bf 8f6f 	isb	sy
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	60fb      	str	r3, [r7, #12]
}
 80045a6:	bf00      	nop
 80045a8:	bf00      	nop
 80045aa:	e7fd      	b.n	80045a8 <prvTaskExitError+0x28>
	__asm volatile
 80045ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045b0:	f383 8811 	msr	BASEPRI, r3
 80045b4:	f3bf 8f6f 	isb	sy
 80045b8:	f3bf 8f4f 	dsb	sy
 80045bc:	60bb      	str	r3, [r7, #8]
}
 80045be:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80045c0:	bf00      	nop
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0fc      	beq.n	80045c2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80045c8:	bf00      	nop
 80045ca:	bf00      	nop
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	2000000c 	.word	0x2000000c
 80045dc:	00000000 	.word	0x00000000

080045e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80045e0:	4b07      	ldr	r3, [pc, #28]	@ (8004600 <pxCurrentTCBConst2>)
 80045e2:	6819      	ldr	r1, [r3, #0]
 80045e4:	6808      	ldr	r0, [r1, #0]
 80045e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ea:	f380 8809 	msr	PSP, r0
 80045ee:	f3bf 8f6f 	isb	sy
 80045f2:	f04f 0000 	mov.w	r0, #0
 80045f6:	f380 8811 	msr	BASEPRI, r0
 80045fa:	4770      	bx	lr
 80045fc:	f3af 8000 	nop.w

08004600 <pxCurrentTCBConst2>:
 8004600:	20000484 	.word	0x20000484
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004604:	bf00      	nop
 8004606:	bf00      	nop

08004608 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004608:	4808      	ldr	r0, [pc, #32]	@ (800462c <prvPortStartFirstTask+0x24>)
 800460a:	6800      	ldr	r0, [r0, #0]
 800460c:	6800      	ldr	r0, [r0, #0]
 800460e:	f380 8808 	msr	MSP, r0
 8004612:	f04f 0000 	mov.w	r0, #0
 8004616:	f380 8814 	msr	CONTROL, r0
 800461a:	b662      	cpsie	i
 800461c:	b661      	cpsie	f
 800461e:	f3bf 8f4f 	dsb	sy
 8004622:	f3bf 8f6f 	isb	sy
 8004626:	df00      	svc	0
 8004628:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800462a:	bf00      	nop
 800462c:	e000ed08 	.word	0xe000ed08

08004630 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004636:	4b47      	ldr	r3, [pc, #284]	@ (8004754 <xPortStartScheduler+0x124>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a47      	ldr	r2, [pc, #284]	@ (8004758 <xPortStartScheduler+0x128>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d10b      	bne.n	8004658 <xPortStartScheduler+0x28>
	__asm volatile
 8004640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004644:	f383 8811 	msr	BASEPRI, r3
 8004648:	f3bf 8f6f 	isb	sy
 800464c:	f3bf 8f4f 	dsb	sy
 8004650:	613b      	str	r3, [r7, #16]
}
 8004652:	bf00      	nop
 8004654:	bf00      	nop
 8004656:	e7fd      	b.n	8004654 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004658:	4b3e      	ldr	r3, [pc, #248]	@ (8004754 <xPortStartScheduler+0x124>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a3f      	ldr	r2, [pc, #252]	@ (800475c <xPortStartScheduler+0x12c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d10b      	bne.n	800467a <xPortStartScheduler+0x4a>
	__asm volatile
 8004662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004666:	f383 8811 	msr	BASEPRI, r3
 800466a:	f3bf 8f6f 	isb	sy
 800466e:	f3bf 8f4f 	dsb	sy
 8004672:	60fb      	str	r3, [r7, #12]
}
 8004674:	bf00      	nop
 8004676:	bf00      	nop
 8004678:	e7fd      	b.n	8004676 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800467a:	4b39      	ldr	r3, [pc, #228]	@ (8004760 <xPortStartScheduler+0x130>)
 800467c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	b2db      	uxtb	r3, r3
 8004684:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	22ff      	movs	r2, #255	@ 0xff
 800468a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	b2db      	uxtb	r3, r3
 8004692:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004694:	78fb      	ldrb	r3, [r7, #3]
 8004696:	b2db      	uxtb	r3, r3
 8004698:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800469c:	b2da      	uxtb	r2, r3
 800469e:	4b31      	ldr	r3, [pc, #196]	@ (8004764 <xPortStartScheduler+0x134>)
 80046a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80046a2:	4b31      	ldr	r3, [pc, #196]	@ (8004768 <xPortStartScheduler+0x138>)
 80046a4:	2207      	movs	r2, #7
 80046a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046a8:	e009      	b.n	80046be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80046aa:	4b2f      	ldr	r3, [pc, #188]	@ (8004768 <xPortStartScheduler+0x138>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	3b01      	subs	r3, #1
 80046b0:	4a2d      	ldr	r2, [pc, #180]	@ (8004768 <xPortStartScheduler+0x138>)
 80046b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80046b4:	78fb      	ldrb	r3, [r7, #3]
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046be:	78fb      	ldrb	r3, [r7, #3]
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046c6:	2b80      	cmp	r3, #128	@ 0x80
 80046c8:	d0ef      	beq.n	80046aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80046ca:	4b27      	ldr	r3, [pc, #156]	@ (8004768 <xPortStartScheduler+0x138>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f1c3 0307 	rsb	r3, r3, #7
 80046d2:	2b04      	cmp	r3, #4
 80046d4:	d00b      	beq.n	80046ee <xPortStartScheduler+0xbe>
	__asm volatile
 80046d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046da:	f383 8811 	msr	BASEPRI, r3
 80046de:	f3bf 8f6f 	isb	sy
 80046e2:	f3bf 8f4f 	dsb	sy
 80046e6:	60bb      	str	r3, [r7, #8]
}
 80046e8:	bf00      	nop
 80046ea:	bf00      	nop
 80046ec:	e7fd      	b.n	80046ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80046ee:	4b1e      	ldr	r3, [pc, #120]	@ (8004768 <xPortStartScheduler+0x138>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	021b      	lsls	r3, r3, #8
 80046f4:	4a1c      	ldr	r2, [pc, #112]	@ (8004768 <xPortStartScheduler+0x138>)
 80046f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80046f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004768 <xPortStartScheduler+0x138>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004700:	4a19      	ldr	r2, [pc, #100]	@ (8004768 <xPortStartScheduler+0x138>)
 8004702:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	b2da      	uxtb	r2, r3
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800470c:	4b17      	ldr	r3, [pc, #92]	@ (800476c <xPortStartScheduler+0x13c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a16      	ldr	r2, [pc, #88]	@ (800476c <xPortStartScheduler+0x13c>)
 8004712:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004716:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004718:	4b14      	ldr	r3, [pc, #80]	@ (800476c <xPortStartScheduler+0x13c>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a13      	ldr	r2, [pc, #76]	@ (800476c <xPortStartScheduler+0x13c>)
 800471e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004722:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004724:	f000 f8da 	bl	80048dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004728:	4b11      	ldr	r3, [pc, #68]	@ (8004770 <xPortStartScheduler+0x140>)
 800472a:	2200      	movs	r2, #0
 800472c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800472e:	f000 f8f9 	bl	8004924 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004732:	4b10      	ldr	r3, [pc, #64]	@ (8004774 <xPortStartScheduler+0x144>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a0f      	ldr	r2, [pc, #60]	@ (8004774 <xPortStartScheduler+0x144>)
 8004738:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800473c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800473e:	f7ff ff63 	bl	8004608 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004742:	f7ff fce7 	bl	8004114 <vTaskSwitchContext>
	prvTaskExitError();
 8004746:	f7ff ff1b 	bl	8004580 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800474a:	2300      	movs	r3, #0
}
 800474c:	4618      	mov	r0, r3
 800474e:	3718      	adds	r7, #24
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	e000ed00 	.word	0xe000ed00
 8004758:	410fc271 	.word	0x410fc271
 800475c:	410fc270 	.word	0x410fc270
 8004760:	e000e400 	.word	0xe000e400
 8004764:	200005b0 	.word	0x200005b0
 8004768:	200005b4 	.word	0x200005b4
 800476c:	e000ed20 	.word	0xe000ed20
 8004770:	2000000c 	.word	0x2000000c
 8004774:	e000ef34 	.word	0xe000ef34

08004778 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
	__asm volatile
 800477e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004782:	f383 8811 	msr	BASEPRI, r3
 8004786:	f3bf 8f6f 	isb	sy
 800478a:	f3bf 8f4f 	dsb	sy
 800478e:	607b      	str	r3, [r7, #4]
}
 8004790:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004792:	4b10      	ldr	r3, [pc, #64]	@ (80047d4 <vPortEnterCritical+0x5c>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	3301      	adds	r3, #1
 8004798:	4a0e      	ldr	r2, [pc, #56]	@ (80047d4 <vPortEnterCritical+0x5c>)
 800479a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800479c:	4b0d      	ldr	r3, [pc, #52]	@ (80047d4 <vPortEnterCritical+0x5c>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d110      	bne.n	80047c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80047a4:	4b0c      	ldr	r3, [pc, #48]	@ (80047d8 <vPortEnterCritical+0x60>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00b      	beq.n	80047c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80047ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047b2:	f383 8811 	msr	BASEPRI, r3
 80047b6:	f3bf 8f6f 	isb	sy
 80047ba:	f3bf 8f4f 	dsb	sy
 80047be:	603b      	str	r3, [r7, #0]
}
 80047c0:	bf00      	nop
 80047c2:	bf00      	nop
 80047c4:	e7fd      	b.n	80047c2 <vPortEnterCritical+0x4a>
	}
}
 80047c6:	bf00      	nop
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	2000000c 	.word	0x2000000c
 80047d8:	e000ed04 	.word	0xe000ed04

080047dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80047e2:	4b12      	ldr	r3, [pc, #72]	@ (800482c <vPortExitCritical+0x50>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10b      	bne.n	8004802 <vPortExitCritical+0x26>
	__asm volatile
 80047ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ee:	f383 8811 	msr	BASEPRI, r3
 80047f2:	f3bf 8f6f 	isb	sy
 80047f6:	f3bf 8f4f 	dsb	sy
 80047fa:	607b      	str	r3, [r7, #4]
}
 80047fc:	bf00      	nop
 80047fe:	bf00      	nop
 8004800:	e7fd      	b.n	80047fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004802:	4b0a      	ldr	r3, [pc, #40]	@ (800482c <vPortExitCritical+0x50>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	3b01      	subs	r3, #1
 8004808:	4a08      	ldr	r2, [pc, #32]	@ (800482c <vPortExitCritical+0x50>)
 800480a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800480c:	4b07      	ldr	r3, [pc, #28]	@ (800482c <vPortExitCritical+0x50>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d105      	bne.n	8004820 <vPortExitCritical+0x44>
 8004814:	2300      	movs	r3, #0
 8004816:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800481e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	2000000c 	.word	0x2000000c

08004830 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004830:	f3ef 8009 	mrs	r0, PSP
 8004834:	f3bf 8f6f 	isb	sy
 8004838:	4b15      	ldr	r3, [pc, #84]	@ (8004890 <pxCurrentTCBConst>)
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	f01e 0f10 	tst.w	lr, #16
 8004840:	bf08      	it	eq
 8004842:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004846:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800484a:	6010      	str	r0, [r2, #0]
 800484c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004850:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004854:	f380 8811 	msr	BASEPRI, r0
 8004858:	f3bf 8f4f 	dsb	sy
 800485c:	f3bf 8f6f 	isb	sy
 8004860:	f7ff fc58 	bl	8004114 <vTaskSwitchContext>
 8004864:	f04f 0000 	mov.w	r0, #0
 8004868:	f380 8811 	msr	BASEPRI, r0
 800486c:	bc09      	pop	{r0, r3}
 800486e:	6819      	ldr	r1, [r3, #0]
 8004870:	6808      	ldr	r0, [r1, #0]
 8004872:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004876:	f01e 0f10 	tst.w	lr, #16
 800487a:	bf08      	it	eq
 800487c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004880:	f380 8809 	msr	PSP, r0
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	4770      	bx	lr
 800488a:	bf00      	nop
 800488c:	f3af 8000 	nop.w

08004890 <pxCurrentTCBConst>:
 8004890:	20000484 	.word	0x20000484
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004894:	bf00      	nop
 8004896:	bf00      	nop

08004898 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
	__asm volatile
 800489e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a2:	f383 8811 	msr	BASEPRI, r3
 80048a6:	f3bf 8f6f 	isb	sy
 80048aa:	f3bf 8f4f 	dsb	sy
 80048ae:	607b      	str	r3, [r7, #4]
}
 80048b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80048b2:	f7ff fb75 	bl	8003fa0 <xTaskIncrementTick>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d003      	beq.n	80048c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80048bc:	4b06      	ldr	r3, [pc, #24]	@ (80048d8 <SysTick_Handler+0x40>)
 80048be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	2300      	movs	r3, #0
 80048c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	f383 8811 	msr	BASEPRI, r3
}
 80048ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80048d0:	bf00      	nop
 80048d2:	3708      	adds	r7, #8
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	e000ed04 	.word	0xe000ed04

080048dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80048e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004910 <vPortSetupTimerInterrupt+0x34>)
 80048e2:	2200      	movs	r2, #0
 80048e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80048e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004914 <vPortSetupTimerInterrupt+0x38>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80048ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004918 <vPortSetupTimerInterrupt+0x3c>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a0a      	ldr	r2, [pc, #40]	@ (800491c <vPortSetupTimerInterrupt+0x40>)
 80048f2:	fba2 2303 	umull	r2, r3, r2, r3
 80048f6:	099b      	lsrs	r3, r3, #6
 80048f8:	4a09      	ldr	r2, [pc, #36]	@ (8004920 <vPortSetupTimerInterrupt+0x44>)
 80048fa:	3b01      	subs	r3, #1
 80048fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80048fe:	4b04      	ldr	r3, [pc, #16]	@ (8004910 <vPortSetupTimerInterrupt+0x34>)
 8004900:	2207      	movs	r2, #7
 8004902:	601a      	str	r2, [r3, #0]
}
 8004904:	bf00      	nop
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	e000e010 	.word	0xe000e010
 8004914:	e000e018 	.word	0xe000e018
 8004918:	20000000 	.word	0x20000000
 800491c:	10624dd3 	.word	0x10624dd3
 8004920:	e000e014 	.word	0xe000e014

08004924 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004924:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004934 <vPortEnableVFP+0x10>
 8004928:	6801      	ldr	r1, [r0, #0]
 800492a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800492e:	6001      	str	r1, [r0, #0]
 8004930:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004932:	bf00      	nop
 8004934:	e000ed88 	.word	0xe000ed88

08004938 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b08a      	sub	sp, #40	@ 0x28
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004940:	2300      	movs	r3, #0
 8004942:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004944:	f7ff fa80 	bl	8003e48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004948:	4b5c      	ldr	r3, [pc, #368]	@ (8004abc <pvPortMalloc+0x184>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004950:	f000 f924 	bl	8004b9c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004954:	4b5a      	ldr	r3, [pc, #360]	@ (8004ac0 <pvPortMalloc+0x188>)
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4013      	ands	r3, r2
 800495c:	2b00      	cmp	r3, #0
 800495e:	f040 8095 	bne.w	8004a8c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d01e      	beq.n	80049a6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004968:	2208      	movs	r2, #8
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4413      	add	r3, r2
 800496e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f003 0307 	and.w	r3, r3, #7
 8004976:	2b00      	cmp	r3, #0
 8004978:	d015      	beq.n	80049a6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f023 0307 	bic.w	r3, r3, #7
 8004980:	3308      	adds	r3, #8
 8004982:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	f003 0307 	and.w	r3, r3, #7
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00b      	beq.n	80049a6 <pvPortMalloc+0x6e>
	__asm volatile
 800498e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004992:	f383 8811 	msr	BASEPRI, r3
 8004996:	f3bf 8f6f 	isb	sy
 800499a:	f3bf 8f4f 	dsb	sy
 800499e:	617b      	str	r3, [r7, #20]
}
 80049a0:	bf00      	nop
 80049a2:	bf00      	nop
 80049a4:	e7fd      	b.n	80049a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d06f      	beq.n	8004a8c <pvPortMalloc+0x154>
 80049ac:	4b45      	ldr	r3, [pc, #276]	@ (8004ac4 <pvPortMalloc+0x18c>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d86a      	bhi.n	8004a8c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80049b6:	4b44      	ldr	r3, [pc, #272]	@ (8004ac8 <pvPortMalloc+0x190>)
 80049b8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80049ba:	4b43      	ldr	r3, [pc, #268]	@ (8004ac8 <pvPortMalloc+0x190>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049c0:	e004      	b.n	80049cc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80049c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80049c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d903      	bls.n	80049de <pvPortMalloc+0xa6>
 80049d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1f1      	bne.n	80049c2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80049de:	4b37      	ldr	r3, [pc, #220]	@ (8004abc <pvPortMalloc+0x184>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d051      	beq.n	8004a8c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80049e8:	6a3b      	ldr	r3, [r7, #32]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2208      	movs	r2, #8
 80049ee:	4413      	add	r3, r2
 80049f0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	6a3b      	ldr	r3, [r7, #32]
 80049f8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80049fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fc:	685a      	ldr	r2, [r3, #4]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	1ad2      	subs	r2, r2, r3
 8004a02:	2308      	movs	r3, #8
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d920      	bls.n	8004a4c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4413      	add	r3, r2
 8004a10:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	f003 0307 	and.w	r3, r3, #7
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00b      	beq.n	8004a34 <pvPortMalloc+0xfc>
	__asm volatile
 8004a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a20:	f383 8811 	msr	BASEPRI, r3
 8004a24:	f3bf 8f6f 	isb	sy
 8004a28:	f3bf 8f4f 	dsb	sy
 8004a2c:	613b      	str	r3, [r7, #16]
}
 8004a2e:	bf00      	nop
 8004a30:	bf00      	nop
 8004a32:	e7fd      	b.n	8004a30 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	1ad2      	subs	r2, r2, r3
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a46:	69b8      	ldr	r0, [r7, #24]
 8004a48:	f000 f90a 	bl	8004c60 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ac4 <pvPortMalloc+0x18c>)
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	4a1b      	ldr	r2, [pc, #108]	@ (8004ac4 <pvPortMalloc+0x18c>)
 8004a58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ac4 <pvPortMalloc+0x18c>)
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	4b1b      	ldr	r3, [pc, #108]	@ (8004acc <pvPortMalloc+0x194>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d203      	bcs.n	8004a6e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a66:	4b17      	ldr	r3, [pc, #92]	@ (8004ac4 <pvPortMalloc+0x18c>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a18      	ldr	r2, [pc, #96]	@ (8004acc <pvPortMalloc+0x194>)
 8004a6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	4b13      	ldr	r3, [pc, #76]	@ (8004ac0 <pvPortMalloc+0x188>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	431a      	orrs	r2, r3
 8004a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7e:	2200      	movs	r2, #0
 8004a80:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004a82:	4b13      	ldr	r3, [pc, #76]	@ (8004ad0 <pvPortMalloc+0x198>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	3301      	adds	r3, #1
 8004a88:	4a11      	ldr	r2, [pc, #68]	@ (8004ad0 <pvPortMalloc+0x198>)
 8004a8a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004a8c:	f7ff f9ea 	bl	8003e64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	f003 0307 	and.w	r3, r3, #7
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00b      	beq.n	8004ab2 <pvPortMalloc+0x17a>
	__asm volatile
 8004a9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a9e:	f383 8811 	msr	BASEPRI, r3
 8004aa2:	f3bf 8f6f 	isb	sy
 8004aa6:	f3bf 8f4f 	dsb	sy
 8004aaa:	60fb      	str	r3, [r7, #12]
}
 8004aac:	bf00      	nop
 8004aae:	bf00      	nop
 8004ab0:	e7fd      	b.n	8004aae <pvPortMalloc+0x176>
	return pvReturn;
 8004ab2:	69fb      	ldr	r3, [r7, #28]
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3728      	adds	r7, #40	@ 0x28
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	200041c0 	.word	0x200041c0
 8004ac0:	200041d4 	.word	0x200041d4
 8004ac4:	200041c4 	.word	0x200041c4
 8004ac8:	200041b8 	.word	0x200041b8
 8004acc:	200041c8 	.word	0x200041c8
 8004ad0:	200041cc 	.word	0x200041cc

08004ad4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d04f      	beq.n	8004b86 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004ae6:	2308      	movs	r3, #8
 8004ae8:	425b      	negs	r3, r3
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	4413      	add	r3, r2
 8004aee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	4b25      	ldr	r3, [pc, #148]	@ (8004b90 <vPortFree+0xbc>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4013      	ands	r3, r2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10b      	bne.n	8004b1a <vPortFree+0x46>
	__asm volatile
 8004b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b06:	f383 8811 	msr	BASEPRI, r3
 8004b0a:	f3bf 8f6f 	isb	sy
 8004b0e:	f3bf 8f4f 	dsb	sy
 8004b12:	60fb      	str	r3, [r7, #12]
}
 8004b14:	bf00      	nop
 8004b16:	bf00      	nop
 8004b18:	e7fd      	b.n	8004b16 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00b      	beq.n	8004b3a <vPortFree+0x66>
	__asm volatile
 8004b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b26:	f383 8811 	msr	BASEPRI, r3
 8004b2a:	f3bf 8f6f 	isb	sy
 8004b2e:	f3bf 8f4f 	dsb	sy
 8004b32:	60bb      	str	r3, [r7, #8]
}
 8004b34:	bf00      	nop
 8004b36:	bf00      	nop
 8004b38:	e7fd      	b.n	8004b36 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	4b14      	ldr	r3, [pc, #80]	@ (8004b90 <vPortFree+0xbc>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4013      	ands	r3, r2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d01e      	beq.n	8004b86 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d11a      	bne.n	8004b86 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	4b0e      	ldr	r3, [pc, #56]	@ (8004b90 <vPortFree+0xbc>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	43db      	mvns	r3, r3
 8004b5a:	401a      	ands	r2, r3
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004b60:	f7ff f972 	bl	8003e48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	4b0a      	ldr	r3, [pc, #40]	@ (8004b94 <vPortFree+0xc0>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	4a09      	ldr	r2, [pc, #36]	@ (8004b94 <vPortFree+0xc0>)
 8004b70:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b72:	6938      	ldr	r0, [r7, #16]
 8004b74:	f000 f874 	bl	8004c60 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004b78:	4b07      	ldr	r3, [pc, #28]	@ (8004b98 <vPortFree+0xc4>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	4a06      	ldr	r2, [pc, #24]	@ (8004b98 <vPortFree+0xc4>)
 8004b80:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004b82:	f7ff f96f 	bl	8003e64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004b86:	bf00      	nop
 8004b88:	3718      	adds	r7, #24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	200041d4 	.word	0x200041d4
 8004b94:	200041c4 	.word	0x200041c4
 8004b98:	200041d0 	.word	0x200041d0

08004b9c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004ba2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004ba6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004ba8:	4b27      	ldr	r3, [pc, #156]	@ (8004c48 <prvHeapInit+0xac>)
 8004baa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f003 0307 	and.w	r3, r3, #7
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00c      	beq.n	8004bd0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	3307      	adds	r3, #7
 8004bba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f023 0307 	bic.w	r3, r3, #7
 8004bc2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	4a1f      	ldr	r2, [pc, #124]	@ (8004c48 <prvHeapInit+0xac>)
 8004bcc:	4413      	add	r3, r2
 8004bce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004bd4:	4a1d      	ldr	r2, [pc, #116]	@ (8004c4c <prvHeapInit+0xb0>)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004bda:	4b1c      	ldr	r3, [pc, #112]	@ (8004c4c <prvHeapInit+0xb0>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	68ba      	ldr	r2, [r7, #8]
 8004be4:	4413      	add	r3, r2
 8004be6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004be8:	2208      	movs	r2, #8
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	1a9b      	subs	r3, r3, r2
 8004bee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f023 0307 	bic.w	r3, r3, #7
 8004bf6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4a15      	ldr	r2, [pc, #84]	@ (8004c50 <prvHeapInit+0xb4>)
 8004bfc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004bfe:	4b14      	ldr	r3, [pc, #80]	@ (8004c50 <prvHeapInit+0xb4>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2200      	movs	r2, #0
 8004c04:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004c06:	4b12      	ldr	r3, [pc, #72]	@ (8004c50 <prvHeapInit+0xb4>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	1ad2      	subs	r2, r2, r3
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8004c50 <prvHeapInit+0xb4>)
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	4a0a      	ldr	r2, [pc, #40]	@ (8004c54 <prvHeapInit+0xb8>)
 8004c2a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	4a09      	ldr	r2, [pc, #36]	@ (8004c58 <prvHeapInit+0xbc>)
 8004c32:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004c34:	4b09      	ldr	r3, [pc, #36]	@ (8004c5c <prvHeapInit+0xc0>)
 8004c36:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004c3a:	601a      	str	r2, [r3, #0]
}
 8004c3c:	bf00      	nop
 8004c3e:	3714      	adds	r7, #20
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr
 8004c48:	200005b8 	.word	0x200005b8
 8004c4c:	200041b8 	.word	0x200041b8
 8004c50:	200041c0 	.word	0x200041c0
 8004c54:	200041c8 	.word	0x200041c8
 8004c58:	200041c4 	.word	0x200041c4
 8004c5c:	200041d4 	.word	0x200041d4

08004c60 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c68:	4b28      	ldr	r3, [pc, #160]	@ (8004d0c <prvInsertBlockIntoFreeList+0xac>)
 8004c6a:	60fb      	str	r3, [r7, #12]
 8004c6c:	e002      	b.n	8004c74 <prvInsertBlockIntoFreeList+0x14>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	60fb      	str	r3, [r7, #12]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d8f7      	bhi.n	8004c6e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	4413      	add	r3, r2
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d108      	bne.n	8004ca2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	685a      	ldr	r2, [r3, #4]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	441a      	add	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	441a      	add	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d118      	bne.n	8004ce8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	4b15      	ldr	r3, [pc, #84]	@ (8004d10 <prvInsertBlockIntoFreeList+0xb0>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d00d      	beq.n	8004cde <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	441a      	add	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	601a      	str	r2, [r3, #0]
 8004cdc:	e008      	b.n	8004cf0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004cde:	4b0c      	ldr	r3, [pc, #48]	@ (8004d10 <prvInsertBlockIntoFreeList+0xb0>)
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	e003      	b.n	8004cf0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d002      	beq.n	8004cfe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004cfe:	bf00      	nop
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	200041b8 	.word	0x200041b8
 8004d10:	200041c0 	.word	0x200041c0

08004d14 <atoi>:
 8004d14:	220a      	movs	r2, #10
 8004d16:	2100      	movs	r1, #0
 8004d18:	f000 b87a 	b.w	8004e10 <strtol>

08004d1c <_strtol_l.constprop.0>:
 8004d1c:	2b24      	cmp	r3, #36	@ 0x24
 8004d1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d22:	4686      	mov	lr, r0
 8004d24:	4690      	mov	r8, r2
 8004d26:	d801      	bhi.n	8004d2c <_strtol_l.constprop.0+0x10>
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d106      	bne.n	8004d3a <_strtol_l.constprop.0+0x1e>
 8004d2c:	f000 fba4 	bl	8005478 <__errno>
 8004d30:	2316      	movs	r3, #22
 8004d32:	6003      	str	r3, [r0, #0]
 8004d34:	2000      	movs	r0, #0
 8004d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d3a:	4834      	ldr	r0, [pc, #208]	@ (8004e0c <_strtol_l.constprop.0+0xf0>)
 8004d3c:	460d      	mov	r5, r1
 8004d3e:	462a      	mov	r2, r5
 8004d40:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004d44:	5d06      	ldrb	r6, [r0, r4]
 8004d46:	f016 0608 	ands.w	r6, r6, #8
 8004d4a:	d1f8      	bne.n	8004d3e <_strtol_l.constprop.0+0x22>
 8004d4c:	2c2d      	cmp	r4, #45	@ 0x2d
 8004d4e:	d12d      	bne.n	8004dac <_strtol_l.constprop.0+0x90>
 8004d50:	782c      	ldrb	r4, [r5, #0]
 8004d52:	2601      	movs	r6, #1
 8004d54:	1c95      	adds	r5, r2, #2
 8004d56:	f033 0210 	bics.w	r2, r3, #16
 8004d5a:	d109      	bne.n	8004d70 <_strtol_l.constprop.0+0x54>
 8004d5c:	2c30      	cmp	r4, #48	@ 0x30
 8004d5e:	d12a      	bne.n	8004db6 <_strtol_l.constprop.0+0x9a>
 8004d60:	782a      	ldrb	r2, [r5, #0]
 8004d62:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004d66:	2a58      	cmp	r2, #88	@ 0x58
 8004d68:	d125      	bne.n	8004db6 <_strtol_l.constprop.0+0x9a>
 8004d6a:	786c      	ldrb	r4, [r5, #1]
 8004d6c:	2310      	movs	r3, #16
 8004d6e:	3502      	adds	r5, #2
 8004d70:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004d74:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004d78:	2200      	movs	r2, #0
 8004d7a:	fbbc f9f3 	udiv	r9, ip, r3
 8004d7e:	4610      	mov	r0, r2
 8004d80:	fb03 ca19 	mls	sl, r3, r9, ip
 8004d84:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004d88:	2f09      	cmp	r7, #9
 8004d8a:	d81b      	bhi.n	8004dc4 <_strtol_l.constprop.0+0xa8>
 8004d8c:	463c      	mov	r4, r7
 8004d8e:	42a3      	cmp	r3, r4
 8004d90:	dd27      	ble.n	8004de2 <_strtol_l.constprop.0+0xc6>
 8004d92:	1c57      	adds	r7, r2, #1
 8004d94:	d007      	beq.n	8004da6 <_strtol_l.constprop.0+0x8a>
 8004d96:	4581      	cmp	r9, r0
 8004d98:	d320      	bcc.n	8004ddc <_strtol_l.constprop.0+0xc0>
 8004d9a:	d101      	bne.n	8004da0 <_strtol_l.constprop.0+0x84>
 8004d9c:	45a2      	cmp	sl, r4
 8004d9e:	db1d      	blt.n	8004ddc <_strtol_l.constprop.0+0xc0>
 8004da0:	fb00 4003 	mla	r0, r0, r3, r4
 8004da4:	2201      	movs	r2, #1
 8004da6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004daa:	e7eb      	b.n	8004d84 <_strtol_l.constprop.0+0x68>
 8004dac:	2c2b      	cmp	r4, #43	@ 0x2b
 8004dae:	bf04      	itt	eq
 8004db0:	782c      	ldrbeq	r4, [r5, #0]
 8004db2:	1c95      	addeq	r5, r2, #2
 8004db4:	e7cf      	b.n	8004d56 <_strtol_l.constprop.0+0x3a>
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1da      	bne.n	8004d70 <_strtol_l.constprop.0+0x54>
 8004dba:	2c30      	cmp	r4, #48	@ 0x30
 8004dbc:	bf0c      	ite	eq
 8004dbe:	2308      	moveq	r3, #8
 8004dc0:	230a      	movne	r3, #10
 8004dc2:	e7d5      	b.n	8004d70 <_strtol_l.constprop.0+0x54>
 8004dc4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004dc8:	2f19      	cmp	r7, #25
 8004dca:	d801      	bhi.n	8004dd0 <_strtol_l.constprop.0+0xb4>
 8004dcc:	3c37      	subs	r4, #55	@ 0x37
 8004dce:	e7de      	b.n	8004d8e <_strtol_l.constprop.0+0x72>
 8004dd0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004dd4:	2f19      	cmp	r7, #25
 8004dd6:	d804      	bhi.n	8004de2 <_strtol_l.constprop.0+0xc6>
 8004dd8:	3c57      	subs	r4, #87	@ 0x57
 8004dda:	e7d8      	b.n	8004d8e <_strtol_l.constprop.0+0x72>
 8004ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8004de0:	e7e1      	b.n	8004da6 <_strtol_l.constprop.0+0x8a>
 8004de2:	1c53      	adds	r3, r2, #1
 8004de4:	d108      	bne.n	8004df8 <_strtol_l.constprop.0+0xdc>
 8004de6:	2322      	movs	r3, #34	@ 0x22
 8004de8:	f8ce 3000 	str.w	r3, [lr]
 8004dec:	4660      	mov	r0, ip
 8004dee:	f1b8 0f00 	cmp.w	r8, #0
 8004df2:	d0a0      	beq.n	8004d36 <_strtol_l.constprop.0+0x1a>
 8004df4:	1e69      	subs	r1, r5, #1
 8004df6:	e006      	b.n	8004e06 <_strtol_l.constprop.0+0xea>
 8004df8:	b106      	cbz	r6, 8004dfc <_strtol_l.constprop.0+0xe0>
 8004dfa:	4240      	negs	r0, r0
 8004dfc:	f1b8 0f00 	cmp.w	r8, #0
 8004e00:	d099      	beq.n	8004d36 <_strtol_l.constprop.0+0x1a>
 8004e02:	2a00      	cmp	r2, #0
 8004e04:	d1f6      	bne.n	8004df4 <_strtol_l.constprop.0+0xd8>
 8004e06:	f8c8 1000 	str.w	r1, [r8]
 8004e0a:	e794      	b.n	8004d36 <_strtol_l.constprop.0+0x1a>
 8004e0c:	08006521 	.word	0x08006521

08004e10 <strtol>:
 8004e10:	4613      	mov	r3, r2
 8004e12:	460a      	mov	r2, r1
 8004e14:	4601      	mov	r1, r0
 8004e16:	4802      	ldr	r0, [pc, #8]	@ (8004e20 <strtol+0x10>)
 8004e18:	6800      	ldr	r0, [r0, #0]
 8004e1a:	f7ff bf7f 	b.w	8004d1c <_strtol_l.constprop.0>
 8004e1e:	bf00      	nop
 8004e20:	2000001c 	.word	0x2000001c

08004e24 <std>:
 8004e24:	2300      	movs	r3, #0
 8004e26:	b510      	push	{r4, lr}
 8004e28:	4604      	mov	r4, r0
 8004e2a:	e9c0 3300 	strd	r3, r3, [r0]
 8004e2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e32:	6083      	str	r3, [r0, #8]
 8004e34:	8181      	strh	r1, [r0, #12]
 8004e36:	6643      	str	r3, [r0, #100]	@ 0x64
 8004e38:	81c2      	strh	r2, [r0, #14]
 8004e3a:	6183      	str	r3, [r0, #24]
 8004e3c:	4619      	mov	r1, r3
 8004e3e:	2208      	movs	r2, #8
 8004e40:	305c      	adds	r0, #92	@ 0x5c
 8004e42:	f000 fa19 	bl	8005278 <memset>
 8004e46:	4b0d      	ldr	r3, [pc, #52]	@ (8004e7c <std+0x58>)
 8004e48:	6263      	str	r3, [r4, #36]	@ 0x24
 8004e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e80 <std+0x5c>)
 8004e4c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e84 <std+0x60>)
 8004e50:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004e52:	4b0d      	ldr	r3, [pc, #52]	@ (8004e88 <std+0x64>)
 8004e54:	6323      	str	r3, [r4, #48]	@ 0x30
 8004e56:	4b0d      	ldr	r3, [pc, #52]	@ (8004e8c <std+0x68>)
 8004e58:	6224      	str	r4, [r4, #32]
 8004e5a:	429c      	cmp	r4, r3
 8004e5c:	d006      	beq.n	8004e6c <std+0x48>
 8004e5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004e62:	4294      	cmp	r4, r2
 8004e64:	d002      	beq.n	8004e6c <std+0x48>
 8004e66:	33d0      	adds	r3, #208	@ 0xd0
 8004e68:	429c      	cmp	r4, r3
 8004e6a:	d105      	bne.n	8004e78 <std+0x54>
 8004e6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e74:	f000 bb2a 	b.w	80054cc <__retarget_lock_init_recursive>
 8004e78:	bd10      	pop	{r4, pc}
 8004e7a:	bf00      	nop
 8004e7c:	080050c9 	.word	0x080050c9
 8004e80:	080050eb 	.word	0x080050eb
 8004e84:	08005123 	.word	0x08005123
 8004e88:	08005147 	.word	0x08005147
 8004e8c:	200041d8 	.word	0x200041d8

08004e90 <stdio_exit_handler>:
 8004e90:	4a02      	ldr	r2, [pc, #8]	@ (8004e9c <stdio_exit_handler+0xc>)
 8004e92:	4903      	ldr	r1, [pc, #12]	@ (8004ea0 <stdio_exit_handler+0x10>)
 8004e94:	4803      	ldr	r0, [pc, #12]	@ (8004ea4 <stdio_exit_handler+0x14>)
 8004e96:	f000 b869 	b.w	8004f6c <_fwalk_sglue>
 8004e9a:	bf00      	nop
 8004e9c:	20000010 	.word	0x20000010
 8004ea0:	08006095 	.word	0x08006095
 8004ea4:	20000020 	.word	0x20000020

08004ea8 <cleanup_stdio>:
 8004ea8:	6841      	ldr	r1, [r0, #4]
 8004eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8004edc <cleanup_stdio+0x34>)
 8004eac:	4299      	cmp	r1, r3
 8004eae:	b510      	push	{r4, lr}
 8004eb0:	4604      	mov	r4, r0
 8004eb2:	d001      	beq.n	8004eb8 <cleanup_stdio+0x10>
 8004eb4:	f001 f8ee 	bl	8006094 <_fflush_r>
 8004eb8:	68a1      	ldr	r1, [r4, #8]
 8004eba:	4b09      	ldr	r3, [pc, #36]	@ (8004ee0 <cleanup_stdio+0x38>)
 8004ebc:	4299      	cmp	r1, r3
 8004ebe:	d002      	beq.n	8004ec6 <cleanup_stdio+0x1e>
 8004ec0:	4620      	mov	r0, r4
 8004ec2:	f001 f8e7 	bl	8006094 <_fflush_r>
 8004ec6:	68e1      	ldr	r1, [r4, #12]
 8004ec8:	4b06      	ldr	r3, [pc, #24]	@ (8004ee4 <cleanup_stdio+0x3c>)
 8004eca:	4299      	cmp	r1, r3
 8004ecc:	d004      	beq.n	8004ed8 <cleanup_stdio+0x30>
 8004ece:	4620      	mov	r0, r4
 8004ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ed4:	f001 b8de 	b.w	8006094 <_fflush_r>
 8004ed8:	bd10      	pop	{r4, pc}
 8004eda:	bf00      	nop
 8004edc:	200041d8 	.word	0x200041d8
 8004ee0:	20004240 	.word	0x20004240
 8004ee4:	200042a8 	.word	0x200042a8

08004ee8 <global_stdio_init.part.0>:
 8004ee8:	b510      	push	{r4, lr}
 8004eea:	4b0b      	ldr	r3, [pc, #44]	@ (8004f18 <global_stdio_init.part.0+0x30>)
 8004eec:	4c0b      	ldr	r4, [pc, #44]	@ (8004f1c <global_stdio_init.part.0+0x34>)
 8004eee:	4a0c      	ldr	r2, [pc, #48]	@ (8004f20 <global_stdio_init.part.0+0x38>)
 8004ef0:	601a      	str	r2, [r3, #0]
 8004ef2:	4620      	mov	r0, r4
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	2104      	movs	r1, #4
 8004ef8:	f7ff ff94 	bl	8004e24 <std>
 8004efc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004f00:	2201      	movs	r2, #1
 8004f02:	2109      	movs	r1, #9
 8004f04:	f7ff ff8e 	bl	8004e24 <std>
 8004f08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004f0c:	2202      	movs	r2, #2
 8004f0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f12:	2112      	movs	r1, #18
 8004f14:	f7ff bf86 	b.w	8004e24 <std>
 8004f18:	20004310 	.word	0x20004310
 8004f1c:	200041d8 	.word	0x200041d8
 8004f20:	08004e91 	.word	0x08004e91

08004f24 <__sfp_lock_acquire>:
 8004f24:	4801      	ldr	r0, [pc, #4]	@ (8004f2c <__sfp_lock_acquire+0x8>)
 8004f26:	f000 bad2 	b.w	80054ce <__retarget_lock_acquire_recursive>
 8004f2a:	bf00      	nop
 8004f2c:	20004319 	.word	0x20004319

08004f30 <__sfp_lock_release>:
 8004f30:	4801      	ldr	r0, [pc, #4]	@ (8004f38 <__sfp_lock_release+0x8>)
 8004f32:	f000 bacd 	b.w	80054d0 <__retarget_lock_release_recursive>
 8004f36:	bf00      	nop
 8004f38:	20004319 	.word	0x20004319

08004f3c <__sinit>:
 8004f3c:	b510      	push	{r4, lr}
 8004f3e:	4604      	mov	r4, r0
 8004f40:	f7ff fff0 	bl	8004f24 <__sfp_lock_acquire>
 8004f44:	6a23      	ldr	r3, [r4, #32]
 8004f46:	b11b      	cbz	r3, 8004f50 <__sinit+0x14>
 8004f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f4c:	f7ff bff0 	b.w	8004f30 <__sfp_lock_release>
 8004f50:	4b04      	ldr	r3, [pc, #16]	@ (8004f64 <__sinit+0x28>)
 8004f52:	6223      	str	r3, [r4, #32]
 8004f54:	4b04      	ldr	r3, [pc, #16]	@ (8004f68 <__sinit+0x2c>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1f5      	bne.n	8004f48 <__sinit+0xc>
 8004f5c:	f7ff ffc4 	bl	8004ee8 <global_stdio_init.part.0>
 8004f60:	e7f2      	b.n	8004f48 <__sinit+0xc>
 8004f62:	bf00      	nop
 8004f64:	08004ea9 	.word	0x08004ea9
 8004f68:	20004310 	.word	0x20004310

08004f6c <_fwalk_sglue>:
 8004f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f70:	4607      	mov	r7, r0
 8004f72:	4688      	mov	r8, r1
 8004f74:	4614      	mov	r4, r2
 8004f76:	2600      	movs	r6, #0
 8004f78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f7c:	f1b9 0901 	subs.w	r9, r9, #1
 8004f80:	d505      	bpl.n	8004f8e <_fwalk_sglue+0x22>
 8004f82:	6824      	ldr	r4, [r4, #0]
 8004f84:	2c00      	cmp	r4, #0
 8004f86:	d1f7      	bne.n	8004f78 <_fwalk_sglue+0xc>
 8004f88:	4630      	mov	r0, r6
 8004f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f8e:	89ab      	ldrh	r3, [r5, #12]
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d907      	bls.n	8004fa4 <_fwalk_sglue+0x38>
 8004f94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	d003      	beq.n	8004fa4 <_fwalk_sglue+0x38>
 8004f9c:	4629      	mov	r1, r5
 8004f9e:	4638      	mov	r0, r7
 8004fa0:	47c0      	blx	r8
 8004fa2:	4306      	orrs	r6, r0
 8004fa4:	3568      	adds	r5, #104	@ 0x68
 8004fa6:	e7e9      	b.n	8004f7c <_fwalk_sglue+0x10>

08004fa8 <iprintf>:
 8004fa8:	b40f      	push	{r0, r1, r2, r3}
 8004faa:	b507      	push	{r0, r1, r2, lr}
 8004fac:	4906      	ldr	r1, [pc, #24]	@ (8004fc8 <iprintf+0x20>)
 8004fae:	ab04      	add	r3, sp, #16
 8004fb0:	6808      	ldr	r0, [r1, #0]
 8004fb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fb6:	6881      	ldr	r1, [r0, #8]
 8004fb8:	9301      	str	r3, [sp, #4]
 8004fba:	f000 fd41 	bl	8005a40 <_vfiprintf_r>
 8004fbe:	b003      	add	sp, #12
 8004fc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fc4:	b004      	add	sp, #16
 8004fc6:	4770      	bx	lr
 8004fc8:	2000001c 	.word	0x2000001c

08004fcc <_puts_r>:
 8004fcc:	6a03      	ldr	r3, [r0, #32]
 8004fce:	b570      	push	{r4, r5, r6, lr}
 8004fd0:	6884      	ldr	r4, [r0, #8]
 8004fd2:	4605      	mov	r5, r0
 8004fd4:	460e      	mov	r6, r1
 8004fd6:	b90b      	cbnz	r3, 8004fdc <_puts_r+0x10>
 8004fd8:	f7ff ffb0 	bl	8004f3c <__sinit>
 8004fdc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004fde:	07db      	lsls	r3, r3, #31
 8004fe0:	d405      	bmi.n	8004fee <_puts_r+0x22>
 8004fe2:	89a3      	ldrh	r3, [r4, #12]
 8004fe4:	0598      	lsls	r0, r3, #22
 8004fe6:	d402      	bmi.n	8004fee <_puts_r+0x22>
 8004fe8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004fea:	f000 fa70 	bl	80054ce <__retarget_lock_acquire_recursive>
 8004fee:	89a3      	ldrh	r3, [r4, #12]
 8004ff0:	0719      	lsls	r1, r3, #28
 8004ff2:	d502      	bpl.n	8004ffa <_puts_r+0x2e>
 8004ff4:	6923      	ldr	r3, [r4, #16]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d135      	bne.n	8005066 <_puts_r+0x9a>
 8004ffa:	4621      	mov	r1, r4
 8004ffc:	4628      	mov	r0, r5
 8004ffe:	f000 f8e5 	bl	80051cc <__swsetup_r>
 8005002:	b380      	cbz	r0, 8005066 <_puts_r+0x9a>
 8005004:	f04f 35ff 	mov.w	r5, #4294967295
 8005008:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800500a:	07da      	lsls	r2, r3, #31
 800500c:	d405      	bmi.n	800501a <_puts_r+0x4e>
 800500e:	89a3      	ldrh	r3, [r4, #12]
 8005010:	059b      	lsls	r3, r3, #22
 8005012:	d402      	bmi.n	800501a <_puts_r+0x4e>
 8005014:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005016:	f000 fa5b 	bl	80054d0 <__retarget_lock_release_recursive>
 800501a:	4628      	mov	r0, r5
 800501c:	bd70      	pop	{r4, r5, r6, pc}
 800501e:	2b00      	cmp	r3, #0
 8005020:	da04      	bge.n	800502c <_puts_r+0x60>
 8005022:	69a2      	ldr	r2, [r4, #24]
 8005024:	429a      	cmp	r2, r3
 8005026:	dc17      	bgt.n	8005058 <_puts_r+0x8c>
 8005028:	290a      	cmp	r1, #10
 800502a:	d015      	beq.n	8005058 <_puts_r+0x8c>
 800502c:	6823      	ldr	r3, [r4, #0]
 800502e:	1c5a      	adds	r2, r3, #1
 8005030:	6022      	str	r2, [r4, #0]
 8005032:	7019      	strb	r1, [r3, #0]
 8005034:	68a3      	ldr	r3, [r4, #8]
 8005036:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800503a:	3b01      	subs	r3, #1
 800503c:	60a3      	str	r3, [r4, #8]
 800503e:	2900      	cmp	r1, #0
 8005040:	d1ed      	bne.n	800501e <_puts_r+0x52>
 8005042:	2b00      	cmp	r3, #0
 8005044:	da11      	bge.n	800506a <_puts_r+0x9e>
 8005046:	4622      	mov	r2, r4
 8005048:	210a      	movs	r1, #10
 800504a:	4628      	mov	r0, r5
 800504c:	f000 f87f 	bl	800514e <__swbuf_r>
 8005050:	3001      	adds	r0, #1
 8005052:	d0d7      	beq.n	8005004 <_puts_r+0x38>
 8005054:	250a      	movs	r5, #10
 8005056:	e7d7      	b.n	8005008 <_puts_r+0x3c>
 8005058:	4622      	mov	r2, r4
 800505a:	4628      	mov	r0, r5
 800505c:	f000 f877 	bl	800514e <__swbuf_r>
 8005060:	3001      	adds	r0, #1
 8005062:	d1e7      	bne.n	8005034 <_puts_r+0x68>
 8005064:	e7ce      	b.n	8005004 <_puts_r+0x38>
 8005066:	3e01      	subs	r6, #1
 8005068:	e7e4      	b.n	8005034 <_puts_r+0x68>
 800506a:	6823      	ldr	r3, [r4, #0]
 800506c:	1c5a      	adds	r2, r3, #1
 800506e:	6022      	str	r2, [r4, #0]
 8005070:	220a      	movs	r2, #10
 8005072:	701a      	strb	r2, [r3, #0]
 8005074:	e7ee      	b.n	8005054 <_puts_r+0x88>
	...

08005078 <puts>:
 8005078:	4b02      	ldr	r3, [pc, #8]	@ (8005084 <puts+0xc>)
 800507a:	4601      	mov	r1, r0
 800507c:	6818      	ldr	r0, [r3, #0]
 800507e:	f7ff bfa5 	b.w	8004fcc <_puts_r>
 8005082:	bf00      	nop
 8005084:	2000001c 	.word	0x2000001c

08005088 <siprintf>:
 8005088:	b40e      	push	{r1, r2, r3}
 800508a:	b500      	push	{lr}
 800508c:	b09c      	sub	sp, #112	@ 0x70
 800508e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005090:	9002      	str	r0, [sp, #8]
 8005092:	9006      	str	r0, [sp, #24]
 8005094:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005098:	4809      	ldr	r0, [pc, #36]	@ (80050c0 <siprintf+0x38>)
 800509a:	9107      	str	r1, [sp, #28]
 800509c:	9104      	str	r1, [sp, #16]
 800509e:	4909      	ldr	r1, [pc, #36]	@ (80050c4 <siprintf+0x3c>)
 80050a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80050a4:	9105      	str	r1, [sp, #20]
 80050a6:	6800      	ldr	r0, [r0, #0]
 80050a8:	9301      	str	r3, [sp, #4]
 80050aa:	a902      	add	r1, sp, #8
 80050ac:	f000 fba2 	bl	80057f4 <_svfiprintf_r>
 80050b0:	9b02      	ldr	r3, [sp, #8]
 80050b2:	2200      	movs	r2, #0
 80050b4:	701a      	strb	r2, [r3, #0]
 80050b6:	b01c      	add	sp, #112	@ 0x70
 80050b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80050bc:	b003      	add	sp, #12
 80050be:	4770      	bx	lr
 80050c0:	2000001c 	.word	0x2000001c
 80050c4:	ffff0208 	.word	0xffff0208

080050c8 <__sread>:
 80050c8:	b510      	push	{r4, lr}
 80050ca:	460c      	mov	r4, r1
 80050cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050d0:	f000 f9ae 	bl	8005430 <_read_r>
 80050d4:	2800      	cmp	r0, #0
 80050d6:	bfab      	itete	ge
 80050d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80050da:	89a3      	ldrhlt	r3, [r4, #12]
 80050dc:	181b      	addge	r3, r3, r0
 80050de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80050e2:	bfac      	ite	ge
 80050e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80050e6:	81a3      	strhlt	r3, [r4, #12]
 80050e8:	bd10      	pop	{r4, pc}

080050ea <__swrite>:
 80050ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050ee:	461f      	mov	r7, r3
 80050f0:	898b      	ldrh	r3, [r1, #12]
 80050f2:	05db      	lsls	r3, r3, #23
 80050f4:	4605      	mov	r5, r0
 80050f6:	460c      	mov	r4, r1
 80050f8:	4616      	mov	r6, r2
 80050fa:	d505      	bpl.n	8005108 <__swrite+0x1e>
 80050fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005100:	2302      	movs	r3, #2
 8005102:	2200      	movs	r2, #0
 8005104:	f000 f982 	bl	800540c <_lseek_r>
 8005108:	89a3      	ldrh	r3, [r4, #12]
 800510a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800510e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005112:	81a3      	strh	r3, [r4, #12]
 8005114:	4632      	mov	r2, r6
 8005116:	463b      	mov	r3, r7
 8005118:	4628      	mov	r0, r5
 800511a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800511e:	f000 b999 	b.w	8005454 <_write_r>

08005122 <__sseek>:
 8005122:	b510      	push	{r4, lr}
 8005124:	460c      	mov	r4, r1
 8005126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800512a:	f000 f96f 	bl	800540c <_lseek_r>
 800512e:	1c43      	adds	r3, r0, #1
 8005130:	89a3      	ldrh	r3, [r4, #12]
 8005132:	bf15      	itete	ne
 8005134:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005136:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800513a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800513e:	81a3      	strheq	r3, [r4, #12]
 8005140:	bf18      	it	ne
 8005142:	81a3      	strhne	r3, [r4, #12]
 8005144:	bd10      	pop	{r4, pc}

08005146 <__sclose>:
 8005146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800514a:	f000 b8f9 	b.w	8005340 <_close_r>

0800514e <__swbuf_r>:
 800514e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005150:	460e      	mov	r6, r1
 8005152:	4614      	mov	r4, r2
 8005154:	4605      	mov	r5, r0
 8005156:	b118      	cbz	r0, 8005160 <__swbuf_r+0x12>
 8005158:	6a03      	ldr	r3, [r0, #32]
 800515a:	b90b      	cbnz	r3, 8005160 <__swbuf_r+0x12>
 800515c:	f7ff feee 	bl	8004f3c <__sinit>
 8005160:	69a3      	ldr	r3, [r4, #24]
 8005162:	60a3      	str	r3, [r4, #8]
 8005164:	89a3      	ldrh	r3, [r4, #12]
 8005166:	071a      	lsls	r2, r3, #28
 8005168:	d501      	bpl.n	800516e <__swbuf_r+0x20>
 800516a:	6923      	ldr	r3, [r4, #16]
 800516c:	b943      	cbnz	r3, 8005180 <__swbuf_r+0x32>
 800516e:	4621      	mov	r1, r4
 8005170:	4628      	mov	r0, r5
 8005172:	f000 f82b 	bl	80051cc <__swsetup_r>
 8005176:	b118      	cbz	r0, 8005180 <__swbuf_r+0x32>
 8005178:	f04f 37ff 	mov.w	r7, #4294967295
 800517c:	4638      	mov	r0, r7
 800517e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005180:	6823      	ldr	r3, [r4, #0]
 8005182:	6922      	ldr	r2, [r4, #16]
 8005184:	1a98      	subs	r0, r3, r2
 8005186:	6963      	ldr	r3, [r4, #20]
 8005188:	b2f6      	uxtb	r6, r6
 800518a:	4283      	cmp	r3, r0
 800518c:	4637      	mov	r7, r6
 800518e:	dc05      	bgt.n	800519c <__swbuf_r+0x4e>
 8005190:	4621      	mov	r1, r4
 8005192:	4628      	mov	r0, r5
 8005194:	f000 ff7e 	bl	8006094 <_fflush_r>
 8005198:	2800      	cmp	r0, #0
 800519a:	d1ed      	bne.n	8005178 <__swbuf_r+0x2a>
 800519c:	68a3      	ldr	r3, [r4, #8]
 800519e:	3b01      	subs	r3, #1
 80051a0:	60a3      	str	r3, [r4, #8]
 80051a2:	6823      	ldr	r3, [r4, #0]
 80051a4:	1c5a      	adds	r2, r3, #1
 80051a6:	6022      	str	r2, [r4, #0]
 80051a8:	701e      	strb	r6, [r3, #0]
 80051aa:	6962      	ldr	r2, [r4, #20]
 80051ac:	1c43      	adds	r3, r0, #1
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d004      	beq.n	80051bc <__swbuf_r+0x6e>
 80051b2:	89a3      	ldrh	r3, [r4, #12]
 80051b4:	07db      	lsls	r3, r3, #31
 80051b6:	d5e1      	bpl.n	800517c <__swbuf_r+0x2e>
 80051b8:	2e0a      	cmp	r6, #10
 80051ba:	d1df      	bne.n	800517c <__swbuf_r+0x2e>
 80051bc:	4621      	mov	r1, r4
 80051be:	4628      	mov	r0, r5
 80051c0:	f000 ff68 	bl	8006094 <_fflush_r>
 80051c4:	2800      	cmp	r0, #0
 80051c6:	d0d9      	beq.n	800517c <__swbuf_r+0x2e>
 80051c8:	e7d6      	b.n	8005178 <__swbuf_r+0x2a>
	...

080051cc <__swsetup_r>:
 80051cc:	b538      	push	{r3, r4, r5, lr}
 80051ce:	4b29      	ldr	r3, [pc, #164]	@ (8005274 <__swsetup_r+0xa8>)
 80051d0:	4605      	mov	r5, r0
 80051d2:	6818      	ldr	r0, [r3, #0]
 80051d4:	460c      	mov	r4, r1
 80051d6:	b118      	cbz	r0, 80051e0 <__swsetup_r+0x14>
 80051d8:	6a03      	ldr	r3, [r0, #32]
 80051da:	b90b      	cbnz	r3, 80051e0 <__swsetup_r+0x14>
 80051dc:	f7ff feae 	bl	8004f3c <__sinit>
 80051e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051e4:	0719      	lsls	r1, r3, #28
 80051e6:	d422      	bmi.n	800522e <__swsetup_r+0x62>
 80051e8:	06da      	lsls	r2, r3, #27
 80051ea:	d407      	bmi.n	80051fc <__swsetup_r+0x30>
 80051ec:	2209      	movs	r2, #9
 80051ee:	602a      	str	r2, [r5, #0]
 80051f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051f4:	81a3      	strh	r3, [r4, #12]
 80051f6:	f04f 30ff 	mov.w	r0, #4294967295
 80051fa:	e033      	b.n	8005264 <__swsetup_r+0x98>
 80051fc:	0758      	lsls	r0, r3, #29
 80051fe:	d512      	bpl.n	8005226 <__swsetup_r+0x5a>
 8005200:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005202:	b141      	cbz	r1, 8005216 <__swsetup_r+0x4a>
 8005204:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005208:	4299      	cmp	r1, r3
 800520a:	d002      	beq.n	8005212 <__swsetup_r+0x46>
 800520c:	4628      	mov	r0, r5
 800520e:	f000 f995 	bl	800553c <_free_r>
 8005212:	2300      	movs	r3, #0
 8005214:	6363      	str	r3, [r4, #52]	@ 0x34
 8005216:	89a3      	ldrh	r3, [r4, #12]
 8005218:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800521c:	81a3      	strh	r3, [r4, #12]
 800521e:	2300      	movs	r3, #0
 8005220:	6063      	str	r3, [r4, #4]
 8005222:	6923      	ldr	r3, [r4, #16]
 8005224:	6023      	str	r3, [r4, #0]
 8005226:	89a3      	ldrh	r3, [r4, #12]
 8005228:	f043 0308 	orr.w	r3, r3, #8
 800522c:	81a3      	strh	r3, [r4, #12]
 800522e:	6923      	ldr	r3, [r4, #16]
 8005230:	b94b      	cbnz	r3, 8005246 <__swsetup_r+0x7a>
 8005232:	89a3      	ldrh	r3, [r4, #12]
 8005234:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005238:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800523c:	d003      	beq.n	8005246 <__swsetup_r+0x7a>
 800523e:	4621      	mov	r1, r4
 8005240:	4628      	mov	r0, r5
 8005242:	f000 ff87 	bl	8006154 <__smakebuf_r>
 8005246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800524a:	f013 0201 	ands.w	r2, r3, #1
 800524e:	d00a      	beq.n	8005266 <__swsetup_r+0x9a>
 8005250:	2200      	movs	r2, #0
 8005252:	60a2      	str	r2, [r4, #8]
 8005254:	6962      	ldr	r2, [r4, #20]
 8005256:	4252      	negs	r2, r2
 8005258:	61a2      	str	r2, [r4, #24]
 800525a:	6922      	ldr	r2, [r4, #16]
 800525c:	b942      	cbnz	r2, 8005270 <__swsetup_r+0xa4>
 800525e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005262:	d1c5      	bne.n	80051f0 <__swsetup_r+0x24>
 8005264:	bd38      	pop	{r3, r4, r5, pc}
 8005266:	0799      	lsls	r1, r3, #30
 8005268:	bf58      	it	pl
 800526a:	6962      	ldrpl	r2, [r4, #20]
 800526c:	60a2      	str	r2, [r4, #8]
 800526e:	e7f4      	b.n	800525a <__swsetup_r+0x8e>
 8005270:	2000      	movs	r0, #0
 8005272:	e7f7      	b.n	8005264 <__swsetup_r+0x98>
 8005274:	2000001c 	.word	0x2000001c

08005278 <memset>:
 8005278:	4402      	add	r2, r0
 800527a:	4603      	mov	r3, r0
 800527c:	4293      	cmp	r3, r2
 800527e:	d100      	bne.n	8005282 <memset+0xa>
 8005280:	4770      	bx	lr
 8005282:	f803 1b01 	strb.w	r1, [r3], #1
 8005286:	e7f9      	b.n	800527c <memset+0x4>

08005288 <strtok>:
 8005288:	4b16      	ldr	r3, [pc, #88]	@ (80052e4 <strtok+0x5c>)
 800528a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800528e:	681f      	ldr	r7, [r3, #0]
 8005290:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8005292:	4605      	mov	r5, r0
 8005294:	460e      	mov	r6, r1
 8005296:	b9ec      	cbnz	r4, 80052d4 <strtok+0x4c>
 8005298:	2050      	movs	r0, #80	@ 0x50
 800529a:	f000 f999 	bl	80055d0 <malloc>
 800529e:	4602      	mov	r2, r0
 80052a0:	6478      	str	r0, [r7, #68]	@ 0x44
 80052a2:	b920      	cbnz	r0, 80052ae <strtok+0x26>
 80052a4:	4b10      	ldr	r3, [pc, #64]	@ (80052e8 <strtok+0x60>)
 80052a6:	4811      	ldr	r0, [pc, #68]	@ (80052ec <strtok+0x64>)
 80052a8:	215b      	movs	r1, #91	@ 0x5b
 80052aa:	f000 f929 	bl	8005500 <__assert_func>
 80052ae:	e9c0 4400 	strd	r4, r4, [r0]
 80052b2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80052b6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80052ba:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80052be:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80052c2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80052c6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80052ca:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80052ce:	6184      	str	r4, [r0, #24]
 80052d0:	7704      	strb	r4, [r0, #28]
 80052d2:	6244      	str	r4, [r0, #36]	@ 0x24
 80052d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052d6:	4631      	mov	r1, r6
 80052d8:	4628      	mov	r0, r5
 80052da:	2301      	movs	r3, #1
 80052dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052e0:	f000 b806 	b.w	80052f0 <__strtok_r>
 80052e4:	2000001c 	.word	0x2000001c
 80052e8:	08006621 	.word	0x08006621
 80052ec:	08006638 	.word	0x08006638

080052f0 <__strtok_r>:
 80052f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052f2:	4604      	mov	r4, r0
 80052f4:	b908      	cbnz	r0, 80052fa <__strtok_r+0xa>
 80052f6:	6814      	ldr	r4, [r2, #0]
 80052f8:	b144      	cbz	r4, 800530c <__strtok_r+0x1c>
 80052fa:	4620      	mov	r0, r4
 80052fc:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005300:	460f      	mov	r7, r1
 8005302:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005306:	b91e      	cbnz	r6, 8005310 <__strtok_r+0x20>
 8005308:	b965      	cbnz	r5, 8005324 <__strtok_r+0x34>
 800530a:	6015      	str	r5, [r2, #0]
 800530c:	2000      	movs	r0, #0
 800530e:	e005      	b.n	800531c <__strtok_r+0x2c>
 8005310:	42b5      	cmp	r5, r6
 8005312:	d1f6      	bne.n	8005302 <__strtok_r+0x12>
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1f0      	bne.n	80052fa <__strtok_r+0xa>
 8005318:	6014      	str	r4, [r2, #0]
 800531a:	7003      	strb	r3, [r0, #0]
 800531c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800531e:	461c      	mov	r4, r3
 8005320:	e00c      	b.n	800533c <__strtok_r+0x4c>
 8005322:	b915      	cbnz	r5, 800532a <__strtok_r+0x3a>
 8005324:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005328:	460e      	mov	r6, r1
 800532a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800532e:	42ab      	cmp	r3, r5
 8005330:	d1f7      	bne.n	8005322 <__strtok_r+0x32>
 8005332:	2b00      	cmp	r3, #0
 8005334:	d0f3      	beq.n	800531e <__strtok_r+0x2e>
 8005336:	2300      	movs	r3, #0
 8005338:	f804 3c01 	strb.w	r3, [r4, #-1]
 800533c:	6014      	str	r4, [r2, #0]
 800533e:	e7ed      	b.n	800531c <__strtok_r+0x2c>

08005340 <_close_r>:
 8005340:	b538      	push	{r3, r4, r5, lr}
 8005342:	4d06      	ldr	r5, [pc, #24]	@ (800535c <_close_r+0x1c>)
 8005344:	2300      	movs	r3, #0
 8005346:	4604      	mov	r4, r0
 8005348:	4608      	mov	r0, r1
 800534a:	602b      	str	r3, [r5, #0]
 800534c:	f7fb fcf2 	bl	8000d34 <_close>
 8005350:	1c43      	adds	r3, r0, #1
 8005352:	d102      	bne.n	800535a <_close_r+0x1a>
 8005354:	682b      	ldr	r3, [r5, #0]
 8005356:	b103      	cbz	r3, 800535a <_close_r+0x1a>
 8005358:	6023      	str	r3, [r4, #0]
 800535a:	bd38      	pop	{r3, r4, r5, pc}
 800535c:	20004314 	.word	0x20004314

08005360 <_reclaim_reent>:
 8005360:	4b29      	ldr	r3, [pc, #164]	@ (8005408 <_reclaim_reent+0xa8>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4283      	cmp	r3, r0
 8005366:	b570      	push	{r4, r5, r6, lr}
 8005368:	4604      	mov	r4, r0
 800536a:	d04b      	beq.n	8005404 <_reclaim_reent+0xa4>
 800536c:	69c3      	ldr	r3, [r0, #28]
 800536e:	b1ab      	cbz	r3, 800539c <_reclaim_reent+0x3c>
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	b16b      	cbz	r3, 8005390 <_reclaim_reent+0x30>
 8005374:	2500      	movs	r5, #0
 8005376:	69e3      	ldr	r3, [r4, #28]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	5959      	ldr	r1, [r3, r5]
 800537c:	2900      	cmp	r1, #0
 800537e:	d13b      	bne.n	80053f8 <_reclaim_reent+0x98>
 8005380:	3504      	adds	r5, #4
 8005382:	2d80      	cmp	r5, #128	@ 0x80
 8005384:	d1f7      	bne.n	8005376 <_reclaim_reent+0x16>
 8005386:	69e3      	ldr	r3, [r4, #28]
 8005388:	4620      	mov	r0, r4
 800538a:	68d9      	ldr	r1, [r3, #12]
 800538c:	f000 f8d6 	bl	800553c <_free_r>
 8005390:	69e3      	ldr	r3, [r4, #28]
 8005392:	6819      	ldr	r1, [r3, #0]
 8005394:	b111      	cbz	r1, 800539c <_reclaim_reent+0x3c>
 8005396:	4620      	mov	r0, r4
 8005398:	f000 f8d0 	bl	800553c <_free_r>
 800539c:	6961      	ldr	r1, [r4, #20]
 800539e:	b111      	cbz	r1, 80053a6 <_reclaim_reent+0x46>
 80053a0:	4620      	mov	r0, r4
 80053a2:	f000 f8cb 	bl	800553c <_free_r>
 80053a6:	69e1      	ldr	r1, [r4, #28]
 80053a8:	b111      	cbz	r1, 80053b0 <_reclaim_reent+0x50>
 80053aa:	4620      	mov	r0, r4
 80053ac:	f000 f8c6 	bl	800553c <_free_r>
 80053b0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80053b2:	b111      	cbz	r1, 80053ba <_reclaim_reent+0x5a>
 80053b4:	4620      	mov	r0, r4
 80053b6:	f000 f8c1 	bl	800553c <_free_r>
 80053ba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80053bc:	b111      	cbz	r1, 80053c4 <_reclaim_reent+0x64>
 80053be:	4620      	mov	r0, r4
 80053c0:	f000 f8bc 	bl	800553c <_free_r>
 80053c4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80053c6:	b111      	cbz	r1, 80053ce <_reclaim_reent+0x6e>
 80053c8:	4620      	mov	r0, r4
 80053ca:	f000 f8b7 	bl	800553c <_free_r>
 80053ce:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80053d0:	b111      	cbz	r1, 80053d8 <_reclaim_reent+0x78>
 80053d2:	4620      	mov	r0, r4
 80053d4:	f000 f8b2 	bl	800553c <_free_r>
 80053d8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80053da:	b111      	cbz	r1, 80053e2 <_reclaim_reent+0x82>
 80053dc:	4620      	mov	r0, r4
 80053de:	f000 f8ad 	bl	800553c <_free_r>
 80053e2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80053e4:	b111      	cbz	r1, 80053ec <_reclaim_reent+0x8c>
 80053e6:	4620      	mov	r0, r4
 80053e8:	f000 f8a8 	bl	800553c <_free_r>
 80053ec:	6a23      	ldr	r3, [r4, #32]
 80053ee:	b14b      	cbz	r3, 8005404 <_reclaim_reent+0xa4>
 80053f0:	4620      	mov	r0, r4
 80053f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80053f6:	4718      	bx	r3
 80053f8:	680e      	ldr	r6, [r1, #0]
 80053fa:	4620      	mov	r0, r4
 80053fc:	f000 f89e 	bl	800553c <_free_r>
 8005400:	4631      	mov	r1, r6
 8005402:	e7bb      	b.n	800537c <_reclaim_reent+0x1c>
 8005404:	bd70      	pop	{r4, r5, r6, pc}
 8005406:	bf00      	nop
 8005408:	2000001c 	.word	0x2000001c

0800540c <_lseek_r>:
 800540c:	b538      	push	{r3, r4, r5, lr}
 800540e:	4d07      	ldr	r5, [pc, #28]	@ (800542c <_lseek_r+0x20>)
 8005410:	4604      	mov	r4, r0
 8005412:	4608      	mov	r0, r1
 8005414:	4611      	mov	r1, r2
 8005416:	2200      	movs	r2, #0
 8005418:	602a      	str	r2, [r5, #0]
 800541a:	461a      	mov	r2, r3
 800541c:	f7fb fcb1 	bl	8000d82 <_lseek>
 8005420:	1c43      	adds	r3, r0, #1
 8005422:	d102      	bne.n	800542a <_lseek_r+0x1e>
 8005424:	682b      	ldr	r3, [r5, #0]
 8005426:	b103      	cbz	r3, 800542a <_lseek_r+0x1e>
 8005428:	6023      	str	r3, [r4, #0]
 800542a:	bd38      	pop	{r3, r4, r5, pc}
 800542c:	20004314 	.word	0x20004314

08005430 <_read_r>:
 8005430:	b538      	push	{r3, r4, r5, lr}
 8005432:	4d07      	ldr	r5, [pc, #28]	@ (8005450 <_read_r+0x20>)
 8005434:	4604      	mov	r4, r0
 8005436:	4608      	mov	r0, r1
 8005438:	4611      	mov	r1, r2
 800543a:	2200      	movs	r2, #0
 800543c:	602a      	str	r2, [r5, #0]
 800543e:	461a      	mov	r2, r3
 8005440:	f7fb fc3f 	bl	8000cc2 <_read>
 8005444:	1c43      	adds	r3, r0, #1
 8005446:	d102      	bne.n	800544e <_read_r+0x1e>
 8005448:	682b      	ldr	r3, [r5, #0]
 800544a:	b103      	cbz	r3, 800544e <_read_r+0x1e>
 800544c:	6023      	str	r3, [r4, #0]
 800544e:	bd38      	pop	{r3, r4, r5, pc}
 8005450:	20004314 	.word	0x20004314

08005454 <_write_r>:
 8005454:	b538      	push	{r3, r4, r5, lr}
 8005456:	4d07      	ldr	r5, [pc, #28]	@ (8005474 <_write_r+0x20>)
 8005458:	4604      	mov	r4, r0
 800545a:	4608      	mov	r0, r1
 800545c:	4611      	mov	r1, r2
 800545e:	2200      	movs	r2, #0
 8005460:	602a      	str	r2, [r5, #0]
 8005462:	461a      	mov	r2, r3
 8005464:	f7fb fc4a 	bl	8000cfc <_write>
 8005468:	1c43      	adds	r3, r0, #1
 800546a:	d102      	bne.n	8005472 <_write_r+0x1e>
 800546c:	682b      	ldr	r3, [r5, #0]
 800546e:	b103      	cbz	r3, 8005472 <_write_r+0x1e>
 8005470:	6023      	str	r3, [r4, #0]
 8005472:	bd38      	pop	{r3, r4, r5, pc}
 8005474:	20004314 	.word	0x20004314

08005478 <__errno>:
 8005478:	4b01      	ldr	r3, [pc, #4]	@ (8005480 <__errno+0x8>)
 800547a:	6818      	ldr	r0, [r3, #0]
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	2000001c 	.word	0x2000001c

08005484 <__libc_init_array>:
 8005484:	b570      	push	{r4, r5, r6, lr}
 8005486:	4d0d      	ldr	r5, [pc, #52]	@ (80054bc <__libc_init_array+0x38>)
 8005488:	4c0d      	ldr	r4, [pc, #52]	@ (80054c0 <__libc_init_array+0x3c>)
 800548a:	1b64      	subs	r4, r4, r5
 800548c:	10a4      	asrs	r4, r4, #2
 800548e:	2600      	movs	r6, #0
 8005490:	42a6      	cmp	r6, r4
 8005492:	d109      	bne.n	80054a8 <__libc_init_array+0x24>
 8005494:	4d0b      	ldr	r5, [pc, #44]	@ (80054c4 <__libc_init_array+0x40>)
 8005496:	4c0c      	ldr	r4, [pc, #48]	@ (80054c8 <__libc_init_array+0x44>)
 8005498:	f000 ff66 	bl	8006368 <_init>
 800549c:	1b64      	subs	r4, r4, r5
 800549e:	10a4      	asrs	r4, r4, #2
 80054a0:	2600      	movs	r6, #0
 80054a2:	42a6      	cmp	r6, r4
 80054a4:	d105      	bne.n	80054b2 <__libc_init_array+0x2e>
 80054a6:	bd70      	pop	{r4, r5, r6, pc}
 80054a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80054ac:	4798      	blx	r3
 80054ae:	3601      	adds	r6, #1
 80054b0:	e7ee      	b.n	8005490 <__libc_init_array+0xc>
 80054b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80054b6:	4798      	blx	r3
 80054b8:	3601      	adds	r6, #1
 80054ba:	e7f2      	b.n	80054a2 <__libc_init_array+0x1e>
 80054bc:	0800670c 	.word	0x0800670c
 80054c0:	0800670c 	.word	0x0800670c
 80054c4:	0800670c 	.word	0x0800670c
 80054c8:	08006710 	.word	0x08006710

080054cc <__retarget_lock_init_recursive>:
 80054cc:	4770      	bx	lr

080054ce <__retarget_lock_acquire_recursive>:
 80054ce:	4770      	bx	lr

080054d0 <__retarget_lock_release_recursive>:
 80054d0:	4770      	bx	lr

080054d2 <strcpy>:
 80054d2:	4603      	mov	r3, r0
 80054d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80054d8:	f803 2b01 	strb.w	r2, [r3], #1
 80054dc:	2a00      	cmp	r2, #0
 80054de:	d1f9      	bne.n	80054d4 <strcpy+0x2>
 80054e0:	4770      	bx	lr

080054e2 <memcpy>:
 80054e2:	440a      	add	r2, r1
 80054e4:	4291      	cmp	r1, r2
 80054e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80054ea:	d100      	bne.n	80054ee <memcpy+0xc>
 80054ec:	4770      	bx	lr
 80054ee:	b510      	push	{r4, lr}
 80054f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054f8:	4291      	cmp	r1, r2
 80054fa:	d1f9      	bne.n	80054f0 <memcpy+0xe>
 80054fc:	bd10      	pop	{r4, pc}
	...

08005500 <__assert_func>:
 8005500:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005502:	4614      	mov	r4, r2
 8005504:	461a      	mov	r2, r3
 8005506:	4b09      	ldr	r3, [pc, #36]	@ (800552c <__assert_func+0x2c>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4605      	mov	r5, r0
 800550c:	68d8      	ldr	r0, [r3, #12]
 800550e:	b954      	cbnz	r4, 8005526 <__assert_func+0x26>
 8005510:	4b07      	ldr	r3, [pc, #28]	@ (8005530 <__assert_func+0x30>)
 8005512:	461c      	mov	r4, r3
 8005514:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005518:	9100      	str	r1, [sp, #0]
 800551a:	462b      	mov	r3, r5
 800551c:	4905      	ldr	r1, [pc, #20]	@ (8005534 <__assert_func+0x34>)
 800551e:	f000 fde1 	bl	80060e4 <fiprintf>
 8005522:	f000 fe9f 	bl	8006264 <abort>
 8005526:	4b04      	ldr	r3, [pc, #16]	@ (8005538 <__assert_func+0x38>)
 8005528:	e7f4      	b.n	8005514 <__assert_func+0x14>
 800552a:	bf00      	nop
 800552c:	2000001c 	.word	0x2000001c
 8005530:	080066cd 	.word	0x080066cd
 8005534:	0800669f 	.word	0x0800669f
 8005538:	08006692 	.word	0x08006692

0800553c <_free_r>:
 800553c:	b538      	push	{r3, r4, r5, lr}
 800553e:	4605      	mov	r5, r0
 8005540:	2900      	cmp	r1, #0
 8005542:	d041      	beq.n	80055c8 <_free_r+0x8c>
 8005544:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005548:	1f0c      	subs	r4, r1, #4
 800554a:	2b00      	cmp	r3, #0
 800554c:	bfb8      	it	lt
 800554e:	18e4      	addlt	r4, r4, r3
 8005550:	f000 f8e8 	bl	8005724 <__malloc_lock>
 8005554:	4a1d      	ldr	r2, [pc, #116]	@ (80055cc <_free_r+0x90>)
 8005556:	6813      	ldr	r3, [r2, #0]
 8005558:	b933      	cbnz	r3, 8005568 <_free_r+0x2c>
 800555a:	6063      	str	r3, [r4, #4]
 800555c:	6014      	str	r4, [r2, #0]
 800555e:	4628      	mov	r0, r5
 8005560:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005564:	f000 b8e4 	b.w	8005730 <__malloc_unlock>
 8005568:	42a3      	cmp	r3, r4
 800556a:	d908      	bls.n	800557e <_free_r+0x42>
 800556c:	6820      	ldr	r0, [r4, #0]
 800556e:	1821      	adds	r1, r4, r0
 8005570:	428b      	cmp	r3, r1
 8005572:	bf01      	itttt	eq
 8005574:	6819      	ldreq	r1, [r3, #0]
 8005576:	685b      	ldreq	r3, [r3, #4]
 8005578:	1809      	addeq	r1, r1, r0
 800557a:	6021      	streq	r1, [r4, #0]
 800557c:	e7ed      	b.n	800555a <_free_r+0x1e>
 800557e:	461a      	mov	r2, r3
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	b10b      	cbz	r3, 8005588 <_free_r+0x4c>
 8005584:	42a3      	cmp	r3, r4
 8005586:	d9fa      	bls.n	800557e <_free_r+0x42>
 8005588:	6811      	ldr	r1, [r2, #0]
 800558a:	1850      	adds	r0, r2, r1
 800558c:	42a0      	cmp	r0, r4
 800558e:	d10b      	bne.n	80055a8 <_free_r+0x6c>
 8005590:	6820      	ldr	r0, [r4, #0]
 8005592:	4401      	add	r1, r0
 8005594:	1850      	adds	r0, r2, r1
 8005596:	4283      	cmp	r3, r0
 8005598:	6011      	str	r1, [r2, #0]
 800559a:	d1e0      	bne.n	800555e <_free_r+0x22>
 800559c:	6818      	ldr	r0, [r3, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	6053      	str	r3, [r2, #4]
 80055a2:	4408      	add	r0, r1
 80055a4:	6010      	str	r0, [r2, #0]
 80055a6:	e7da      	b.n	800555e <_free_r+0x22>
 80055a8:	d902      	bls.n	80055b0 <_free_r+0x74>
 80055aa:	230c      	movs	r3, #12
 80055ac:	602b      	str	r3, [r5, #0]
 80055ae:	e7d6      	b.n	800555e <_free_r+0x22>
 80055b0:	6820      	ldr	r0, [r4, #0]
 80055b2:	1821      	adds	r1, r4, r0
 80055b4:	428b      	cmp	r3, r1
 80055b6:	bf04      	itt	eq
 80055b8:	6819      	ldreq	r1, [r3, #0]
 80055ba:	685b      	ldreq	r3, [r3, #4]
 80055bc:	6063      	str	r3, [r4, #4]
 80055be:	bf04      	itt	eq
 80055c0:	1809      	addeq	r1, r1, r0
 80055c2:	6021      	streq	r1, [r4, #0]
 80055c4:	6054      	str	r4, [r2, #4]
 80055c6:	e7ca      	b.n	800555e <_free_r+0x22>
 80055c8:	bd38      	pop	{r3, r4, r5, pc}
 80055ca:	bf00      	nop
 80055cc:	20004320 	.word	0x20004320

080055d0 <malloc>:
 80055d0:	4b02      	ldr	r3, [pc, #8]	@ (80055dc <malloc+0xc>)
 80055d2:	4601      	mov	r1, r0
 80055d4:	6818      	ldr	r0, [r3, #0]
 80055d6:	f000 b825 	b.w	8005624 <_malloc_r>
 80055da:	bf00      	nop
 80055dc:	2000001c 	.word	0x2000001c

080055e0 <sbrk_aligned>:
 80055e0:	b570      	push	{r4, r5, r6, lr}
 80055e2:	4e0f      	ldr	r6, [pc, #60]	@ (8005620 <sbrk_aligned+0x40>)
 80055e4:	460c      	mov	r4, r1
 80055e6:	6831      	ldr	r1, [r6, #0]
 80055e8:	4605      	mov	r5, r0
 80055ea:	b911      	cbnz	r1, 80055f2 <sbrk_aligned+0x12>
 80055ec:	f000 fe2a 	bl	8006244 <_sbrk_r>
 80055f0:	6030      	str	r0, [r6, #0]
 80055f2:	4621      	mov	r1, r4
 80055f4:	4628      	mov	r0, r5
 80055f6:	f000 fe25 	bl	8006244 <_sbrk_r>
 80055fa:	1c43      	adds	r3, r0, #1
 80055fc:	d103      	bne.n	8005606 <sbrk_aligned+0x26>
 80055fe:	f04f 34ff 	mov.w	r4, #4294967295
 8005602:	4620      	mov	r0, r4
 8005604:	bd70      	pop	{r4, r5, r6, pc}
 8005606:	1cc4      	adds	r4, r0, #3
 8005608:	f024 0403 	bic.w	r4, r4, #3
 800560c:	42a0      	cmp	r0, r4
 800560e:	d0f8      	beq.n	8005602 <sbrk_aligned+0x22>
 8005610:	1a21      	subs	r1, r4, r0
 8005612:	4628      	mov	r0, r5
 8005614:	f000 fe16 	bl	8006244 <_sbrk_r>
 8005618:	3001      	adds	r0, #1
 800561a:	d1f2      	bne.n	8005602 <sbrk_aligned+0x22>
 800561c:	e7ef      	b.n	80055fe <sbrk_aligned+0x1e>
 800561e:	bf00      	nop
 8005620:	2000431c 	.word	0x2000431c

08005624 <_malloc_r>:
 8005624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005628:	1ccd      	adds	r5, r1, #3
 800562a:	f025 0503 	bic.w	r5, r5, #3
 800562e:	3508      	adds	r5, #8
 8005630:	2d0c      	cmp	r5, #12
 8005632:	bf38      	it	cc
 8005634:	250c      	movcc	r5, #12
 8005636:	2d00      	cmp	r5, #0
 8005638:	4606      	mov	r6, r0
 800563a:	db01      	blt.n	8005640 <_malloc_r+0x1c>
 800563c:	42a9      	cmp	r1, r5
 800563e:	d904      	bls.n	800564a <_malloc_r+0x26>
 8005640:	230c      	movs	r3, #12
 8005642:	6033      	str	r3, [r6, #0]
 8005644:	2000      	movs	r0, #0
 8005646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800564a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005720 <_malloc_r+0xfc>
 800564e:	f000 f869 	bl	8005724 <__malloc_lock>
 8005652:	f8d8 3000 	ldr.w	r3, [r8]
 8005656:	461c      	mov	r4, r3
 8005658:	bb44      	cbnz	r4, 80056ac <_malloc_r+0x88>
 800565a:	4629      	mov	r1, r5
 800565c:	4630      	mov	r0, r6
 800565e:	f7ff ffbf 	bl	80055e0 <sbrk_aligned>
 8005662:	1c43      	adds	r3, r0, #1
 8005664:	4604      	mov	r4, r0
 8005666:	d158      	bne.n	800571a <_malloc_r+0xf6>
 8005668:	f8d8 4000 	ldr.w	r4, [r8]
 800566c:	4627      	mov	r7, r4
 800566e:	2f00      	cmp	r7, #0
 8005670:	d143      	bne.n	80056fa <_malloc_r+0xd6>
 8005672:	2c00      	cmp	r4, #0
 8005674:	d04b      	beq.n	800570e <_malloc_r+0xea>
 8005676:	6823      	ldr	r3, [r4, #0]
 8005678:	4639      	mov	r1, r7
 800567a:	4630      	mov	r0, r6
 800567c:	eb04 0903 	add.w	r9, r4, r3
 8005680:	f000 fde0 	bl	8006244 <_sbrk_r>
 8005684:	4581      	cmp	r9, r0
 8005686:	d142      	bne.n	800570e <_malloc_r+0xea>
 8005688:	6821      	ldr	r1, [r4, #0]
 800568a:	1a6d      	subs	r5, r5, r1
 800568c:	4629      	mov	r1, r5
 800568e:	4630      	mov	r0, r6
 8005690:	f7ff ffa6 	bl	80055e0 <sbrk_aligned>
 8005694:	3001      	adds	r0, #1
 8005696:	d03a      	beq.n	800570e <_malloc_r+0xea>
 8005698:	6823      	ldr	r3, [r4, #0]
 800569a:	442b      	add	r3, r5
 800569c:	6023      	str	r3, [r4, #0]
 800569e:	f8d8 3000 	ldr.w	r3, [r8]
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	bb62      	cbnz	r2, 8005700 <_malloc_r+0xdc>
 80056a6:	f8c8 7000 	str.w	r7, [r8]
 80056aa:	e00f      	b.n	80056cc <_malloc_r+0xa8>
 80056ac:	6822      	ldr	r2, [r4, #0]
 80056ae:	1b52      	subs	r2, r2, r5
 80056b0:	d420      	bmi.n	80056f4 <_malloc_r+0xd0>
 80056b2:	2a0b      	cmp	r2, #11
 80056b4:	d917      	bls.n	80056e6 <_malloc_r+0xc2>
 80056b6:	1961      	adds	r1, r4, r5
 80056b8:	42a3      	cmp	r3, r4
 80056ba:	6025      	str	r5, [r4, #0]
 80056bc:	bf18      	it	ne
 80056be:	6059      	strne	r1, [r3, #4]
 80056c0:	6863      	ldr	r3, [r4, #4]
 80056c2:	bf08      	it	eq
 80056c4:	f8c8 1000 	streq.w	r1, [r8]
 80056c8:	5162      	str	r2, [r4, r5]
 80056ca:	604b      	str	r3, [r1, #4]
 80056cc:	4630      	mov	r0, r6
 80056ce:	f000 f82f 	bl	8005730 <__malloc_unlock>
 80056d2:	f104 000b 	add.w	r0, r4, #11
 80056d6:	1d23      	adds	r3, r4, #4
 80056d8:	f020 0007 	bic.w	r0, r0, #7
 80056dc:	1ac2      	subs	r2, r0, r3
 80056de:	bf1c      	itt	ne
 80056e0:	1a1b      	subne	r3, r3, r0
 80056e2:	50a3      	strne	r3, [r4, r2]
 80056e4:	e7af      	b.n	8005646 <_malloc_r+0x22>
 80056e6:	6862      	ldr	r2, [r4, #4]
 80056e8:	42a3      	cmp	r3, r4
 80056ea:	bf0c      	ite	eq
 80056ec:	f8c8 2000 	streq.w	r2, [r8]
 80056f0:	605a      	strne	r2, [r3, #4]
 80056f2:	e7eb      	b.n	80056cc <_malloc_r+0xa8>
 80056f4:	4623      	mov	r3, r4
 80056f6:	6864      	ldr	r4, [r4, #4]
 80056f8:	e7ae      	b.n	8005658 <_malloc_r+0x34>
 80056fa:	463c      	mov	r4, r7
 80056fc:	687f      	ldr	r7, [r7, #4]
 80056fe:	e7b6      	b.n	800566e <_malloc_r+0x4a>
 8005700:	461a      	mov	r2, r3
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	42a3      	cmp	r3, r4
 8005706:	d1fb      	bne.n	8005700 <_malloc_r+0xdc>
 8005708:	2300      	movs	r3, #0
 800570a:	6053      	str	r3, [r2, #4]
 800570c:	e7de      	b.n	80056cc <_malloc_r+0xa8>
 800570e:	230c      	movs	r3, #12
 8005710:	6033      	str	r3, [r6, #0]
 8005712:	4630      	mov	r0, r6
 8005714:	f000 f80c 	bl	8005730 <__malloc_unlock>
 8005718:	e794      	b.n	8005644 <_malloc_r+0x20>
 800571a:	6005      	str	r5, [r0, #0]
 800571c:	e7d6      	b.n	80056cc <_malloc_r+0xa8>
 800571e:	bf00      	nop
 8005720:	20004320 	.word	0x20004320

08005724 <__malloc_lock>:
 8005724:	4801      	ldr	r0, [pc, #4]	@ (800572c <__malloc_lock+0x8>)
 8005726:	f7ff bed2 	b.w	80054ce <__retarget_lock_acquire_recursive>
 800572a:	bf00      	nop
 800572c:	20004318 	.word	0x20004318

08005730 <__malloc_unlock>:
 8005730:	4801      	ldr	r0, [pc, #4]	@ (8005738 <__malloc_unlock+0x8>)
 8005732:	f7ff becd 	b.w	80054d0 <__retarget_lock_release_recursive>
 8005736:	bf00      	nop
 8005738:	20004318 	.word	0x20004318

0800573c <__ssputs_r>:
 800573c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005740:	688e      	ldr	r6, [r1, #8]
 8005742:	461f      	mov	r7, r3
 8005744:	42be      	cmp	r6, r7
 8005746:	680b      	ldr	r3, [r1, #0]
 8005748:	4682      	mov	sl, r0
 800574a:	460c      	mov	r4, r1
 800574c:	4690      	mov	r8, r2
 800574e:	d82d      	bhi.n	80057ac <__ssputs_r+0x70>
 8005750:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005754:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005758:	d026      	beq.n	80057a8 <__ssputs_r+0x6c>
 800575a:	6965      	ldr	r5, [r4, #20]
 800575c:	6909      	ldr	r1, [r1, #16]
 800575e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005762:	eba3 0901 	sub.w	r9, r3, r1
 8005766:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800576a:	1c7b      	adds	r3, r7, #1
 800576c:	444b      	add	r3, r9
 800576e:	106d      	asrs	r5, r5, #1
 8005770:	429d      	cmp	r5, r3
 8005772:	bf38      	it	cc
 8005774:	461d      	movcc	r5, r3
 8005776:	0553      	lsls	r3, r2, #21
 8005778:	d527      	bpl.n	80057ca <__ssputs_r+0x8e>
 800577a:	4629      	mov	r1, r5
 800577c:	f7ff ff52 	bl	8005624 <_malloc_r>
 8005780:	4606      	mov	r6, r0
 8005782:	b360      	cbz	r0, 80057de <__ssputs_r+0xa2>
 8005784:	6921      	ldr	r1, [r4, #16]
 8005786:	464a      	mov	r2, r9
 8005788:	f7ff feab 	bl	80054e2 <memcpy>
 800578c:	89a3      	ldrh	r3, [r4, #12]
 800578e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005796:	81a3      	strh	r3, [r4, #12]
 8005798:	6126      	str	r6, [r4, #16]
 800579a:	6165      	str	r5, [r4, #20]
 800579c:	444e      	add	r6, r9
 800579e:	eba5 0509 	sub.w	r5, r5, r9
 80057a2:	6026      	str	r6, [r4, #0]
 80057a4:	60a5      	str	r5, [r4, #8]
 80057a6:	463e      	mov	r6, r7
 80057a8:	42be      	cmp	r6, r7
 80057aa:	d900      	bls.n	80057ae <__ssputs_r+0x72>
 80057ac:	463e      	mov	r6, r7
 80057ae:	6820      	ldr	r0, [r4, #0]
 80057b0:	4632      	mov	r2, r6
 80057b2:	4641      	mov	r1, r8
 80057b4:	f000 fd0a 	bl	80061cc <memmove>
 80057b8:	68a3      	ldr	r3, [r4, #8]
 80057ba:	1b9b      	subs	r3, r3, r6
 80057bc:	60a3      	str	r3, [r4, #8]
 80057be:	6823      	ldr	r3, [r4, #0]
 80057c0:	4433      	add	r3, r6
 80057c2:	6023      	str	r3, [r4, #0]
 80057c4:	2000      	movs	r0, #0
 80057c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057ca:	462a      	mov	r2, r5
 80057cc:	f000 fd51 	bl	8006272 <_realloc_r>
 80057d0:	4606      	mov	r6, r0
 80057d2:	2800      	cmp	r0, #0
 80057d4:	d1e0      	bne.n	8005798 <__ssputs_r+0x5c>
 80057d6:	6921      	ldr	r1, [r4, #16]
 80057d8:	4650      	mov	r0, sl
 80057da:	f7ff feaf 	bl	800553c <_free_r>
 80057de:	230c      	movs	r3, #12
 80057e0:	f8ca 3000 	str.w	r3, [sl]
 80057e4:	89a3      	ldrh	r3, [r4, #12]
 80057e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057ea:	81a3      	strh	r3, [r4, #12]
 80057ec:	f04f 30ff 	mov.w	r0, #4294967295
 80057f0:	e7e9      	b.n	80057c6 <__ssputs_r+0x8a>
	...

080057f4 <_svfiprintf_r>:
 80057f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f8:	4698      	mov	r8, r3
 80057fa:	898b      	ldrh	r3, [r1, #12]
 80057fc:	061b      	lsls	r3, r3, #24
 80057fe:	b09d      	sub	sp, #116	@ 0x74
 8005800:	4607      	mov	r7, r0
 8005802:	460d      	mov	r5, r1
 8005804:	4614      	mov	r4, r2
 8005806:	d510      	bpl.n	800582a <_svfiprintf_r+0x36>
 8005808:	690b      	ldr	r3, [r1, #16]
 800580a:	b973      	cbnz	r3, 800582a <_svfiprintf_r+0x36>
 800580c:	2140      	movs	r1, #64	@ 0x40
 800580e:	f7ff ff09 	bl	8005624 <_malloc_r>
 8005812:	6028      	str	r0, [r5, #0]
 8005814:	6128      	str	r0, [r5, #16]
 8005816:	b930      	cbnz	r0, 8005826 <_svfiprintf_r+0x32>
 8005818:	230c      	movs	r3, #12
 800581a:	603b      	str	r3, [r7, #0]
 800581c:	f04f 30ff 	mov.w	r0, #4294967295
 8005820:	b01d      	add	sp, #116	@ 0x74
 8005822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005826:	2340      	movs	r3, #64	@ 0x40
 8005828:	616b      	str	r3, [r5, #20]
 800582a:	2300      	movs	r3, #0
 800582c:	9309      	str	r3, [sp, #36]	@ 0x24
 800582e:	2320      	movs	r3, #32
 8005830:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005834:	f8cd 800c 	str.w	r8, [sp, #12]
 8005838:	2330      	movs	r3, #48	@ 0x30
 800583a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80059d8 <_svfiprintf_r+0x1e4>
 800583e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005842:	f04f 0901 	mov.w	r9, #1
 8005846:	4623      	mov	r3, r4
 8005848:	469a      	mov	sl, r3
 800584a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800584e:	b10a      	cbz	r2, 8005854 <_svfiprintf_r+0x60>
 8005850:	2a25      	cmp	r2, #37	@ 0x25
 8005852:	d1f9      	bne.n	8005848 <_svfiprintf_r+0x54>
 8005854:	ebba 0b04 	subs.w	fp, sl, r4
 8005858:	d00b      	beq.n	8005872 <_svfiprintf_r+0x7e>
 800585a:	465b      	mov	r3, fp
 800585c:	4622      	mov	r2, r4
 800585e:	4629      	mov	r1, r5
 8005860:	4638      	mov	r0, r7
 8005862:	f7ff ff6b 	bl	800573c <__ssputs_r>
 8005866:	3001      	adds	r0, #1
 8005868:	f000 80a7 	beq.w	80059ba <_svfiprintf_r+0x1c6>
 800586c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800586e:	445a      	add	r2, fp
 8005870:	9209      	str	r2, [sp, #36]	@ 0x24
 8005872:	f89a 3000 	ldrb.w	r3, [sl]
 8005876:	2b00      	cmp	r3, #0
 8005878:	f000 809f 	beq.w	80059ba <_svfiprintf_r+0x1c6>
 800587c:	2300      	movs	r3, #0
 800587e:	f04f 32ff 	mov.w	r2, #4294967295
 8005882:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005886:	f10a 0a01 	add.w	sl, sl, #1
 800588a:	9304      	str	r3, [sp, #16]
 800588c:	9307      	str	r3, [sp, #28]
 800588e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005892:	931a      	str	r3, [sp, #104]	@ 0x68
 8005894:	4654      	mov	r4, sl
 8005896:	2205      	movs	r2, #5
 8005898:	f814 1b01 	ldrb.w	r1, [r4], #1
 800589c:	484e      	ldr	r0, [pc, #312]	@ (80059d8 <_svfiprintf_r+0x1e4>)
 800589e:	f7fa fcb7 	bl	8000210 <memchr>
 80058a2:	9a04      	ldr	r2, [sp, #16]
 80058a4:	b9d8      	cbnz	r0, 80058de <_svfiprintf_r+0xea>
 80058a6:	06d0      	lsls	r0, r2, #27
 80058a8:	bf44      	itt	mi
 80058aa:	2320      	movmi	r3, #32
 80058ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80058b0:	0711      	lsls	r1, r2, #28
 80058b2:	bf44      	itt	mi
 80058b4:	232b      	movmi	r3, #43	@ 0x2b
 80058b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80058ba:	f89a 3000 	ldrb.w	r3, [sl]
 80058be:	2b2a      	cmp	r3, #42	@ 0x2a
 80058c0:	d015      	beq.n	80058ee <_svfiprintf_r+0xfa>
 80058c2:	9a07      	ldr	r2, [sp, #28]
 80058c4:	4654      	mov	r4, sl
 80058c6:	2000      	movs	r0, #0
 80058c8:	f04f 0c0a 	mov.w	ip, #10
 80058cc:	4621      	mov	r1, r4
 80058ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058d2:	3b30      	subs	r3, #48	@ 0x30
 80058d4:	2b09      	cmp	r3, #9
 80058d6:	d94b      	bls.n	8005970 <_svfiprintf_r+0x17c>
 80058d8:	b1b0      	cbz	r0, 8005908 <_svfiprintf_r+0x114>
 80058da:	9207      	str	r2, [sp, #28]
 80058dc:	e014      	b.n	8005908 <_svfiprintf_r+0x114>
 80058de:	eba0 0308 	sub.w	r3, r0, r8
 80058e2:	fa09 f303 	lsl.w	r3, r9, r3
 80058e6:	4313      	orrs	r3, r2
 80058e8:	9304      	str	r3, [sp, #16]
 80058ea:	46a2      	mov	sl, r4
 80058ec:	e7d2      	b.n	8005894 <_svfiprintf_r+0xa0>
 80058ee:	9b03      	ldr	r3, [sp, #12]
 80058f0:	1d19      	adds	r1, r3, #4
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	9103      	str	r1, [sp, #12]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	bfbb      	ittet	lt
 80058fa:	425b      	neglt	r3, r3
 80058fc:	f042 0202 	orrlt.w	r2, r2, #2
 8005900:	9307      	strge	r3, [sp, #28]
 8005902:	9307      	strlt	r3, [sp, #28]
 8005904:	bfb8      	it	lt
 8005906:	9204      	strlt	r2, [sp, #16]
 8005908:	7823      	ldrb	r3, [r4, #0]
 800590a:	2b2e      	cmp	r3, #46	@ 0x2e
 800590c:	d10a      	bne.n	8005924 <_svfiprintf_r+0x130>
 800590e:	7863      	ldrb	r3, [r4, #1]
 8005910:	2b2a      	cmp	r3, #42	@ 0x2a
 8005912:	d132      	bne.n	800597a <_svfiprintf_r+0x186>
 8005914:	9b03      	ldr	r3, [sp, #12]
 8005916:	1d1a      	adds	r2, r3, #4
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	9203      	str	r2, [sp, #12]
 800591c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005920:	3402      	adds	r4, #2
 8005922:	9305      	str	r3, [sp, #20]
 8005924:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80059e8 <_svfiprintf_r+0x1f4>
 8005928:	7821      	ldrb	r1, [r4, #0]
 800592a:	2203      	movs	r2, #3
 800592c:	4650      	mov	r0, sl
 800592e:	f7fa fc6f 	bl	8000210 <memchr>
 8005932:	b138      	cbz	r0, 8005944 <_svfiprintf_r+0x150>
 8005934:	9b04      	ldr	r3, [sp, #16]
 8005936:	eba0 000a 	sub.w	r0, r0, sl
 800593a:	2240      	movs	r2, #64	@ 0x40
 800593c:	4082      	lsls	r2, r0
 800593e:	4313      	orrs	r3, r2
 8005940:	3401      	adds	r4, #1
 8005942:	9304      	str	r3, [sp, #16]
 8005944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005948:	4824      	ldr	r0, [pc, #144]	@ (80059dc <_svfiprintf_r+0x1e8>)
 800594a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800594e:	2206      	movs	r2, #6
 8005950:	f7fa fc5e 	bl	8000210 <memchr>
 8005954:	2800      	cmp	r0, #0
 8005956:	d036      	beq.n	80059c6 <_svfiprintf_r+0x1d2>
 8005958:	4b21      	ldr	r3, [pc, #132]	@ (80059e0 <_svfiprintf_r+0x1ec>)
 800595a:	bb1b      	cbnz	r3, 80059a4 <_svfiprintf_r+0x1b0>
 800595c:	9b03      	ldr	r3, [sp, #12]
 800595e:	3307      	adds	r3, #7
 8005960:	f023 0307 	bic.w	r3, r3, #7
 8005964:	3308      	adds	r3, #8
 8005966:	9303      	str	r3, [sp, #12]
 8005968:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800596a:	4433      	add	r3, r6
 800596c:	9309      	str	r3, [sp, #36]	@ 0x24
 800596e:	e76a      	b.n	8005846 <_svfiprintf_r+0x52>
 8005970:	fb0c 3202 	mla	r2, ip, r2, r3
 8005974:	460c      	mov	r4, r1
 8005976:	2001      	movs	r0, #1
 8005978:	e7a8      	b.n	80058cc <_svfiprintf_r+0xd8>
 800597a:	2300      	movs	r3, #0
 800597c:	3401      	adds	r4, #1
 800597e:	9305      	str	r3, [sp, #20]
 8005980:	4619      	mov	r1, r3
 8005982:	f04f 0c0a 	mov.w	ip, #10
 8005986:	4620      	mov	r0, r4
 8005988:	f810 2b01 	ldrb.w	r2, [r0], #1
 800598c:	3a30      	subs	r2, #48	@ 0x30
 800598e:	2a09      	cmp	r2, #9
 8005990:	d903      	bls.n	800599a <_svfiprintf_r+0x1a6>
 8005992:	2b00      	cmp	r3, #0
 8005994:	d0c6      	beq.n	8005924 <_svfiprintf_r+0x130>
 8005996:	9105      	str	r1, [sp, #20]
 8005998:	e7c4      	b.n	8005924 <_svfiprintf_r+0x130>
 800599a:	fb0c 2101 	mla	r1, ip, r1, r2
 800599e:	4604      	mov	r4, r0
 80059a0:	2301      	movs	r3, #1
 80059a2:	e7f0      	b.n	8005986 <_svfiprintf_r+0x192>
 80059a4:	ab03      	add	r3, sp, #12
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	462a      	mov	r2, r5
 80059aa:	4b0e      	ldr	r3, [pc, #56]	@ (80059e4 <_svfiprintf_r+0x1f0>)
 80059ac:	a904      	add	r1, sp, #16
 80059ae:	4638      	mov	r0, r7
 80059b0:	f3af 8000 	nop.w
 80059b4:	1c42      	adds	r2, r0, #1
 80059b6:	4606      	mov	r6, r0
 80059b8:	d1d6      	bne.n	8005968 <_svfiprintf_r+0x174>
 80059ba:	89ab      	ldrh	r3, [r5, #12]
 80059bc:	065b      	lsls	r3, r3, #25
 80059be:	f53f af2d 	bmi.w	800581c <_svfiprintf_r+0x28>
 80059c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80059c4:	e72c      	b.n	8005820 <_svfiprintf_r+0x2c>
 80059c6:	ab03      	add	r3, sp, #12
 80059c8:	9300      	str	r3, [sp, #0]
 80059ca:	462a      	mov	r2, r5
 80059cc:	4b05      	ldr	r3, [pc, #20]	@ (80059e4 <_svfiprintf_r+0x1f0>)
 80059ce:	a904      	add	r1, sp, #16
 80059d0:	4638      	mov	r0, r7
 80059d2:	f000 f9bb 	bl	8005d4c <_printf_i>
 80059d6:	e7ed      	b.n	80059b4 <_svfiprintf_r+0x1c0>
 80059d8:	080066ce 	.word	0x080066ce
 80059dc:	080066d8 	.word	0x080066d8
 80059e0:	00000000 	.word	0x00000000
 80059e4:	0800573d 	.word	0x0800573d
 80059e8:	080066d4 	.word	0x080066d4

080059ec <__sfputc_r>:
 80059ec:	6893      	ldr	r3, [r2, #8]
 80059ee:	3b01      	subs	r3, #1
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	b410      	push	{r4}
 80059f4:	6093      	str	r3, [r2, #8]
 80059f6:	da08      	bge.n	8005a0a <__sfputc_r+0x1e>
 80059f8:	6994      	ldr	r4, [r2, #24]
 80059fa:	42a3      	cmp	r3, r4
 80059fc:	db01      	blt.n	8005a02 <__sfputc_r+0x16>
 80059fe:	290a      	cmp	r1, #10
 8005a00:	d103      	bne.n	8005a0a <__sfputc_r+0x1e>
 8005a02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a06:	f7ff bba2 	b.w	800514e <__swbuf_r>
 8005a0a:	6813      	ldr	r3, [r2, #0]
 8005a0c:	1c58      	adds	r0, r3, #1
 8005a0e:	6010      	str	r0, [r2, #0]
 8005a10:	7019      	strb	r1, [r3, #0]
 8005a12:	4608      	mov	r0, r1
 8005a14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a18:	4770      	bx	lr

08005a1a <__sfputs_r>:
 8005a1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a1c:	4606      	mov	r6, r0
 8005a1e:	460f      	mov	r7, r1
 8005a20:	4614      	mov	r4, r2
 8005a22:	18d5      	adds	r5, r2, r3
 8005a24:	42ac      	cmp	r4, r5
 8005a26:	d101      	bne.n	8005a2c <__sfputs_r+0x12>
 8005a28:	2000      	movs	r0, #0
 8005a2a:	e007      	b.n	8005a3c <__sfputs_r+0x22>
 8005a2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a30:	463a      	mov	r2, r7
 8005a32:	4630      	mov	r0, r6
 8005a34:	f7ff ffda 	bl	80059ec <__sfputc_r>
 8005a38:	1c43      	adds	r3, r0, #1
 8005a3a:	d1f3      	bne.n	8005a24 <__sfputs_r+0xa>
 8005a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a40 <_vfiprintf_r>:
 8005a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a44:	460d      	mov	r5, r1
 8005a46:	b09d      	sub	sp, #116	@ 0x74
 8005a48:	4614      	mov	r4, r2
 8005a4a:	4698      	mov	r8, r3
 8005a4c:	4606      	mov	r6, r0
 8005a4e:	b118      	cbz	r0, 8005a58 <_vfiprintf_r+0x18>
 8005a50:	6a03      	ldr	r3, [r0, #32]
 8005a52:	b90b      	cbnz	r3, 8005a58 <_vfiprintf_r+0x18>
 8005a54:	f7ff fa72 	bl	8004f3c <__sinit>
 8005a58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a5a:	07d9      	lsls	r1, r3, #31
 8005a5c:	d405      	bmi.n	8005a6a <_vfiprintf_r+0x2a>
 8005a5e:	89ab      	ldrh	r3, [r5, #12]
 8005a60:	059a      	lsls	r2, r3, #22
 8005a62:	d402      	bmi.n	8005a6a <_vfiprintf_r+0x2a>
 8005a64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a66:	f7ff fd32 	bl	80054ce <__retarget_lock_acquire_recursive>
 8005a6a:	89ab      	ldrh	r3, [r5, #12]
 8005a6c:	071b      	lsls	r3, r3, #28
 8005a6e:	d501      	bpl.n	8005a74 <_vfiprintf_r+0x34>
 8005a70:	692b      	ldr	r3, [r5, #16]
 8005a72:	b99b      	cbnz	r3, 8005a9c <_vfiprintf_r+0x5c>
 8005a74:	4629      	mov	r1, r5
 8005a76:	4630      	mov	r0, r6
 8005a78:	f7ff fba8 	bl	80051cc <__swsetup_r>
 8005a7c:	b170      	cbz	r0, 8005a9c <_vfiprintf_r+0x5c>
 8005a7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005a80:	07dc      	lsls	r4, r3, #31
 8005a82:	d504      	bpl.n	8005a8e <_vfiprintf_r+0x4e>
 8005a84:	f04f 30ff 	mov.w	r0, #4294967295
 8005a88:	b01d      	add	sp, #116	@ 0x74
 8005a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a8e:	89ab      	ldrh	r3, [r5, #12]
 8005a90:	0598      	lsls	r0, r3, #22
 8005a92:	d4f7      	bmi.n	8005a84 <_vfiprintf_r+0x44>
 8005a94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005a96:	f7ff fd1b 	bl	80054d0 <__retarget_lock_release_recursive>
 8005a9a:	e7f3      	b.n	8005a84 <_vfiprintf_r+0x44>
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005aa0:	2320      	movs	r3, #32
 8005aa2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005aa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005aaa:	2330      	movs	r3, #48	@ 0x30
 8005aac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005c5c <_vfiprintf_r+0x21c>
 8005ab0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005ab4:	f04f 0901 	mov.w	r9, #1
 8005ab8:	4623      	mov	r3, r4
 8005aba:	469a      	mov	sl, r3
 8005abc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ac0:	b10a      	cbz	r2, 8005ac6 <_vfiprintf_r+0x86>
 8005ac2:	2a25      	cmp	r2, #37	@ 0x25
 8005ac4:	d1f9      	bne.n	8005aba <_vfiprintf_r+0x7a>
 8005ac6:	ebba 0b04 	subs.w	fp, sl, r4
 8005aca:	d00b      	beq.n	8005ae4 <_vfiprintf_r+0xa4>
 8005acc:	465b      	mov	r3, fp
 8005ace:	4622      	mov	r2, r4
 8005ad0:	4629      	mov	r1, r5
 8005ad2:	4630      	mov	r0, r6
 8005ad4:	f7ff ffa1 	bl	8005a1a <__sfputs_r>
 8005ad8:	3001      	adds	r0, #1
 8005ada:	f000 80a7 	beq.w	8005c2c <_vfiprintf_r+0x1ec>
 8005ade:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ae0:	445a      	add	r2, fp
 8005ae2:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ae4:	f89a 3000 	ldrb.w	r3, [sl]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f000 809f 	beq.w	8005c2c <_vfiprintf_r+0x1ec>
 8005aee:	2300      	movs	r3, #0
 8005af0:	f04f 32ff 	mov.w	r2, #4294967295
 8005af4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005af8:	f10a 0a01 	add.w	sl, sl, #1
 8005afc:	9304      	str	r3, [sp, #16]
 8005afe:	9307      	str	r3, [sp, #28]
 8005b00:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005b04:	931a      	str	r3, [sp, #104]	@ 0x68
 8005b06:	4654      	mov	r4, sl
 8005b08:	2205      	movs	r2, #5
 8005b0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b0e:	4853      	ldr	r0, [pc, #332]	@ (8005c5c <_vfiprintf_r+0x21c>)
 8005b10:	f7fa fb7e 	bl	8000210 <memchr>
 8005b14:	9a04      	ldr	r2, [sp, #16]
 8005b16:	b9d8      	cbnz	r0, 8005b50 <_vfiprintf_r+0x110>
 8005b18:	06d1      	lsls	r1, r2, #27
 8005b1a:	bf44      	itt	mi
 8005b1c:	2320      	movmi	r3, #32
 8005b1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b22:	0713      	lsls	r3, r2, #28
 8005b24:	bf44      	itt	mi
 8005b26:	232b      	movmi	r3, #43	@ 0x2b
 8005b28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005b2c:	f89a 3000 	ldrb.w	r3, [sl]
 8005b30:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b32:	d015      	beq.n	8005b60 <_vfiprintf_r+0x120>
 8005b34:	9a07      	ldr	r2, [sp, #28]
 8005b36:	4654      	mov	r4, sl
 8005b38:	2000      	movs	r0, #0
 8005b3a:	f04f 0c0a 	mov.w	ip, #10
 8005b3e:	4621      	mov	r1, r4
 8005b40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b44:	3b30      	subs	r3, #48	@ 0x30
 8005b46:	2b09      	cmp	r3, #9
 8005b48:	d94b      	bls.n	8005be2 <_vfiprintf_r+0x1a2>
 8005b4a:	b1b0      	cbz	r0, 8005b7a <_vfiprintf_r+0x13a>
 8005b4c:	9207      	str	r2, [sp, #28]
 8005b4e:	e014      	b.n	8005b7a <_vfiprintf_r+0x13a>
 8005b50:	eba0 0308 	sub.w	r3, r0, r8
 8005b54:	fa09 f303 	lsl.w	r3, r9, r3
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	9304      	str	r3, [sp, #16]
 8005b5c:	46a2      	mov	sl, r4
 8005b5e:	e7d2      	b.n	8005b06 <_vfiprintf_r+0xc6>
 8005b60:	9b03      	ldr	r3, [sp, #12]
 8005b62:	1d19      	adds	r1, r3, #4
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	9103      	str	r1, [sp, #12]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	bfbb      	ittet	lt
 8005b6c:	425b      	neglt	r3, r3
 8005b6e:	f042 0202 	orrlt.w	r2, r2, #2
 8005b72:	9307      	strge	r3, [sp, #28]
 8005b74:	9307      	strlt	r3, [sp, #28]
 8005b76:	bfb8      	it	lt
 8005b78:	9204      	strlt	r2, [sp, #16]
 8005b7a:	7823      	ldrb	r3, [r4, #0]
 8005b7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b7e:	d10a      	bne.n	8005b96 <_vfiprintf_r+0x156>
 8005b80:	7863      	ldrb	r3, [r4, #1]
 8005b82:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b84:	d132      	bne.n	8005bec <_vfiprintf_r+0x1ac>
 8005b86:	9b03      	ldr	r3, [sp, #12]
 8005b88:	1d1a      	adds	r2, r3, #4
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	9203      	str	r2, [sp, #12]
 8005b8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005b92:	3402      	adds	r4, #2
 8005b94:	9305      	str	r3, [sp, #20]
 8005b96:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005c6c <_vfiprintf_r+0x22c>
 8005b9a:	7821      	ldrb	r1, [r4, #0]
 8005b9c:	2203      	movs	r2, #3
 8005b9e:	4650      	mov	r0, sl
 8005ba0:	f7fa fb36 	bl	8000210 <memchr>
 8005ba4:	b138      	cbz	r0, 8005bb6 <_vfiprintf_r+0x176>
 8005ba6:	9b04      	ldr	r3, [sp, #16]
 8005ba8:	eba0 000a 	sub.w	r0, r0, sl
 8005bac:	2240      	movs	r2, #64	@ 0x40
 8005bae:	4082      	lsls	r2, r0
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	3401      	adds	r4, #1
 8005bb4:	9304      	str	r3, [sp, #16]
 8005bb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bba:	4829      	ldr	r0, [pc, #164]	@ (8005c60 <_vfiprintf_r+0x220>)
 8005bbc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005bc0:	2206      	movs	r2, #6
 8005bc2:	f7fa fb25 	bl	8000210 <memchr>
 8005bc6:	2800      	cmp	r0, #0
 8005bc8:	d03f      	beq.n	8005c4a <_vfiprintf_r+0x20a>
 8005bca:	4b26      	ldr	r3, [pc, #152]	@ (8005c64 <_vfiprintf_r+0x224>)
 8005bcc:	bb1b      	cbnz	r3, 8005c16 <_vfiprintf_r+0x1d6>
 8005bce:	9b03      	ldr	r3, [sp, #12]
 8005bd0:	3307      	adds	r3, #7
 8005bd2:	f023 0307 	bic.w	r3, r3, #7
 8005bd6:	3308      	adds	r3, #8
 8005bd8:	9303      	str	r3, [sp, #12]
 8005bda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bdc:	443b      	add	r3, r7
 8005bde:	9309      	str	r3, [sp, #36]	@ 0x24
 8005be0:	e76a      	b.n	8005ab8 <_vfiprintf_r+0x78>
 8005be2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005be6:	460c      	mov	r4, r1
 8005be8:	2001      	movs	r0, #1
 8005bea:	e7a8      	b.n	8005b3e <_vfiprintf_r+0xfe>
 8005bec:	2300      	movs	r3, #0
 8005bee:	3401      	adds	r4, #1
 8005bf0:	9305      	str	r3, [sp, #20]
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	f04f 0c0a 	mov.w	ip, #10
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bfe:	3a30      	subs	r2, #48	@ 0x30
 8005c00:	2a09      	cmp	r2, #9
 8005c02:	d903      	bls.n	8005c0c <_vfiprintf_r+0x1cc>
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d0c6      	beq.n	8005b96 <_vfiprintf_r+0x156>
 8005c08:	9105      	str	r1, [sp, #20]
 8005c0a:	e7c4      	b.n	8005b96 <_vfiprintf_r+0x156>
 8005c0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c10:	4604      	mov	r4, r0
 8005c12:	2301      	movs	r3, #1
 8005c14:	e7f0      	b.n	8005bf8 <_vfiprintf_r+0x1b8>
 8005c16:	ab03      	add	r3, sp, #12
 8005c18:	9300      	str	r3, [sp, #0]
 8005c1a:	462a      	mov	r2, r5
 8005c1c:	4b12      	ldr	r3, [pc, #72]	@ (8005c68 <_vfiprintf_r+0x228>)
 8005c1e:	a904      	add	r1, sp, #16
 8005c20:	4630      	mov	r0, r6
 8005c22:	f3af 8000 	nop.w
 8005c26:	4607      	mov	r7, r0
 8005c28:	1c78      	adds	r0, r7, #1
 8005c2a:	d1d6      	bne.n	8005bda <_vfiprintf_r+0x19a>
 8005c2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c2e:	07d9      	lsls	r1, r3, #31
 8005c30:	d405      	bmi.n	8005c3e <_vfiprintf_r+0x1fe>
 8005c32:	89ab      	ldrh	r3, [r5, #12]
 8005c34:	059a      	lsls	r2, r3, #22
 8005c36:	d402      	bmi.n	8005c3e <_vfiprintf_r+0x1fe>
 8005c38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c3a:	f7ff fc49 	bl	80054d0 <__retarget_lock_release_recursive>
 8005c3e:	89ab      	ldrh	r3, [r5, #12]
 8005c40:	065b      	lsls	r3, r3, #25
 8005c42:	f53f af1f 	bmi.w	8005a84 <_vfiprintf_r+0x44>
 8005c46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005c48:	e71e      	b.n	8005a88 <_vfiprintf_r+0x48>
 8005c4a:	ab03      	add	r3, sp, #12
 8005c4c:	9300      	str	r3, [sp, #0]
 8005c4e:	462a      	mov	r2, r5
 8005c50:	4b05      	ldr	r3, [pc, #20]	@ (8005c68 <_vfiprintf_r+0x228>)
 8005c52:	a904      	add	r1, sp, #16
 8005c54:	4630      	mov	r0, r6
 8005c56:	f000 f879 	bl	8005d4c <_printf_i>
 8005c5a:	e7e4      	b.n	8005c26 <_vfiprintf_r+0x1e6>
 8005c5c:	080066ce 	.word	0x080066ce
 8005c60:	080066d8 	.word	0x080066d8
 8005c64:	00000000 	.word	0x00000000
 8005c68:	08005a1b 	.word	0x08005a1b
 8005c6c:	080066d4 	.word	0x080066d4

08005c70 <_printf_common>:
 8005c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c74:	4616      	mov	r6, r2
 8005c76:	4698      	mov	r8, r3
 8005c78:	688a      	ldr	r2, [r1, #8]
 8005c7a:	690b      	ldr	r3, [r1, #16]
 8005c7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c80:	4293      	cmp	r3, r2
 8005c82:	bfb8      	it	lt
 8005c84:	4613      	movlt	r3, r2
 8005c86:	6033      	str	r3, [r6, #0]
 8005c88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c8c:	4607      	mov	r7, r0
 8005c8e:	460c      	mov	r4, r1
 8005c90:	b10a      	cbz	r2, 8005c96 <_printf_common+0x26>
 8005c92:	3301      	adds	r3, #1
 8005c94:	6033      	str	r3, [r6, #0]
 8005c96:	6823      	ldr	r3, [r4, #0]
 8005c98:	0699      	lsls	r1, r3, #26
 8005c9a:	bf42      	ittt	mi
 8005c9c:	6833      	ldrmi	r3, [r6, #0]
 8005c9e:	3302      	addmi	r3, #2
 8005ca0:	6033      	strmi	r3, [r6, #0]
 8005ca2:	6825      	ldr	r5, [r4, #0]
 8005ca4:	f015 0506 	ands.w	r5, r5, #6
 8005ca8:	d106      	bne.n	8005cb8 <_printf_common+0x48>
 8005caa:	f104 0a19 	add.w	sl, r4, #25
 8005cae:	68e3      	ldr	r3, [r4, #12]
 8005cb0:	6832      	ldr	r2, [r6, #0]
 8005cb2:	1a9b      	subs	r3, r3, r2
 8005cb4:	42ab      	cmp	r3, r5
 8005cb6:	dc26      	bgt.n	8005d06 <_printf_common+0x96>
 8005cb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005cbc:	6822      	ldr	r2, [r4, #0]
 8005cbe:	3b00      	subs	r3, #0
 8005cc0:	bf18      	it	ne
 8005cc2:	2301      	movne	r3, #1
 8005cc4:	0692      	lsls	r2, r2, #26
 8005cc6:	d42b      	bmi.n	8005d20 <_printf_common+0xb0>
 8005cc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ccc:	4641      	mov	r1, r8
 8005cce:	4638      	mov	r0, r7
 8005cd0:	47c8      	blx	r9
 8005cd2:	3001      	adds	r0, #1
 8005cd4:	d01e      	beq.n	8005d14 <_printf_common+0xa4>
 8005cd6:	6823      	ldr	r3, [r4, #0]
 8005cd8:	6922      	ldr	r2, [r4, #16]
 8005cda:	f003 0306 	and.w	r3, r3, #6
 8005cde:	2b04      	cmp	r3, #4
 8005ce0:	bf02      	ittt	eq
 8005ce2:	68e5      	ldreq	r5, [r4, #12]
 8005ce4:	6833      	ldreq	r3, [r6, #0]
 8005ce6:	1aed      	subeq	r5, r5, r3
 8005ce8:	68a3      	ldr	r3, [r4, #8]
 8005cea:	bf0c      	ite	eq
 8005cec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cf0:	2500      	movne	r5, #0
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	bfc4      	itt	gt
 8005cf6:	1a9b      	subgt	r3, r3, r2
 8005cf8:	18ed      	addgt	r5, r5, r3
 8005cfa:	2600      	movs	r6, #0
 8005cfc:	341a      	adds	r4, #26
 8005cfe:	42b5      	cmp	r5, r6
 8005d00:	d11a      	bne.n	8005d38 <_printf_common+0xc8>
 8005d02:	2000      	movs	r0, #0
 8005d04:	e008      	b.n	8005d18 <_printf_common+0xa8>
 8005d06:	2301      	movs	r3, #1
 8005d08:	4652      	mov	r2, sl
 8005d0a:	4641      	mov	r1, r8
 8005d0c:	4638      	mov	r0, r7
 8005d0e:	47c8      	blx	r9
 8005d10:	3001      	adds	r0, #1
 8005d12:	d103      	bne.n	8005d1c <_printf_common+0xac>
 8005d14:	f04f 30ff 	mov.w	r0, #4294967295
 8005d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d1c:	3501      	adds	r5, #1
 8005d1e:	e7c6      	b.n	8005cae <_printf_common+0x3e>
 8005d20:	18e1      	adds	r1, r4, r3
 8005d22:	1c5a      	adds	r2, r3, #1
 8005d24:	2030      	movs	r0, #48	@ 0x30
 8005d26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d2a:	4422      	add	r2, r4
 8005d2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d34:	3302      	adds	r3, #2
 8005d36:	e7c7      	b.n	8005cc8 <_printf_common+0x58>
 8005d38:	2301      	movs	r3, #1
 8005d3a:	4622      	mov	r2, r4
 8005d3c:	4641      	mov	r1, r8
 8005d3e:	4638      	mov	r0, r7
 8005d40:	47c8      	blx	r9
 8005d42:	3001      	adds	r0, #1
 8005d44:	d0e6      	beq.n	8005d14 <_printf_common+0xa4>
 8005d46:	3601      	adds	r6, #1
 8005d48:	e7d9      	b.n	8005cfe <_printf_common+0x8e>
	...

08005d4c <_printf_i>:
 8005d4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d50:	7e0f      	ldrb	r7, [r1, #24]
 8005d52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d54:	2f78      	cmp	r7, #120	@ 0x78
 8005d56:	4691      	mov	r9, r2
 8005d58:	4680      	mov	r8, r0
 8005d5a:	460c      	mov	r4, r1
 8005d5c:	469a      	mov	sl, r3
 8005d5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d62:	d807      	bhi.n	8005d74 <_printf_i+0x28>
 8005d64:	2f62      	cmp	r7, #98	@ 0x62
 8005d66:	d80a      	bhi.n	8005d7e <_printf_i+0x32>
 8005d68:	2f00      	cmp	r7, #0
 8005d6a:	f000 80d2 	beq.w	8005f12 <_printf_i+0x1c6>
 8005d6e:	2f58      	cmp	r7, #88	@ 0x58
 8005d70:	f000 80b9 	beq.w	8005ee6 <_printf_i+0x19a>
 8005d74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d7c:	e03a      	b.n	8005df4 <_printf_i+0xa8>
 8005d7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d82:	2b15      	cmp	r3, #21
 8005d84:	d8f6      	bhi.n	8005d74 <_printf_i+0x28>
 8005d86:	a101      	add	r1, pc, #4	@ (adr r1, 8005d8c <_printf_i+0x40>)
 8005d88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d8c:	08005de5 	.word	0x08005de5
 8005d90:	08005df9 	.word	0x08005df9
 8005d94:	08005d75 	.word	0x08005d75
 8005d98:	08005d75 	.word	0x08005d75
 8005d9c:	08005d75 	.word	0x08005d75
 8005da0:	08005d75 	.word	0x08005d75
 8005da4:	08005df9 	.word	0x08005df9
 8005da8:	08005d75 	.word	0x08005d75
 8005dac:	08005d75 	.word	0x08005d75
 8005db0:	08005d75 	.word	0x08005d75
 8005db4:	08005d75 	.word	0x08005d75
 8005db8:	08005ef9 	.word	0x08005ef9
 8005dbc:	08005e23 	.word	0x08005e23
 8005dc0:	08005eb3 	.word	0x08005eb3
 8005dc4:	08005d75 	.word	0x08005d75
 8005dc8:	08005d75 	.word	0x08005d75
 8005dcc:	08005f1b 	.word	0x08005f1b
 8005dd0:	08005d75 	.word	0x08005d75
 8005dd4:	08005e23 	.word	0x08005e23
 8005dd8:	08005d75 	.word	0x08005d75
 8005ddc:	08005d75 	.word	0x08005d75
 8005de0:	08005ebb 	.word	0x08005ebb
 8005de4:	6833      	ldr	r3, [r6, #0]
 8005de6:	1d1a      	adds	r2, r3, #4
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	6032      	str	r2, [r6, #0]
 8005dec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005df0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005df4:	2301      	movs	r3, #1
 8005df6:	e09d      	b.n	8005f34 <_printf_i+0x1e8>
 8005df8:	6833      	ldr	r3, [r6, #0]
 8005dfa:	6820      	ldr	r0, [r4, #0]
 8005dfc:	1d19      	adds	r1, r3, #4
 8005dfe:	6031      	str	r1, [r6, #0]
 8005e00:	0606      	lsls	r6, r0, #24
 8005e02:	d501      	bpl.n	8005e08 <_printf_i+0xbc>
 8005e04:	681d      	ldr	r5, [r3, #0]
 8005e06:	e003      	b.n	8005e10 <_printf_i+0xc4>
 8005e08:	0645      	lsls	r5, r0, #25
 8005e0a:	d5fb      	bpl.n	8005e04 <_printf_i+0xb8>
 8005e0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e10:	2d00      	cmp	r5, #0
 8005e12:	da03      	bge.n	8005e1c <_printf_i+0xd0>
 8005e14:	232d      	movs	r3, #45	@ 0x2d
 8005e16:	426d      	negs	r5, r5
 8005e18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e1c:	4859      	ldr	r0, [pc, #356]	@ (8005f84 <_printf_i+0x238>)
 8005e1e:	230a      	movs	r3, #10
 8005e20:	e011      	b.n	8005e46 <_printf_i+0xfa>
 8005e22:	6821      	ldr	r1, [r4, #0]
 8005e24:	6833      	ldr	r3, [r6, #0]
 8005e26:	0608      	lsls	r0, r1, #24
 8005e28:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e2c:	d402      	bmi.n	8005e34 <_printf_i+0xe8>
 8005e2e:	0649      	lsls	r1, r1, #25
 8005e30:	bf48      	it	mi
 8005e32:	b2ad      	uxthmi	r5, r5
 8005e34:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e36:	4853      	ldr	r0, [pc, #332]	@ (8005f84 <_printf_i+0x238>)
 8005e38:	6033      	str	r3, [r6, #0]
 8005e3a:	bf14      	ite	ne
 8005e3c:	230a      	movne	r3, #10
 8005e3e:	2308      	moveq	r3, #8
 8005e40:	2100      	movs	r1, #0
 8005e42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e46:	6866      	ldr	r6, [r4, #4]
 8005e48:	60a6      	str	r6, [r4, #8]
 8005e4a:	2e00      	cmp	r6, #0
 8005e4c:	bfa2      	ittt	ge
 8005e4e:	6821      	ldrge	r1, [r4, #0]
 8005e50:	f021 0104 	bicge.w	r1, r1, #4
 8005e54:	6021      	strge	r1, [r4, #0]
 8005e56:	b90d      	cbnz	r5, 8005e5c <_printf_i+0x110>
 8005e58:	2e00      	cmp	r6, #0
 8005e5a:	d04b      	beq.n	8005ef4 <_printf_i+0x1a8>
 8005e5c:	4616      	mov	r6, r2
 8005e5e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e62:	fb03 5711 	mls	r7, r3, r1, r5
 8005e66:	5dc7      	ldrb	r7, [r0, r7]
 8005e68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e6c:	462f      	mov	r7, r5
 8005e6e:	42bb      	cmp	r3, r7
 8005e70:	460d      	mov	r5, r1
 8005e72:	d9f4      	bls.n	8005e5e <_printf_i+0x112>
 8005e74:	2b08      	cmp	r3, #8
 8005e76:	d10b      	bne.n	8005e90 <_printf_i+0x144>
 8005e78:	6823      	ldr	r3, [r4, #0]
 8005e7a:	07df      	lsls	r7, r3, #31
 8005e7c:	d508      	bpl.n	8005e90 <_printf_i+0x144>
 8005e7e:	6923      	ldr	r3, [r4, #16]
 8005e80:	6861      	ldr	r1, [r4, #4]
 8005e82:	4299      	cmp	r1, r3
 8005e84:	bfde      	ittt	le
 8005e86:	2330      	movle	r3, #48	@ 0x30
 8005e88:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e8c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e90:	1b92      	subs	r2, r2, r6
 8005e92:	6122      	str	r2, [r4, #16]
 8005e94:	f8cd a000 	str.w	sl, [sp]
 8005e98:	464b      	mov	r3, r9
 8005e9a:	aa03      	add	r2, sp, #12
 8005e9c:	4621      	mov	r1, r4
 8005e9e:	4640      	mov	r0, r8
 8005ea0:	f7ff fee6 	bl	8005c70 <_printf_common>
 8005ea4:	3001      	adds	r0, #1
 8005ea6:	d14a      	bne.n	8005f3e <_printf_i+0x1f2>
 8005ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8005eac:	b004      	add	sp, #16
 8005eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eb2:	6823      	ldr	r3, [r4, #0]
 8005eb4:	f043 0320 	orr.w	r3, r3, #32
 8005eb8:	6023      	str	r3, [r4, #0]
 8005eba:	4833      	ldr	r0, [pc, #204]	@ (8005f88 <_printf_i+0x23c>)
 8005ebc:	2778      	movs	r7, #120	@ 0x78
 8005ebe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ec2:	6823      	ldr	r3, [r4, #0]
 8005ec4:	6831      	ldr	r1, [r6, #0]
 8005ec6:	061f      	lsls	r7, r3, #24
 8005ec8:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ecc:	d402      	bmi.n	8005ed4 <_printf_i+0x188>
 8005ece:	065f      	lsls	r7, r3, #25
 8005ed0:	bf48      	it	mi
 8005ed2:	b2ad      	uxthmi	r5, r5
 8005ed4:	6031      	str	r1, [r6, #0]
 8005ed6:	07d9      	lsls	r1, r3, #31
 8005ed8:	bf44      	itt	mi
 8005eda:	f043 0320 	orrmi.w	r3, r3, #32
 8005ede:	6023      	strmi	r3, [r4, #0]
 8005ee0:	b11d      	cbz	r5, 8005eea <_printf_i+0x19e>
 8005ee2:	2310      	movs	r3, #16
 8005ee4:	e7ac      	b.n	8005e40 <_printf_i+0xf4>
 8005ee6:	4827      	ldr	r0, [pc, #156]	@ (8005f84 <_printf_i+0x238>)
 8005ee8:	e7e9      	b.n	8005ebe <_printf_i+0x172>
 8005eea:	6823      	ldr	r3, [r4, #0]
 8005eec:	f023 0320 	bic.w	r3, r3, #32
 8005ef0:	6023      	str	r3, [r4, #0]
 8005ef2:	e7f6      	b.n	8005ee2 <_printf_i+0x196>
 8005ef4:	4616      	mov	r6, r2
 8005ef6:	e7bd      	b.n	8005e74 <_printf_i+0x128>
 8005ef8:	6833      	ldr	r3, [r6, #0]
 8005efa:	6825      	ldr	r5, [r4, #0]
 8005efc:	6961      	ldr	r1, [r4, #20]
 8005efe:	1d18      	adds	r0, r3, #4
 8005f00:	6030      	str	r0, [r6, #0]
 8005f02:	062e      	lsls	r6, r5, #24
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	d501      	bpl.n	8005f0c <_printf_i+0x1c0>
 8005f08:	6019      	str	r1, [r3, #0]
 8005f0a:	e002      	b.n	8005f12 <_printf_i+0x1c6>
 8005f0c:	0668      	lsls	r0, r5, #25
 8005f0e:	d5fb      	bpl.n	8005f08 <_printf_i+0x1bc>
 8005f10:	8019      	strh	r1, [r3, #0]
 8005f12:	2300      	movs	r3, #0
 8005f14:	6123      	str	r3, [r4, #16]
 8005f16:	4616      	mov	r6, r2
 8005f18:	e7bc      	b.n	8005e94 <_printf_i+0x148>
 8005f1a:	6833      	ldr	r3, [r6, #0]
 8005f1c:	1d1a      	adds	r2, r3, #4
 8005f1e:	6032      	str	r2, [r6, #0]
 8005f20:	681e      	ldr	r6, [r3, #0]
 8005f22:	6862      	ldr	r2, [r4, #4]
 8005f24:	2100      	movs	r1, #0
 8005f26:	4630      	mov	r0, r6
 8005f28:	f7fa f972 	bl	8000210 <memchr>
 8005f2c:	b108      	cbz	r0, 8005f32 <_printf_i+0x1e6>
 8005f2e:	1b80      	subs	r0, r0, r6
 8005f30:	6060      	str	r0, [r4, #4]
 8005f32:	6863      	ldr	r3, [r4, #4]
 8005f34:	6123      	str	r3, [r4, #16]
 8005f36:	2300      	movs	r3, #0
 8005f38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f3c:	e7aa      	b.n	8005e94 <_printf_i+0x148>
 8005f3e:	6923      	ldr	r3, [r4, #16]
 8005f40:	4632      	mov	r2, r6
 8005f42:	4649      	mov	r1, r9
 8005f44:	4640      	mov	r0, r8
 8005f46:	47d0      	blx	sl
 8005f48:	3001      	adds	r0, #1
 8005f4a:	d0ad      	beq.n	8005ea8 <_printf_i+0x15c>
 8005f4c:	6823      	ldr	r3, [r4, #0]
 8005f4e:	079b      	lsls	r3, r3, #30
 8005f50:	d413      	bmi.n	8005f7a <_printf_i+0x22e>
 8005f52:	68e0      	ldr	r0, [r4, #12]
 8005f54:	9b03      	ldr	r3, [sp, #12]
 8005f56:	4298      	cmp	r0, r3
 8005f58:	bfb8      	it	lt
 8005f5a:	4618      	movlt	r0, r3
 8005f5c:	e7a6      	b.n	8005eac <_printf_i+0x160>
 8005f5e:	2301      	movs	r3, #1
 8005f60:	4632      	mov	r2, r6
 8005f62:	4649      	mov	r1, r9
 8005f64:	4640      	mov	r0, r8
 8005f66:	47d0      	blx	sl
 8005f68:	3001      	adds	r0, #1
 8005f6a:	d09d      	beq.n	8005ea8 <_printf_i+0x15c>
 8005f6c:	3501      	adds	r5, #1
 8005f6e:	68e3      	ldr	r3, [r4, #12]
 8005f70:	9903      	ldr	r1, [sp, #12]
 8005f72:	1a5b      	subs	r3, r3, r1
 8005f74:	42ab      	cmp	r3, r5
 8005f76:	dcf2      	bgt.n	8005f5e <_printf_i+0x212>
 8005f78:	e7eb      	b.n	8005f52 <_printf_i+0x206>
 8005f7a:	2500      	movs	r5, #0
 8005f7c:	f104 0619 	add.w	r6, r4, #25
 8005f80:	e7f5      	b.n	8005f6e <_printf_i+0x222>
 8005f82:	bf00      	nop
 8005f84:	080066df 	.word	0x080066df
 8005f88:	080066f0 	.word	0x080066f0

08005f8c <__sflush_r>:
 8005f8c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f94:	0716      	lsls	r6, r2, #28
 8005f96:	4605      	mov	r5, r0
 8005f98:	460c      	mov	r4, r1
 8005f9a:	d454      	bmi.n	8006046 <__sflush_r+0xba>
 8005f9c:	684b      	ldr	r3, [r1, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	dc02      	bgt.n	8005fa8 <__sflush_r+0x1c>
 8005fa2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	dd48      	ble.n	800603a <__sflush_r+0xae>
 8005fa8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005faa:	2e00      	cmp	r6, #0
 8005fac:	d045      	beq.n	800603a <__sflush_r+0xae>
 8005fae:	2300      	movs	r3, #0
 8005fb0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005fb4:	682f      	ldr	r7, [r5, #0]
 8005fb6:	6a21      	ldr	r1, [r4, #32]
 8005fb8:	602b      	str	r3, [r5, #0]
 8005fba:	d030      	beq.n	800601e <__sflush_r+0x92>
 8005fbc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005fbe:	89a3      	ldrh	r3, [r4, #12]
 8005fc0:	0759      	lsls	r1, r3, #29
 8005fc2:	d505      	bpl.n	8005fd0 <__sflush_r+0x44>
 8005fc4:	6863      	ldr	r3, [r4, #4]
 8005fc6:	1ad2      	subs	r2, r2, r3
 8005fc8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005fca:	b10b      	cbz	r3, 8005fd0 <__sflush_r+0x44>
 8005fcc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005fce:	1ad2      	subs	r2, r2, r3
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005fd4:	6a21      	ldr	r1, [r4, #32]
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	47b0      	blx	r6
 8005fda:	1c43      	adds	r3, r0, #1
 8005fdc:	89a3      	ldrh	r3, [r4, #12]
 8005fde:	d106      	bne.n	8005fee <__sflush_r+0x62>
 8005fe0:	6829      	ldr	r1, [r5, #0]
 8005fe2:	291d      	cmp	r1, #29
 8005fe4:	d82b      	bhi.n	800603e <__sflush_r+0xb2>
 8005fe6:	4a2a      	ldr	r2, [pc, #168]	@ (8006090 <__sflush_r+0x104>)
 8005fe8:	410a      	asrs	r2, r1
 8005fea:	07d6      	lsls	r6, r2, #31
 8005fec:	d427      	bmi.n	800603e <__sflush_r+0xb2>
 8005fee:	2200      	movs	r2, #0
 8005ff0:	6062      	str	r2, [r4, #4]
 8005ff2:	04d9      	lsls	r1, r3, #19
 8005ff4:	6922      	ldr	r2, [r4, #16]
 8005ff6:	6022      	str	r2, [r4, #0]
 8005ff8:	d504      	bpl.n	8006004 <__sflush_r+0x78>
 8005ffa:	1c42      	adds	r2, r0, #1
 8005ffc:	d101      	bne.n	8006002 <__sflush_r+0x76>
 8005ffe:	682b      	ldr	r3, [r5, #0]
 8006000:	b903      	cbnz	r3, 8006004 <__sflush_r+0x78>
 8006002:	6560      	str	r0, [r4, #84]	@ 0x54
 8006004:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006006:	602f      	str	r7, [r5, #0]
 8006008:	b1b9      	cbz	r1, 800603a <__sflush_r+0xae>
 800600a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800600e:	4299      	cmp	r1, r3
 8006010:	d002      	beq.n	8006018 <__sflush_r+0x8c>
 8006012:	4628      	mov	r0, r5
 8006014:	f7ff fa92 	bl	800553c <_free_r>
 8006018:	2300      	movs	r3, #0
 800601a:	6363      	str	r3, [r4, #52]	@ 0x34
 800601c:	e00d      	b.n	800603a <__sflush_r+0xae>
 800601e:	2301      	movs	r3, #1
 8006020:	4628      	mov	r0, r5
 8006022:	47b0      	blx	r6
 8006024:	4602      	mov	r2, r0
 8006026:	1c50      	adds	r0, r2, #1
 8006028:	d1c9      	bne.n	8005fbe <__sflush_r+0x32>
 800602a:	682b      	ldr	r3, [r5, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d0c6      	beq.n	8005fbe <__sflush_r+0x32>
 8006030:	2b1d      	cmp	r3, #29
 8006032:	d001      	beq.n	8006038 <__sflush_r+0xac>
 8006034:	2b16      	cmp	r3, #22
 8006036:	d11e      	bne.n	8006076 <__sflush_r+0xea>
 8006038:	602f      	str	r7, [r5, #0]
 800603a:	2000      	movs	r0, #0
 800603c:	e022      	b.n	8006084 <__sflush_r+0xf8>
 800603e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006042:	b21b      	sxth	r3, r3
 8006044:	e01b      	b.n	800607e <__sflush_r+0xf2>
 8006046:	690f      	ldr	r7, [r1, #16]
 8006048:	2f00      	cmp	r7, #0
 800604a:	d0f6      	beq.n	800603a <__sflush_r+0xae>
 800604c:	0793      	lsls	r3, r2, #30
 800604e:	680e      	ldr	r6, [r1, #0]
 8006050:	bf08      	it	eq
 8006052:	694b      	ldreq	r3, [r1, #20]
 8006054:	600f      	str	r7, [r1, #0]
 8006056:	bf18      	it	ne
 8006058:	2300      	movne	r3, #0
 800605a:	eba6 0807 	sub.w	r8, r6, r7
 800605e:	608b      	str	r3, [r1, #8]
 8006060:	f1b8 0f00 	cmp.w	r8, #0
 8006064:	dde9      	ble.n	800603a <__sflush_r+0xae>
 8006066:	6a21      	ldr	r1, [r4, #32]
 8006068:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800606a:	4643      	mov	r3, r8
 800606c:	463a      	mov	r2, r7
 800606e:	4628      	mov	r0, r5
 8006070:	47b0      	blx	r6
 8006072:	2800      	cmp	r0, #0
 8006074:	dc08      	bgt.n	8006088 <__sflush_r+0xfc>
 8006076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800607a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800607e:	81a3      	strh	r3, [r4, #12]
 8006080:	f04f 30ff 	mov.w	r0, #4294967295
 8006084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006088:	4407      	add	r7, r0
 800608a:	eba8 0800 	sub.w	r8, r8, r0
 800608e:	e7e7      	b.n	8006060 <__sflush_r+0xd4>
 8006090:	dfbffffe 	.word	0xdfbffffe

08006094 <_fflush_r>:
 8006094:	b538      	push	{r3, r4, r5, lr}
 8006096:	690b      	ldr	r3, [r1, #16]
 8006098:	4605      	mov	r5, r0
 800609a:	460c      	mov	r4, r1
 800609c:	b913      	cbnz	r3, 80060a4 <_fflush_r+0x10>
 800609e:	2500      	movs	r5, #0
 80060a0:	4628      	mov	r0, r5
 80060a2:	bd38      	pop	{r3, r4, r5, pc}
 80060a4:	b118      	cbz	r0, 80060ae <_fflush_r+0x1a>
 80060a6:	6a03      	ldr	r3, [r0, #32]
 80060a8:	b90b      	cbnz	r3, 80060ae <_fflush_r+0x1a>
 80060aa:	f7fe ff47 	bl	8004f3c <__sinit>
 80060ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d0f3      	beq.n	800609e <_fflush_r+0xa>
 80060b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80060b8:	07d0      	lsls	r0, r2, #31
 80060ba:	d404      	bmi.n	80060c6 <_fflush_r+0x32>
 80060bc:	0599      	lsls	r1, r3, #22
 80060be:	d402      	bmi.n	80060c6 <_fflush_r+0x32>
 80060c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060c2:	f7ff fa04 	bl	80054ce <__retarget_lock_acquire_recursive>
 80060c6:	4628      	mov	r0, r5
 80060c8:	4621      	mov	r1, r4
 80060ca:	f7ff ff5f 	bl	8005f8c <__sflush_r>
 80060ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80060d0:	07da      	lsls	r2, r3, #31
 80060d2:	4605      	mov	r5, r0
 80060d4:	d4e4      	bmi.n	80060a0 <_fflush_r+0xc>
 80060d6:	89a3      	ldrh	r3, [r4, #12]
 80060d8:	059b      	lsls	r3, r3, #22
 80060da:	d4e1      	bmi.n	80060a0 <_fflush_r+0xc>
 80060dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060de:	f7ff f9f7 	bl	80054d0 <__retarget_lock_release_recursive>
 80060e2:	e7dd      	b.n	80060a0 <_fflush_r+0xc>

080060e4 <fiprintf>:
 80060e4:	b40e      	push	{r1, r2, r3}
 80060e6:	b503      	push	{r0, r1, lr}
 80060e8:	4601      	mov	r1, r0
 80060ea:	ab03      	add	r3, sp, #12
 80060ec:	4805      	ldr	r0, [pc, #20]	@ (8006104 <fiprintf+0x20>)
 80060ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80060f2:	6800      	ldr	r0, [r0, #0]
 80060f4:	9301      	str	r3, [sp, #4]
 80060f6:	f7ff fca3 	bl	8005a40 <_vfiprintf_r>
 80060fa:	b002      	add	sp, #8
 80060fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006100:	b003      	add	sp, #12
 8006102:	4770      	bx	lr
 8006104:	2000001c 	.word	0x2000001c

08006108 <__swhatbuf_r>:
 8006108:	b570      	push	{r4, r5, r6, lr}
 800610a:	460c      	mov	r4, r1
 800610c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006110:	2900      	cmp	r1, #0
 8006112:	b096      	sub	sp, #88	@ 0x58
 8006114:	4615      	mov	r5, r2
 8006116:	461e      	mov	r6, r3
 8006118:	da0d      	bge.n	8006136 <__swhatbuf_r+0x2e>
 800611a:	89a3      	ldrh	r3, [r4, #12]
 800611c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006120:	f04f 0100 	mov.w	r1, #0
 8006124:	bf14      	ite	ne
 8006126:	2340      	movne	r3, #64	@ 0x40
 8006128:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800612c:	2000      	movs	r0, #0
 800612e:	6031      	str	r1, [r6, #0]
 8006130:	602b      	str	r3, [r5, #0]
 8006132:	b016      	add	sp, #88	@ 0x58
 8006134:	bd70      	pop	{r4, r5, r6, pc}
 8006136:	466a      	mov	r2, sp
 8006138:	f000 f862 	bl	8006200 <_fstat_r>
 800613c:	2800      	cmp	r0, #0
 800613e:	dbec      	blt.n	800611a <__swhatbuf_r+0x12>
 8006140:	9901      	ldr	r1, [sp, #4]
 8006142:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006146:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800614a:	4259      	negs	r1, r3
 800614c:	4159      	adcs	r1, r3
 800614e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006152:	e7eb      	b.n	800612c <__swhatbuf_r+0x24>

08006154 <__smakebuf_r>:
 8006154:	898b      	ldrh	r3, [r1, #12]
 8006156:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006158:	079d      	lsls	r5, r3, #30
 800615a:	4606      	mov	r6, r0
 800615c:	460c      	mov	r4, r1
 800615e:	d507      	bpl.n	8006170 <__smakebuf_r+0x1c>
 8006160:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006164:	6023      	str	r3, [r4, #0]
 8006166:	6123      	str	r3, [r4, #16]
 8006168:	2301      	movs	r3, #1
 800616a:	6163      	str	r3, [r4, #20]
 800616c:	b003      	add	sp, #12
 800616e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006170:	ab01      	add	r3, sp, #4
 8006172:	466a      	mov	r2, sp
 8006174:	f7ff ffc8 	bl	8006108 <__swhatbuf_r>
 8006178:	9f00      	ldr	r7, [sp, #0]
 800617a:	4605      	mov	r5, r0
 800617c:	4639      	mov	r1, r7
 800617e:	4630      	mov	r0, r6
 8006180:	f7ff fa50 	bl	8005624 <_malloc_r>
 8006184:	b948      	cbnz	r0, 800619a <__smakebuf_r+0x46>
 8006186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800618a:	059a      	lsls	r2, r3, #22
 800618c:	d4ee      	bmi.n	800616c <__smakebuf_r+0x18>
 800618e:	f023 0303 	bic.w	r3, r3, #3
 8006192:	f043 0302 	orr.w	r3, r3, #2
 8006196:	81a3      	strh	r3, [r4, #12]
 8006198:	e7e2      	b.n	8006160 <__smakebuf_r+0xc>
 800619a:	89a3      	ldrh	r3, [r4, #12]
 800619c:	6020      	str	r0, [r4, #0]
 800619e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061a2:	81a3      	strh	r3, [r4, #12]
 80061a4:	9b01      	ldr	r3, [sp, #4]
 80061a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80061aa:	b15b      	cbz	r3, 80061c4 <__smakebuf_r+0x70>
 80061ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061b0:	4630      	mov	r0, r6
 80061b2:	f000 f837 	bl	8006224 <_isatty_r>
 80061b6:	b128      	cbz	r0, 80061c4 <__smakebuf_r+0x70>
 80061b8:	89a3      	ldrh	r3, [r4, #12]
 80061ba:	f023 0303 	bic.w	r3, r3, #3
 80061be:	f043 0301 	orr.w	r3, r3, #1
 80061c2:	81a3      	strh	r3, [r4, #12]
 80061c4:	89a3      	ldrh	r3, [r4, #12]
 80061c6:	431d      	orrs	r5, r3
 80061c8:	81a5      	strh	r5, [r4, #12]
 80061ca:	e7cf      	b.n	800616c <__smakebuf_r+0x18>

080061cc <memmove>:
 80061cc:	4288      	cmp	r0, r1
 80061ce:	b510      	push	{r4, lr}
 80061d0:	eb01 0402 	add.w	r4, r1, r2
 80061d4:	d902      	bls.n	80061dc <memmove+0x10>
 80061d6:	4284      	cmp	r4, r0
 80061d8:	4623      	mov	r3, r4
 80061da:	d807      	bhi.n	80061ec <memmove+0x20>
 80061dc:	1e43      	subs	r3, r0, #1
 80061de:	42a1      	cmp	r1, r4
 80061e0:	d008      	beq.n	80061f4 <memmove+0x28>
 80061e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061ea:	e7f8      	b.n	80061de <memmove+0x12>
 80061ec:	4402      	add	r2, r0
 80061ee:	4601      	mov	r1, r0
 80061f0:	428a      	cmp	r2, r1
 80061f2:	d100      	bne.n	80061f6 <memmove+0x2a>
 80061f4:	bd10      	pop	{r4, pc}
 80061f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80061fe:	e7f7      	b.n	80061f0 <memmove+0x24>

08006200 <_fstat_r>:
 8006200:	b538      	push	{r3, r4, r5, lr}
 8006202:	4d07      	ldr	r5, [pc, #28]	@ (8006220 <_fstat_r+0x20>)
 8006204:	2300      	movs	r3, #0
 8006206:	4604      	mov	r4, r0
 8006208:	4608      	mov	r0, r1
 800620a:	4611      	mov	r1, r2
 800620c:	602b      	str	r3, [r5, #0]
 800620e:	f7fa fd9d 	bl	8000d4c <_fstat>
 8006212:	1c43      	adds	r3, r0, #1
 8006214:	d102      	bne.n	800621c <_fstat_r+0x1c>
 8006216:	682b      	ldr	r3, [r5, #0]
 8006218:	b103      	cbz	r3, 800621c <_fstat_r+0x1c>
 800621a:	6023      	str	r3, [r4, #0]
 800621c:	bd38      	pop	{r3, r4, r5, pc}
 800621e:	bf00      	nop
 8006220:	20004314 	.word	0x20004314

08006224 <_isatty_r>:
 8006224:	b538      	push	{r3, r4, r5, lr}
 8006226:	4d06      	ldr	r5, [pc, #24]	@ (8006240 <_isatty_r+0x1c>)
 8006228:	2300      	movs	r3, #0
 800622a:	4604      	mov	r4, r0
 800622c:	4608      	mov	r0, r1
 800622e:	602b      	str	r3, [r5, #0]
 8006230:	f7fa fd9c 	bl	8000d6c <_isatty>
 8006234:	1c43      	adds	r3, r0, #1
 8006236:	d102      	bne.n	800623e <_isatty_r+0x1a>
 8006238:	682b      	ldr	r3, [r5, #0]
 800623a:	b103      	cbz	r3, 800623e <_isatty_r+0x1a>
 800623c:	6023      	str	r3, [r4, #0]
 800623e:	bd38      	pop	{r3, r4, r5, pc}
 8006240:	20004314 	.word	0x20004314

08006244 <_sbrk_r>:
 8006244:	b538      	push	{r3, r4, r5, lr}
 8006246:	4d06      	ldr	r5, [pc, #24]	@ (8006260 <_sbrk_r+0x1c>)
 8006248:	2300      	movs	r3, #0
 800624a:	4604      	mov	r4, r0
 800624c:	4608      	mov	r0, r1
 800624e:	602b      	str	r3, [r5, #0]
 8006250:	f7fa fda4 	bl	8000d9c <_sbrk>
 8006254:	1c43      	adds	r3, r0, #1
 8006256:	d102      	bne.n	800625e <_sbrk_r+0x1a>
 8006258:	682b      	ldr	r3, [r5, #0]
 800625a:	b103      	cbz	r3, 800625e <_sbrk_r+0x1a>
 800625c:	6023      	str	r3, [r4, #0]
 800625e:	bd38      	pop	{r3, r4, r5, pc}
 8006260:	20004314 	.word	0x20004314

08006264 <abort>:
 8006264:	b508      	push	{r3, lr}
 8006266:	2006      	movs	r0, #6
 8006268:	f000 f85a 	bl	8006320 <raise>
 800626c:	2001      	movs	r0, #1
 800626e:	f7fa fd1d 	bl	8000cac <_exit>

08006272 <_realloc_r>:
 8006272:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006276:	4680      	mov	r8, r0
 8006278:	4615      	mov	r5, r2
 800627a:	460c      	mov	r4, r1
 800627c:	b921      	cbnz	r1, 8006288 <_realloc_r+0x16>
 800627e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006282:	4611      	mov	r1, r2
 8006284:	f7ff b9ce 	b.w	8005624 <_malloc_r>
 8006288:	b92a      	cbnz	r2, 8006296 <_realloc_r+0x24>
 800628a:	f7ff f957 	bl	800553c <_free_r>
 800628e:	2400      	movs	r4, #0
 8006290:	4620      	mov	r0, r4
 8006292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006296:	f000 f85f 	bl	8006358 <_malloc_usable_size_r>
 800629a:	4285      	cmp	r5, r0
 800629c:	4606      	mov	r6, r0
 800629e:	d802      	bhi.n	80062a6 <_realloc_r+0x34>
 80062a0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80062a4:	d8f4      	bhi.n	8006290 <_realloc_r+0x1e>
 80062a6:	4629      	mov	r1, r5
 80062a8:	4640      	mov	r0, r8
 80062aa:	f7ff f9bb 	bl	8005624 <_malloc_r>
 80062ae:	4607      	mov	r7, r0
 80062b0:	2800      	cmp	r0, #0
 80062b2:	d0ec      	beq.n	800628e <_realloc_r+0x1c>
 80062b4:	42b5      	cmp	r5, r6
 80062b6:	462a      	mov	r2, r5
 80062b8:	4621      	mov	r1, r4
 80062ba:	bf28      	it	cs
 80062bc:	4632      	movcs	r2, r6
 80062be:	f7ff f910 	bl	80054e2 <memcpy>
 80062c2:	4621      	mov	r1, r4
 80062c4:	4640      	mov	r0, r8
 80062c6:	f7ff f939 	bl	800553c <_free_r>
 80062ca:	463c      	mov	r4, r7
 80062cc:	e7e0      	b.n	8006290 <_realloc_r+0x1e>

080062ce <_raise_r>:
 80062ce:	291f      	cmp	r1, #31
 80062d0:	b538      	push	{r3, r4, r5, lr}
 80062d2:	4605      	mov	r5, r0
 80062d4:	460c      	mov	r4, r1
 80062d6:	d904      	bls.n	80062e2 <_raise_r+0x14>
 80062d8:	2316      	movs	r3, #22
 80062da:	6003      	str	r3, [r0, #0]
 80062dc:	f04f 30ff 	mov.w	r0, #4294967295
 80062e0:	bd38      	pop	{r3, r4, r5, pc}
 80062e2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80062e4:	b112      	cbz	r2, 80062ec <_raise_r+0x1e>
 80062e6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80062ea:	b94b      	cbnz	r3, 8006300 <_raise_r+0x32>
 80062ec:	4628      	mov	r0, r5
 80062ee:	f000 f831 	bl	8006354 <_getpid_r>
 80062f2:	4622      	mov	r2, r4
 80062f4:	4601      	mov	r1, r0
 80062f6:	4628      	mov	r0, r5
 80062f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062fc:	f000 b818 	b.w	8006330 <_kill_r>
 8006300:	2b01      	cmp	r3, #1
 8006302:	d00a      	beq.n	800631a <_raise_r+0x4c>
 8006304:	1c59      	adds	r1, r3, #1
 8006306:	d103      	bne.n	8006310 <_raise_r+0x42>
 8006308:	2316      	movs	r3, #22
 800630a:	6003      	str	r3, [r0, #0]
 800630c:	2001      	movs	r0, #1
 800630e:	e7e7      	b.n	80062e0 <_raise_r+0x12>
 8006310:	2100      	movs	r1, #0
 8006312:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006316:	4620      	mov	r0, r4
 8006318:	4798      	blx	r3
 800631a:	2000      	movs	r0, #0
 800631c:	e7e0      	b.n	80062e0 <_raise_r+0x12>
	...

08006320 <raise>:
 8006320:	4b02      	ldr	r3, [pc, #8]	@ (800632c <raise+0xc>)
 8006322:	4601      	mov	r1, r0
 8006324:	6818      	ldr	r0, [r3, #0]
 8006326:	f7ff bfd2 	b.w	80062ce <_raise_r>
 800632a:	bf00      	nop
 800632c:	2000001c 	.word	0x2000001c

08006330 <_kill_r>:
 8006330:	b538      	push	{r3, r4, r5, lr}
 8006332:	4d07      	ldr	r5, [pc, #28]	@ (8006350 <_kill_r+0x20>)
 8006334:	2300      	movs	r3, #0
 8006336:	4604      	mov	r4, r0
 8006338:	4608      	mov	r0, r1
 800633a:	4611      	mov	r1, r2
 800633c:	602b      	str	r3, [r5, #0]
 800633e:	f7fa fca5 	bl	8000c8c <_kill>
 8006342:	1c43      	adds	r3, r0, #1
 8006344:	d102      	bne.n	800634c <_kill_r+0x1c>
 8006346:	682b      	ldr	r3, [r5, #0]
 8006348:	b103      	cbz	r3, 800634c <_kill_r+0x1c>
 800634a:	6023      	str	r3, [r4, #0]
 800634c:	bd38      	pop	{r3, r4, r5, pc}
 800634e:	bf00      	nop
 8006350:	20004314 	.word	0x20004314

08006354 <_getpid_r>:
 8006354:	f7fa bc92 	b.w	8000c7c <_getpid>

08006358 <_malloc_usable_size_r>:
 8006358:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800635c:	1f18      	subs	r0, r3, #4
 800635e:	2b00      	cmp	r3, #0
 8006360:	bfbc      	itt	lt
 8006362:	580b      	ldrlt	r3, [r1, r0]
 8006364:	18c0      	addlt	r0, r0, r3
 8006366:	4770      	bx	lr

08006368 <_init>:
 8006368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800636a:	bf00      	nop
 800636c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800636e:	bc08      	pop	{r3}
 8006370:	469e      	mov	lr, r3
 8006372:	4770      	bx	lr

08006374 <_fini>:
 8006374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006376:	bf00      	nop
 8006378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800637a:	bc08      	pop	{r3}
 800637c:	469e      	mov	lr, r3
 800637e:	4770      	bx	lr
