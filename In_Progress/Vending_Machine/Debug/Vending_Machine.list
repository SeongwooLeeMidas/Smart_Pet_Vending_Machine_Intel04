
Vending_Machine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006650  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000030c  080067f0  080067f0  000077f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006afc  08006afc  00008084  2**0
                  CONTENTS
  4 .ARM          00000008  08006afc  08006afc  00007afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b04  08006b04  00008084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b04  08006b04  00007b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006b08  08006b08  00007b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08006b0c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004304  20000084  08006b90  00008084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004388  08006b90  00008388  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016040  00000000  00000000  000080b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036b6  00000000  00000000  0001e0f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001338  00000000  00000000  000217b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000edb  00000000  00000000  00022ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198d0  00000000  00000000  000239c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016adb  00000000  00000000  0003d293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000995e1  00000000  00000000  00053d6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ed34f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005be0  00000000  00000000  000ed394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000f2f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080067d8 	.word	0x080067d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	080067d8 	.word	0x080067d8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	4a07      	ldr	r2, [pc, #28]	@ (80005cc <vApplicationGetIdleTaskMemory+0x2c>)
 80005b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	4a06      	ldr	r2, [pc, #24]	@ (80005d0 <vApplicationGetIdleTaskMemory+0x30>)
 80005b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2280      	movs	r2, #128	@ 0x80
 80005bc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005be:	bf00      	nop
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	200000f4 	.word	0x200000f4
 80005d0:	20000194 	.word	0x20000194

080005d4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005d4:	b5b0      	push	{r4, r5, r7, lr}
 80005d6:	b092      	sub	sp, #72	@ 0x48
 80005d8:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of msgQueue */
  osMessageQDef(msgQueue, 16, uint16_t);
 80005da:	4b1b      	ldr	r3, [pc, #108]	@ (8000648 <MX_FREERTOS_Init+0x74>)
 80005dc:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80005e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  msgQueueHandle = osMessageCreate(osMessageQ(msgQueue), NULL);
 80005e6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80005ea:	2100      	movs	r1, #0
 80005ec:	4618      	mov	r0, r3
 80005ee:	f003 f9ee 	bl	80039ce <osMessageCreate>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a15      	ldr	r2, [pc, #84]	@ (800064c <MX_FREERTOS_Init+0x78>)
 80005f6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of UART_Task */
  osThreadDef(UART_Task, UART_Task_Func, osPriorityNormal, 0, 128);
 80005f8:	4b15      	ldr	r3, [pc, #84]	@ (8000650 <MX_FREERTOS_Init+0x7c>)
 80005fa:	f107 041c 	add.w	r4, r7, #28
 80005fe:	461d      	mov	r5, r3
 8000600:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000602:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000604:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000608:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  UART_TaskHandle = osThreadCreate(osThread(UART_Task), NULL);
 800060c:	f107 031c 	add.w	r3, r7, #28
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f003 f97b 	bl	800390e <osThreadCreate>
 8000618:	4603      	mov	r3, r0
 800061a:	4a0e      	ldr	r2, [pc, #56]	@ (8000654 <MX_FREERTOS_Init+0x80>)
 800061c:	6013      	str	r3, [r2, #0]

  /* definition and creation of IR_Task */
  osThreadDef(IR_Task, IR_Task_Func, osPriorityHigh, 0, 128);
 800061e:	4b0e      	ldr	r3, [pc, #56]	@ (8000658 <MX_FREERTOS_Init+0x84>)
 8000620:	463c      	mov	r4, r7
 8000622:	461d      	mov	r5, r3
 8000624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000628:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800062c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IR_TaskHandle = osThreadCreate(osThread(IR_Task), NULL);
 8000630:	463b      	mov	r3, r7
 8000632:	2100      	movs	r1, #0
 8000634:	4618      	mov	r0, r3
 8000636:	f003 f96a 	bl	800390e <osThreadCreate>
 800063a:	4603      	mov	r3, r0
 800063c:	4a07      	ldr	r2, [pc, #28]	@ (800065c <MX_FREERTOS_Init+0x88>)
 800063e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000640:	bf00      	nop
 8000642:	3748      	adds	r7, #72	@ 0x48
 8000644:	46bd      	mov	sp, r7
 8000646:	bdb0      	pop	{r4, r5, r7, pc}
 8000648:	080067f0 	.word	0x080067f0
 800064c:	200000f0 	.word	0x200000f0
 8000650:	0800680c 	.word	0x0800680c
 8000654:	200000e8 	.word	0x200000e8
 8000658:	08006830 	.word	0x08006830
 800065c:	200000ec 	.word	0x200000ec

08000660 <UART_Task_Func>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_UART_Task_Func */
void UART_Task_Func(void const * argument)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_Task_Func */
  /* Infinite loop */
  for(;;)
  {
  	if(rx2Flag)
 8000668:	4b0d      	ldr	r3, [pc, #52]	@ (80006a0 <UART_Task_Func+0x40>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	2b00      	cmp	r3, #0
 8000670:	d006      	beq.n	8000680 <UART_Task_Func+0x20>
		{
			printf("recv2 : %s\r\n",rx2Data);
 8000672:	490c      	ldr	r1, [pc, #48]	@ (80006a4 <UART_Task_Func+0x44>)
 8000674:	480c      	ldr	r0, [pc, #48]	@ (80006a8 <UART_Task_Func+0x48>)
 8000676:	f004 fecf 	bl	8005418 <iprintf>
			rx2Flag =0;
 800067a:	4b09      	ldr	r3, [pc, #36]	@ (80006a0 <UART_Task_Func+0x40>)
 800067c:	2200      	movs	r2, #0
 800067e:	701a      	strb	r2, [r3, #0]
	//	    HAL_UART_Transmit(&huart6, (uint8_t *)buf, strlen(buf), 0xFFFF);
		}
		if(btFlag)
 8000680:	4b0a      	ldr	r3, [pc, #40]	@ (80006ac <UART_Task_Func+0x4c>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2b00      	cmp	r3, #0
 8000688:	d004      	beq.n	8000694 <UART_Task_Func+0x34>
		{
//		printf("bt : %s\r\n",btData);
			btFlag =0;
 800068a:	4b08      	ldr	r3, [pc, #32]	@ (80006ac <UART_Task_Func+0x4c>)
 800068c:	2200      	movs	r2, #0
 800068e:	701a      	strb	r2, [r3, #0]
			bluetooth_Event();
 8000690:	f000 f8e0 	bl	8000854 <bluetooth_Event>
		}
    osDelay(500);
 8000694:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000698:	f003 f985 	bl	80039a6 <osDelay>
  	if(rx2Flag)
 800069c:	e7e4      	b.n	8000668 <UART_Task_Func+0x8>
 800069e:	bf00      	nop
 80006a0:	200003e1 	.word	0x200003e1
 80006a4:	200003e4 	.word	0x200003e4
 80006a8:	0800684c 	.word	0x0800684c
 80006ac:	20000416 	.word	0x20000416

080006b0 <IR_Task_Func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_IR_Task_Func */
void IR_Task_Func(void const * argument)
{
 80006b0:	b5b0      	push	{r4, r5, r7, lr}
 80006b2:	b088      	sub	sp, #32
 80006b4:	af04      	add	r7, sp, #16
 80006b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN IR_Task_Func */

  /* Infinite loop */
  for(;;)
  {
  	for (int i = 0; i < NUM_IR_PINS; i++) {
 80006b8:	2300      	movs	r3, #0
 80006ba:	60fb      	str	r3, [r7, #12]
 80006bc:	e07f      	b.n	80007be <IR_Task_Func+0x10e>
			sampleValues[i][sampleIndex[i]] = HAL_GPIO_ReadPin(IR_PORT, irPins[i]);
 80006be:	4a44      	ldr	r2, [pc, #272]	@ (80007d0 <IR_Task_Func+0x120>)
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80006c6:	4943      	ldr	r1, [pc, #268]	@ (80007d4 <IR_Task_Func+0x124>)
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 80006ce:	4611      	mov	r1, r2
 80006d0:	4841      	ldr	r0, [pc, #260]	@ (80007d8 <IR_Task_Func+0x128>)
 80006d2:	f001 f937 	bl	8001944 <HAL_GPIO_ReadPin>
 80006d6:	4603      	mov	r3, r0
 80006d8:	4618      	mov	r0, r3
 80006da:	4940      	ldr	r1, [pc, #256]	@ (80007dc <IR_Task_Func+0x12c>)
 80006dc:	68fa      	ldr	r2, [r7, #12]
 80006de:	4613      	mov	r3, r2
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	4413      	add	r3, r2
 80006e4:	440b      	add	r3, r1
 80006e6:	4423      	add	r3, r4
 80006e8:	4602      	mov	r2, r0
 80006ea:	701a      	strb	r2, [r3, #0]
			sampleIndex[i] = (sampleIndex[i] + 1) % SAMPLE_COUNT;
 80006ec:	4a39      	ldr	r2, [pc, #228]	@ (80007d4 <IR_Task_Func+0x124>)
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006f4:	1c59      	adds	r1, r3, #1
 80006f6:	4b3a      	ldr	r3, [pc, #232]	@ (80007e0 <IR_Task_Func+0x130>)
 80006f8:	fb83 2301 	smull	r2, r3, r3, r1
 80006fc:	105a      	asrs	r2, r3, #1
 80006fe:	17cb      	asrs	r3, r1, #31
 8000700:	1ad2      	subs	r2, r2, r3
 8000702:	4613      	mov	r3, r2
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	4413      	add	r3, r2
 8000708:	1aca      	subs	r2, r1, r3
 800070a:	4932      	ldr	r1, [pc, #200]	@ (80007d4 <IR_Task_Func+0x124>)
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			if (sampleIndex[i] == 0) {
 8000712:	4a30      	ldr	r2, [pc, #192]	@ (80007d4 <IR_Task_Func+0x124>)
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d14c      	bne.n	80007b8 <IR_Task_Func+0x108>
				GPIO_PinState majorityValue = majorityVote(sampleValues[i], SAMPLE_COUNT);
 800071e:	68fa      	ldr	r2, [r7, #12]
 8000720:	4613      	mov	r3, r2
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	4413      	add	r3, r2
 8000726:	4a2d      	ldr	r2, [pc, #180]	@ (80007dc <IR_Task_Func+0x12c>)
 8000728:	4413      	add	r3, r2
 800072a:	2105      	movs	r1, #5
 800072c:	4618      	mov	r0, r3
 800072e:	f000 f865 	bl	80007fc <majorityVote>
 8000732:	4603      	mov	r3, r0
 8000734:	72fb      	strb	r3, [r7, #11]
				previousIrValues[i] = currentIrValues[i];
 8000736:	4a2b      	ldr	r2, [pc, #172]	@ (80007e4 <IR_Task_Func+0x134>)
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	4413      	add	r3, r2
 800073c:	7819      	ldrb	r1, [r3, #0]
 800073e:	4a2a      	ldr	r2, [pc, #168]	@ (80007e8 <IR_Task_Func+0x138>)
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	4413      	add	r3, r2
 8000744:	460a      	mov	r2, r1
 8000746:	701a      	strb	r2, [r3, #0]
				currentIrValues[i] = majorityValue;
 8000748:	4a26      	ldr	r2, [pc, #152]	@ (80007e4 <IR_Task_Func+0x134>)
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	4413      	add	r3, r2
 800074e:	7afa      	ldrb	r2, [r7, #11]
 8000750:	701a      	strb	r2, [r3, #0]
				printf("1:%d, 2:%d, 3:%d, 4:%d, 5:%d, 6:%d\r\n",currentIrValues[0],currentIrValues[1],currentIrValues[2],currentIrValues[3],currentIrValues[4],currentIrValues[5]);
 8000752:	4b24      	ldr	r3, [pc, #144]	@ (80007e4 <IR_Task_Func+0x134>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	4618      	mov	r0, r3
 8000758:	4b22      	ldr	r3, [pc, #136]	@ (80007e4 <IR_Task_Func+0x134>)
 800075a:	785b      	ldrb	r3, [r3, #1]
 800075c:	461c      	mov	r4, r3
 800075e:	4b21      	ldr	r3, [pc, #132]	@ (80007e4 <IR_Task_Func+0x134>)
 8000760:	789b      	ldrb	r3, [r3, #2]
 8000762:	461d      	mov	r5, r3
 8000764:	4b1f      	ldr	r3, [pc, #124]	@ (80007e4 <IR_Task_Func+0x134>)
 8000766:	78db      	ldrb	r3, [r3, #3]
 8000768:	461a      	mov	r2, r3
 800076a:	4b1e      	ldr	r3, [pc, #120]	@ (80007e4 <IR_Task_Func+0x134>)
 800076c:	791b      	ldrb	r3, [r3, #4]
 800076e:	4619      	mov	r1, r3
 8000770:	4b1c      	ldr	r3, [pc, #112]	@ (80007e4 <IR_Task_Func+0x134>)
 8000772:	795b      	ldrb	r3, [r3, #5]
 8000774:	9302      	str	r3, [sp, #8]
 8000776:	9101      	str	r1, [sp, #4]
 8000778:	9200      	str	r2, [sp, #0]
 800077a:	462b      	mov	r3, r5
 800077c:	4622      	mov	r2, r4
 800077e:	4601      	mov	r1, r0
 8000780:	481a      	ldr	r0, [pc, #104]	@ (80007ec <IR_Task_Func+0x13c>)
 8000782:	f004 fe49 	bl	8005418 <iprintf>
				if (previousIrValues[i] == GPIO_PIN_RESET && currentIrValues[i] == GPIO_PIN_SET) {
 8000786:	4a18      	ldr	r2, [pc, #96]	@ (80007e8 <IR_Task_Func+0x138>)
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	4413      	add	r3, r2
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d112      	bne.n	80007b8 <IR_Task_Func+0x108>
 8000792:	4a14      	ldr	r2, [pc, #80]	@ (80007e4 <IR_Task_Func+0x134>)
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	4413      	add	r3, r2
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b01      	cmp	r3, #1
 800079c:	d10c      	bne.n	80007b8 <IR_Task_Func+0x108>
					printf("Motor %d OFF\r\n",i);
 800079e:	68f9      	ldr	r1, [r7, #12]
 80007a0:	4813      	ldr	r0, [pc, #76]	@ (80007f0 <IR_Task_Func+0x140>)
 80007a2:	f004 fe39 	bl	8005418 <iprintf>
					HAL_GPIO_WritePin(MOTOR_PORT, motorPins[i], GPIO_PIN_RESET);
 80007a6:	4a13      	ldr	r2, [pc, #76]	@ (80007f4 <IR_Task_Func+0x144>)
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007ae:	2200      	movs	r2, #0
 80007b0:	4619      	mov	r1, r3
 80007b2:	4811      	ldr	r0, [pc, #68]	@ (80007f8 <IR_Task_Func+0x148>)
 80007b4:	f001 f8de 	bl	8001974 <HAL_GPIO_WritePin>
  	for (int i = 0; i < NUM_IR_PINS; i++) {
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	3301      	adds	r3, #1
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	2b05      	cmp	r3, #5
 80007c2:	f77f af7c 	ble.w	80006be <IR_Task_Func+0xe>
				}
			}
		}
  	osDelay(50);
 80007c6:	2032      	movs	r0, #50	@ 0x32
 80007c8:	f003 f8ed 	bl	80039a6 <osDelay>
  	for (int i = 0; i < NUM_IR_PINS; i++) {
 80007cc:	e774      	b.n	80006b8 <IR_Task_Func+0x8>
 80007ce:	bf00      	nop
 80007d0:	20000000 	.word	0x20000000
 80007d4:	200000d0 	.word	0x200000d0
 80007d8:	40020400 	.word	0x40020400
 80007dc:	200000b0 	.word	0x200000b0
 80007e0:	66666667 	.word	0x66666667
 80007e4:	200000a0 	.word	0x200000a0
 80007e8:	200000a8 	.word	0x200000a8
 80007ec:	0800685c 	.word	0x0800685c
 80007f0:	08006884 	.word	0x08006884
 80007f4:	2000000c 	.word	0x2000000c
 80007f8:	40020000 	.word	0x40020000

080007fc <majorityVote>:
  /* USER CODE END IR_Task_Func */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
GPIO_PinState majorityVote(GPIO_PinState *samples, int count) {
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
  int highCount = 0;
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < count; i++) {
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	e00b      	b.n	8000828 <majorityVote+0x2c>
    if (samples[i] == GPIO_PIN_SET) {
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	4413      	add	r3, r2
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b01      	cmp	r3, #1
 800081a:	d102      	bne.n	8000822 <majorityVote+0x26>
      highCount++;
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	3301      	adds	r3, #1
 8000820:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < count; i++) {
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	3301      	adds	r3, #1
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68ba      	ldr	r2, [r7, #8]
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	429a      	cmp	r2, r3
 800082e:	dbef      	blt.n	8000810 <majorityVote+0x14>
    }
  }
  return (highCount > count / 2) ? GPIO_PIN_SET : GPIO_PIN_RESET;
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	0fda      	lsrs	r2, r3, #31
 8000834:	4413      	add	r3, r2
 8000836:	105b      	asrs	r3, r3, #1
 8000838:	461a      	mov	r2, r3
 800083a:	68fb      	ldr	r3, [r7, #12]
 800083c:	4293      	cmp	r3, r2
 800083e:	bfcc      	ite	gt
 8000840:	2301      	movgt	r3, #1
 8000842:	2300      	movle	r3, #0
 8000844:	b2db      	uxtb	r3, r3
}
 8000846:	4618      	mov	r0, r3
 8000848:	3714      	adds	r7, #20
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
	...

08000854 <bluetooth_Event>:

void bluetooth_Event()
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b0a4      	sub	sp, #144	@ 0x90
 8000858:	af02      	add	r7, sp, #8

  int i=0;
 800085a:	2300      	movs	r3, #0
 800085c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  int motorNumber = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	67fb      	str	r3, [r7, #124]	@ 0x7c
  char * pToken;
  char * pArray[ARR_CNT]={0};
 8000864:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  char recvBuf[CMD_SIZE]={0};
 8000874:	2300      	movs	r3, #0
 8000876:	637b      	str	r3, [r7, #52]	@ 0x34
 8000878:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800087c:	222e      	movs	r2, #46	@ 0x2e
 800087e:	2100      	movs	r1, #0
 8000880:	4618      	mov	r0, r3
 8000882:	f004 ff31 	bl	80056e8 <memset>
  char sendBuf[CMD_SIZE]={0};
 8000886:	2300      	movs	r3, #0
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	1d3b      	adds	r3, r7, #4
 800088c:	222e      	movs	r2, #46	@ 0x2e
 800088e:	2100      	movs	r1, #0
 8000890:	4618      	mov	r0, r3
 8000892:	f004 ff29 	bl	80056e8 <memset>
  strcpy(recvBuf,btData);
 8000896:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800089a:	493d      	ldr	r1, [pc, #244]	@ (8000990 <bluetooth_Event+0x13c>)
 800089c:	4618      	mov	r0, r3
 800089e:	f005 f850 	bl	8005942 <strcpy>

  printf("btData : %s\r\n",btData);
 80008a2:	493b      	ldr	r1, [pc, #236]	@ (8000990 <bluetooth_Event+0x13c>)
 80008a4:	483b      	ldr	r0, [pc, #236]	@ (8000994 <bluetooth_Event+0x140>)
 80008a6:	f004 fdb7 	bl	8005418 <iprintf>

  pToken = strtok(recvBuf,"[@]");
 80008aa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80008ae:	493a      	ldr	r1, [pc, #232]	@ (8000998 <bluetooth_Event+0x144>)
 80008b0:	4618      	mov	r0, r3
 80008b2:	f004 ff21 	bl	80056f8 <strtok>
 80008b6:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  while(pToken != NULL)
 80008ba:	e017      	b.n	80008ec <bluetooth_Event+0x98>
  {
    pArray[i] =  pToken;
 80008bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	3388      	adds	r3, #136	@ 0x88
 80008c4:	443b      	add	r3, r7
 80008c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80008ca:	f843 2c20 	str.w	r2, [r3, #-32]
    if(++i >= ARR_CNT)
 80008ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80008d2:	3301      	adds	r3, #1
 80008d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80008d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80008dc:	2b04      	cmp	r3, #4
 80008de:	dc0a      	bgt.n	80008f6 <bluetooth_Event+0xa2>
      break;
    pToken = strtok(NULL,"[@]");
 80008e0:	492d      	ldr	r1, [pc, #180]	@ (8000998 <bluetooth_Event+0x144>)
 80008e2:	2000      	movs	r0, #0
 80008e4:	f004 ff08 	bl	80056f8 <strtok>
 80008e8:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  while(pToken != NULL)
 80008ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d1e3      	bne.n	80008bc <bluetooth_Event+0x68>
 80008f4:	e000      	b.n	80008f8 <bluetooth_Event+0xa4>
      break;
 80008f6:	bf00      	nop
  }

  if(!strcmp(pArray[1],"MOTOR"))
 80008f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80008fa:	4928      	ldr	r1, [pc, #160]	@ (800099c <bluetooth_Event+0x148>)
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fc6f 	bl	80001e0 <strcmp>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d119      	bne.n	800093c <bluetooth_Event+0xe8>
  {
  	motorNumber = atoi(pArray[2]);
 8000908:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800090a:	4618      	mov	r0, r3
 800090c:	f004 fc3a 	bl	8005184 <atoi>
 8000910:	67f8      	str	r0, [r7, #124]	@ 0x7c
  	if(motorNumber >= 1 && motorNumber <= NUM_MOTOR_PINS) {
 8000912:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000914:	2b00      	cmp	r3, #0
 8000916:	dd21      	ble.n	800095c <bluetooth_Event+0x108>
 8000918:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800091a:	2b06      	cmp	r3, #6
 800091c:	dc1e      	bgt.n	800095c <bluetooth_Event+0x108>
				HAL_GPIO_WritePin(MOTOR_PORT, motorPins[motorNumber - 1], GPIO_PIN_SET);
 800091e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000920:	3b01      	subs	r3, #1
 8000922:	4a1f      	ldr	r2, [pc, #124]	@ (80009a0 <bluetooth_Event+0x14c>)
 8000924:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000928:	2201      	movs	r2, #1
 800092a:	4619      	mov	r1, r3
 800092c:	481d      	ldr	r0, [pc, #116]	@ (80009a4 <bluetooth_Event+0x150>)
 800092e:	f001 f821 	bl	8001974 <HAL_GPIO_WritePin>
				printf("MOTOR %d ON\r\n",motorNumber);
 8000932:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8000934:	481c      	ldr	r0, [pc, #112]	@ (80009a8 <bluetooth_Event+0x154>)
 8000936:	f004 fd6f 	bl	8005418 <iprintf>
 800093a:	e00f      	b.n	800095c <bluetooth_Event+0x108>
		}
  }
  else if(!strncmp(pArray[1]," New conn",sizeof(" New conn")))
 800093c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800093e:	491b      	ldr	r1, [pc, #108]	@ (80009ac <bluetooth_Event+0x158>)
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff fc4d 	bl	80001e0 <strcmp>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d01c      	beq.n	8000986 <bluetooth_Event+0x132>
  {
      return;
  }
  else if(!strncmp(pArray[1]," Already log",sizeof(" Already log")))
 800094c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800094e:	4918      	ldr	r1, [pc, #96]	@ (80009b0 <bluetooth_Event+0x15c>)
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff fc45 	bl	80001e0 <strcmp>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
  {
      return;
  }
  else
      return;
 800095a:	e015      	b.n	8000988 <bluetooth_Event+0x134>

  sprintf(sendBuf,"[%s]%s@%s\n",pArray[0],pArray[1],pArray[2]);
 800095c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800095e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8000960:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000962:	4638      	mov	r0, r7
 8000964:	9300      	str	r3, [sp, #0]
 8000966:	460b      	mov	r3, r1
 8000968:	4912      	ldr	r1, [pc, #72]	@ (80009b4 <bluetooth_Event+0x160>)
 800096a:	f004 fdc5 	bl	80054f8 <siprintf>
  HAL_UART_Transmit(&huart6, (uint8_t *)sendBuf, strlen(sendBuf), 100);
 800096e:	463b      	mov	r3, r7
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fc3f 	bl	80001f4 <strlen>
 8000976:	4603      	mov	r3, r0
 8000978:	b29a      	uxth	r2, r3
 800097a:	4639      	mov	r1, r7
 800097c:	2364      	movs	r3, #100	@ 0x64
 800097e:	480e      	ldr	r0, [pc, #56]	@ (80009b8 <bluetooth_Event+0x164>)
 8000980:	f001 ffa0 	bl	80028c4 <HAL_UART_Transmit>
 8000984:	e000      	b.n	8000988 <bluetooth_Event+0x134>
      return;
 8000986:	bf00      	nop
}
 8000988:	3788      	adds	r7, #136	@ 0x88
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000418 	.word	0x20000418
 8000994:	08006894 	.word	0x08006894
 8000998:	080068a4 	.word	0x080068a4
 800099c:	080068a8 	.word	0x080068a8
 80009a0:	2000000c 	.word	0x2000000c
 80009a4:	40020000 	.word	0x40020000
 80009a8:	080068b0 	.word	0x080068b0
 80009ac:	080068c0 	.word	0x080068c0
 80009b0:	080068cc 	.word	0x080068cc
 80009b4:	080068dc 	.word	0x080068dc
 80009b8:	20000494 	.word	0x20000494

080009bc <__io_putchar>:
PUTCHAR_PROTOTYPE
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART6 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80009c4:	1d39      	adds	r1, r7, #4
 80009c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80009ca:	2201      	movs	r2, #1
 80009cc:	4803      	ldr	r0, [pc, #12]	@ (80009dc <__io_putchar+0x20>)
 80009ce:	f001 ff79 	bl	80028c4 <HAL_UART_Transmit>

  return ch;
 80009d2:	687b      	ldr	r3, [r7, #4]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	2000044c 	.word	0x2000044c

080009e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	@ 0x28
 80009e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	4b34      	ldr	r3, [pc, #208]	@ (8000acc <MX_GPIO_Init+0xec>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	4a33      	ldr	r2, [pc, #204]	@ (8000acc <MX_GPIO_Init+0xec>)
 8000a00:	f043 0304 	orr.w	r3, r3, #4
 8000a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a06:	4b31      	ldr	r3, [pc, #196]	@ (8000acc <MX_GPIO_Init+0xec>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	f003 0304 	and.w	r3, r3, #4
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	4b2d      	ldr	r3, [pc, #180]	@ (8000acc <MX_GPIO_Init+0xec>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1a:	4a2c      	ldr	r2, [pc, #176]	@ (8000acc <MX_GPIO_Init+0xec>)
 8000a1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a22:	4b2a      	ldr	r3, [pc, #168]	@ (8000acc <MX_GPIO_Init+0xec>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	4b26      	ldr	r3, [pc, #152]	@ (8000acc <MX_GPIO_Init+0xec>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	4a25      	ldr	r2, [pc, #148]	@ (8000acc <MX_GPIO_Init+0xec>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3e:	4b23      	ldr	r3, [pc, #140]	@ (8000acc <MX_GPIO_Init+0xec>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000acc <MX_GPIO_Init+0xec>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	4a1e      	ldr	r2, [pc, #120]	@ (8000acc <MX_GPIO_Init+0xec>)
 8000a54:	f043 0302 	orr.w	r3, r3, #2
 8000a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000acc <MX_GPIO_Init+0xec>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000a66:	2200      	movs	r2, #0
 8000a68:	21f3      	movs	r1, #243	@ 0xf3
 8000a6a:	4819      	ldr	r0, [pc, #100]	@ (8000ad0 <MX_GPIO_Init+0xf0>)
 8000a6c:	f000 ff82 	bl	8001974 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a76:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4619      	mov	r1, r3
 8000a86:	4813      	ldr	r0, [pc, #76]	@ (8000ad4 <MX_GPIO_Init+0xf4>)
 8000a88:	f000 fdd8 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000a8c:	23f3      	movs	r3, #243	@ 0xf3
 8000a8e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	480b      	ldr	r0, [pc, #44]	@ (8000ad0 <MX_GPIO_Init+0xf0>)
 8000aa4:	f000 fdca 	bl	800163c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13
 8000aa8:	f24e 0307 	movw	r3, #57351	@ 0xe007
 8000aac:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	4619      	mov	r1, r3
 8000abc:	4806      	ldr	r0, [pc, #24]	@ (8000ad8 <MX_GPIO_Init+0xf8>)
 8000abe:	f000 fdbd 	bl	800163c <HAL_GPIO_Init>

}
 8000ac2:	bf00      	nop
 8000ac4:	3728      	adds	r7, #40	@ 0x28
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020000 	.word	0x40020000
 8000ad4:	40020800 	.word	0x40020800
 8000ad8:	40020400 	.word	0x40020400

08000adc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int ret = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae6:	f000 fbf3 	bl	80012d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aea:	f000 f823 	bl	8000b34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aee:	f7ff ff77 	bl	80009e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000af2:	f000 fa51 	bl	8000f98 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000af6:	f000 fa79 	bl	8000fec <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  ret |= drv_uart_init();
 8000afa:	f000 fb27 	bl	800114c <drv_uart_init>
 8000afe:	4602      	mov	r2, r0
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	607b      	str	r3, [r7, #4]
	ret |= drv_esp_init();
 8000b06:	f000 fb2f 	bl	8001168 <drv_esp_init>
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	607b      	str	r3, [r7, #4]
	if(ret != 0) Error_Handler();
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <main+0x40>
 8000b18:	f000 f888 	bl	8000c2c <Error_Handler>
	printf("start main()\r\n");
 8000b1c:	4804      	ldr	r0, [pc, #16]	@ (8000b30 <main+0x54>)
 8000b1e:	f004 fce3 	bl	80054e8 <puts>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000b22:	f7ff fd57 	bl	80005d4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000b26:	f002 feeb 	bl	8003900 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b2a:	bf00      	nop
 8000b2c:	e7fd      	b.n	8000b2a <main+0x4e>
 8000b2e:	bf00      	nop
 8000b30:	080068e8 	.word	0x080068e8

08000b34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b094      	sub	sp, #80	@ 0x50
 8000b38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3a:	f107 0320 	add.w	r3, r7, #32
 8000b3e:	2230      	movs	r2, #48	@ 0x30
 8000b40:	2100      	movs	r1, #0
 8000b42:	4618      	mov	r0, r3
 8000b44:	f004 fdd0 	bl	80056e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b48:	f107 030c 	add.w	r3, r7, #12
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	4b28      	ldr	r3, [pc, #160]	@ (8000c00 <SystemClock_Config+0xcc>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b60:	4a27      	ldr	r2, [pc, #156]	@ (8000c00 <SystemClock_Config+0xcc>)
 8000b62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b66:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b68:	4b25      	ldr	r3, [pc, #148]	@ (8000c00 <SystemClock_Config+0xcc>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b74:	2300      	movs	r3, #0
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	4b22      	ldr	r3, [pc, #136]	@ (8000c04 <SystemClock_Config+0xd0>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a21      	ldr	r2, [pc, #132]	@ (8000c04 <SystemClock_Config+0xd0>)
 8000b7e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b82:	6013      	str	r3, [r2, #0]
 8000b84:	4b1f      	ldr	r3, [pc, #124]	@ (8000c04 <SystemClock_Config+0xd0>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b90:	2302      	movs	r3, #2
 8000b92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b94:	2301      	movs	r3, #1
 8000b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b98:	2310      	movs	r3, #16
 8000b9a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ba4:	2310      	movs	r3, #16
 8000ba6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ba8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000bac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000bae:	2304      	movs	r3, #4
 8000bb0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bb2:	2304      	movs	r3, #4
 8000bb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb6:	f107 0320 	add.w	r3, r7, #32
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 fef4 	bl	80019a8 <HAL_RCC_OscConfig>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000bc6:	f000 f831 	bl	8000c2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bca:	230f      	movs	r3, #15
 8000bcc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bda:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000be0:	f107 030c 	add.w	r3, r7, #12
 8000be4:	2102      	movs	r1, #2
 8000be6:	4618      	mov	r0, r3
 8000be8:	f001 f956 	bl	8001e98 <HAL_RCC_ClockConfig>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000bf2:	f000 f81b 	bl	8000c2c <Error_Handler>
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	3750      	adds	r7, #80	@ 0x50
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40007000 	.word	0x40007000

08000c08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a04      	ldr	r2, [pc, #16]	@ (8000c28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d101      	bne.n	8000c1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c1a:	f000 fb7b 	bl	8001314 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40000400 	.word	0x40000400

08000c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c30:	b672      	cpsid	i
}
 8000c32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <Error_Handler+0x8>

08000c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	4b12      	ldr	r3, [pc, #72]	@ (8000c8c <HAL_MspInit+0x54>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c46:	4a11      	ldr	r2, [pc, #68]	@ (8000c8c <HAL_MspInit+0x54>)
 8000c48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c8c <HAL_MspInit+0x54>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	603b      	str	r3, [r7, #0]
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c8c <HAL_MspInit+0x54>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c62:	4a0a      	ldr	r2, [pc, #40]	@ (8000c8c <HAL_MspInit+0x54>)
 8000c64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c6a:	4b08      	ldr	r3, [pc, #32]	@ (8000c8c <HAL_MspInit+0x54>)
 8000c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c72:	603b      	str	r3, [r7, #0]
 8000c74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c76:	2200      	movs	r2, #0
 8000c78:	210f      	movs	r1, #15
 8000c7a:	f06f 0001 	mvn.w	r0, #1
 8000c7e:	f000 fc21 	bl	80014c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40023800 	.word	0x40023800

08000c90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08e      	sub	sp, #56	@ 0x38
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	4b33      	ldr	r3, [pc, #204]	@ (8000d74 <HAL_InitTick+0xe4>)
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca8:	4a32      	ldr	r2, [pc, #200]	@ (8000d74 <HAL_InitTick+0xe4>)
 8000caa:	f043 0302 	orr.w	r3, r3, #2
 8000cae:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cb0:	4b30      	ldr	r3, [pc, #192]	@ (8000d74 <HAL_InitTick+0xe4>)
 8000cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb4:	f003 0302 	and.w	r3, r3, #2
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cbc:	f107 0210 	add.w	r2, r7, #16
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	4611      	mov	r1, r2
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f001 fb06 	bl	80022d8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ccc:	6a3b      	ldr	r3, [r7, #32]
 8000cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d103      	bne.n	8000cde <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cd6:	f001 fad7 	bl	8002288 <HAL_RCC_GetPCLK1Freq>
 8000cda:	6378      	str	r0, [r7, #52]	@ 0x34
 8000cdc:	e004      	b.n	8000ce8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cde:	f001 fad3 	bl	8002288 <HAL_RCC_GetPCLK1Freq>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cea:	4a23      	ldr	r2, [pc, #140]	@ (8000d78 <HAL_InitTick+0xe8>)
 8000cec:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf0:	0c9b      	lsrs	r3, r3, #18
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000cf6:	4b21      	ldr	r3, [pc, #132]	@ (8000d7c <HAL_InitTick+0xec>)
 8000cf8:	4a21      	ldr	r2, [pc, #132]	@ (8000d80 <HAL_InitTick+0xf0>)
 8000cfa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000cfc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d7c <HAL_InitTick+0xec>)
 8000cfe:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d02:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000d04:	4a1d      	ldr	r2, [pc, #116]	@ (8000d7c <HAL_InitTick+0xec>)
 8000d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d08:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d7c <HAL_InitTick+0xec>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d10:	4b1a      	ldr	r3, [pc, #104]	@ (8000d7c <HAL_InitTick+0xec>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d16:	4b19      	ldr	r3, [pc, #100]	@ (8000d7c <HAL_InitTick+0xec>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000d1c:	4817      	ldr	r0, [pc, #92]	@ (8000d7c <HAL_InitTick+0xec>)
 8000d1e:	f001 fb0d 	bl	800233c <HAL_TIM_Base_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000d28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d11b      	bne.n	8000d68 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000d30:	4812      	ldr	r0, [pc, #72]	@ (8000d7c <HAL_InitTick+0xec>)
 8000d32:	f001 fb5d 	bl	80023f0 <HAL_TIM_Base_Start_IT>
 8000d36:	4603      	mov	r3, r0
 8000d38:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000d3c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d111      	bne.n	8000d68 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d44:	201d      	movs	r0, #29
 8000d46:	f000 fbd9 	bl	80014fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2b0f      	cmp	r3, #15
 8000d4e:	d808      	bhi.n	8000d62 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000d50:	2200      	movs	r2, #0
 8000d52:	6879      	ldr	r1, [r7, #4]
 8000d54:	201d      	movs	r0, #29
 8000d56:	f000 fbb5 	bl	80014c4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d84 <HAL_InitTick+0xf4>)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6013      	str	r3, [r2, #0]
 8000d60:	e002      	b.n	8000d68 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d68:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3738      	adds	r7, #56	@ 0x38
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40023800 	.word	0x40023800
 8000d78:	431bde83 	.word	0x431bde83
 8000d7c:	20000394 	.word	0x20000394
 8000d80:	40000400 	.word	0x40000400
 8000d84:	2000001c 	.word	0x2000001c

08000d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <NMI_Handler+0x4>

08000d90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <HardFault_Handler+0x4>

08000d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <MemManage_Handler+0x4>

08000da0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <BusFault_Handler+0x4>

08000da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <UsageFault_Handler+0x4>

08000db0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
	...

08000dc0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000dc4:	4802      	ldr	r0, [pc, #8]	@ (8000dd0 <TIM3_IRQHandler+0x10>)
 8000dc6:	f001 fb75 	bl	80024b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000394 	.word	0x20000394

08000dd4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000dd8:	4802      	ldr	r0, [pc, #8]	@ (8000de4 <USART6_IRQHandler+0x10>)
 8000dda:	f001 fe23 	bl	8002a24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000494 	.word	0x20000494

08000de8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return 1;
 8000dec:	2301      	movs	r3, #1
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <_kill>:

int _kill(int pid, int sig)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e02:	f004 fd71 	bl	80058e8 <__errno>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2216      	movs	r2, #22
 8000e0a:	601a      	str	r2, [r3, #0]
  return -1;
 8000e0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <_exit>:

void _exit (int status)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e20:	f04f 31ff 	mov.w	r1, #4294967295
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff ffe7 	bl	8000df8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e2a:	bf00      	nop
 8000e2c:	e7fd      	b.n	8000e2a <_exit+0x12>

08000e2e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b086      	sub	sp, #24
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	60f8      	str	r0, [r7, #12]
 8000e36:	60b9      	str	r1, [r7, #8]
 8000e38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
 8000e3e:	e00a      	b.n	8000e56 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e40:	f3af 8000 	nop.w
 8000e44:	4601      	mov	r1, r0
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	1c5a      	adds	r2, r3, #1
 8000e4a:	60ba      	str	r2, [r7, #8]
 8000e4c:	b2ca      	uxtb	r2, r1
 8000e4e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	3301      	adds	r3, #1
 8000e54:	617b      	str	r3, [r7, #20]
 8000e56:	697a      	ldr	r2, [r7, #20]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	dbf0      	blt.n	8000e40 <_read+0x12>
  }

  return len;
 8000e5e:	687b      	ldr	r3, [r7, #4]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	e009      	b.n	8000e8e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	1c5a      	adds	r2, r3, #1
 8000e7e:	60ba      	str	r2, [r7, #8]
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f7ff fd9a 	bl	80009bc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	697a      	ldr	r2, [r7, #20]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	429a      	cmp	r2, r3
 8000e94:	dbf1      	blt.n	8000e7a <_write+0x12>
  }
  return len;
 8000e96:	687b      	ldr	r3, [r7, #4]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3718      	adds	r7, #24
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <_close>:

int _close(int file)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ea8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ec8:	605a      	str	r2, [r3, #4]
  return 0;
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <_isatty>:

int _isatty(int file)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ee0:	2301      	movs	r3, #1
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	b085      	sub	sp, #20
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	60f8      	str	r0, [r7, #12]
 8000ef6:	60b9      	str	r1, [r7, #8]
 8000ef8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000efa:	2300      	movs	r3, #0
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f10:	4a14      	ldr	r2, [pc, #80]	@ (8000f64 <_sbrk+0x5c>)
 8000f12:	4b15      	ldr	r3, [pc, #84]	@ (8000f68 <_sbrk+0x60>)
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f1c:	4b13      	ldr	r3, [pc, #76]	@ (8000f6c <_sbrk+0x64>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d102      	bne.n	8000f2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f24:	4b11      	ldr	r3, [pc, #68]	@ (8000f6c <_sbrk+0x64>)
 8000f26:	4a12      	ldr	r2, [pc, #72]	@ (8000f70 <_sbrk+0x68>)
 8000f28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f2a:	4b10      	ldr	r3, [pc, #64]	@ (8000f6c <_sbrk+0x64>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d207      	bcs.n	8000f48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f38:	f004 fcd6 	bl	80058e8 <__errno>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	220c      	movs	r2, #12
 8000f40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
 8000f46:	e009      	b.n	8000f5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f48:	4b08      	ldr	r3, [pc, #32]	@ (8000f6c <_sbrk+0x64>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f4e:	4b07      	ldr	r3, [pc, #28]	@ (8000f6c <_sbrk+0x64>)
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4413      	add	r3, r2
 8000f56:	4a05      	ldr	r2, [pc, #20]	@ (8000f6c <_sbrk+0x64>)
 8000f58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20020000 	.word	0x20020000
 8000f68:	00000400 	.word	0x00000400
 8000f6c:	200003dc 	.word	0x200003dc
 8000f70:	20004388 	.word	0x20004388

08000f74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f78:	4b06      	ldr	r3, [pc, #24]	@ (8000f94 <SystemInit+0x20>)
 8000f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f7e:	4a05      	ldr	r2, [pc, #20]	@ (8000f94 <SystemInit+0x20>)
 8000f80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart6;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f9c:	4b11      	ldr	r3, [pc, #68]	@ (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000f9e:	4a12      	ldr	r2, [pc, #72]	@ (8000fe8 <MX_USART2_UART_Init+0x50>)
 8000fa0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fa2:	4b10      	ldr	r3, [pc, #64]	@ (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000fa4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fa8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000faa:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fbc:	4b09      	ldr	r3, [pc, #36]	@ (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000fbe:	220c      	movs	r2, #12
 8000fc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fc2:	4b08      	ldr	r3, [pc, #32]	@ (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc8:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fce:	4805      	ldr	r0, [pc, #20]	@ (8000fe4 <MX_USART2_UART_Init+0x4c>)
 8000fd0:	f001 fc28 	bl	8002824 <HAL_UART_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fda:	f7ff fe27 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	2000044c 	.word	0x2000044c
 8000fe8:	40004400 	.word	0x40004400

08000fec <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	@ (8001038 <MX_USART6_UART_Init+0x4c>)
 8000ff2:	4a12      	ldr	r2, [pc, #72]	@ (800103c <MX_USART6_UART_Init+0x50>)
 8000ff4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8000ff6:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <MX_USART6_UART_Init+0x4c>)
 8000ff8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000ffc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8001038 <MX_USART6_UART_Init+0x4c>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001004:	4b0c      	ldr	r3, [pc, #48]	@ (8001038 <MX_USART6_UART_Init+0x4c>)
 8001006:	2200      	movs	r2, #0
 8001008:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800100a:	4b0b      	ldr	r3, [pc, #44]	@ (8001038 <MX_USART6_UART_Init+0x4c>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001010:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <MX_USART6_UART_Init+0x4c>)
 8001012:	220c      	movs	r2, #12
 8001014:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001016:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <MX_USART6_UART_Init+0x4c>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800101c:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <MX_USART6_UART_Init+0x4c>)
 800101e:	2200      	movs	r2, #0
 8001020:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001022:	4805      	ldr	r0, [pc, #20]	@ (8001038 <MX_USART6_UART_Init+0x4c>)
 8001024:	f001 fbfe 	bl	8002824 <HAL_UART_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800102e:	f7ff fdfd 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000494 	.word	0x20000494
 800103c:	40011400 	.word	0x40011400

08001040 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08c      	sub	sp, #48	@ 0x30
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 031c 	add.w	r3, r7, #28
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a36      	ldr	r2, [pc, #216]	@ (8001138 <HAL_UART_MspInit+0xf8>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d12c      	bne.n	80010bc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	61bb      	str	r3, [r7, #24]
 8001066:	4b35      	ldr	r3, [pc, #212]	@ (800113c <HAL_UART_MspInit+0xfc>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106a:	4a34      	ldr	r2, [pc, #208]	@ (800113c <HAL_UART_MspInit+0xfc>)
 800106c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001070:	6413      	str	r3, [r2, #64]	@ 0x40
 8001072:	4b32      	ldr	r3, [pc, #200]	@ (800113c <HAL_UART_MspInit+0xfc>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001076:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800107a:	61bb      	str	r3, [r7, #24]
 800107c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
 8001082:	4b2e      	ldr	r3, [pc, #184]	@ (800113c <HAL_UART_MspInit+0xfc>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	4a2d      	ldr	r2, [pc, #180]	@ (800113c <HAL_UART_MspInit+0xfc>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6313      	str	r3, [r2, #48]	@ 0x30
 800108e:	4b2b      	ldr	r3, [pc, #172]	@ (800113c <HAL_UART_MspInit+0xfc>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800109a:	230c      	movs	r3, #12
 800109c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a6:	2303      	movs	r3, #3
 80010a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010aa:	2307      	movs	r3, #7
 80010ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ae:	f107 031c 	add.w	r3, r7, #28
 80010b2:	4619      	mov	r1, r3
 80010b4:	4822      	ldr	r0, [pc, #136]	@ (8001140 <HAL_UART_MspInit+0x100>)
 80010b6:	f000 fac1 	bl	800163c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80010ba:	e038      	b.n	800112e <HAL_UART_MspInit+0xee>
  else if(uartHandle->Instance==USART6)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a20      	ldr	r2, [pc, #128]	@ (8001144 <HAL_UART_MspInit+0x104>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d133      	bne.n	800112e <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	4b1c      	ldr	r3, [pc, #112]	@ (800113c <HAL_UART_MspInit+0xfc>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ce:	4a1b      	ldr	r2, [pc, #108]	@ (800113c <HAL_UART_MspInit+0xfc>)
 80010d0:	f043 0320 	orr.w	r3, r3, #32
 80010d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010d6:	4b19      	ldr	r3, [pc, #100]	@ (800113c <HAL_UART_MspInit+0xfc>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010da:	f003 0320 	and.w	r3, r3, #32
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	4b15      	ldr	r3, [pc, #84]	@ (800113c <HAL_UART_MspInit+0xfc>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	4a14      	ldr	r2, [pc, #80]	@ (800113c <HAL_UART_MspInit+0xfc>)
 80010ec:	f043 0304 	orr.w	r3, r3, #4
 80010f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f2:	4b12      	ldr	r3, [pc, #72]	@ (800113c <HAL_UART_MspInit+0xfc>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	f003 0304 	and.w	r3, r3, #4
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010fe:	23c0      	movs	r3, #192	@ 0xc0
 8001100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110a:	2303      	movs	r3, #3
 800110c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800110e:	2308      	movs	r3, #8
 8001110:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001112:	f107 031c 	add.w	r3, r7, #28
 8001116:	4619      	mov	r1, r3
 8001118:	480b      	ldr	r0, [pc, #44]	@ (8001148 <HAL_UART_MspInit+0x108>)
 800111a:	f000 fa8f 	bl	800163c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	2105      	movs	r1, #5
 8001122:	2047      	movs	r0, #71	@ 0x47
 8001124:	f000 f9ce 	bl	80014c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001128:	2047      	movs	r0, #71	@ 0x47
 800112a:	f000 f9e7 	bl	80014fc <HAL_NVIC_EnableIRQ>
}
 800112e:	bf00      	nop
 8001130:	3730      	adds	r7, #48	@ 0x30
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40004400 	.word	0x40004400
 800113c:	40023800 	.word	0x40023800
 8001140:	40020000 	.word	0x40020000
 8001144:	40011400 	.word	0x40011400
 8001148:	40020800 	.word	0x40020800

0800114c <drv_uart_init>:
  }
}

/* USER CODE BEGIN 1 */
int drv_uart_init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &rx2char,1);
 8001150:	2201      	movs	r2, #1
 8001152:	4903      	ldr	r1, [pc, #12]	@ (8001160 <drv_uart_init+0x14>)
 8001154:	4803      	ldr	r0, [pc, #12]	@ (8001164 <drv_uart_init+0x18>)
 8001156:	f001 fc40 	bl	80029da <HAL_UART_Receive_IT>
	return 0;
 800115a:	2300      	movs	r3, #0
}
 800115c:	4618      	mov	r0, r3
 800115e:	bd80      	pop	{r7, pc}
 8001160:	200003e0 	.word	0x200003e0
 8001164:	2000044c 	.word	0x2000044c

08001168 <drv_esp_init>:
int drv_esp_init(void) {
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart6, &btchar, 1);  // Initialize UART for ESP communication
 800116c:	2201      	movs	r2, #1
 800116e:	4903      	ldr	r1, [pc, #12]	@ (800117c <drv_esp_init+0x14>)
 8001170:	4803      	ldr	r0, [pc, #12]	@ (8001180 <drv_esp_init+0x18>)
 8001172:	f001 fc32 	bl	80029da <HAL_UART_Receive_IT>
	return 0;  // Return 0 if successful
 8001176:	2300      	movs	r3, #0
}
 8001178:	4618      	mov	r0, r3
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000417 	.word	0x20000417
 8001180:	20000494 	.word	0x20000494

08001184 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART2)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a2e      	ldr	r2, [pc, #184]	@ (800124c <HAL_UART_RxCpltCallback+0xc8>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d128      	bne.n	80011e8 <HAL_UART_RxCpltCallback+0x64>
    {
    	static int i=0;
    	rx2Data[i] = rx2char;
 8001196:	4b2e      	ldr	r3, [pc, #184]	@ (8001250 <HAL_UART_RxCpltCallback+0xcc>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a2e      	ldr	r2, [pc, #184]	@ (8001254 <HAL_UART_RxCpltCallback+0xd0>)
 800119c:	7811      	ldrb	r1, [r2, #0]
 800119e:	4a2e      	ldr	r2, [pc, #184]	@ (8001258 <HAL_UART_RxCpltCallback+0xd4>)
 80011a0:	54d1      	strb	r1, [r2, r3]
    	if((rx2Data[i] == '\r')||(btData[i] == '\n'))
 80011a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001250 <HAL_UART_RxCpltCallback+0xcc>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a2c      	ldr	r2, [pc, #176]	@ (8001258 <HAL_UART_RxCpltCallback+0xd4>)
 80011a8:	5cd3      	ldrb	r3, [r2, r3]
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	2b0d      	cmp	r3, #13
 80011ae:	d005      	beq.n	80011bc <HAL_UART_RxCpltCallback+0x38>
 80011b0:	4b27      	ldr	r3, [pc, #156]	@ (8001250 <HAL_UART_RxCpltCallback+0xcc>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a29      	ldr	r2, [pc, #164]	@ (800125c <HAL_UART_RxCpltCallback+0xd8>)
 80011b6:	5cd3      	ldrb	r3, [r2, r3]
 80011b8:	2b0a      	cmp	r3, #10
 80011ba:	d10b      	bne.n	80011d4 <HAL_UART_RxCpltCallback+0x50>
    	{
    		rx2Data[i] = '\0';
 80011bc:	4b24      	ldr	r3, [pc, #144]	@ (8001250 <HAL_UART_RxCpltCallback+0xcc>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a25      	ldr	r2, [pc, #148]	@ (8001258 <HAL_UART_RxCpltCallback+0xd4>)
 80011c2:	2100      	movs	r1, #0
 80011c4:	54d1      	strb	r1, [r2, r3]
    		rx2Flag = 1;
 80011c6:	4b26      	ldr	r3, [pc, #152]	@ (8001260 <HAL_UART_RxCpltCallback+0xdc>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	701a      	strb	r2, [r3, #0]
    		i = 0;
 80011cc:	4b20      	ldr	r3, [pc, #128]	@ (8001250 <HAL_UART_RxCpltCallback+0xcc>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	e004      	b.n	80011de <HAL_UART_RxCpltCallback+0x5a>
    	}
    	else
    	{
    		i++;
 80011d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001250 <HAL_UART_RxCpltCallback+0xcc>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	3301      	adds	r3, #1
 80011da:	4a1d      	ldr	r2, [pc, #116]	@ (8001250 <HAL_UART_RxCpltCallback+0xcc>)
 80011dc:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(&huart2, &rx2char,1);
 80011de:	2201      	movs	r2, #1
 80011e0:	491c      	ldr	r1, [pc, #112]	@ (8001254 <HAL_UART_RxCpltCallback+0xd0>)
 80011e2:	4820      	ldr	r0, [pc, #128]	@ (8001264 <HAL_UART_RxCpltCallback+0xe0>)
 80011e4:	f001 fbf9 	bl	80029da <HAL_UART_Receive_IT>
    }
    if(huart->Instance == USART6)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a1e      	ldr	r2, [pc, #120]	@ (8001268 <HAL_UART_RxCpltCallback+0xe4>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d127      	bne.n	8001242 <HAL_UART_RxCpltCallback+0xbe>
    {
    	static int i=0;
    	btData[i] = btchar;
 80011f2:	4b1e      	ldr	r3, [pc, #120]	@ (800126c <HAL_UART_RxCpltCallback+0xe8>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a1e      	ldr	r2, [pc, #120]	@ (8001270 <HAL_UART_RxCpltCallback+0xec>)
 80011f8:	7811      	ldrb	r1, [r2, #0]
 80011fa:	4a18      	ldr	r2, [pc, #96]	@ (800125c <HAL_UART_RxCpltCallback+0xd8>)
 80011fc:	54d1      	strb	r1, [r2, r3]
    	if((btData[i] == '\n') || btData[i] == '\r')
 80011fe:	4b1b      	ldr	r3, [pc, #108]	@ (800126c <HAL_UART_RxCpltCallback+0xe8>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a16      	ldr	r2, [pc, #88]	@ (800125c <HAL_UART_RxCpltCallback+0xd8>)
 8001204:	5cd3      	ldrb	r3, [r2, r3]
 8001206:	2b0a      	cmp	r3, #10
 8001208:	d005      	beq.n	8001216 <HAL_UART_RxCpltCallback+0x92>
 800120a:	4b18      	ldr	r3, [pc, #96]	@ (800126c <HAL_UART_RxCpltCallback+0xe8>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a13      	ldr	r2, [pc, #76]	@ (800125c <HAL_UART_RxCpltCallback+0xd8>)
 8001210:	5cd3      	ldrb	r3, [r2, r3]
 8001212:	2b0d      	cmp	r3, #13
 8001214:	d10b      	bne.n	800122e <HAL_UART_RxCpltCallback+0xaa>
    	{
    		btData[i] = '\0';
 8001216:	4b15      	ldr	r3, [pc, #84]	@ (800126c <HAL_UART_RxCpltCallback+0xe8>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a10      	ldr	r2, [pc, #64]	@ (800125c <HAL_UART_RxCpltCallback+0xd8>)
 800121c:	2100      	movs	r1, #0
 800121e:	54d1      	strb	r1, [r2, r3]
    		btFlag = 1;
 8001220:	4b14      	ldr	r3, [pc, #80]	@ (8001274 <HAL_UART_RxCpltCallback+0xf0>)
 8001222:	2201      	movs	r2, #1
 8001224:	701a      	strb	r2, [r3, #0]
    		i = 0;
 8001226:	4b11      	ldr	r3, [pc, #68]	@ (800126c <HAL_UART_RxCpltCallback+0xe8>)
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	e004      	b.n	8001238 <HAL_UART_RxCpltCallback+0xb4>
    	}
    	else
    	{
    		i++;
 800122e:	4b0f      	ldr	r3, [pc, #60]	@ (800126c <HAL_UART_RxCpltCallback+0xe8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	3301      	adds	r3, #1
 8001234:	4a0d      	ldr	r2, [pc, #52]	@ (800126c <HAL_UART_RxCpltCallback+0xe8>)
 8001236:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(&huart6, &btchar,1);
 8001238:	2201      	movs	r2, #1
 800123a:	490d      	ldr	r1, [pc, #52]	@ (8001270 <HAL_UART_RxCpltCallback+0xec>)
 800123c:	480e      	ldr	r0, [pc, #56]	@ (8001278 <HAL_UART_RxCpltCallback+0xf4>)
 800123e:	f001 fbcc 	bl	80029da <HAL_UART_Receive_IT>
    }
}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40004400 	.word	0x40004400
 8001250:	200004dc 	.word	0x200004dc
 8001254:	200003e0 	.word	0x200003e0
 8001258:	200003e4 	.word	0x200003e4
 800125c:	20000418 	.word	0x20000418
 8001260:	200003e1 	.word	0x200003e1
 8001264:	2000044c 	.word	0x2000044c
 8001268:	40011400 	.word	0x40011400
 800126c:	200004e0 	.word	0x200004e0
 8001270:	20000417 	.word	0x20000417
 8001274:	20000416 	.word	0x20000416
 8001278:	20000494 	.word	0x20000494

0800127c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800127c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001280:	f7ff fe78 	bl	8000f74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001284:	480c      	ldr	r0, [pc, #48]	@ (80012b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001286:	490d      	ldr	r1, [pc, #52]	@ (80012bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001288:	4a0d      	ldr	r2, [pc, #52]	@ (80012c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800128a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800128c:	e002      	b.n	8001294 <LoopCopyDataInit>

0800128e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800128e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001292:	3304      	adds	r3, #4

08001294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001298:	d3f9      	bcc.n	800128e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800129a:	4a0a      	ldr	r2, [pc, #40]	@ (80012c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800129c:	4c0a      	ldr	r4, [pc, #40]	@ (80012c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800129e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a0:	e001      	b.n	80012a6 <LoopFillZerobss>

080012a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a4:	3204      	adds	r2, #4

080012a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a8:	d3fb      	bcc.n	80012a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012aa:	f004 fb23 	bl	80058f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ae:	f7ff fc15 	bl	8000adc <main>
  bx  lr    
 80012b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012bc:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80012c0:	08006b0c 	.word	0x08006b0c
  ldr r2, =_sbss
 80012c4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80012c8:	20004388 	.word	0x20004388

080012cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012cc:	e7fe      	b.n	80012cc <ADC_IRQHandler>
	...

080012d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001310 <HAL_Init+0x40>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001310 <HAL_Init+0x40>)
 80012da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001310 <HAL_Init+0x40>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001310 <HAL_Init+0x40>)
 80012e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012ec:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <HAL_Init+0x40>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a07      	ldr	r2, [pc, #28]	@ (8001310 <HAL_Init+0x40>)
 80012f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f8:	2003      	movs	r0, #3
 80012fa:	f000 f8d8 	bl	80014ae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012fe:	200f      	movs	r0, #15
 8001300:	f7ff fcc6 	bl	8000c90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001304:	f7ff fc98 	bl	8000c38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40023c00 	.word	0x40023c00

08001314 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001318:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <HAL_IncTick+0x20>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	4b06      	ldr	r3, [pc, #24]	@ (8001338 <HAL_IncTick+0x24>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4413      	add	r3, r2
 8001324:	4a04      	ldr	r2, [pc, #16]	@ (8001338 <HAL_IncTick+0x24>)
 8001326:	6013      	str	r3, [r2, #0]
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	20000020 	.word	0x20000020
 8001338:	200004e4 	.word	0x200004e4

0800133c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  return uwTick;
 8001340:	4b03      	ldr	r3, [pc, #12]	@ (8001350 <HAL_GetTick+0x14>)
 8001342:	681b      	ldr	r3, [r3, #0]
}
 8001344:	4618      	mov	r0, r3
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	200004e4 	.word	0x200004e4

08001354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001364:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001370:	4013      	ands	r3, r2
 8001372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800137c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001380:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001386:	4a04      	ldr	r2, [pc, #16]	@ (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	60d3      	str	r3, [r2, #12]
}
 800138c:	bf00      	nop
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a0:	4b04      	ldr	r3, [pc, #16]	@ (80013b4 <__NVIC_GetPriorityGrouping+0x18>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	f003 0307 	and.w	r3, r3, #7
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	db0b      	blt.n	80013e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	4907      	ldr	r1, [pc, #28]	@ (80013f0 <__NVIC_EnableIRQ+0x38>)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	095b      	lsrs	r3, r3, #5
 80013d8:	2001      	movs	r0, #1
 80013da:	fa00 f202 	lsl.w	r2, r0, r2
 80013de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000e100 	.word	0xe000e100

080013f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	6039      	str	r1, [r7, #0]
 80013fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001404:	2b00      	cmp	r3, #0
 8001406:	db0a      	blt.n	800141e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	b2da      	uxtb	r2, r3
 800140c:	490c      	ldr	r1, [pc, #48]	@ (8001440 <__NVIC_SetPriority+0x4c>)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	0112      	lsls	r2, r2, #4
 8001414:	b2d2      	uxtb	r2, r2
 8001416:	440b      	add	r3, r1
 8001418:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800141c:	e00a      	b.n	8001434 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	b2da      	uxtb	r2, r3
 8001422:	4908      	ldr	r1, [pc, #32]	@ (8001444 <__NVIC_SetPriority+0x50>)
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	f003 030f 	and.w	r3, r3, #15
 800142a:	3b04      	subs	r3, #4
 800142c:	0112      	lsls	r2, r2, #4
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	440b      	add	r3, r1
 8001432:	761a      	strb	r2, [r3, #24]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000e100 	.word	0xe000e100
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001448:	b480      	push	{r7}
 800144a:	b089      	sub	sp, #36	@ 0x24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f1c3 0307 	rsb	r3, r3, #7
 8001462:	2b04      	cmp	r3, #4
 8001464:	bf28      	it	cs
 8001466:	2304      	movcs	r3, #4
 8001468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3304      	adds	r3, #4
 800146e:	2b06      	cmp	r3, #6
 8001470:	d902      	bls.n	8001478 <NVIC_EncodePriority+0x30>
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	3b03      	subs	r3, #3
 8001476:	e000      	b.n	800147a <NVIC_EncodePriority+0x32>
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800147c:	f04f 32ff 	mov.w	r2, #4294967295
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43da      	mvns	r2, r3
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	401a      	ands	r2, r3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001490:	f04f 31ff 	mov.w	r1, #4294967295
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	fa01 f303 	lsl.w	r3, r1, r3
 800149a:	43d9      	mvns	r1, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	4313      	orrs	r3, r2
         );
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3724      	adds	r7, #36	@ 0x24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff ff4c 	bl	8001354 <__NVIC_SetPriorityGrouping>
}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
 80014d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d6:	f7ff ff61 	bl	800139c <__NVIC_GetPriorityGrouping>
 80014da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	68b9      	ldr	r1, [r7, #8]
 80014e0:	6978      	ldr	r0, [r7, #20]
 80014e2:	f7ff ffb1 	bl	8001448 <NVIC_EncodePriority>
 80014e6:	4602      	mov	r2, r0
 80014e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ec:	4611      	mov	r1, r2
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff ff80 	bl	80013f4 <__NVIC_SetPriority>
}
 80014f4:	bf00      	nop
 80014f6:	3718      	adds	r7, #24
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff ff54 	bl	80013b8 <__NVIC_EnableIRQ>
}
 8001510:	bf00      	nop
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001524:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001526:	f7ff ff09 	bl	800133c <HAL_GetTick>
 800152a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001532:	b2db      	uxtb	r3, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d008      	beq.n	800154a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2280      	movs	r2, #128	@ 0x80
 800153c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e052      	b.n	80015f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f022 0216 	bic.w	r2, r2, #22
 8001558:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	695a      	ldr	r2, [r3, #20]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001568:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156e:	2b00      	cmp	r3, #0
 8001570:	d103      	bne.n	800157a <HAL_DMA_Abort+0x62>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001576:	2b00      	cmp	r3, #0
 8001578:	d007      	beq.n	800158a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f022 0208 	bic.w	r2, r2, #8
 8001588:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f022 0201 	bic.w	r2, r2, #1
 8001598:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800159a:	e013      	b.n	80015c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800159c:	f7ff fece 	bl	800133c <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b05      	cmp	r3, #5
 80015a8:	d90c      	bls.n	80015c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2220      	movs	r2, #32
 80015ae:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2203      	movs	r2, #3
 80015b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e015      	b.n	80015f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d1e4      	bne.n	800159c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015d6:	223f      	movs	r2, #63	@ 0x3f
 80015d8:	409a      	lsls	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2201      	movs	r2, #1
 80015e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d004      	beq.n	8001616 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2280      	movs	r2, #128	@ 0x80
 8001610:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e00c      	b.n	8001630 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2205      	movs	r2, #5
 800161a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 0201 	bic.w	r2, r2, #1
 800162c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800163c:	b480      	push	{r7}
 800163e:	b089      	sub	sp, #36	@ 0x24
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800164e:	2300      	movs	r3, #0
 8001650:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
 8001656:	e159      	b.n	800190c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001658:	2201      	movs	r2, #1
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	697a      	ldr	r2, [r7, #20]
 8001668:	4013      	ands	r3, r2
 800166a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	429a      	cmp	r2, r3
 8001672:	f040 8148 	bne.w	8001906 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f003 0303 	and.w	r3, r3, #3
 800167e:	2b01      	cmp	r3, #1
 8001680:	d005      	beq.n	800168e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800168a:	2b02      	cmp	r3, #2
 800168c:	d130      	bne.n	80016f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	2203      	movs	r2, #3
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43db      	mvns	r3, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4013      	ands	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	68da      	ldr	r2, [r3, #12]
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016c4:	2201      	movs	r2, #1
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4013      	ands	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	091b      	lsrs	r3, r3, #4
 80016da:	f003 0201 	and.w	r2, r3, #1
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	2b03      	cmp	r3, #3
 80016fa:	d017      	beq.n	800172c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	2203      	movs	r2, #3
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4313      	orrs	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 0303 	and.w	r3, r3, #3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d123      	bne.n	8001780 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	08da      	lsrs	r2, r3, #3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3208      	adds	r2, #8
 8001740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001744:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	220f      	movs	r2, #15
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4013      	ands	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	691a      	ldr	r2, [r3, #16]
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	08da      	lsrs	r2, r3, #3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3208      	adds	r2, #8
 800177a:	69b9      	ldr	r1, [r7, #24]
 800177c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	2203      	movs	r2, #3
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4013      	ands	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 0203 	and.w	r2, r3, #3
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f000 80a2 	beq.w	8001906 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	4b57      	ldr	r3, [pc, #348]	@ (8001924 <HAL_GPIO_Init+0x2e8>)
 80017c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ca:	4a56      	ldr	r2, [pc, #344]	@ (8001924 <HAL_GPIO_Init+0x2e8>)
 80017cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80017d2:	4b54      	ldr	r3, [pc, #336]	@ (8001924 <HAL_GPIO_Init+0x2e8>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017de:	4a52      	ldr	r2, [pc, #328]	@ (8001928 <HAL_GPIO_Init+0x2ec>)
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	089b      	lsrs	r3, r3, #2
 80017e4:	3302      	adds	r3, #2
 80017e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f003 0303 	and.w	r3, r3, #3
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	220f      	movs	r2, #15
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43db      	mvns	r3, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4013      	ands	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a49      	ldr	r2, [pc, #292]	@ (800192c <HAL_GPIO_Init+0x2f0>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d019      	beq.n	800183e <HAL_GPIO_Init+0x202>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a48      	ldr	r2, [pc, #288]	@ (8001930 <HAL_GPIO_Init+0x2f4>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d013      	beq.n	800183a <HAL_GPIO_Init+0x1fe>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a47      	ldr	r2, [pc, #284]	@ (8001934 <HAL_GPIO_Init+0x2f8>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d00d      	beq.n	8001836 <HAL_GPIO_Init+0x1fa>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a46      	ldr	r2, [pc, #280]	@ (8001938 <HAL_GPIO_Init+0x2fc>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d007      	beq.n	8001832 <HAL_GPIO_Init+0x1f6>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a45      	ldr	r2, [pc, #276]	@ (800193c <HAL_GPIO_Init+0x300>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d101      	bne.n	800182e <HAL_GPIO_Init+0x1f2>
 800182a:	2304      	movs	r3, #4
 800182c:	e008      	b.n	8001840 <HAL_GPIO_Init+0x204>
 800182e:	2307      	movs	r3, #7
 8001830:	e006      	b.n	8001840 <HAL_GPIO_Init+0x204>
 8001832:	2303      	movs	r3, #3
 8001834:	e004      	b.n	8001840 <HAL_GPIO_Init+0x204>
 8001836:	2302      	movs	r3, #2
 8001838:	e002      	b.n	8001840 <HAL_GPIO_Init+0x204>
 800183a:	2301      	movs	r3, #1
 800183c:	e000      	b.n	8001840 <HAL_GPIO_Init+0x204>
 800183e:	2300      	movs	r3, #0
 8001840:	69fa      	ldr	r2, [r7, #28]
 8001842:	f002 0203 	and.w	r2, r2, #3
 8001846:	0092      	lsls	r2, r2, #2
 8001848:	4093      	lsls	r3, r2
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4313      	orrs	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001850:	4935      	ldr	r1, [pc, #212]	@ (8001928 <HAL_GPIO_Init+0x2ec>)
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	089b      	lsrs	r3, r3, #2
 8001856:	3302      	adds	r3, #2
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800185e:	4b38      	ldr	r3, [pc, #224]	@ (8001940 <HAL_GPIO_Init+0x304>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	43db      	mvns	r3, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4013      	ands	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	4313      	orrs	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001882:	4a2f      	ldr	r2, [pc, #188]	@ (8001940 <HAL_GPIO_Init+0x304>)
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001888:	4b2d      	ldr	r3, [pc, #180]	@ (8001940 <HAL_GPIO_Init+0x304>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	43db      	mvns	r3, r3
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	4013      	ands	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018ac:	4a24      	ldr	r2, [pc, #144]	@ (8001940 <HAL_GPIO_Init+0x304>)
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018b2:	4b23      	ldr	r3, [pc, #140]	@ (8001940 <HAL_GPIO_Init+0x304>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	43db      	mvns	r3, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4013      	ands	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018d6:	4a1a      	ldr	r2, [pc, #104]	@ (8001940 <HAL_GPIO_Init+0x304>)
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018dc:	4b18      	ldr	r3, [pc, #96]	@ (8001940 <HAL_GPIO_Init+0x304>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4013      	ands	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d003      	beq.n	8001900 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001900:	4a0f      	ldr	r2, [pc, #60]	@ (8001940 <HAL_GPIO_Init+0x304>)
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3301      	adds	r3, #1
 800190a:	61fb      	str	r3, [r7, #28]
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	2b0f      	cmp	r3, #15
 8001910:	f67f aea2 	bls.w	8001658 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001914:	bf00      	nop
 8001916:	bf00      	nop
 8001918:	3724      	adds	r7, #36	@ 0x24
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800
 8001928:	40013800 	.word	0x40013800
 800192c:	40020000 	.word	0x40020000
 8001930:	40020400 	.word	0x40020400
 8001934:	40020800 	.word	0x40020800
 8001938:	40020c00 	.word	0x40020c00
 800193c:	40021000 	.word	0x40021000
 8001940:	40013c00 	.word	0x40013c00

08001944 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	460b      	mov	r3, r1
 800194e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	691a      	ldr	r2, [r3, #16]
 8001954:	887b      	ldrh	r3, [r7, #2]
 8001956:	4013      	ands	r3, r2
 8001958:	2b00      	cmp	r3, #0
 800195a:	d002      	beq.n	8001962 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800195c:	2301      	movs	r3, #1
 800195e:	73fb      	strb	r3, [r7, #15]
 8001960:	e001      	b.n	8001966 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001962:	2300      	movs	r3, #0
 8001964:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001966:	7bfb      	ldrb	r3, [r7, #15]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	807b      	strh	r3, [r7, #2]
 8001980:	4613      	mov	r3, r2
 8001982:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001984:	787b      	ldrb	r3, [r7, #1]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800198a:	887a      	ldrh	r2, [r7, #2]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001990:	e003      	b.n	800199a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001992:	887b      	ldrh	r3, [r7, #2]
 8001994:	041a      	lsls	r2, r3, #16
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	619a      	str	r2, [r3, #24]
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
	...

080019a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e267      	b.n	8001e8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d075      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80019c6:	4b88      	ldr	r3, [pc, #544]	@ (8001be8 <HAL_RCC_OscConfig+0x240>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 030c 	and.w	r3, r3, #12
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	d00c      	beq.n	80019ec <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019d2:	4b85      	ldr	r3, [pc, #532]	@ (8001be8 <HAL_RCC_OscConfig+0x240>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80019da:	2b08      	cmp	r3, #8
 80019dc:	d112      	bne.n	8001a04 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019de:	4b82      	ldr	r3, [pc, #520]	@ (8001be8 <HAL_RCC_OscConfig+0x240>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019ea:	d10b      	bne.n	8001a04 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ec:	4b7e      	ldr	r3, [pc, #504]	@ (8001be8 <HAL_RCC_OscConfig+0x240>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d05b      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x108>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d157      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e242      	b.n	8001e8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a0c:	d106      	bne.n	8001a1c <HAL_RCC_OscConfig+0x74>
 8001a0e:	4b76      	ldr	r3, [pc, #472]	@ (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a75      	ldr	r2, [pc, #468]	@ (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001a14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a18:	6013      	str	r3, [r2, #0]
 8001a1a:	e01d      	b.n	8001a58 <HAL_RCC_OscConfig+0xb0>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a24:	d10c      	bne.n	8001a40 <HAL_RCC_OscConfig+0x98>
 8001a26:	4b70      	ldr	r3, [pc, #448]	@ (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a6f      	ldr	r2, [pc, #444]	@ (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001a2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a30:	6013      	str	r3, [r2, #0]
 8001a32:	4b6d      	ldr	r3, [pc, #436]	@ (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a6c      	ldr	r2, [pc, #432]	@ (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001a38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a3c:	6013      	str	r3, [r2, #0]
 8001a3e:	e00b      	b.n	8001a58 <HAL_RCC_OscConfig+0xb0>
 8001a40:	4b69      	ldr	r3, [pc, #420]	@ (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a68      	ldr	r2, [pc, #416]	@ (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001a46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a4a:	6013      	str	r3, [r2, #0]
 8001a4c:	4b66      	ldr	r3, [pc, #408]	@ (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a65      	ldr	r2, [pc, #404]	@ (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001a52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d013      	beq.n	8001a88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a60:	f7ff fc6c 	bl	800133c <HAL_GetTick>
 8001a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a68:	f7ff fc68 	bl	800133c <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b64      	cmp	r3, #100	@ 0x64
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e207      	b.n	8001e8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7a:	4b5b      	ldr	r3, [pc, #364]	@ (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0f0      	beq.n	8001a68 <HAL_RCC_OscConfig+0xc0>
 8001a86:	e014      	b.n	8001ab2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a88:	f7ff fc58 	bl	800133c <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a90:	f7ff fc54 	bl	800133c <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b64      	cmp	r3, #100	@ 0x64
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e1f3      	b.n	8001e8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa2:	4b51      	ldr	r3, [pc, #324]	@ (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f0      	bne.n	8001a90 <HAL_RCC_OscConfig+0xe8>
 8001aae:	e000      	b.n	8001ab2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d063      	beq.n	8001b86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001abe:	4b4a      	ldr	r3, [pc, #296]	@ (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f003 030c 	and.w	r3, r3, #12
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d00b      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aca:	4b47      	ldr	r3, [pc, #284]	@ (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001ad2:	2b08      	cmp	r3, #8
 8001ad4:	d11c      	bne.n	8001b10 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ad6:	4b44      	ldr	r3, [pc, #272]	@ (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d116      	bne.n	8001b10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae2:	4b41      	ldr	r3, [pc, #260]	@ (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d005      	beq.n	8001afa <HAL_RCC_OscConfig+0x152>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d001      	beq.n	8001afa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e1c7      	b.n	8001e8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001afa:	4b3b      	ldr	r3, [pc, #236]	@ (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	691b      	ldr	r3, [r3, #16]
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	4937      	ldr	r1, [pc, #220]	@ (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b0e:	e03a      	b.n	8001b86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d020      	beq.n	8001b5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b18:	4b34      	ldr	r3, [pc, #208]	@ (8001bec <HAL_RCC_OscConfig+0x244>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1e:	f7ff fc0d 	bl	800133c <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b26:	f7ff fc09 	bl	800133c <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e1a8      	b.n	8001e8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b38:	4b2b      	ldr	r3, [pc, #172]	@ (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0f0      	beq.n	8001b26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b44:	4b28      	ldr	r3, [pc, #160]	@ (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	4925      	ldr	r1, [pc, #148]	@ (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	600b      	str	r3, [r1, #0]
 8001b58:	e015      	b.n	8001b86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b5a:	4b24      	ldr	r3, [pc, #144]	@ (8001bec <HAL_RCC_OscConfig+0x244>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b60:	f7ff fbec 	bl	800133c <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b68:	f7ff fbe8 	bl	800133c <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e187      	b.n	8001e8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f0      	bne.n	8001b68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d036      	beq.n	8001c00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d016      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b9a:	4b15      	ldr	r3, [pc, #84]	@ (8001bf0 <HAL_RCC_OscConfig+0x248>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba0:	f7ff fbcc 	bl	800133c <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba8:	f7ff fbc8 	bl	800133c <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e167      	b.n	8001e8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bba:	4b0b      	ldr	r3, [pc, #44]	@ (8001be8 <HAL_RCC_OscConfig+0x240>)
 8001bbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0f0      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x200>
 8001bc6:	e01b      	b.n	8001c00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bc8:	4b09      	ldr	r3, [pc, #36]	@ (8001bf0 <HAL_RCC_OscConfig+0x248>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bce:	f7ff fbb5 	bl	800133c <HAL_GetTick>
 8001bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd4:	e00e      	b.n	8001bf4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd6:	f7ff fbb1 	bl	800133c <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d907      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e150      	b.n	8001e8a <HAL_RCC_OscConfig+0x4e2>
 8001be8:	40023800 	.word	0x40023800
 8001bec:	42470000 	.word	0x42470000
 8001bf0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf4:	4b88      	ldr	r3, [pc, #544]	@ (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001bf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1ea      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 8097 	beq.w	8001d3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c12:	4b81      	ldr	r3, [pc, #516]	@ (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10f      	bne.n	8001c3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60bb      	str	r3, [r7, #8]
 8001c22:	4b7d      	ldr	r3, [pc, #500]	@ (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c26:	4a7c      	ldr	r2, [pc, #496]	@ (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001c28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c2e:	4b7a      	ldr	r3, [pc, #488]	@ (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c3e:	4b77      	ldr	r3, [pc, #476]	@ (8001e1c <HAL_RCC_OscConfig+0x474>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d118      	bne.n	8001c7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c4a:	4b74      	ldr	r3, [pc, #464]	@ (8001e1c <HAL_RCC_OscConfig+0x474>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a73      	ldr	r2, [pc, #460]	@ (8001e1c <HAL_RCC_OscConfig+0x474>)
 8001c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c56:	f7ff fb71 	bl	800133c <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c5e:	f7ff fb6d 	bl	800133c <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e10c      	b.n	8001e8a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c70:	4b6a      	ldr	r3, [pc, #424]	@ (8001e1c <HAL_RCC_OscConfig+0x474>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0f0      	beq.n	8001c5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d106      	bne.n	8001c92 <HAL_RCC_OscConfig+0x2ea>
 8001c84:	4b64      	ldr	r3, [pc, #400]	@ (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c88:	4a63      	ldr	r2, [pc, #396]	@ (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c90:	e01c      	b.n	8001ccc <HAL_RCC_OscConfig+0x324>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	2b05      	cmp	r3, #5
 8001c98:	d10c      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x30c>
 8001c9a:	4b5f      	ldr	r3, [pc, #380]	@ (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c9e:	4a5e      	ldr	r2, [pc, #376]	@ (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001ca0:	f043 0304 	orr.w	r3, r3, #4
 8001ca4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ca6:	4b5c      	ldr	r3, [pc, #368]	@ (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001caa:	4a5b      	ldr	r2, [pc, #364]	@ (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cb2:	e00b      	b.n	8001ccc <HAL_RCC_OscConfig+0x324>
 8001cb4:	4b58      	ldr	r3, [pc, #352]	@ (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cb8:	4a57      	ldr	r2, [pc, #348]	@ (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001cba:	f023 0301 	bic.w	r3, r3, #1
 8001cbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cc0:	4b55      	ldr	r3, [pc, #340]	@ (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cc4:	4a54      	ldr	r2, [pc, #336]	@ (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001cc6:	f023 0304 	bic.w	r3, r3, #4
 8001cca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d015      	beq.n	8001d00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd4:	f7ff fb32 	bl	800133c <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cda:	e00a      	b.n	8001cf2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cdc:	f7ff fb2e 	bl	800133c <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e0cb      	b.n	8001e8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf2:	4b49      	ldr	r3, [pc, #292]	@ (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0ee      	beq.n	8001cdc <HAL_RCC_OscConfig+0x334>
 8001cfe:	e014      	b.n	8001d2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d00:	f7ff fb1c 	bl	800133c <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d06:	e00a      	b.n	8001d1e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d08:	f7ff fb18 	bl	800133c <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e0b5      	b.n	8001e8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d1e:	4b3e      	ldr	r3, [pc, #248]	@ (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1ee      	bne.n	8001d08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d2a:	7dfb      	ldrb	r3, [r7, #23]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d105      	bne.n	8001d3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d30:	4b39      	ldr	r3, [pc, #228]	@ (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d34:	4a38      	ldr	r2, [pc, #224]	@ (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001d36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d3a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f000 80a1 	beq.w	8001e88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d46:	4b34      	ldr	r3, [pc, #208]	@ (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 030c 	and.w	r3, r3, #12
 8001d4e:	2b08      	cmp	r3, #8
 8001d50:	d05c      	beq.n	8001e0c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d141      	bne.n	8001dde <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5a:	4b31      	ldr	r3, [pc, #196]	@ (8001e20 <HAL_RCC_OscConfig+0x478>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d60:	f7ff faec 	bl	800133c <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d68:	f7ff fae8 	bl	800133c <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e087      	b.n	8001e8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d7a:	4b27      	ldr	r3, [pc, #156]	@ (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f0      	bne.n	8001d68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69da      	ldr	r2, [r3, #28]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d94:	019b      	lsls	r3, r3, #6
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d9c:	085b      	lsrs	r3, r3, #1
 8001d9e:	3b01      	subs	r3, #1
 8001da0:	041b      	lsls	r3, r3, #16
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da8:	061b      	lsls	r3, r3, #24
 8001daa:	491b      	ldr	r1, [pc, #108]	@ (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001db0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e20 <HAL_RCC_OscConfig+0x478>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db6:	f7ff fac1 	bl	800133c <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dbe:	f7ff fabd 	bl	800133c <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e05c      	b.n	8001e8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dd0:	4b11      	ldr	r3, [pc, #68]	@ (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0f0      	beq.n	8001dbe <HAL_RCC_OscConfig+0x416>
 8001ddc:	e054      	b.n	8001e88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dde:	4b10      	ldr	r3, [pc, #64]	@ (8001e20 <HAL_RCC_OscConfig+0x478>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de4:	f7ff faaa 	bl	800133c <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dec:	f7ff faa6 	bl	800133c <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e045      	b.n	8001e8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dfe:	4b06      	ldr	r3, [pc, #24]	@ (8001e18 <HAL_RCC_OscConfig+0x470>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x444>
 8001e0a:	e03d      	b.n	8001e88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d107      	bne.n	8001e24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e038      	b.n	8001e8a <HAL_RCC_OscConfig+0x4e2>
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40007000 	.word	0x40007000
 8001e20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e24:	4b1b      	ldr	r3, [pc, #108]	@ (8001e94 <HAL_RCC_OscConfig+0x4ec>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d028      	beq.n	8001e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d121      	bne.n	8001e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d11a      	bne.n	8001e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e54:	4013      	ands	r3, r2
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d111      	bne.n	8001e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e6a:	085b      	lsrs	r3, r3, #1
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d107      	bne.n	8001e84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d001      	beq.n	8001e88 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e000      	b.n	8001e8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40023800 	.word	0x40023800

08001e98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d101      	bne.n	8001eac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e0cc      	b.n	8002046 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001eac:	4b68      	ldr	r3, [pc, #416]	@ (8002050 <HAL_RCC_ClockConfig+0x1b8>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d90c      	bls.n	8001ed4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eba:	4b65      	ldr	r3, [pc, #404]	@ (8002050 <HAL_RCC_ClockConfig+0x1b8>)
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec2:	4b63      	ldr	r3, [pc, #396]	@ (8002050 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d001      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e0b8      	b.n	8002046 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d020      	beq.n	8001f22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d005      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001eec:	4b59      	ldr	r3, [pc, #356]	@ (8002054 <HAL_RCC_ClockConfig+0x1bc>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	4a58      	ldr	r2, [pc, #352]	@ (8002054 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001ef6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0308 	and.w	r3, r3, #8
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d005      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f04:	4b53      	ldr	r3, [pc, #332]	@ (8002054 <HAL_RCC_ClockConfig+0x1bc>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	4a52      	ldr	r2, [pc, #328]	@ (8002054 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f10:	4b50      	ldr	r3, [pc, #320]	@ (8002054 <HAL_RCC_ClockConfig+0x1bc>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	494d      	ldr	r1, [pc, #308]	@ (8002054 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d044      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d107      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f36:	4b47      	ldr	r3, [pc, #284]	@ (8002054 <HAL_RCC_ClockConfig+0x1bc>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d119      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e07f      	b.n	8002046 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d003      	beq.n	8001f56 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f52:	2b03      	cmp	r3, #3
 8001f54:	d107      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f56:	4b3f      	ldr	r3, [pc, #252]	@ (8002054 <HAL_RCC_ClockConfig+0x1bc>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d109      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e06f      	b.n	8002046 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f66:	4b3b      	ldr	r3, [pc, #236]	@ (8002054 <HAL_RCC_ClockConfig+0x1bc>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e067      	b.n	8002046 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f76:	4b37      	ldr	r3, [pc, #220]	@ (8002054 <HAL_RCC_ClockConfig+0x1bc>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f023 0203 	bic.w	r2, r3, #3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	4934      	ldr	r1, [pc, #208]	@ (8002054 <HAL_RCC_ClockConfig+0x1bc>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f88:	f7ff f9d8 	bl	800133c <HAL_GetTick>
 8001f8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8e:	e00a      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f90:	f7ff f9d4 	bl	800133c <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e04f      	b.n	8002046 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa6:	4b2b      	ldr	r3, [pc, #172]	@ (8002054 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 020c 	and.w	r2, r3, #12
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d1eb      	bne.n	8001f90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fb8:	4b25      	ldr	r3, [pc, #148]	@ (8002050 <HAL_RCC_ClockConfig+0x1b8>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d20c      	bcs.n	8001fe0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc6:	4b22      	ldr	r3, [pc, #136]	@ (8002050 <HAL_RCC_ClockConfig+0x1b8>)
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fce:	4b20      	ldr	r3, [pc, #128]	@ (8002050 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d001      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e032      	b.n	8002046 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d008      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fec:	4b19      	ldr	r3, [pc, #100]	@ (8002054 <HAL_RCC_ClockConfig+0x1bc>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	4916      	ldr	r1, [pc, #88]	@ (8002054 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	2b00      	cmp	r3, #0
 8002008:	d009      	beq.n	800201e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800200a:	4b12      	ldr	r3, [pc, #72]	@ (8002054 <HAL_RCC_ClockConfig+0x1bc>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	490e      	ldr	r1, [pc, #56]	@ (8002054 <HAL_RCC_ClockConfig+0x1bc>)
 800201a:	4313      	orrs	r3, r2
 800201c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800201e:	f000 f821 	bl	8002064 <HAL_RCC_GetSysClockFreq>
 8002022:	4602      	mov	r2, r0
 8002024:	4b0b      	ldr	r3, [pc, #44]	@ (8002054 <HAL_RCC_ClockConfig+0x1bc>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	091b      	lsrs	r3, r3, #4
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	490a      	ldr	r1, [pc, #40]	@ (8002058 <HAL_RCC_ClockConfig+0x1c0>)
 8002030:	5ccb      	ldrb	r3, [r1, r3]
 8002032:	fa22 f303 	lsr.w	r3, r2, r3
 8002036:	4a09      	ldr	r2, [pc, #36]	@ (800205c <HAL_RCC_ClockConfig+0x1c4>)
 8002038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800203a:	4b09      	ldr	r3, [pc, #36]	@ (8002060 <HAL_RCC_ClockConfig+0x1c8>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe fe26 	bl	8000c90 <HAL_InitTick>

  return HAL_OK;
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40023c00 	.word	0x40023c00
 8002054:	40023800 	.word	0x40023800
 8002058:	08006900 	.word	0x08006900
 800205c:	20000018 	.word	0x20000018
 8002060:	2000001c 	.word	0x2000001c

08002064 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002068:	b094      	sub	sp, #80	@ 0x50
 800206a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800206c:	2300      	movs	r3, #0
 800206e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002070:	2300      	movs	r3, #0
 8002072:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002074:	2300      	movs	r3, #0
 8002076:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002078:	2300      	movs	r3, #0
 800207a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800207c:	4b79      	ldr	r3, [pc, #484]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x200>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 030c 	and.w	r3, r3, #12
 8002084:	2b08      	cmp	r3, #8
 8002086:	d00d      	beq.n	80020a4 <HAL_RCC_GetSysClockFreq+0x40>
 8002088:	2b08      	cmp	r3, #8
 800208a:	f200 80e1 	bhi.w	8002250 <HAL_RCC_GetSysClockFreq+0x1ec>
 800208e:	2b00      	cmp	r3, #0
 8002090:	d002      	beq.n	8002098 <HAL_RCC_GetSysClockFreq+0x34>
 8002092:	2b04      	cmp	r3, #4
 8002094:	d003      	beq.n	800209e <HAL_RCC_GetSysClockFreq+0x3a>
 8002096:	e0db      	b.n	8002250 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002098:	4b73      	ldr	r3, [pc, #460]	@ (8002268 <HAL_RCC_GetSysClockFreq+0x204>)
 800209a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800209c:	e0db      	b.n	8002256 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800209e:	4b73      	ldr	r3, [pc, #460]	@ (800226c <HAL_RCC_GetSysClockFreq+0x208>)
 80020a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80020a2:	e0d8      	b.n	8002256 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020a4:	4b6f      	ldr	r3, [pc, #444]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x200>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80020ac:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020ae:	4b6d      	ldr	r3, [pc, #436]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x200>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d063      	beq.n	8002182 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020ba:	4b6a      	ldr	r3, [pc, #424]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x200>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	099b      	lsrs	r3, r3, #6
 80020c0:	2200      	movs	r2, #0
 80020c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80020c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80020c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020cc:	633b      	str	r3, [r7, #48]	@ 0x30
 80020ce:	2300      	movs	r3, #0
 80020d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80020d2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80020d6:	4622      	mov	r2, r4
 80020d8:	462b      	mov	r3, r5
 80020da:	f04f 0000 	mov.w	r0, #0
 80020de:	f04f 0100 	mov.w	r1, #0
 80020e2:	0159      	lsls	r1, r3, #5
 80020e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020e8:	0150      	lsls	r0, r2, #5
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	4621      	mov	r1, r4
 80020f0:	1a51      	subs	r1, r2, r1
 80020f2:	6139      	str	r1, [r7, #16]
 80020f4:	4629      	mov	r1, r5
 80020f6:	eb63 0301 	sbc.w	r3, r3, r1
 80020fa:	617b      	str	r3, [r7, #20]
 80020fc:	f04f 0200 	mov.w	r2, #0
 8002100:	f04f 0300 	mov.w	r3, #0
 8002104:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002108:	4659      	mov	r1, fp
 800210a:	018b      	lsls	r3, r1, #6
 800210c:	4651      	mov	r1, sl
 800210e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002112:	4651      	mov	r1, sl
 8002114:	018a      	lsls	r2, r1, #6
 8002116:	4651      	mov	r1, sl
 8002118:	ebb2 0801 	subs.w	r8, r2, r1
 800211c:	4659      	mov	r1, fp
 800211e:	eb63 0901 	sbc.w	r9, r3, r1
 8002122:	f04f 0200 	mov.w	r2, #0
 8002126:	f04f 0300 	mov.w	r3, #0
 800212a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800212e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002132:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002136:	4690      	mov	r8, r2
 8002138:	4699      	mov	r9, r3
 800213a:	4623      	mov	r3, r4
 800213c:	eb18 0303 	adds.w	r3, r8, r3
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	462b      	mov	r3, r5
 8002144:	eb49 0303 	adc.w	r3, r9, r3
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	f04f 0200 	mov.w	r2, #0
 800214e:	f04f 0300 	mov.w	r3, #0
 8002152:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002156:	4629      	mov	r1, r5
 8002158:	024b      	lsls	r3, r1, #9
 800215a:	4621      	mov	r1, r4
 800215c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002160:	4621      	mov	r1, r4
 8002162:	024a      	lsls	r2, r1, #9
 8002164:	4610      	mov	r0, r2
 8002166:	4619      	mov	r1, r3
 8002168:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800216a:	2200      	movs	r2, #0
 800216c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800216e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002170:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002174:	f7fe f89c 	bl	80002b0 <__aeabi_uldivmod>
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	4613      	mov	r3, r2
 800217e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002180:	e058      	b.n	8002234 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002182:	4b38      	ldr	r3, [pc, #224]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x200>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	099b      	lsrs	r3, r3, #6
 8002188:	2200      	movs	r2, #0
 800218a:	4618      	mov	r0, r3
 800218c:	4611      	mov	r1, r2
 800218e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002192:	623b      	str	r3, [r7, #32]
 8002194:	2300      	movs	r3, #0
 8002196:	627b      	str	r3, [r7, #36]	@ 0x24
 8002198:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800219c:	4642      	mov	r2, r8
 800219e:	464b      	mov	r3, r9
 80021a0:	f04f 0000 	mov.w	r0, #0
 80021a4:	f04f 0100 	mov.w	r1, #0
 80021a8:	0159      	lsls	r1, r3, #5
 80021aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021ae:	0150      	lsls	r0, r2, #5
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	4641      	mov	r1, r8
 80021b6:	ebb2 0a01 	subs.w	sl, r2, r1
 80021ba:	4649      	mov	r1, r9
 80021bc:	eb63 0b01 	sbc.w	fp, r3, r1
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	f04f 0300 	mov.w	r3, #0
 80021c8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80021cc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80021d0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80021d4:	ebb2 040a 	subs.w	r4, r2, sl
 80021d8:	eb63 050b 	sbc.w	r5, r3, fp
 80021dc:	f04f 0200 	mov.w	r2, #0
 80021e0:	f04f 0300 	mov.w	r3, #0
 80021e4:	00eb      	lsls	r3, r5, #3
 80021e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021ea:	00e2      	lsls	r2, r4, #3
 80021ec:	4614      	mov	r4, r2
 80021ee:	461d      	mov	r5, r3
 80021f0:	4643      	mov	r3, r8
 80021f2:	18e3      	adds	r3, r4, r3
 80021f4:	603b      	str	r3, [r7, #0]
 80021f6:	464b      	mov	r3, r9
 80021f8:	eb45 0303 	adc.w	r3, r5, r3
 80021fc:	607b      	str	r3, [r7, #4]
 80021fe:	f04f 0200 	mov.w	r2, #0
 8002202:	f04f 0300 	mov.w	r3, #0
 8002206:	e9d7 4500 	ldrd	r4, r5, [r7]
 800220a:	4629      	mov	r1, r5
 800220c:	028b      	lsls	r3, r1, #10
 800220e:	4621      	mov	r1, r4
 8002210:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002214:	4621      	mov	r1, r4
 8002216:	028a      	lsls	r2, r1, #10
 8002218:	4610      	mov	r0, r2
 800221a:	4619      	mov	r1, r3
 800221c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800221e:	2200      	movs	r2, #0
 8002220:	61bb      	str	r3, [r7, #24]
 8002222:	61fa      	str	r2, [r7, #28]
 8002224:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002228:	f7fe f842 	bl	80002b0 <__aeabi_uldivmod>
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	4613      	mov	r3, r2
 8002232:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002234:	4b0b      	ldr	r3, [pc, #44]	@ (8002264 <HAL_RCC_GetSysClockFreq+0x200>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	0c1b      	lsrs	r3, r3, #16
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	3301      	adds	r3, #1
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002244:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002246:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002248:	fbb2 f3f3 	udiv	r3, r2, r3
 800224c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800224e:	e002      	b.n	8002256 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002250:	4b05      	ldr	r3, [pc, #20]	@ (8002268 <HAL_RCC_GetSysClockFreq+0x204>)
 8002252:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002254:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002256:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002258:	4618      	mov	r0, r3
 800225a:	3750      	adds	r7, #80	@ 0x50
 800225c:	46bd      	mov	sp, r7
 800225e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002262:	bf00      	nop
 8002264:	40023800 	.word	0x40023800
 8002268:	00f42400 	.word	0x00f42400
 800226c:	007a1200 	.word	0x007a1200

08002270 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002274:	4b03      	ldr	r3, [pc, #12]	@ (8002284 <HAL_RCC_GetHCLKFreq+0x14>)
 8002276:	681b      	ldr	r3, [r3, #0]
}
 8002278:	4618      	mov	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	20000018 	.word	0x20000018

08002288 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800228c:	f7ff fff0 	bl	8002270 <HAL_RCC_GetHCLKFreq>
 8002290:	4602      	mov	r2, r0
 8002292:	4b05      	ldr	r3, [pc, #20]	@ (80022a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	0a9b      	lsrs	r3, r3, #10
 8002298:	f003 0307 	and.w	r3, r3, #7
 800229c:	4903      	ldr	r1, [pc, #12]	@ (80022ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800229e:	5ccb      	ldrb	r3, [r1, r3]
 80022a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40023800 	.word	0x40023800
 80022ac:	08006910 	.word	0x08006910

080022b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022b4:	f7ff ffdc 	bl	8002270 <HAL_RCC_GetHCLKFreq>
 80022b8:	4602      	mov	r2, r0
 80022ba:	4b05      	ldr	r3, [pc, #20]	@ (80022d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	0b5b      	lsrs	r3, r3, #13
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	4903      	ldr	r1, [pc, #12]	@ (80022d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022c6:	5ccb      	ldrb	r3, [r1, r3]
 80022c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	40023800 	.word	0x40023800
 80022d4:	08006910 	.word	0x08006910

080022d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	220f      	movs	r2, #15
 80022e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80022e8:	4b12      	ldr	r3, [pc, #72]	@ (8002334 <HAL_RCC_GetClockConfig+0x5c>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f003 0203 	and.w	r2, r3, #3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80022f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002334 <HAL_RCC_GetClockConfig+0x5c>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002300:	4b0c      	ldr	r3, [pc, #48]	@ (8002334 <HAL_RCC_GetClockConfig+0x5c>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800230c:	4b09      	ldr	r3, [pc, #36]	@ (8002334 <HAL_RCC_GetClockConfig+0x5c>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	08db      	lsrs	r3, r3, #3
 8002312:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800231a:	4b07      	ldr	r3, [pc, #28]	@ (8002338 <HAL_RCC_GetClockConfig+0x60>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0207 	and.w	r2, r3, #7
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	601a      	str	r2, [r3, #0]
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	40023800 	.word	0x40023800
 8002338:	40023c00 	.word	0x40023c00

0800233c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e041      	b.n	80023d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	d106      	bne.n	8002368 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 f839 	bl	80023da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2202      	movs	r2, #2
 800236c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3304      	adds	r3, #4
 8002378:	4619      	mov	r1, r3
 800237a:	4610      	mov	r0, r2
 800237c:	f000 f9b2 	bl	80026e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
	...

080023f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b01      	cmp	r3, #1
 8002402:	d001      	beq.n	8002408 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e044      	b.n	8002492 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2202      	movs	r2, #2
 800240c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68da      	ldr	r2, [r3, #12]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f042 0201 	orr.w	r2, r2, #1
 800241e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a1e      	ldr	r2, [pc, #120]	@ (80024a0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d018      	beq.n	800245c <HAL_TIM_Base_Start_IT+0x6c>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002432:	d013      	beq.n	800245c <HAL_TIM_Base_Start_IT+0x6c>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a1a      	ldr	r2, [pc, #104]	@ (80024a4 <HAL_TIM_Base_Start_IT+0xb4>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d00e      	beq.n	800245c <HAL_TIM_Base_Start_IT+0x6c>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a19      	ldr	r2, [pc, #100]	@ (80024a8 <HAL_TIM_Base_Start_IT+0xb8>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d009      	beq.n	800245c <HAL_TIM_Base_Start_IT+0x6c>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a17      	ldr	r2, [pc, #92]	@ (80024ac <HAL_TIM_Base_Start_IT+0xbc>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d004      	beq.n	800245c <HAL_TIM_Base_Start_IT+0x6c>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a16      	ldr	r2, [pc, #88]	@ (80024b0 <HAL_TIM_Base_Start_IT+0xc0>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d111      	bne.n	8002480 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2b06      	cmp	r3, #6
 800246c:	d010      	beq.n	8002490 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f042 0201 	orr.w	r2, r2, #1
 800247c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800247e:	e007      	b.n	8002490 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0201 	orr.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40010000 	.word	0x40010000
 80024a4:	40000400 	.word	0x40000400
 80024a8:	40000800 	.word	0x40000800
 80024ac:	40000c00 	.word	0x40000c00
 80024b0:	40014000 	.word	0x40014000

080024b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d020      	beq.n	8002518 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d01b      	beq.n	8002518 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f06f 0202 	mvn.w	r2, #2
 80024e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f8d2 	bl	80026a8 <HAL_TIM_IC_CaptureCallback>
 8002504:	e005      	b.n	8002512 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f8c4 	bl	8002694 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f8d5 	bl	80026bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f003 0304 	and.w	r3, r3, #4
 800251e:	2b00      	cmp	r3, #0
 8002520:	d020      	beq.n	8002564 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	2b00      	cmp	r3, #0
 800252a:	d01b      	beq.n	8002564 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f06f 0204 	mvn.w	r2, #4
 8002534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2202      	movs	r2, #2
 800253a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 f8ac 	bl	80026a8 <HAL_TIM_IC_CaptureCallback>
 8002550:	e005      	b.n	800255e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f89e 	bl	8002694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 f8af 	bl	80026bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	2b00      	cmp	r3, #0
 800256c:	d020      	beq.n	80025b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f003 0308 	and.w	r3, r3, #8
 8002574:	2b00      	cmp	r3, #0
 8002576:	d01b      	beq.n	80025b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f06f 0208 	mvn.w	r2, #8
 8002580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2204      	movs	r2, #4
 8002586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d003      	beq.n	800259e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f886 	bl	80026a8 <HAL_TIM_IC_CaptureCallback>
 800259c:	e005      	b.n	80025aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f878 	bl	8002694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f000 f889 	bl	80026bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	f003 0310 	and.w	r3, r3, #16
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d020      	beq.n	80025fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f003 0310 	and.w	r3, r3, #16
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d01b      	beq.n	80025fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f06f 0210 	mvn.w	r2, #16
 80025cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2208      	movs	r2, #8
 80025d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f860 	bl	80026a8 <HAL_TIM_IC_CaptureCallback>
 80025e8:	e005      	b.n	80025f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f852 	bl	8002694 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 f863 	bl	80026bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00c      	beq.n	8002620 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b00      	cmp	r3, #0
 800260e:	d007      	beq.n	8002620 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f06f 0201 	mvn.w	r2, #1
 8002618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7fe faf4 	bl	8000c08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00c      	beq.n	8002644 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002630:	2b00      	cmp	r3, #0
 8002632:	d007      	beq.n	8002644 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800263c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f8e6 	bl	8002810 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00c      	beq.n	8002668 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002654:	2b00      	cmp	r3, #0
 8002656:	d007      	beq.n	8002668 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f834 	bl	80026d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	f003 0320 	and.w	r3, r3, #32
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00c      	beq.n	800268c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f003 0320 	and.w	r3, r3, #32
 8002678:	2b00      	cmp	r3, #0
 800267a:	d007      	beq.n	800268c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f06f 0220 	mvn.w	r2, #32
 8002684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f8b8 	bl	80027fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800268c:	bf00      	nop
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a3a      	ldr	r2, [pc, #232]	@ (80027e0 <TIM_Base_SetConfig+0xfc>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d00f      	beq.n	800271c <TIM_Base_SetConfig+0x38>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002702:	d00b      	beq.n	800271c <TIM_Base_SetConfig+0x38>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a37      	ldr	r2, [pc, #220]	@ (80027e4 <TIM_Base_SetConfig+0x100>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d007      	beq.n	800271c <TIM_Base_SetConfig+0x38>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a36      	ldr	r2, [pc, #216]	@ (80027e8 <TIM_Base_SetConfig+0x104>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d003      	beq.n	800271c <TIM_Base_SetConfig+0x38>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a35      	ldr	r2, [pc, #212]	@ (80027ec <TIM_Base_SetConfig+0x108>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d108      	bne.n	800272e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002722:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	4313      	orrs	r3, r2
 800272c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a2b      	ldr	r2, [pc, #172]	@ (80027e0 <TIM_Base_SetConfig+0xfc>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d01b      	beq.n	800276e <TIM_Base_SetConfig+0x8a>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800273c:	d017      	beq.n	800276e <TIM_Base_SetConfig+0x8a>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a28      	ldr	r2, [pc, #160]	@ (80027e4 <TIM_Base_SetConfig+0x100>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d013      	beq.n	800276e <TIM_Base_SetConfig+0x8a>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a27      	ldr	r2, [pc, #156]	@ (80027e8 <TIM_Base_SetConfig+0x104>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d00f      	beq.n	800276e <TIM_Base_SetConfig+0x8a>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a26      	ldr	r2, [pc, #152]	@ (80027ec <TIM_Base_SetConfig+0x108>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d00b      	beq.n	800276e <TIM_Base_SetConfig+0x8a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4a25      	ldr	r2, [pc, #148]	@ (80027f0 <TIM_Base_SetConfig+0x10c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d007      	beq.n	800276e <TIM_Base_SetConfig+0x8a>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a24      	ldr	r2, [pc, #144]	@ (80027f4 <TIM_Base_SetConfig+0x110>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d003      	beq.n	800276e <TIM_Base_SetConfig+0x8a>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a23      	ldr	r2, [pc, #140]	@ (80027f8 <TIM_Base_SetConfig+0x114>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d108      	bne.n	8002780 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	4313      	orrs	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	695b      	ldr	r3, [r3, #20]
 800278a:	4313      	orrs	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	689a      	ldr	r2, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a0e      	ldr	r2, [pc, #56]	@ (80027e0 <TIM_Base_SetConfig+0xfc>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d103      	bne.n	80027b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	691a      	ldr	r2, [r3, #16]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d105      	bne.n	80027d2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	f023 0201 	bic.w	r2, r3, #1
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	611a      	str	r2, [r3, #16]
  }
}
 80027d2:	bf00      	nop
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	40010000 	.word	0x40010000
 80027e4:	40000400 	.word	0x40000400
 80027e8:	40000800 	.word	0x40000800
 80027ec:	40000c00 	.word	0x40000c00
 80027f0:	40014000 	.word	0x40014000
 80027f4:	40014400 	.word	0x40014400
 80027f8:	40014800 	.word	0x40014800

080027fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d101      	bne.n	8002836 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e042      	b.n	80028bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d106      	bne.n	8002850 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7fe fbf8 	bl	8001040 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2224      	movs	r2, #36	@ 0x24
 8002854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68da      	ldr	r2, [r3, #12]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002866:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f000 fdbd 	bl	80033e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	691a      	ldr	r2, [r3, #16]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800287c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	695a      	ldr	r2, [r3, #20]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800288c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800289c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2220      	movs	r2, #32
 80028a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2220      	movs	r2, #32
 80028b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3708      	adds	r7, #8
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08a      	sub	sp, #40	@ 0x28
 80028c8:	af02      	add	r7, sp, #8
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	603b      	str	r3, [r7, #0]
 80028d0:	4613      	mov	r3, r2
 80028d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b20      	cmp	r3, #32
 80028e2:	d175      	bne.n	80029d0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d002      	beq.n	80028f0 <HAL_UART_Transmit+0x2c>
 80028ea:	88fb      	ldrh	r3, [r7, #6]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e06e      	b.n	80029d2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2221      	movs	r2, #33	@ 0x21
 80028fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002902:	f7fe fd1b 	bl	800133c <HAL_GetTick>
 8002906:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	88fa      	ldrh	r2, [r7, #6]
 800290c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	88fa      	ldrh	r2, [r7, #6]
 8002912:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800291c:	d108      	bne.n	8002930 <HAL_UART_Transmit+0x6c>
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d104      	bne.n	8002930 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002926:	2300      	movs	r3, #0
 8002928:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	61bb      	str	r3, [r7, #24]
 800292e:	e003      	b.n	8002938 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002934:	2300      	movs	r3, #0
 8002936:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002938:	e02e      	b.n	8002998 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2200      	movs	r2, #0
 8002942:	2180      	movs	r1, #128	@ 0x80
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f000 fb1f 	bl	8002f88 <UART_WaitOnFlagUntilTimeout>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2220      	movs	r2, #32
 8002954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e03a      	b.n	80029d2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10b      	bne.n	800297a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	881b      	ldrh	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002970:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	3302      	adds	r3, #2
 8002976:	61bb      	str	r3, [r7, #24]
 8002978:	e007      	b.n	800298a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	781a      	ldrb	r2, [r3, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	3301      	adds	r3, #1
 8002988:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800298e:	b29b      	uxth	r3, r3
 8002990:	3b01      	subs	r3, #1
 8002992:	b29a      	uxth	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800299c:	b29b      	uxth	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1cb      	bne.n	800293a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	2200      	movs	r2, #0
 80029aa:	2140      	movs	r1, #64	@ 0x40
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f000 faeb 	bl	8002f88 <UART_WaitOnFlagUntilTimeout>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2220      	movs	r2, #32
 80029bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e006      	b.n	80029d2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2220      	movs	r2, #32
 80029c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80029cc:	2300      	movs	r3, #0
 80029ce:	e000      	b.n	80029d2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80029d0:	2302      	movs	r3, #2
  }
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3720      	adds	r7, #32
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b084      	sub	sp, #16
 80029de:	af00      	add	r7, sp, #0
 80029e0:	60f8      	str	r0, [r7, #12]
 80029e2:	60b9      	str	r1, [r7, #8]
 80029e4:	4613      	mov	r3, r2
 80029e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b20      	cmp	r3, #32
 80029f2:	d112      	bne.n	8002a1a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d002      	beq.n	8002a00 <HAL_UART_Receive_IT+0x26>
 80029fa:	88fb      	ldrh	r3, [r7, #6]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e00b      	b.n	8002a1c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002a0a:	88fb      	ldrh	r3, [r7, #6]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	68b9      	ldr	r1, [r7, #8]
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f000 fb12 	bl	800303a <UART_Start_Receive_IT>
 8002a16:	4603      	mov	r3, r0
 8002a18:	e000      	b.n	8002a1c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002a1a:	2302      	movs	r3, #2
  }
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b0ba      	sub	sp, #232	@ 0xe8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002a62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10f      	bne.n	8002a8a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a6e:	f003 0320 	and.w	r3, r3, #32
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d009      	beq.n	8002a8a <HAL_UART_IRQHandler+0x66>
 8002a76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a7a:	f003 0320 	and.w	r3, r3, #32
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 fbf2 	bl	800326c <UART_Receive_IT>
      return;
 8002a88:	e25b      	b.n	8002f42 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002a8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 80de 	beq.w	8002c50 <HAL_UART_IRQHandler+0x22c>
 8002a94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d106      	bne.n	8002aae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002aa4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 80d1 	beq.w	8002c50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00b      	beq.n	8002ad2 <HAL_UART_IRQHandler+0xae>
 8002aba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002abe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d005      	beq.n	8002ad2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aca:	f043 0201 	orr.w	r2, r3, #1
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00b      	beq.n	8002af6 <HAL_UART_IRQHandler+0xd2>
 8002ade:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d005      	beq.n	8002af6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aee:	f043 0202 	orr.w	r2, r3, #2
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00b      	beq.n	8002b1a <HAL_UART_IRQHandler+0xf6>
 8002b02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d005      	beq.n	8002b1a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b12:	f043 0204 	orr.w	r2, r3, #4
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b1e:	f003 0308 	and.w	r3, r3, #8
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d011      	beq.n	8002b4a <HAL_UART_IRQHandler+0x126>
 8002b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b2a:	f003 0320 	and.w	r3, r3, #32
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d105      	bne.n	8002b3e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d005      	beq.n	8002b4a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b42:	f043 0208 	orr.w	r2, r3, #8
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 81f2 	beq.w	8002f38 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b58:	f003 0320 	and.w	r3, r3, #32
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d008      	beq.n	8002b72 <HAL_UART_IRQHandler+0x14e>
 8002b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b64:	f003 0320 	and.w	r3, r3, #32
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d002      	beq.n	8002b72 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 fb7d 	bl	800326c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	695b      	ldr	r3, [r3, #20]
 8002b78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b7c:	2b40      	cmp	r3, #64	@ 0x40
 8002b7e:	bf0c      	ite	eq
 8002b80:	2301      	moveq	r3, #1
 8002b82:	2300      	movne	r3, #0
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8e:	f003 0308 	and.w	r3, r3, #8
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d103      	bne.n	8002b9e <HAL_UART_IRQHandler+0x17a>
 8002b96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d04f      	beq.n	8002c3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 fa85 	bl	80030ae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bae:	2b40      	cmp	r3, #64	@ 0x40
 8002bb0:	d141      	bne.n	8002c36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	3314      	adds	r3, #20
 8002bb8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002bc0:	e853 3f00 	ldrex	r3, [r3]
 8002bc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002bc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002bcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bd0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	3314      	adds	r3, #20
 8002bda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002bde:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002be2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002bea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002bee:	e841 2300 	strex	r3, r2, [r1]
 8002bf2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002bf6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1d9      	bne.n	8002bb2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d013      	beq.n	8002c2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c0a:	4a7e      	ldr	r2, [pc, #504]	@ (8002e04 <HAL_UART_IRQHandler+0x3e0>)
 8002c0c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7fe fcf0 	bl	80015f8 <HAL_DMA_Abort_IT>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d016      	beq.n	8002c4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c28:	4610      	mov	r0, r2
 8002c2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c2c:	e00e      	b.n	8002c4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f994 	bl	8002f5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c34:	e00a      	b.n	8002c4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f990 	bl	8002f5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c3c:	e006      	b.n	8002c4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f98c 	bl	8002f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002c4a:	e175      	b.n	8002f38 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c4c:	bf00      	nop
    return;
 8002c4e:	e173      	b.n	8002f38 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	f040 814f 	bne.w	8002ef8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c5e:	f003 0310 	and.w	r3, r3, #16
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 8148 	beq.w	8002ef8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c6c:	f003 0310 	and.w	r3, r3, #16
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 8141 	beq.w	8002ef8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c76:	2300      	movs	r3, #0
 8002c78:	60bb      	str	r3, [r7, #8]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	60bb      	str	r3, [r7, #8]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	60bb      	str	r3, [r7, #8]
 8002c8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c96:	2b40      	cmp	r3, #64	@ 0x40
 8002c98:	f040 80b6 	bne.w	8002e08 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ca8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 8145 	beq.w	8002f3c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002cb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	f080 813e 	bcs.w	8002f3c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002cc6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cd2:	f000 8088 	beq.w	8002de6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	330c      	adds	r3, #12
 8002cdc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002ce4:	e853 3f00 	ldrex	r3, [r3]
 8002ce8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002cec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002cf0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cf4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	330c      	adds	r3, #12
 8002cfe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002d02:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002d06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002d0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002d12:	e841 2300 	strex	r3, r2, [r1]
 8002d16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002d1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1d9      	bne.n	8002cd6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	3314      	adds	r3, #20
 8002d28:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d2c:	e853 3f00 	ldrex	r3, [r3]
 8002d30:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002d32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d34:	f023 0301 	bic.w	r3, r3, #1
 8002d38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	3314      	adds	r3, #20
 8002d42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002d46:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002d4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d4c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002d4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002d52:	e841 2300 	strex	r3, r2, [r1]
 8002d56:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002d58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1e1      	bne.n	8002d22 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	3314      	adds	r3, #20
 8002d64:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d68:	e853 3f00 	ldrex	r3, [r3]
 8002d6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002d6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	3314      	adds	r3, #20
 8002d7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002d82:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002d84:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d86:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002d88:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002d8a:	e841 2300 	strex	r3, r2, [r1]
 8002d8e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002d90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1e3      	bne.n	8002d5e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	330c      	adds	r3, #12
 8002daa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002dae:	e853 3f00 	ldrex	r3, [r3]
 8002db2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002db4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002db6:	f023 0310 	bic.w	r3, r3, #16
 8002dba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	330c      	adds	r3, #12
 8002dc4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002dc8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002dca:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dcc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002dce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002dd0:	e841 2300 	strex	r3, r2, [r1]
 8002dd4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002dd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1e3      	bne.n	8002da4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7fe fb99 	bl	8001518 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2202      	movs	r2, #2
 8002dea:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 f8b7 	bl	8002f70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e02:	e09b      	b.n	8002f3c <HAL_UART_IRQHandler+0x518>
 8002e04:	08003175 	.word	0x08003175
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 808e 	beq.w	8002f40 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002e24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 8089 	beq.w	8002f40 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	330c      	adds	r3, #12
 8002e34:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e38:	e853 3f00 	ldrex	r3, [r3]
 8002e3c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002e3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	330c      	adds	r3, #12
 8002e4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002e52:	647a      	str	r2, [r7, #68]	@ 0x44
 8002e54:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e56:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e5a:	e841 2300 	strex	r3, r2, [r1]
 8002e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002e60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1e3      	bne.n	8002e2e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	3314      	adds	r3, #20
 8002e6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e70:	e853 3f00 	ldrex	r3, [r3]
 8002e74:	623b      	str	r3, [r7, #32]
   return(result);
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	f023 0301 	bic.w	r3, r3, #1
 8002e7c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	3314      	adds	r3, #20
 8002e86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002e8a:	633a      	str	r2, [r7, #48]	@ 0x30
 8002e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e92:	e841 2300 	strex	r3, r2, [r1]
 8002e96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1e3      	bne.n	8002e66 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2220      	movs	r2, #32
 8002ea2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	330c      	adds	r3, #12
 8002eb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	e853 3f00 	ldrex	r3, [r3]
 8002eba:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f023 0310 	bic.w	r3, r3, #16
 8002ec2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	330c      	adds	r3, #12
 8002ecc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002ed0:	61fa      	str	r2, [r7, #28]
 8002ed2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed4:	69b9      	ldr	r1, [r7, #24]
 8002ed6:	69fa      	ldr	r2, [r7, #28]
 8002ed8:	e841 2300 	strex	r3, r2, [r1]
 8002edc:	617b      	str	r3, [r7, #20]
   return(result);
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1e3      	bne.n	8002eac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002eea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002eee:	4619      	mov	r1, r3
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f83d 	bl	8002f70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ef6:	e023      	b.n	8002f40 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ef8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002efc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d009      	beq.n	8002f18 <HAL_UART_IRQHandler+0x4f4>
 8002f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d003      	beq.n	8002f18 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 f943 	bl	800319c <UART_Transmit_IT>
    return;
 8002f16:	e014      	b.n	8002f42 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d00e      	beq.n	8002f42 <HAL_UART_IRQHandler+0x51e>
 8002f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d008      	beq.n	8002f42 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 f983 	bl	800323c <UART_EndTransmit_IT>
    return;
 8002f36:	e004      	b.n	8002f42 <HAL_UART_IRQHandler+0x51e>
    return;
 8002f38:	bf00      	nop
 8002f3a:	e002      	b.n	8002f42 <HAL_UART_IRQHandler+0x51e>
      return;
 8002f3c:	bf00      	nop
 8002f3e:	e000      	b.n	8002f42 <HAL_UART_IRQHandler+0x51e>
      return;
 8002f40:	bf00      	nop
  }
}
 8002f42:	37e8      	adds	r7, #232	@ 0xe8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f64:	bf00      	nop
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	603b      	str	r3, [r7, #0]
 8002f94:	4613      	mov	r3, r2
 8002f96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f98:	e03b      	b.n	8003012 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
 8002f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa0:	d037      	beq.n	8003012 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa2:	f7fe f9cb 	bl	800133c <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	6a3a      	ldr	r2, [r7, #32]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d302      	bcc.n	8002fb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002fb2:	6a3b      	ldr	r3, [r7, #32]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e03a      	b.n	8003032 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	f003 0304 	and.w	r3, r3, #4
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d023      	beq.n	8003012 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2b80      	cmp	r3, #128	@ 0x80
 8002fce:	d020      	beq.n	8003012 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2b40      	cmp	r3, #64	@ 0x40
 8002fd4:	d01d      	beq.n	8003012 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0308 	and.w	r3, r3, #8
 8002fe0:	2b08      	cmp	r3, #8
 8002fe2:	d116      	bne.n	8003012 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	617b      	str	r3, [r7, #20]
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	617b      	str	r3, [r7, #20]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	617b      	str	r3, [r7, #20]
 8002ff8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 f857 	bl	80030ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2208      	movs	r2, #8
 8003004:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e00f      	b.n	8003032 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	4013      	ands	r3, r2
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	429a      	cmp	r2, r3
 8003020:	bf0c      	ite	eq
 8003022:	2301      	moveq	r3, #1
 8003024:	2300      	movne	r3, #0
 8003026:	b2db      	uxtb	r3, r3
 8003028:	461a      	mov	r2, r3
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	429a      	cmp	r2, r3
 800302e:	d0b4      	beq.n	8002f9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3718      	adds	r7, #24
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800303a:	b480      	push	{r7}
 800303c:	b085      	sub	sp, #20
 800303e:	af00      	add	r7, sp, #0
 8003040:	60f8      	str	r0, [r7, #12]
 8003042:	60b9      	str	r1, [r7, #8]
 8003044:	4613      	mov	r3, r2
 8003046:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	88fa      	ldrh	r2, [r7, #6]
 8003052:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	88fa      	ldrh	r2, [r7, #6]
 8003058:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2222      	movs	r2, #34	@ 0x22
 8003064:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d007      	beq.n	8003080 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68da      	ldr	r2, [r3, #12]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800307e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	695a      	ldr	r2, [r3, #20]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0201 	orr.w	r2, r2, #1
 800308e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0220 	orr.w	r2, r2, #32
 800309e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b095      	sub	sp, #84	@ 0x54
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	330c      	adds	r3, #12
 80030bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030c0:	e853 3f00 	ldrex	r3, [r3]
 80030c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80030c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80030cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	330c      	adds	r3, #12
 80030d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80030d6:	643a      	str	r2, [r7, #64]	@ 0x40
 80030d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80030dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80030de:	e841 2300 	strex	r3, r2, [r1]
 80030e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80030e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1e5      	bne.n	80030b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	3314      	adds	r3, #20
 80030f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f2:	6a3b      	ldr	r3, [r7, #32]
 80030f4:	e853 3f00 	ldrex	r3, [r3]
 80030f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	f023 0301 	bic.w	r3, r3, #1
 8003100:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	3314      	adds	r3, #20
 8003108:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800310a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800310c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800310e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003110:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003112:	e841 2300 	strex	r3, r2, [r1]
 8003116:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1e5      	bne.n	80030ea <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003122:	2b01      	cmp	r3, #1
 8003124:	d119      	bne.n	800315a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	330c      	adds	r3, #12
 800312c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	e853 3f00 	ldrex	r3, [r3]
 8003134:	60bb      	str	r3, [r7, #8]
   return(result);
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	f023 0310 	bic.w	r3, r3, #16
 800313c:	647b      	str	r3, [r7, #68]	@ 0x44
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	330c      	adds	r3, #12
 8003144:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003146:	61ba      	str	r2, [r7, #24]
 8003148:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800314a:	6979      	ldr	r1, [r7, #20]
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	e841 2300 	strex	r3, r2, [r1]
 8003152:	613b      	str	r3, [r7, #16]
   return(result);
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1e5      	bne.n	8003126 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2220      	movs	r2, #32
 800315e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003168:	bf00      	nop
 800316a:	3754      	adds	r7, #84	@ 0x54
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003180:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f7ff fee4 	bl	8002f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003194:	bf00      	nop
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b21      	cmp	r3, #33	@ 0x21
 80031ae:	d13e      	bne.n	800322e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031b8:	d114      	bne.n	80031e4 <UART_Transmit_IT+0x48>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d110      	bne.n	80031e4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	461a      	mov	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031d6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	1c9a      	adds	r2, r3, #2
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	621a      	str	r2, [r3, #32]
 80031e2:	e008      	b.n	80031f6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	1c59      	adds	r1, r3, #1
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6211      	str	r1, [r2, #32]
 80031ee:	781a      	ldrb	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b29b      	uxth	r3, r3
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	4619      	mov	r1, r3
 8003204:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10f      	bne.n	800322a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68da      	ldr	r2, [r3, #12]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003218:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68da      	ldr	r2, [r3, #12]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003228:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800322a:	2300      	movs	r3, #0
 800322c:	e000      	b.n	8003230 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800322e:	2302      	movs	r3, #2
  }
}
 8003230:	4618      	mov	r0, r3
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68da      	ldr	r2, [r3, #12]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003252:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2220      	movs	r2, #32
 8003258:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f7ff fe73 	bl	8002f48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b08c      	sub	sp, #48	@ 0x30
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b22      	cmp	r3, #34	@ 0x22
 800327e:	f040 80ae 	bne.w	80033de <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800328a:	d117      	bne.n	80032bc <UART_Receive_IT+0x50>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d113      	bne.n	80032bc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003294:	2300      	movs	r3, #0
 8003296:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800329c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b4:	1c9a      	adds	r2, r3, #2
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80032ba:	e026      	b.n	800330a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80032c2:	2300      	movs	r3, #0
 80032c4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032ce:	d007      	beq.n	80032e0 <UART_Receive_IT+0x74>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10a      	bne.n	80032ee <UART_Receive_IT+0x82>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d106      	bne.n	80032ee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ea:	701a      	strb	r2, [r3, #0]
 80032ec:	e008      	b.n	8003300 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032fa:	b2da      	uxtb	r2, r3
 80032fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032fe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003304:	1c5a      	adds	r2, r3, #1
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800330e:	b29b      	uxth	r3, r3
 8003310:	3b01      	subs	r3, #1
 8003312:	b29b      	uxth	r3, r3
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	4619      	mov	r1, r3
 8003318:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800331a:	2b00      	cmp	r3, #0
 800331c:	d15d      	bne.n	80033da <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68da      	ldr	r2, [r3, #12]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0220 	bic.w	r2, r2, #32
 800332c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68da      	ldr	r2, [r3, #12]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800333c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	695a      	ldr	r2, [r3, #20]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0201 	bic.w	r2, r2, #1
 800334c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2220      	movs	r2, #32
 8003352:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003360:	2b01      	cmp	r3, #1
 8003362:	d135      	bne.n	80033d0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	330c      	adds	r3, #12
 8003370:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	e853 3f00 	ldrex	r3, [r3]
 8003378:	613b      	str	r3, [r7, #16]
   return(result);
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	f023 0310 	bic.w	r3, r3, #16
 8003380:	627b      	str	r3, [r7, #36]	@ 0x24
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	330c      	adds	r3, #12
 8003388:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800338a:	623a      	str	r2, [r7, #32]
 800338c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800338e:	69f9      	ldr	r1, [r7, #28]
 8003390:	6a3a      	ldr	r2, [r7, #32]
 8003392:	e841 2300 	strex	r3, r2, [r1]
 8003396:	61bb      	str	r3, [r7, #24]
   return(result);
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1e5      	bne.n	800336a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0310 	and.w	r3, r3, #16
 80033a8:	2b10      	cmp	r3, #16
 80033aa:	d10a      	bne.n	80033c2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033ac:	2300      	movs	r3, #0
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80033c6:	4619      	mov	r1, r3
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f7ff fdd1 	bl	8002f70 <HAL_UARTEx_RxEventCallback>
 80033ce:	e002      	b.n	80033d6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7fd fed7 	bl	8001184 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	e002      	b.n	80033e0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	e000      	b.n	80033e0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80033de:	2302      	movs	r3, #2
  }
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3730      	adds	r7, #48	@ 0x30
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033ec:	b0c0      	sub	sp, #256	@ 0x100
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003404:	68d9      	ldr	r1, [r3, #12]
 8003406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	ea40 0301 	orr.w	r3, r0, r1
 8003410:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	431a      	orrs	r2, r3
 8003420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	431a      	orrs	r2, r3
 8003428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003440:	f021 010c 	bic.w	r1, r1, #12
 8003444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800344e:	430b      	orrs	r3, r1
 8003450:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800345e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003462:	6999      	ldr	r1, [r3, #24]
 8003464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	ea40 0301 	orr.w	r3, r0, r1
 800346e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	4b8f      	ldr	r3, [pc, #572]	@ (80036b4 <UART_SetConfig+0x2cc>)
 8003478:	429a      	cmp	r2, r3
 800347a:	d005      	beq.n	8003488 <UART_SetConfig+0xa0>
 800347c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	4b8d      	ldr	r3, [pc, #564]	@ (80036b8 <UART_SetConfig+0x2d0>)
 8003484:	429a      	cmp	r2, r3
 8003486:	d104      	bne.n	8003492 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003488:	f7fe ff12 	bl	80022b0 <HAL_RCC_GetPCLK2Freq>
 800348c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003490:	e003      	b.n	800349a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003492:	f7fe fef9 	bl	8002288 <HAL_RCC_GetPCLK1Freq>
 8003496:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800349a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034a4:	f040 810c 	bne.w	80036c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034ac:	2200      	movs	r2, #0
 80034ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80034b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80034b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80034ba:	4622      	mov	r2, r4
 80034bc:	462b      	mov	r3, r5
 80034be:	1891      	adds	r1, r2, r2
 80034c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80034c2:	415b      	adcs	r3, r3
 80034c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80034c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80034ca:	4621      	mov	r1, r4
 80034cc:	eb12 0801 	adds.w	r8, r2, r1
 80034d0:	4629      	mov	r1, r5
 80034d2:	eb43 0901 	adc.w	r9, r3, r1
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	f04f 0300 	mov.w	r3, #0
 80034de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034ea:	4690      	mov	r8, r2
 80034ec:	4699      	mov	r9, r3
 80034ee:	4623      	mov	r3, r4
 80034f0:	eb18 0303 	adds.w	r3, r8, r3
 80034f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80034f8:	462b      	mov	r3, r5
 80034fa:	eb49 0303 	adc.w	r3, r9, r3
 80034fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800350e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003512:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003516:	460b      	mov	r3, r1
 8003518:	18db      	adds	r3, r3, r3
 800351a:	653b      	str	r3, [r7, #80]	@ 0x50
 800351c:	4613      	mov	r3, r2
 800351e:	eb42 0303 	adc.w	r3, r2, r3
 8003522:	657b      	str	r3, [r7, #84]	@ 0x54
 8003524:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003528:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800352c:	f7fc fec0 	bl	80002b0 <__aeabi_uldivmod>
 8003530:	4602      	mov	r2, r0
 8003532:	460b      	mov	r3, r1
 8003534:	4b61      	ldr	r3, [pc, #388]	@ (80036bc <UART_SetConfig+0x2d4>)
 8003536:	fba3 2302 	umull	r2, r3, r3, r2
 800353a:	095b      	lsrs	r3, r3, #5
 800353c:	011c      	lsls	r4, r3, #4
 800353e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003542:	2200      	movs	r2, #0
 8003544:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003548:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800354c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003550:	4642      	mov	r2, r8
 8003552:	464b      	mov	r3, r9
 8003554:	1891      	adds	r1, r2, r2
 8003556:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003558:	415b      	adcs	r3, r3
 800355a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800355c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003560:	4641      	mov	r1, r8
 8003562:	eb12 0a01 	adds.w	sl, r2, r1
 8003566:	4649      	mov	r1, r9
 8003568:	eb43 0b01 	adc.w	fp, r3, r1
 800356c:	f04f 0200 	mov.w	r2, #0
 8003570:	f04f 0300 	mov.w	r3, #0
 8003574:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003578:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800357c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003580:	4692      	mov	sl, r2
 8003582:	469b      	mov	fp, r3
 8003584:	4643      	mov	r3, r8
 8003586:	eb1a 0303 	adds.w	r3, sl, r3
 800358a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800358e:	464b      	mov	r3, r9
 8003590:	eb4b 0303 	adc.w	r3, fp, r3
 8003594:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80035a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80035ac:	460b      	mov	r3, r1
 80035ae:	18db      	adds	r3, r3, r3
 80035b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80035b2:	4613      	mov	r3, r2
 80035b4:	eb42 0303 	adc.w	r3, r2, r3
 80035b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80035ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80035be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80035c2:	f7fc fe75 	bl	80002b0 <__aeabi_uldivmod>
 80035c6:	4602      	mov	r2, r0
 80035c8:	460b      	mov	r3, r1
 80035ca:	4611      	mov	r1, r2
 80035cc:	4b3b      	ldr	r3, [pc, #236]	@ (80036bc <UART_SetConfig+0x2d4>)
 80035ce:	fba3 2301 	umull	r2, r3, r3, r1
 80035d2:	095b      	lsrs	r3, r3, #5
 80035d4:	2264      	movs	r2, #100	@ 0x64
 80035d6:	fb02 f303 	mul.w	r3, r2, r3
 80035da:	1acb      	subs	r3, r1, r3
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80035e2:	4b36      	ldr	r3, [pc, #216]	@ (80036bc <UART_SetConfig+0x2d4>)
 80035e4:	fba3 2302 	umull	r2, r3, r3, r2
 80035e8:	095b      	lsrs	r3, r3, #5
 80035ea:	005b      	lsls	r3, r3, #1
 80035ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80035f0:	441c      	add	r4, r3
 80035f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035f6:	2200      	movs	r2, #0
 80035f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80035fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003600:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003604:	4642      	mov	r2, r8
 8003606:	464b      	mov	r3, r9
 8003608:	1891      	adds	r1, r2, r2
 800360a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800360c:	415b      	adcs	r3, r3
 800360e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003610:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003614:	4641      	mov	r1, r8
 8003616:	1851      	adds	r1, r2, r1
 8003618:	6339      	str	r1, [r7, #48]	@ 0x30
 800361a:	4649      	mov	r1, r9
 800361c:	414b      	adcs	r3, r1
 800361e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003620:	f04f 0200 	mov.w	r2, #0
 8003624:	f04f 0300 	mov.w	r3, #0
 8003628:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800362c:	4659      	mov	r1, fp
 800362e:	00cb      	lsls	r3, r1, #3
 8003630:	4651      	mov	r1, sl
 8003632:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003636:	4651      	mov	r1, sl
 8003638:	00ca      	lsls	r2, r1, #3
 800363a:	4610      	mov	r0, r2
 800363c:	4619      	mov	r1, r3
 800363e:	4603      	mov	r3, r0
 8003640:	4642      	mov	r2, r8
 8003642:	189b      	adds	r3, r3, r2
 8003644:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003648:	464b      	mov	r3, r9
 800364a:	460a      	mov	r2, r1
 800364c:	eb42 0303 	adc.w	r3, r2, r3
 8003650:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003660:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003664:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003668:	460b      	mov	r3, r1
 800366a:	18db      	adds	r3, r3, r3
 800366c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800366e:	4613      	mov	r3, r2
 8003670:	eb42 0303 	adc.w	r3, r2, r3
 8003674:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003676:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800367a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800367e:	f7fc fe17 	bl	80002b0 <__aeabi_uldivmod>
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	4b0d      	ldr	r3, [pc, #52]	@ (80036bc <UART_SetConfig+0x2d4>)
 8003688:	fba3 1302 	umull	r1, r3, r3, r2
 800368c:	095b      	lsrs	r3, r3, #5
 800368e:	2164      	movs	r1, #100	@ 0x64
 8003690:	fb01 f303 	mul.w	r3, r1, r3
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	3332      	adds	r3, #50	@ 0x32
 800369a:	4a08      	ldr	r2, [pc, #32]	@ (80036bc <UART_SetConfig+0x2d4>)
 800369c:	fba2 2303 	umull	r2, r3, r2, r3
 80036a0:	095b      	lsrs	r3, r3, #5
 80036a2:	f003 0207 	and.w	r2, r3, #7
 80036a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4422      	add	r2, r4
 80036ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036b0:	e106      	b.n	80038c0 <UART_SetConfig+0x4d8>
 80036b2:	bf00      	nop
 80036b4:	40011000 	.word	0x40011000
 80036b8:	40011400 	.word	0x40011400
 80036bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036c4:	2200      	movs	r2, #0
 80036c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80036ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80036ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80036d2:	4642      	mov	r2, r8
 80036d4:	464b      	mov	r3, r9
 80036d6:	1891      	adds	r1, r2, r2
 80036d8:	6239      	str	r1, [r7, #32]
 80036da:	415b      	adcs	r3, r3
 80036dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80036de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80036e2:	4641      	mov	r1, r8
 80036e4:	1854      	adds	r4, r2, r1
 80036e6:	4649      	mov	r1, r9
 80036e8:	eb43 0501 	adc.w	r5, r3, r1
 80036ec:	f04f 0200 	mov.w	r2, #0
 80036f0:	f04f 0300 	mov.w	r3, #0
 80036f4:	00eb      	lsls	r3, r5, #3
 80036f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036fa:	00e2      	lsls	r2, r4, #3
 80036fc:	4614      	mov	r4, r2
 80036fe:	461d      	mov	r5, r3
 8003700:	4643      	mov	r3, r8
 8003702:	18e3      	adds	r3, r4, r3
 8003704:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003708:	464b      	mov	r3, r9
 800370a:	eb45 0303 	adc.w	r3, r5, r3
 800370e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800371e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003722:	f04f 0200 	mov.w	r2, #0
 8003726:	f04f 0300 	mov.w	r3, #0
 800372a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800372e:	4629      	mov	r1, r5
 8003730:	008b      	lsls	r3, r1, #2
 8003732:	4621      	mov	r1, r4
 8003734:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003738:	4621      	mov	r1, r4
 800373a:	008a      	lsls	r2, r1, #2
 800373c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003740:	f7fc fdb6 	bl	80002b0 <__aeabi_uldivmod>
 8003744:	4602      	mov	r2, r0
 8003746:	460b      	mov	r3, r1
 8003748:	4b60      	ldr	r3, [pc, #384]	@ (80038cc <UART_SetConfig+0x4e4>)
 800374a:	fba3 2302 	umull	r2, r3, r3, r2
 800374e:	095b      	lsrs	r3, r3, #5
 8003750:	011c      	lsls	r4, r3, #4
 8003752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003756:	2200      	movs	r2, #0
 8003758:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800375c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003760:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003764:	4642      	mov	r2, r8
 8003766:	464b      	mov	r3, r9
 8003768:	1891      	adds	r1, r2, r2
 800376a:	61b9      	str	r1, [r7, #24]
 800376c:	415b      	adcs	r3, r3
 800376e:	61fb      	str	r3, [r7, #28]
 8003770:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003774:	4641      	mov	r1, r8
 8003776:	1851      	adds	r1, r2, r1
 8003778:	6139      	str	r1, [r7, #16]
 800377a:	4649      	mov	r1, r9
 800377c:	414b      	adcs	r3, r1
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	f04f 0200 	mov.w	r2, #0
 8003784:	f04f 0300 	mov.w	r3, #0
 8003788:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800378c:	4659      	mov	r1, fp
 800378e:	00cb      	lsls	r3, r1, #3
 8003790:	4651      	mov	r1, sl
 8003792:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003796:	4651      	mov	r1, sl
 8003798:	00ca      	lsls	r2, r1, #3
 800379a:	4610      	mov	r0, r2
 800379c:	4619      	mov	r1, r3
 800379e:	4603      	mov	r3, r0
 80037a0:	4642      	mov	r2, r8
 80037a2:	189b      	adds	r3, r3, r2
 80037a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80037a8:	464b      	mov	r3, r9
 80037aa:	460a      	mov	r2, r1
 80037ac:	eb42 0303 	adc.w	r3, r2, r3
 80037b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80037b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80037be:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80037c0:	f04f 0200 	mov.w	r2, #0
 80037c4:	f04f 0300 	mov.w	r3, #0
 80037c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80037cc:	4649      	mov	r1, r9
 80037ce:	008b      	lsls	r3, r1, #2
 80037d0:	4641      	mov	r1, r8
 80037d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037d6:	4641      	mov	r1, r8
 80037d8:	008a      	lsls	r2, r1, #2
 80037da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80037de:	f7fc fd67 	bl	80002b0 <__aeabi_uldivmod>
 80037e2:	4602      	mov	r2, r0
 80037e4:	460b      	mov	r3, r1
 80037e6:	4611      	mov	r1, r2
 80037e8:	4b38      	ldr	r3, [pc, #224]	@ (80038cc <UART_SetConfig+0x4e4>)
 80037ea:	fba3 2301 	umull	r2, r3, r3, r1
 80037ee:	095b      	lsrs	r3, r3, #5
 80037f0:	2264      	movs	r2, #100	@ 0x64
 80037f2:	fb02 f303 	mul.w	r3, r2, r3
 80037f6:	1acb      	subs	r3, r1, r3
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	3332      	adds	r3, #50	@ 0x32
 80037fc:	4a33      	ldr	r2, [pc, #204]	@ (80038cc <UART_SetConfig+0x4e4>)
 80037fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003802:	095b      	lsrs	r3, r3, #5
 8003804:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003808:	441c      	add	r4, r3
 800380a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800380e:	2200      	movs	r2, #0
 8003810:	673b      	str	r3, [r7, #112]	@ 0x70
 8003812:	677a      	str	r2, [r7, #116]	@ 0x74
 8003814:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003818:	4642      	mov	r2, r8
 800381a:	464b      	mov	r3, r9
 800381c:	1891      	adds	r1, r2, r2
 800381e:	60b9      	str	r1, [r7, #8]
 8003820:	415b      	adcs	r3, r3
 8003822:	60fb      	str	r3, [r7, #12]
 8003824:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003828:	4641      	mov	r1, r8
 800382a:	1851      	adds	r1, r2, r1
 800382c:	6039      	str	r1, [r7, #0]
 800382e:	4649      	mov	r1, r9
 8003830:	414b      	adcs	r3, r1
 8003832:	607b      	str	r3, [r7, #4]
 8003834:	f04f 0200 	mov.w	r2, #0
 8003838:	f04f 0300 	mov.w	r3, #0
 800383c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003840:	4659      	mov	r1, fp
 8003842:	00cb      	lsls	r3, r1, #3
 8003844:	4651      	mov	r1, sl
 8003846:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800384a:	4651      	mov	r1, sl
 800384c:	00ca      	lsls	r2, r1, #3
 800384e:	4610      	mov	r0, r2
 8003850:	4619      	mov	r1, r3
 8003852:	4603      	mov	r3, r0
 8003854:	4642      	mov	r2, r8
 8003856:	189b      	adds	r3, r3, r2
 8003858:	66bb      	str	r3, [r7, #104]	@ 0x68
 800385a:	464b      	mov	r3, r9
 800385c:	460a      	mov	r2, r1
 800385e:	eb42 0303 	adc.w	r3, r2, r3
 8003862:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	663b      	str	r3, [r7, #96]	@ 0x60
 800386e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003870:	f04f 0200 	mov.w	r2, #0
 8003874:	f04f 0300 	mov.w	r3, #0
 8003878:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800387c:	4649      	mov	r1, r9
 800387e:	008b      	lsls	r3, r1, #2
 8003880:	4641      	mov	r1, r8
 8003882:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003886:	4641      	mov	r1, r8
 8003888:	008a      	lsls	r2, r1, #2
 800388a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800388e:	f7fc fd0f 	bl	80002b0 <__aeabi_uldivmod>
 8003892:	4602      	mov	r2, r0
 8003894:	460b      	mov	r3, r1
 8003896:	4b0d      	ldr	r3, [pc, #52]	@ (80038cc <UART_SetConfig+0x4e4>)
 8003898:	fba3 1302 	umull	r1, r3, r3, r2
 800389c:	095b      	lsrs	r3, r3, #5
 800389e:	2164      	movs	r1, #100	@ 0x64
 80038a0:	fb01 f303 	mul.w	r3, r1, r3
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	3332      	adds	r3, #50	@ 0x32
 80038aa:	4a08      	ldr	r2, [pc, #32]	@ (80038cc <UART_SetConfig+0x4e4>)
 80038ac:	fba2 2303 	umull	r2, r3, r2, r3
 80038b0:	095b      	lsrs	r3, r3, #5
 80038b2:	f003 020f 	and.w	r2, r3, #15
 80038b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4422      	add	r2, r4
 80038be:	609a      	str	r2, [r3, #8]
}
 80038c0:	bf00      	nop
 80038c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80038c6:	46bd      	mov	sp, r7
 80038c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038cc:	51eb851f 	.word	0x51eb851f

080038d0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80038da:	2300      	movs	r3, #0
 80038dc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80038de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038e2:	2b84      	cmp	r3, #132	@ 0x84
 80038e4:	d005      	beq.n	80038f2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80038e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	4413      	add	r3, r2
 80038ee:	3303      	adds	r3, #3
 80038f0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80038f2:	68fb      	ldr	r3, [r7, #12]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003904:	f000 fc66 	bl	80041d4 <vTaskStartScheduler>
  
  return osOK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	bd80      	pop	{r7, pc}

0800390e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800390e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003910:	b089      	sub	sp, #36	@ 0x24
 8003912:	af04      	add	r7, sp, #16
 8003914:	6078      	str	r0, [r7, #4]
 8003916:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d020      	beq.n	8003962 <osThreadCreate+0x54>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d01c      	beq.n	8003962 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685c      	ldr	r4, [r3, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	691e      	ldr	r6, [r3, #16]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800393a:	4618      	mov	r0, r3
 800393c:	f7ff ffc8 	bl	80038d0 <makeFreeRtosPriority>
 8003940:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800394a:	9202      	str	r2, [sp, #8]
 800394c:	9301      	str	r3, [sp, #4]
 800394e:	9100      	str	r1, [sp, #0]
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	4632      	mov	r2, r6
 8003954:	4629      	mov	r1, r5
 8003956:	4620      	mov	r0, r4
 8003958:	f000 fa57 	bl	8003e0a <xTaskCreateStatic>
 800395c:	4603      	mov	r3, r0
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	e01c      	b.n	800399c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685c      	ldr	r4, [r3, #4]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800396e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003976:	4618      	mov	r0, r3
 8003978:	f7ff ffaa 	bl	80038d0 <makeFreeRtosPriority>
 800397c:	4602      	mov	r2, r0
 800397e:	f107 030c 	add.w	r3, r7, #12
 8003982:	9301      	str	r3, [sp, #4]
 8003984:	9200      	str	r2, [sp, #0]
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	4632      	mov	r2, r6
 800398a:	4629      	mov	r1, r5
 800398c:	4620      	mov	r0, r4
 800398e:	f000 fa9c 	bl	8003eca <xTaskCreate>
 8003992:	4603      	mov	r3, r0
 8003994:	2b01      	cmp	r3, #1
 8003996:	d001      	beq.n	800399c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003998:	2300      	movs	r3, #0
 800399a:	e000      	b.n	800399e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800399c:	68fb      	ldr	r3, [r7, #12]
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080039a6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b084      	sub	sp, #16
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <osDelay+0x16>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	e000      	b.n	80039be <osDelay+0x18>
 80039bc:	2301      	movs	r3, #1
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 fbd2 	bl	8004168 <vTaskDelay>
  
  return osOK;
 80039c4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80039ce:	b590      	push	{r4, r7, lr}
 80039d0:	b085      	sub	sp, #20
 80039d2:	af02      	add	r7, sp, #8
 80039d4:	6078      	str	r0, [r7, #4]
 80039d6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d011      	beq.n	8003a04 <osMessageCreate+0x36>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00d      	beq.n	8003a04 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6818      	ldr	r0, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6859      	ldr	r1, [r3, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	2400      	movs	r4, #0
 80039fa:	9400      	str	r4, [sp, #0]
 80039fc:	f000 f92e 	bl	8003c5c <xQueueGenericCreateStatic>
 8003a00:	4603      	mov	r3, r0
 8003a02:	e008      	b.n	8003a16 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6818      	ldr	r0, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	4619      	mov	r1, r3
 8003a10:	f000 f9a1 	bl	8003d56 <xQueueGenericCreate>
 8003a14:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd90      	pop	{r4, r7, pc}

08003a1e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f103 0208 	add.w	r2, r3, #8
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f04f 32ff 	mov.w	r2, #4294967295
 8003a36:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f103 0208 	add.w	r2, r3, #8
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f103 0208 	add.w	r2, r3, #8
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003a52:	bf00      	nop
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	689a      	ldr	r2, [r3, #8]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	1c5a      	adds	r2, r3, #1
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	601a      	str	r2, [r3, #0]
}
 8003ab4:	bf00      	nop
 8003ab6:	3714      	adds	r7, #20
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b085      	sub	sp, #20
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad6:	d103      	bne.n	8003ae0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691b      	ldr	r3, [r3, #16]
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	e00c      	b.n	8003afa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3308      	adds	r3, #8
 8003ae4:	60fb      	str	r3, [r7, #12]
 8003ae6:	e002      	b.n	8003aee <vListInsert+0x2e>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	60fb      	str	r3, [r7, #12]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d2f6      	bcs.n	8003ae8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	1c5a      	adds	r2, r3, #1
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	601a      	str	r2, [r3, #0]
}
 8003b26:	bf00      	nop
 8003b28:	3714      	adds	r7, #20
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003b32:	b480      	push	{r7}
 8003b34:	b085      	sub	sp, #20
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	6892      	ldr	r2, [r2, #8]
 8003b48:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	6852      	ldr	r2, [r2, #4]
 8003b52:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d103      	bne.n	8003b66 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689a      	ldr	r2, [r3, #8]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	1e5a      	subs	r2, r3, #1
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
	...

08003b88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10b      	bne.n	8003bb4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ba0:	f383 8811 	msr	BASEPRI, r3
 8003ba4:	f3bf 8f6f 	isb	sy
 8003ba8:	f3bf 8f4f 	dsb	sy
 8003bac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003bae:	bf00      	nop
 8003bb0:	bf00      	nop
 8003bb2:	e7fd      	b.n	8003bb0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003bb4:	f001 f818 	bl	8004be8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc0:	68f9      	ldr	r1, [r7, #12]
 8003bc2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003bc4:	fb01 f303 	mul.w	r3, r1, r3
 8003bc8:	441a      	add	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003be4:	3b01      	subs	r3, #1
 8003be6:	68f9      	ldr	r1, [r7, #12]
 8003be8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003bea:	fb01 f303 	mul.w	r3, r1, r3
 8003bee:	441a      	add	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	22ff      	movs	r2, #255	@ 0xff
 8003bf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	22ff      	movs	r2, #255	@ 0xff
 8003c00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d114      	bne.n	8003c34 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d01a      	beq.n	8003c48 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	3310      	adds	r3, #16
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 fd10 	bl	800463c <xTaskRemoveFromEventList>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d012      	beq.n	8003c48 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003c22:	4b0d      	ldr	r3, [pc, #52]	@ (8003c58 <xQueueGenericReset+0xd0>)
 8003c24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	f3bf 8f4f 	dsb	sy
 8003c2e:	f3bf 8f6f 	isb	sy
 8003c32:	e009      	b.n	8003c48 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	3310      	adds	r3, #16
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7ff fef0 	bl	8003a1e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	3324      	adds	r3, #36	@ 0x24
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7ff feeb 	bl	8003a1e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003c48:	f001 f800 	bl	8004c4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003c4c:	2301      	movs	r3, #1
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	e000ed04 	.word	0xe000ed04

08003c5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b08e      	sub	sp, #56	@ 0x38
 8003c60:	af02      	add	r7, sp, #8
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
 8003c68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10b      	bne.n	8003c88 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c74:	f383 8811 	msr	BASEPRI, r3
 8003c78:	f3bf 8f6f 	isb	sy
 8003c7c:	f3bf 8f4f 	dsb	sy
 8003c80:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003c82:	bf00      	nop
 8003c84:	bf00      	nop
 8003c86:	e7fd      	b.n	8003c84 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10b      	bne.n	8003ca6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c92:	f383 8811 	msr	BASEPRI, r3
 8003c96:	f3bf 8f6f 	isb	sy
 8003c9a:	f3bf 8f4f 	dsb	sy
 8003c9e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003ca0:	bf00      	nop
 8003ca2:	bf00      	nop
 8003ca4:	e7fd      	b.n	8003ca2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d002      	beq.n	8003cb2 <xQueueGenericCreateStatic+0x56>
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <xQueueGenericCreateStatic+0x5a>
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e000      	b.n	8003cb8 <xQueueGenericCreateStatic+0x5c>
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d10b      	bne.n	8003cd4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003cbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cc0:	f383 8811 	msr	BASEPRI, r3
 8003cc4:	f3bf 8f6f 	isb	sy
 8003cc8:	f3bf 8f4f 	dsb	sy
 8003ccc:	623b      	str	r3, [r7, #32]
}
 8003cce:	bf00      	nop
 8003cd0:	bf00      	nop
 8003cd2:	e7fd      	b.n	8003cd0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d102      	bne.n	8003ce0 <xQueueGenericCreateStatic+0x84>
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <xQueueGenericCreateStatic+0x88>
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e000      	b.n	8003ce6 <xQueueGenericCreateStatic+0x8a>
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10b      	bne.n	8003d02 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cee:	f383 8811 	msr	BASEPRI, r3
 8003cf2:	f3bf 8f6f 	isb	sy
 8003cf6:	f3bf 8f4f 	dsb	sy
 8003cfa:	61fb      	str	r3, [r7, #28]
}
 8003cfc:	bf00      	nop
 8003cfe:	bf00      	nop
 8003d00:	e7fd      	b.n	8003cfe <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003d02:	2348      	movs	r3, #72	@ 0x48
 8003d04:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	2b48      	cmp	r3, #72	@ 0x48
 8003d0a:	d00b      	beq.n	8003d24 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d10:	f383 8811 	msr	BASEPRI, r3
 8003d14:	f3bf 8f6f 	isb	sy
 8003d18:	f3bf 8f4f 	dsb	sy
 8003d1c:	61bb      	str	r3, [r7, #24]
}
 8003d1e:	bf00      	nop
 8003d20:	bf00      	nop
 8003d22:	e7fd      	b.n	8003d20 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003d24:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00d      	beq.n	8003d4c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d38:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d3e:	9300      	str	r3, [sp, #0]
 8003d40:	4613      	mov	r3, r2
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	68b9      	ldr	r1, [r7, #8]
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f000 f840 	bl	8003dcc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3730      	adds	r7, #48	@ 0x30
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b08a      	sub	sp, #40	@ 0x28
 8003d5a:	af02      	add	r7, sp, #8
 8003d5c:	60f8      	str	r0, [r7, #12]
 8003d5e:	60b9      	str	r1, [r7, #8]
 8003d60:	4613      	mov	r3, r2
 8003d62:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10b      	bne.n	8003d82 <xQueueGenericCreate+0x2c>
	__asm volatile
 8003d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d6e:	f383 8811 	msr	BASEPRI, r3
 8003d72:	f3bf 8f6f 	isb	sy
 8003d76:	f3bf 8f4f 	dsb	sy
 8003d7a:	613b      	str	r3, [r7, #16]
}
 8003d7c:	bf00      	nop
 8003d7e:	bf00      	nop
 8003d80:	e7fd      	b.n	8003d7e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	fb02 f303 	mul.w	r3, r2, r3
 8003d8a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	3348      	adds	r3, #72	@ 0x48
 8003d90:	4618      	mov	r0, r3
 8003d92:	f001 f809 	bl	8004da8 <pvPortMalloc>
 8003d96:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d011      	beq.n	8003dc2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	3348      	adds	r3, #72	@ 0x48
 8003da6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003db0:	79fa      	ldrb	r2, [r7, #7]
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	4613      	mov	r3, r2
 8003db8:	697a      	ldr	r2, [r7, #20]
 8003dba:	68b9      	ldr	r1, [r7, #8]
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 f805 	bl	8003dcc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003dc2:	69bb      	ldr	r3, [r7, #24]
	}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3720      	adds	r7, #32
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
 8003dd8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d103      	bne.n	8003de8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	601a      	str	r2, [r3, #0]
 8003de6:	e002      	b.n	8003dee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003de8:	69bb      	ldr	r3, [r7, #24]
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	69b8      	ldr	r0, [r7, #24]
 8003dfe:	f7ff fec3 	bl	8003b88 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003e02:	bf00      	nop
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b08e      	sub	sp, #56	@ 0x38
 8003e0e:	af04      	add	r7, sp, #16
 8003e10:	60f8      	str	r0, [r7, #12]
 8003e12:	60b9      	str	r1, [r7, #8]
 8003e14:	607a      	str	r2, [r7, #4]
 8003e16:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10b      	bne.n	8003e36 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e22:	f383 8811 	msr	BASEPRI, r3
 8003e26:	f3bf 8f6f 	isb	sy
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	623b      	str	r3, [r7, #32]
}
 8003e30:	bf00      	nop
 8003e32:	bf00      	nop
 8003e34:	e7fd      	b.n	8003e32 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10b      	bne.n	8003e54 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e40:	f383 8811 	msr	BASEPRI, r3
 8003e44:	f3bf 8f6f 	isb	sy
 8003e48:	f3bf 8f4f 	dsb	sy
 8003e4c:	61fb      	str	r3, [r7, #28]
}
 8003e4e:	bf00      	nop
 8003e50:	bf00      	nop
 8003e52:	e7fd      	b.n	8003e50 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003e54:	23a0      	movs	r3, #160	@ 0xa0
 8003e56:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	2ba0      	cmp	r3, #160	@ 0xa0
 8003e5c:	d00b      	beq.n	8003e76 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e62:	f383 8811 	msr	BASEPRI, r3
 8003e66:	f3bf 8f6f 	isb	sy
 8003e6a:	f3bf 8f4f 	dsb	sy
 8003e6e:	61bb      	str	r3, [r7, #24]
}
 8003e70:	bf00      	nop
 8003e72:	bf00      	nop
 8003e74:	e7fd      	b.n	8003e72 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003e76:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d01e      	beq.n	8003ebc <xTaskCreateStatic+0xb2>
 8003e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d01b      	beq.n	8003ebc <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e86:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003e8c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e90:	2202      	movs	r2, #2
 8003e92:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003e96:	2300      	movs	r3, #0
 8003e98:	9303      	str	r3, [sp, #12]
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9c:	9302      	str	r3, [sp, #8]
 8003e9e:	f107 0314 	add.w	r3, r7, #20
 8003ea2:	9301      	str	r3, [sp, #4]
 8003ea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	68b9      	ldr	r1, [r7, #8]
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f000 f850 	bl	8003f54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003eb4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003eb6:	f000 f8ed 	bl	8004094 <prvAddNewTaskToReadyList>
 8003eba:	e001      	b.n	8003ec0 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003ec0:	697b      	ldr	r3, [r7, #20]
	}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3728      	adds	r7, #40	@ 0x28
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b08c      	sub	sp, #48	@ 0x30
 8003ece:	af04      	add	r7, sp, #16
 8003ed0:	60f8      	str	r0, [r7, #12]
 8003ed2:	60b9      	str	r1, [r7, #8]
 8003ed4:	603b      	str	r3, [r7, #0]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003eda:	88fb      	ldrh	r3, [r7, #6]
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 ff62 	bl	8004da8 <pvPortMalloc>
 8003ee4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00e      	beq.n	8003f0a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003eec:	20a0      	movs	r0, #160	@ 0xa0
 8003eee:	f000 ff5b 	bl	8004da8 <pvPortMalloc>
 8003ef2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	631a      	str	r2, [r3, #48]	@ 0x30
 8003f00:	e005      	b.n	8003f0e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003f02:	6978      	ldr	r0, [r7, #20]
 8003f04:	f001 f81e 	bl	8004f44 <vPortFree>
 8003f08:	e001      	b.n	8003f0e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d017      	beq.n	8003f44 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003f1c:	88fa      	ldrh	r2, [r7, #6]
 8003f1e:	2300      	movs	r3, #0
 8003f20:	9303      	str	r3, [sp, #12]
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	9302      	str	r3, [sp, #8]
 8003f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f28:	9301      	str	r3, [sp, #4]
 8003f2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	68b9      	ldr	r1, [r7, #8]
 8003f32:	68f8      	ldr	r0, [r7, #12]
 8003f34:	f000 f80e 	bl	8003f54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f38:	69f8      	ldr	r0, [r7, #28]
 8003f3a:	f000 f8ab 	bl	8004094 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	61bb      	str	r3, [r7, #24]
 8003f42:	e002      	b.n	8003f4a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f44:	f04f 33ff 	mov.w	r3, #4294967295
 8003f48:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f4a:	69bb      	ldr	r3, [r7, #24]
	}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3720      	adds	r7, #32
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
 8003f60:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	f023 0307 	bic.w	r3, r3, #7
 8003f7a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	f003 0307 	and.w	r3, r3, #7
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00b      	beq.n	8003f9e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f8a:	f383 8811 	msr	BASEPRI, r3
 8003f8e:	f3bf 8f6f 	isb	sy
 8003f92:	f3bf 8f4f 	dsb	sy
 8003f96:	617b      	str	r3, [r7, #20]
}
 8003f98:	bf00      	nop
 8003f9a:	bf00      	nop
 8003f9c:	e7fd      	b.n	8003f9a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d01f      	beq.n	8003fe4 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	61fb      	str	r3, [r7, #28]
 8003fa8:	e012      	b.n	8003fd0 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	4413      	add	r3, r2
 8003fb0:	7819      	ldrb	r1, [r3, #0]
 8003fb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	3334      	adds	r3, #52	@ 0x34
 8003fba:	460a      	mov	r2, r1
 8003fbc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d006      	beq.n	8003fd8 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	61fb      	str	r3, [r7, #28]
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	2b0f      	cmp	r3, #15
 8003fd4:	d9e9      	bls.n	8003faa <prvInitialiseNewTask+0x56>
 8003fd6:	e000      	b.n	8003fda <prvInitialiseNewTask+0x86>
			{
				break;
 8003fd8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003fe2:	e003      	b.n	8003fec <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fee:	2b06      	cmp	r3, #6
 8003ff0:	d901      	bls.n	8003ff6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003ff2:	2306      	movs	r3, #6
 8003ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ffa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ffe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004000:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004004:	2200      	movs	r2, #0
 8004006:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800400a:	3304      	adds	r3, #4
 800400c:	4618      	mov	r0, r3
 800400e:	f7ff fd26 	bl	8003a5e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004014:	3318      	adds	r3, #24
 8004016:	4618      	mov	r0, r3
 8004018:	f7ff fd21 	bl	8003a5e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800401c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800401e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004020:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004024:	f1c3 0207 	rsb	r2, r3, #7
 8004028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800402a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800402c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800402e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004030:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004034:	2200      	movs	r2, #0
 8004036:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800403a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800403c:	2200      	movs	r2, #0
 800403e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004044:	334c      	adds	r3, #76	@ 0x4c
 8004046:	224c      	movs	r2, #76	@ 0x4c
 8004048:	2100      	movs	r1, #0
 800404a:	4618      	mov	r0, r3
 800404c:	f001 fb4c 	bl	80056e8 <memset>
 8004050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004052:	4a0d      	ldr	r2, [pc, #52]	@ (8004088 <prvInitialiseNewTask+0x134>)
 8004054:	651a      	str	r2, [r3, #80]	@ 0x50
 8004056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004058:	4a0c      	ldr	r2, [pc, #48]	@ (800408c <prvInitialiseNewTask+0x138>)
 800405a:	655a      	str	r2, [r3, #84]	@ 0x54
 800405c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800405e:	4a0c      	ldr	r2, [pc, #48]	@ (8004090 <prvInitialiseNewTask+0x13c>)
 8004060:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	68f9      	ldr	r1, [r7, #12]
 8004066:	69b8      	ldr	r0, [r7, #24]
 8004068:	f000 fc8e 	bl	8004988 <pxPortInitialiseStack>
 800406c:	4602      	mov	r2, r0
 800406e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004070:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004074:	2b00      	cmp	r3, #0
 8004076:	d002      	beq.n	800407e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800407a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800407c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800407e:	bf00      	nop
 8004080:	3720      	adds	r7, #32
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	2000423c 	.word	0x2000423c
 800408c:	200042a4 	.word	0x200042a4
 8004090:	2000430c 	.word	0x2000430c

08004094 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800409c:	f000 fda4 	bl	8004be8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80040a0:	4b2a      	ldr	r3, [pc, #168]	@ (800414c <prvAddNewTaskToReadyList+0xb8>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3301      	adds	r3, #1
 80040a6:	4a29      	ldr	r2, [pc, #164]	@ (800414c <prvAddNewTaskToReadyList+0xb8>)
 80040a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80040aa:	4b29      	ldr	r3, [pc, #164]	@ (8004150 <prvAddNewTaskToReadyList+0xbc>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d109      	bne.n	80040c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80040b2:	4a27      	ldr	r2, [pc, #156]	@ (8004150 <prvAddNewTaskToReadyList+0xbc>)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80040b8:	4b24      	ldr	r3, [pc, #144]	@ (800414c <prvAddNewTaskToReadyList+0xb8>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d110      	bne.n	80040e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80040c0:	f000 fb38 	bl	8004734 <prvInitialiseTaskLists>
 80040c4:	e00d      	b.n	80040e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80040c6:	4b23      	ldr	r3, [pc, #140]	@ (8004154 <prvAddNewTaskToReadyList+0xc0>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d109      	bne.n	80040e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80040ce:	4b20      	ldr	r3, [pc, #128]	@ (8004150 <prvAddNewTaskToReadyList+0xbc>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d8:	429a      	cmp	r2, r3
 80040da:	d802      	bhi.n	80040e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80040dc:	4a1c      	ldr	r2, [pc, #112]	@ (8004150 <prvAddNewTaskToReadyList+0xbc>)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80040e2:	4b1d      	ldr	r3, [pc, #116]	@ (8004158 <prvAddNewTaskToReadyList+0xc4>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	3301      	adds	r3, #1
 80040e8:	4a1b      	ldr	r2, [pc, #108]	@ (8004158 <prvAddNewTaskToReadyList+0xc4>)
 80040ea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f0:	2201      	movs	r2, #1
 80040f2:	409a      	lsls	r2, r3
 80040f4:	4b19      	ldr	r3, [pc, #100]	@ (800415c <prvAddNewTaskToReadyList+0xc8>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	4a18      	ldr	r2, [pc, #96]	@ (800415c <prvAddNewTaskToReadyList+0xc8>)
 80040fc:	6013      	str	r3, [r2, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004102:	4613      	mov	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4a15      	ldr	r2, [pc, #84]	@ (8004160 <prvAddNewTaskToReadyList+0xcc>)
 800410c:	441a      	add	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	3304      	adds	r3, #4
 8004112:	4619      	mov	r1, r3
 8004114:	4610      	mov	r0, r2
 8004116:	f7ff fcaf 	bl	8003a78 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800411a:	f000 fd97 	bl	8004c4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800411e:	4b0d      	ldr	r3, [pc, #52]	@ (8004154 <prvAddNewTaskToReadyList+0xc0>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00e      	beq.n	8004144 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004126:	4b0a      	ldr	r3, [pc, #40]	@ (8004150 <prvAddNewTaskToReadyList+0xbc>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004130:	429a      	cmp	r2, r3
 8004132:	d207      	bcs.n	8004144 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004134:	4b0b      	ldr	r3, [pc, #44]	@ (8004164 <prvAddNewTaskToReadyList+0xd0>)
 8004136:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	f3bf 8f4f 	dsb	sy
 8004140:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004144:	bf00      	nop
 8004146:	3708      	adds	r7, #8
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	200005e8 	.word	0x200005e8
 8004150:	200004e8 	.word	0x200004e8
 8004154:	200005f4 	.word	0x200005f4
 8004158:	20000604 	.word	0x20000604
 800415c:	200005f0 	.word	0x200005f0
 8004160:	200004ec 	.word	0x200004ec
 8004164:	e000ed04 	.word	0xe000ed04

08004168 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004170:	2300      	movs	r3, #0
 8004172:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d018      	beq.n	80041ac <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800417a:	4b14      	ldr	r3, [pc, #80]	@ (80041cc <vTaskDelay+0x64>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00b      	beq.n	800419a <vTaskDelay+0x32>
	__asm volatile
 8004182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004186:	f383 8811 	msr	BASEPRI, r3
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	60bb      	str	r3, [r7, #8]
}
 8004194:	bf00      	nop
 8004196:	bf00      	nop
 8004198:	e7fd      	b.n	8004196 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800419a:	f000 f885 	bl	80042a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800419e:	2100      	movs	r1, #0
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 fb8b 	bl	80048bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80041a6:	f000 f88d 	bl	80042c4 <xTaskResumeAll>
 80041aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d107      	bne.n	80041c2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80041b2:	4b07      	ldr	r3, [pc, #28]	@ (80041d0 <vTaskDelay+0x68>)
 80041b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	f3bf 8f4f 	dsb	sy
 80041be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80041c2:	bf00      	nop
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	20000610 	.word	0x20000610
 80041d0:	e000ed04 	.word	0xe000ed04

080041d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b08a      	sub	sp, #40	@ 0x28
 80041d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80041da:	2300      	movs	r3, #0
 80041dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80041de:	2300      	movs	r3, #0
 80041e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80041e2:	463a      	mov	r2, r7
 80041e4:	1d39      	adds	r1, r7, #4
 80041e6:	f107 0308 	add.w	r3, r7, #8
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7fc f9d8 	bl	80005a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80041f0:	6839      	ldr	r1, [r7, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	9202      	str	r2, [sp, #8]
 80041f8:	9301      	str	r3, [sp, #4]
 80041fa:	2300      	movs	r3, #0
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	2300      	movs	r3, #0
 8004200:	460a      	mov	r2, r1
 8004202:	4921      	ldr	r1, [pc, #132]	@ (8004288 <vTaskStartScheduler+0xb4>)
 8004204:	4821      	ldr	r0, [pc, #132]	@ (800428c <vTaskStartScheduler+0xb8>)
 8004206:	f7ff fe00 	bl	8003e0a <xTaskCreateStatic>
 800420a:	4603      	mov	r3, r0
 800420c:	4a20      	ldr	r2, [pc, #128]	@ (8004290 <vTaskStartScheduler+0xbc>)
 800420e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004210:	4b1f      	ldr	r3, [pc, #124]	@ (8004290 <vTaskStartScheduler+0xbc>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d002      	beq.n	800421e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004218:	2301      	movs	r3, #1
 800421a:	617b      	str	r3, [r7, #20]
 800421c:	e001      	b.n	8004222 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800421e:	2300      	movs	r3, #0
 8004220:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d11b      	bne.n	8004260 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800422c:	f383 8811 	msr	BASEPRI, r3
 8004230:	f3bf 8f6f 	isb	sy
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	613b      	str	r3, [r7, #16]
}
 800423a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800423c:	4b15      	ldr	r3, [pc, #84]	@ (8004294 <vTaskStartScheduler+0xc0>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	334c      	adds	r3, #76	@ 0x4c
 8004242:	4a15      	ldr	r2, [pc, #84]	@ (8004298 <vTaskStartScheduler+0xc4>)
 8004244:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004246:	4b15      	ldr	r3, [pc, #84]	@ (800429c <vTaskStartScheduler+0xc8>)
 8004248:	f04f 32ff 	mov.w	r2, #4294967295
 800424c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800424e:	4b14      	ldr	r3, [pc, #80]	@ (80042a0 <vTaskStartScheduler+0xcc>)
 8004250:	2201      	movs	r2, #1
 8004252:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004254:	4b13      	ldr	r3, [pc, #76]	@ (80042a4 <vTaskStartScheduler+0xd0>)
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800425a:	f000 fc21 	bl	8004aa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800425e:	e00f      	b.n	8004280 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004266:	d10b      	bne.n	8004280 <vTaskStartScheduler+0xac>
	__asm volatile
 8004268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800426c:	f383 8811 	msr	BASEPRI, r3
 8004270:	f3bf 8f6f 	isb	sy
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	60fb      	str	r3, [r7, #12]
}
 800427a:	bf00      	nop
 800427c:	bf00      	nop
 800427e:	e7fd      	b.n	800427c <vTaskStartScheduler+0xa8>
}
 8004280:	bf00      	nop
 8004282:	3718      	adds	r7, #24
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	080068f8 	.word	0x080068f8
 800428c:	08004705 	.word	0x08004705
 8004290:	2000060c 	.word	0x2000060c
 8004294:	200004e8 	.word	0x200004e8
 8004298:	20000034 	.word	0x20000034
 800429c:	20000608 	.word	0x20000608
 80042a0:	200005f4 	.word	0x200005f4
 80042a4:	200005ec 	.word	0x200005ec

080042a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80042a8:	b480      	push	{r7}
 80042aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80042ac:	4b04      	ldr	r3, [pc, #16]	@ (80042c0 <vTaskSuspendAll+0x18>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3301      	adds	r3, #1
 80042b2:	4a03      	ldr	r2, [pc, #12]	@ (80042c0 <vTaskSuspendAll+0x18>)
 80042b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80042b6:	bf00      	nop
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr
 80042c0:	20000610 	.word	0x20000610

080042c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80042ca:	2300      	movs	r3, #0
 80042cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80042ce:	2300      	movs	r3, #0
 80042d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80042d2:	4b42      	ldr	r3, [pc, #264]	@ (80043dc <xTaskResumeAll+0x118>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10b      	bne.n	80042f2 <xTaskResumeAll+0x2e>
	__asm volatile
 80042da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042de:	f383 8811 	msr	BASEPRI, r3
 80042e2:	f3bf 8f6f 	isb	sy
 80042e6:	f3bf 8f4f 	dsb	sy
 80042ea:	603b      	str	r3, [r7, #0]
}
 80042ec:	bf00      	nop
 80042ee:	bf00      	nop
 80042f0:	e7fd      	b.n	80042ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80042f2:	f000 fc79 	bl	8004be8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80042f6:	4b39      	ldr	r3, [pc, #228]	@ (80043dc <xTaskResumeAll+0x118>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	3b01      	subs	r3, #1
 80042fc:	4a37      	ldr	r2, [pc, #220]	@ (80043dc <xTaskResumeAll+0x118>)
 80042fe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004300:	4b36      	ldr	r3, [pc, #216]	@ (80043dc <xTaskResumeAll+0x118>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d161      	bne.n	80043cc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004308:	4b35      	ldr	r3, [pc, #212]	@ (80043e0 <xTaskResumeAll+0x11c>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d05d      	beq.n	80043cc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004310:	e02e      	b.n	8004370 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004312:	4b34      	ldr	r3, [pc, #208]	@ (80043e4 <xTaskResumeAll+0x120>)
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	3318      	adds	r3, #24
 800431e:	4618      	mov	r0, r3
 8004320:	f7ff fc07 	bl	8003b32 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	3304      	adds	r3, #4
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff fc02 	bl	8003b32 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004332:	2201      	movs	r2, #1
 8004334:	409a      	lsls	r2, r3
 8004336:	4b2c      	ldr	r3, [pc, #176]	@ (80043e8 <xTaskResumeAll+0x124>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4313      	orrs	r3, r2
 800433c:	4a2a      	ldr	r2, [pc, #168]	@ (80043e8 <xTaskResumeAll+0x124>)
 800433e:	6013      	str	r3, [r2, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004344:	4613      	mov	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	4413      	add	r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	4a27      	ldr	r2, [pc, #156]	@ (80043ec <xTaskResumeAll+0x128>)
 800434e:	441a      	add	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	3304      	adds	r3, #4
 8004354:	4619      	mov	r1, r3
 8004356:	4610      	mov	r0, r2
 8004358:	f7ff fb8e 	bl	8003a78 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004360:	4b23      	ldr	r3, [pc, #140]	@ (80043f0 <xTaskResumeAll+0x12c>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004366:	429a      	cmp	r2, r3
 8004368:	d302      	bcc.n	8004370 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800436a:	4b22      	ldr	r3, [pc, #136]	@ (80043f4 <xTaskResumeAll+0x130>)
 800436c:	2201      	movs	r2, #1
 800436e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004370:	4b1c      	ldr	r3, [pc, #112]	@ (80043e4 <xTaskResumeAll+0x120>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1cc      	bne.n	8004312 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800437e:	f000 fa7d 	bl	800487c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004382:	4b1d      	ldr	r3, [pc, #116]	@ (80043f8 <xTaskResumeAll+0x134>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d010      	beq.n	80043b0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800438e:	f000 f837 	bl	8004400 <xTaskIncrementTick>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d002      	beq.n	800439e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004398:	4b16      	ldr	r3, [pc, #88]	@ (80043f4 <xTaskResumeAll+0x130>)
 800439a:	2201      	movs	r2, #1
 800439c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	3b01      	subs	r3, #1
 80043a2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1f1      	bne.n	800438e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80043aa:	4b13      	ldr	r3, [pc, #76]	@ (80043f8 <xTaskResumeAll+0x134>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80043b0:	4b10      	ldr	r3, [pc, #64]	@ (80043f4 <xTaskResumeAll+0x130>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d009      	beq.n	80043cc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80043b8:	2301      	movs	r3, #1
 80043ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80043bc:	4b0f      	ldr	r3, [pc, #60]	@ (80043fc <xTaskResumeAll+0x138>)
 80043be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	f3bf 8f4f 	dsb	sy
 80043c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80043cc:	f000 fc3e 	bl	8004c4c <vPortExitCritical>

	return xAlreadyYielded;
 80043d0:	68bb      	ldr	r3, [r7, #8]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	20000610 	.word	0x20000610
 80043e0:	200005e8 	.word	0x200005e8
 80043e4:	200005a8 	.word	0x200005a8
 80043e8:	200005f0 	.word	0x200005f0
 80043ec:	200004ec 	.word	0x200004ec
 80043f0:	200004e8 	.word	0x200004e8
 80043f4:	200005fc 	.word	0x200005fc
 80043f8:	200005f8 	.word	0x200005f8
 80043fc:	e000ed04 	.word	0xe000ed04

08004400 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b086      	sub	sp, #24
 8004404:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004406:	2300      	movs	r3, #0
 8004408:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800440a:	4b4f      	ldr	r3, [pc, #316]	@ (8004548 <xTaskIncrementTick+0x148>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	f040 808f 	bne.w	8004532 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004414:	4b4d      	ldr	r3, [pc, #308]	@ (800454c <xTaskIncrementTick+0x14c>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	3301      	adds	r3, #1
 800441a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800441c:	4a4b      	ldr	r2, [pc, #300]	@ (800454c <xTaskIncrementTick+0x14c>)
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d121      	bne.n	800446c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004428:	4b49      	ldr	r3, [pc, #292]	@ (8004550 <xTaskIncrementTick+0x150>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00b      	beq.n	800444a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004436:	f383 8811 	msr	BASEPRI, r3
 800443a:	f3bf 8f6f 	isb	sy
 800443e:	f3bf 8f4f 	dsb	sy
 8004442:	603b      	str	r3, [r7, #0]
}
 8004444:	bf00      	nop
 8004446:	bf00      	nop
 8004448:	e7fd      	b.n	8004446 <xTaskIncrementTick+0x46>
 800444a:	4b41      	ldr	r3, [pc, #260]	@ (8004550 <xTaskIncrementTick+0x150>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	4b40      	ldr	r3, [pc, #256]	@ (8004554 <xTaskIncrementTick+0x154>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a3e      	ldr	r2, [pc, #248]	@ (8004550 <xTaskIncrementTick+0x150>)
 8004456:	6013      	str	r3, [r2, #0]
 8004458:	4a3e      	ldr	r2, [pc, #248]	@ (8004554 <xTaskIncrementTick+0x154>)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6013      	str	r3, [r2, #0]
 800445e:	4b3e      	ldr	r3, [pc, #248]	@ (8004558 <xTaskIncrementTick+0x158>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	3301      	adds	r3, #1
 8004464:	4a3c      	ldr	r2, [pc, #240]	@ (8004558 <xTaskIncrementTick+0x158>)
 8004466:	6013      	str	r3, [r2, #0]
 8004468:	f000 fa08 	bl	800487c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800446c:	4b3b      	ldr	r3, [pc, #236]	@ (800455c <xTaskIncrementTick+0x15c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	429a      	cmp	r2, r3
 8004474:	d348      	bcc.n	8004508 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004476:	4b36      	ldr	r3, [pc, #216]	@ (8004550 <xTaskIncrementTick+0x150>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d104      	bne.n	800448a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004480:	4b36      	ldr	r3, [pc, #216]	@ (800455c <xTaskIncrementTick+0x15c>)
 8004482:	f04f 32ff 	mov.w	r2, #4294967295
 8004486:	601a      	str	r2, [r3, #0]
					break;
 8004488:	e03e      	b.n	8004508 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800448a:	4b31      	ldr	r3, [pc, #196]	@ (8004550 <xTaskIncrementTick+0x150>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d203      	bcs.n	80044aa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80044a2:	4a2e      	ldr	r2, [pc, #184]	@ (800455c <xTaskIncrementTick+0x15c>)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80044a8:	e02e      	b.n	8004508 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	3304      	adds	r3, #4
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7ff fb3f 	bl	8003b32 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d004      	beq.n	80044c6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	3318      	adds	r3, #24
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7ff fb36 	bl	8003b32 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ca:	2201      	movs	r2, #1
 80044cc:	409a      	lsls	r2, r3
 80044ce:	4b24      	ldr	r3, [pc, #144]	@ (8004560 <xTaskIncrementTick+0x160>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	4a22      	ldr	r2, [pc, #136]	@ (8004560 <xTaskIncrementTick+0x160>)
 80044d6:	6013      	str	r3, [r2, #0]
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044dc:	4613      	mov	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4a1f      	ldr	r2, [pc, #124]	@ (8004564 <xTaskIncrementTick+0x164>)
 80044e6:	441a      	add	r2, r3
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	3304      	adds	r3, #4
 80044ec:	4619      	mov	r1, r3
 80044ee:	4610      	mov	r0, r2
 80044f0:	f7ff fac2 	bl	8003a78 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004568 <xTaskIncrementTick+0x168>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044fe:	429a      	cmp	r2, r3
 8004500:	d3b9      	bcc.n	8004476 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004502:	2301      	movs	r3, #1
 8004504:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004506:	e7b6      	b.n	8004476 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004508:	4b17      	ldr	r3, [pc, #92]	@ (8004568 <xTaskIncrementTick+0x168>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800450e:	4915      	ldr	r1, [pc, #84]	@ (8004564 <xTaskIncrementTick+0x164>)
 8004510:	4613      	mov	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	440b      	add	r3, r1
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d901      	bls.n	8004524 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004520:	2301      	movs	r3, #1
 8004522:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004524:	4b11      	ldr	r3, [pc, #68]	@ (800456c <xTaskIncrementTick+0x16c>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d007      	beq.n	800453c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800452c:	2301      	movs	r3, #1
 800452e:	617b      	str	r3, [r7, #20]
 8004530:	e004      	b.n	800453c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004532:	4b0f      	ldr	r3, [pc, #60]	@ (8004570 <xTaskIncrementTick+0x170>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	3301      	adds	r3, #1
 8004538:	4a0d      	ldr	r2, [pc, #52]	@ (8004570 <xTaskIncrementTick+0x170>)
 800453a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800453c:	697b      	ldr	r3, [r7, #20]
}
 800453e:	4618      	mov	r0, r3
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	20000610 	.word	0x20000610
 800454c:	200005ec 	.word	0x200005ec
 8004550:	200005a0 	.word	0x200005a0
 8004554:	200005a4 	.word	0x200005a4
 8004558:	20000600 	.word	0x20000600
 800455c:	20000608 	.word	0x20000608
 8004560:	200005f0 	.word	0x200005f0
 8004564:	200004ec 	.word	0x200004ec
 8004568:	200004e8 	.word	0x200004e8
 800456c:	200005fc 	.word	0x200005fc
 8004570:	200005f8 	.word	0x200005f8

08004574 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004574:	b480      	push	{r7}
 8004576:	b087      	sub	sp, #28
 8004578:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800457a:	4b2a      	ldr	r3, [pc, #168]	@ (8004624 <vTaskSwitchContext+0xb0>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004582:	4b29      	ldr	r3, [pc, #164]	@ (8004628 <vTaskSwitchContext+0xb4>)
 8004584:	2201      	movs	r2, #1
 8004586:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004588:	e045      	b.n	8004616 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800458a:	4b27      	ldr	r3, [pc, #156]	@ (8004628 <vTaskSwitchContext+0xb4>)
 800458c:	2200      	movs	r2, #0
 800458e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004590:	4b26      	ldr	r3, [pc, #152]	@ (800462c <vTaskSwitchContext+0xb8>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	fab3 f383 	clz	r3, r3
 800459c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800459e:	7afb      	ldrb	r3, [r7, #11]
 80045a0:	f1c3 031f 	rsb	r3, r3, #31
 80045a4:	617b      	str	r3, [r7, #20]
 80045a6:	4922      	ldr	r1, [pc, #136]	@ (8004630 <vTaskSwitchContext+0xbc>)
 80045a8:	697a      	ldr	r2, [r7, #20]
 80045aa:	4613      	mov	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	440b      	add	r3, r1
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10b      	bne.n	80045d2 <vTaskSwitchContext+0x5e>
	__asm volatile
 80045ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045be:	f383 8811 	msr	BASEPRI, r3
 80045c2:	f3bf 8f6f 	isb	sy
 80045c6:	f3bf 8f4f 	dsb	sy
 80045ca:	607b      	str	r3, [r7, #4]
}
 80045cc:	bf00      	nop
 80045ce:	bf00      	nop
 80045d0:	e7fd      	b.n	80045ce <vTaskSwitchContext+0x5a>
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	4613      	mov	r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	4413      	add	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4a14      	ldr	r2, [pc, #80]	@ (8004630 <vTaskSwitchContext+0xbc>)
 80045de:	4413      	add	r3, r2
 80045e0:	613b      	str	r3, [r7, #16]
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	605a      	str	r2, [r3, #4]
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	3308      	adds	r3, #8
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d104      	bne.n	8004602 <vTaskSwitchContext+0x8e>
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	605a      	str	r2, [r3, #4]
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	4a0a      	ldr	r2, [pc, #40]	@ (8004634 <vTaskSwitchContext+0xc0>)
 800460a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800460c:	4b09      	ldr	r3, [pc, #36]	@ (8004634 <vTaskSwitchContext+0xc0>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	334c      	adds	r3, #76	@ 0x4c
 8004612:	4a09      	ldr	r2, [pc, #36]	@ (8004638 <vTaskSwitchContext+0xc4>)
 8004614:	6013      	str	r3, [r2, #0]
}
 8004616:	bf00      	nop
 8004618:	371c      	adds	r7, #28
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	20000610 	.word	0x20000610
 8004628:	200005fc 	.word	0x200005fc
 800462c:	200005f0 	.word	0x200005f0
 8004630:	200004ec 	.word	0x200004ec
 8004634:	200004e8 	.word	0x200004e8
 8004638:	20000034 	.word	0x20000034

0800463c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	68db      	ldr	r3, [r3, #12]
 800464a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10b      	bne.n	800466a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004656:	f383 8811 	msr	BASEPRI, r3
 800465a:	f3bf 8f6f 	isb	sy
 800465e:	f3bf 8f4f 	dsb	sy
 8004662:	60fb      	str	r3, [r7, #12]
}
 8004664:	bf00      	nop
 8004666:	bf00      	nop
 8004668:	e7fd      	b.n	8004666 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	3318      	adds	r3, #24
 800466e:	4618      	mov	r0, r3
 8004670:	f7ff fa5f 	bl	8003b32 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004674:	4b1d      	ldr	r3, [pc, #116]	@ (80046ec <xTaskRemoveFromEventList+0xb0>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d11c      	bne.n	80046b6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	3304      	adds	r3, #4
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff fa56 	bl	8003b32 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800468a:	2201      	movs	r2, #1
 800468c:	409a      	lsls	r2, r3
 800468e:	4b18      	ldr	r3, [pc, #96]	@ (80046f0 <xTaskRemoveFromEventList+0xb4>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4313      	orrs	r3, r2
 8004694:	4a16      	ldr	r2, [pc, #88]	@ (80046f0 <xTaskRemoveFromEventList+0xb4>)
 8004696:	6013      	str	r3, [r2, #0]
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800469c:	4613      	mov	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4413      	add	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4a13      	ldr	r2, [pc, #76]	@ (80046f4 <xTaskRemoveFromEventList+0xb8>)
 80046a6:	441a      	add	r2, r3
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	3304      	adds	r3, #4
 80046ac:	4619      	mov	r1, r3
 80046ae:	4610      	mov	r0, r2
 80046b0:	f7ff f9e2 	bl	8003a78 <vListInsertEnd>
 80046b4:	e005      	b.n	80046c2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	3318      	adds	r3, #24
 80046ba:	4619      	mov	r1, r3
 80046bc:	480e      	ldr	r0, [pc, #56]	@ (80046f8 <xTaskRemoveFromEventList+0xbc>)
 80046be:	f7ff f9db 	bl	8003a78 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046c6:	4b0d      	ldr	r3, [pc, #52]	@ (80046fc <xTaskRemoveFromEventList+0xc0>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d905      	bls.n	80046dc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80046d0:	2301      	movs	r3, #1
 80046d2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80046d4:	4b0a      	ldr	r3, [pc, #40]	@ (8004700 <xTaskRemoveFromEventList+0xc4>)
 80046d6:	2201      	movs	r2, #1
 80046d8:	601a      	str	r2, [r3, #0]
 80046da:	e001      	b.n	80046e0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80046dc:	2300      	movs	r3, #0
 80046de:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80046e0:	697b      	ldr	r3, [r7, #20]
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3718      	adds	r7, #24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	20000610 	.word	0x20000610
 80046f0:	200005f0 	.word	0x200005f0
 80046f4:	200004ec 	.word	0x200004ec
 80046f8:	200005a8 	.word	0x200005a8
 80046fc:	200004e8 	.word	0x200004e8
 8004700:	200005fc 	.word	0x200005fc

08004704 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800470c:	f000 f852 	bl	80047b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004710:	4b06      	ldr	r3, [pc, #24]	@ (800472c <prvIdleTask+0x28>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d9f9      	bls.n	800470c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004718:	4b05      	ldr	r3, [pc, #20]	@ (8004730 <prvIdleTask+0x2c>)
 800471a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	f3bf 8f4f 	dsb	sy
 8004724:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004728:	e7f0      	b.n	800470c <prvIdleTask+0x8>
 800472a:	bf00      	nop
 800472c:	200004ec 	.word	0x200004ec
 8004730:	e000ed04 	.word	0xe000ed04

08004734 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800473a:	2300      	movs	r3, #0
 800473c:	607b      	str	r3, [r7, #4]
 800473e:	e00c      	b.n	800475a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	4613      	mov	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4413      	add	r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	4a12      	ldr	r2, [pc, #72]	@ (8004794 <prvInitialiseTaskLists+0x60>)
 800474c:	4413      	add	r3, r2
 800474e:	4618      	mov	r0, r3
 8004750:	f7ff f965 	bl	8003a1e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	3301      	adds	r3, #1
 8004758:	607b      	str	r3, [r7, #4]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b06      	cmp	r3, #6
 800475e:	d9ef      	bls.n	8004740 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004760:	480d      	ldr	r0, [pc, #52]	@ (8004798 <prvInitialiseTaskLists+0x64>)
 8004762:	f7ff f95c 	bl	8003a1e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004766:	480d      	ldr	r0, [pc, #52]	@ (800479c <prvInitialiseTaskLists+0x68>)
 8004768:	f7ff f959 	bl	8003a1e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800476c:	480c      	ldr	r0, [pc, #48]	@ (80047a0 <prvInitialiseTaskLists+0x6c>)
 800476e:	f7ff f956 	bl	8003a1e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004772:	480c      	ldr	r0, [pc, #48]	@ (80047a4 <prvInitialiseTaskLists+0x70>)
 8004774:	f7ff f953 	bl	8003a1e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004778:	480b      	ldr	r0, [pc, #44]	@ (80047a8 <prvInitialiseTaskLists+0x74>)
 800477a:	f7ff f950 	bl	8003a1e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800477e:	4b0b      	ldr	r3, [pc, #44]	@ (80047ac <prvInitialiseTaskLists+0x78>)
 8004780:	4a05      	ldr	r2, [pc, #20]	@ (8004798 <prvInitialiseTaskLists+0x64>)
 8004782:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004784:	4b0a      	ldr	r3, [pc, #40]	@ (80047b0 <prvInitialiseTaskLists+0x7c>)
 8004786:	4a05      	ldr	r2, [pc, #20]	@ (800479c <prvInitialiseTaskLists+0x68>)
 8004788:	601a      	str	r2, [r3, #0]
}
 800478a:	bf00      	nop
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	200004ec 	.word	0x200004ec
 8004798:	20000578 	.word	0x20000578
 800479c:	2000058c 	.word	0x2000058c
 80047a0:	200005a8 	.word	0x200005a8
 80047a4:	200005bc 	.word	0x200005bc
 80047a8:	200005d4 	.word	0x200005d4
 80047ac:	200005a0 	.word	0x200005a0
 80047b0:	200005a4 	.word	0x200005a4

080047b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047ba:	e019      	b.n	80047f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80047bc:	f000 fa14 	bl	8004be8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047c0:	4b10      	ldr	r3, [pc, #64]	@ (8004804 <prvCheckTasksWaitingTermination+0x50>)
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3304      	adds	r3, #4
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7ff f9b0 	bl	8003b32 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80047d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004808 <prvCheckTasksWaitingTermination+0x54>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	3b01      	subs	r3, #1
 80047d8:	4a0b      	ldr	r2, [pc, #44]	@ (8004808 <prvCheckTasksWaitingTermination+0x54>)
 80047da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80047dc:	4b0b      	ldr	r3, [pc, #44]	@ (800480c <prvCheckTasksWaitingTermination+0x58>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	3b01      	subs	r3, #1
 80047e2:	4a0a      	ldr	r2, [pc, #40]	@ (800480c <prvCheckTasksWaitingTermination+0x58>)
 80047e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80047e6:	f000 fa31 	bl	8004c4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f810 	bl	8004810 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047f0:	4b06      	ldr	r3, [pc, #24]	@ (800480c <prvCheckTasksWaitingTermination+0x58>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1e1      	bne.n	80047bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80047f8:	bf00      	nop
 80047fa:	bf00      	nop
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	200005bc 	.word	0x200005bc
 8004808:	200005e8 	.word	0x200005e8
 800480c:	200005d0 	.word	0x200005d0

08004810 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	334c      	adds	r3, #76	@ 0x4c
 800481c:	4618      	mov	r0, r3
 800481e:	f000 ffd7 	bl	80057d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004828:	2b00      	cmp	r3, #0
 800482a:	d108      	bne.n	800483e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004830:	4618      	mov	r0, r3
 8004832:	f000 fb87 	bl	8004f44 <vPortFree>
				vPortFree( pxTCB );
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 fb84 	bl	8004f44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800483c:	e019      	b.n	8004872 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004844:	2b01      	cmp	r3, #1
 8004846:	d103      	bne.n	8004850 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 fb7b 	bl	8004f44 <vPortFree>
	}
 800484e:	e010      	b.n	8004872 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004856:	2b02      	cmp	r3, #2
 8004858:	d00b      	beq.n	8004872 <prvDeleteTCB+0x62>
	__asm volatile
 800485a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800485e:	f383 8811 	msr	BASEPRI, r3
 8004862:	f3bf 8f6f 	isb	sy
 8004866:	f3bf 8f4f 	dsb	sy
 800486a:	60fb      	str	r3, [r7, #12]
}
 800486c:	bf00      	nop
 800486e:	bf00      	nop
 8004870:	e7fd      	b.n	800486e <prvDeleteTCB+0x5e>
	}
 8004872:	bf00      	nop
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
	...

0800487c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004882:	4b0c      	ldr	r3, [pc, #48]	@ (80048b4 <prvResetNextTaskUnblockTime+0x38>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d104      	bne.n	8004896 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800488c:	4b0a      	ldr	r3, [pc, #40]	@ (80048b8 <prvResetNextTaskUnblockTime+0x3c>)
 800488e:	f04f 32ff 	mov.w	r2, #4294967295
 8004892:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004894:	e008      	b.n	80048a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004896:	4b07      	ldr	r3, [pc, #28]	@ (80048b4 <prvResetNextTaskUnblockTime+0x38>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	4a04      	ldr	r2, [pc, #16]	@ (80048b8 <prvResetNextTaskUnblockTime+0x3c>)
 80048a6:	6013      	str	r3, [r2, #0]
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr
 80048b4:	200005a0 	.word	0x200005a0
 80048b8:	20000608 	.word	0x20000608

080048bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80048c6:	4b29      	ldr	r3, [pc, #164]	@ (800496c <prvAddCurrentTaskToDelayedList+0xb0>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048cc:	4b28      	ldr	r3, [pc, #160]	@ (8004970 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	3304      	adds	r3, #4
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7ff f92d 	bl	8003b32 <uxListRemove>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10b      	bne.n	80048f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80048de:	4b24      	ldr	r3, [pc, #144]	@ (8004970 <prvAddCurrentTaskToDelayedList+0xb4>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e4:	2201      	movs	r2, #1
 80048e6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ea:	43da      	mvns	r2, r3
 80048ec:	4b21      	ldr	r3, [pc, #132]	@ (8004974 <prvAddCurrentTaskToDelayedList+0xb8>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4013      	ands	r3, r2
 80048f2:	4a20      	ldr	r2, [pc, #128]	@ (8004974 <prvAddCurrentTaskToDelayedList+0xb8>)
 80048f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fc:	d10a      	bne.n	8004914 <prvAddCurrentTaskToDelayedList+0x58>
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d007      	beq.n	8004914 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004904:	4b1a      	ldr	r3, [pc, #104]	@ (8004970 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	3304      	adds	r3, #4
 800490a:	4619      	mov	r1, r3
 800490c:	481a      	ldr	r0, [pc, #104]	@ (8004978 <prvAddCurrentTaskToDelayedList+0xbc>)
 800490e:	f7ff f8b3 	bl	8003a78 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004912:	e026      	b.n	8004962 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4413      	add	r3, r2
 800491a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800491c:	4b14      	ldr	r3, [pc, #80]	@ (8004970 <prvAddCurrentTaskToDelayedList+0xb4>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004924:	68ba      	ldr	r2, [r7, #8]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	429a      	cmp	r2, r3
 800492a:	d209      	bcs.n	8004940 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800492c:	4b13      	ldr	r3, [pc, #76]	@ (800497c <prvAddCurrentTaskToDelayedList+0xc0>)
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	4b0f      	ldr	r3, [pc, #60]	@ (8004970 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	3304      	adds	r3, #4
 8004936:	4619      	mov	r1, r3
 8004938:	4610      	mov	r0, r2
 800493a:	f7ff f8c1 	bl	8003ac0 <vListInsert>
}
 800493e:	e010      	b.n	8004962 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004940:	4b0f      	ldr	r3, [pc, #60]	@ (8004980 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	4b0a      	ldr	r3, [pc, #40]	@ (8004970 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	3304      	adds	r3, #4
 800494a:	4619      	mov	r1, r3
 800494c:	4610      	mov	r0, r2
 800494e:	f7ff f8b7 	bl	8003ac0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004952:	4b0c      	ldr	r3, [pc, #48]	@ (8004984 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	429a      	cmp	r2, r3
 800495a:	d202      	bcs.n	8004962 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800495c:	4a09      	ldr	r2, [pc, #36]	@ (8004984 <prvAddCurrentTaskToDelayedList+0xc8>)
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	6013      	str	r3, [r2, #0]
}
 8004962:	bf00      	nop
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	200005ec 	.word	0x200005ec
 8004970:	200004e8 	.word	0x200004e8
 8004974:	200005f0 	.word	0x200005f0
 8004978:	200005d4 	.word	0x200005d4
 800497c:	200005a4 	.word	0x200005a4
 8004980:	200005a0 	.word	0x200005a0
 8004984:	20000608 	.word	0x20000608

08004988 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	3b04      	subs	r3, #4
 8004998:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80049a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	3b04      	subs	r3, #4
 80049a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	f023 0201 	bic.w	r2, r3, #1
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	3b04      	subs	r3, #4
 80049b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80049b8:	4a0c      	ldr	r2, [pc, #48]	@ (80049ec <pxPortInitialiseStack+0x64>)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	3b14      	subs	r3, #20
 80049c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	3b04      	subs	r3, #4
 80049ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f06f 0202 	mvn.w	r2, #2
 80049d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	3b20      	subs	r3, #32
 80049dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80049de:	68fb      	ldr	r3, [r7, #12]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3714      	adds	r7, #20
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr
 80049ec:	080049f1 	.word	0x080049f1

080049f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80049f6:	2300      	movs	r3, #0
 80049f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80049fa:	4b13      	ldr	r3, [pc, #76]	@ (8004a48 <prvTaskExitError+0x58>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a02:	d00b      	beq.n	8004a1c <prvTaskExitError+0x2c>
	__asm volatile
 8004a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a08:	f383 8811 	msr	BASEPRI, r3
 8004a0c:	f3bf 8f6f 	isb	sy
 8004a10:	f3bf 8f4f 	dsb	sy
 8004a14:	60fb      	str	r3, [r7, #12]
}
 8004a16:	bf00      	nop
 8004a18:	bf00      	nop
 8004a1a:	e7fd      	b.n	8004a18 <prvTaskExitError+0x28>
	__asm volatile
 8004a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a20:	f383 8811 	msr	BASEPRI, r3
 8004a24:	f3bf 8f6f 	isb	sy
 8004a28:	f3bf 8f4f 	dsb	sy
 8004a2c:	60bb      	str	r3, [r7, #8]
}
 8004a2e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a30:	bf00      	nop
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d0fc      	beq.n	8004a32 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a38:	bf00      	nop
 8004a3a:	bf00      	nop
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	20000024 	.word	0x20000024
 8004a4c:	00000000 	.word	0x00000000

08004a50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a50:	4b07      	ldr	r3, [pc, #28]	@ (8004a70 <pxCurrentTCBConst2>)
 8004a52:	6819      	ldr	r1, [r3, #0]
 8004a54:	6808      	ldr	r0, [r1, #0]
 8004a56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a5a:	f380 8809 	msr	PSP, r0
 8004a5e:	f3bf 8f6f 	isb	sy
 8004a62:	f04f 0000 	mov.w	r0, #0
 8004a66:	f380 8811 	msr	BASEPRI, r0
 8004a6a:	4770      	bx	lr
 8004a6c:	f3af 8000 	nop.w

08004a70 <pxCurrentTCBConst2>:
 8004a70:	200004e8 	.word	0x200004e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004a74:	bf00      	nop
 8004a76:	bf00      	nop

08004a78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004a78:	4808      	ldr	r0, [pc, #32]	@ (8004a9c <prvPortStartFirstTask+0x24>)
 8004a7a:	6800      	ldr	r0, [r0, #0]
 8004a7c:	6800      	ldr	r0, [r0, #0]
 8004a7e:	f380 8808 	msr	MSP, r0
 8004a82:	f04f 0000 	mov.w	r0, #0
 8004a86:	f380 8814 	msr	CONTROL, r0
 8004a8a:	b662      	cpsie	i
 8004a8c:	b661      	cpsie	f
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	f3bf 8f6f 	isb	sy
 8004a96:	df00      	svc	0
 8004a98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004a9a:	bf00      	nop
 8004a9c:	e000ed08 	.word	0xe000ed08

08004aa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004aa6:	4b47      	ldr	r3, [pc, #284]	@ (8004bc4 <xPortStartScheduler+0x124>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a47      	ldr	r2, [pc, #284]	@ (8004bc8 <xPortStartScheduler+0x128>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d10b      	bne.n	8004ac8 <xPortStartScheduler+0x28>
	__asm volatile
 8004ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab4:	f383 8811 	msr	BASEPRI, r3
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	613b      	str	r3, [r7, #16]
}
 8004ac2:	bf00      	nop
 8004ac4:	bf00      	nop
 8004ac6:	e7fd      	b.n	8004ac4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004ac8:	4b3e      	ldr	r3, [pc, #248]	@ (8004bc4 <xPortStartScheduler+0x124>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a3f      	ldr	r2, [pc, #252]	@ (8004bcc <xPortStartScheduler+0x12c>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d10b      	bne.n	8004aea <xPortStartScheduler+0x4a>
	__asm volatile
 8004ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad6:	f383 8811 	msr	BASEPRI, r3
 8004ada:	f3bf 8f6f 	isb	sy
 8004ade:	f3bf 8f4f 	dsb	sy
 8004ae2:	60fb      	str	r3, [r7, #12]
}
 8004ae4:	bf00      	nop
 8004ae6:	bf00      	nop
 8004ae8:	e7fd      	b.n	8004ae6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004aea:	4b39      	ldr	r3, [pc, #228]	@ (8004bd0 <xPortStartScheduler+0x130>)
 8004aec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	22ff      	movs	r2, #255	@ 0xff
 8004afa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b04:	78fb      	ldrb	r3, [r7, #3]
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	4b31      	ldr	r3, [pc, #196]	@ (8004bd4 <xPortStartScheduler+0x134>)
 8004b10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b12:	4b31      	ldr	r3, [pc, #196]	@ (8004bd8 <xPortStartScheduler+0x138>)
 8004b14:	2207      	movs	r2, #7
 8004b16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b18:	e009      	b.n	8004b2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8004bd8 <xPortStartScheduler+0x138>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	4a2d      	ldr	r2, [pc, #180]	@ (8004bd8 <xPortStartScheduler+0x138>)
 8004b22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b24:	78fb      	ldrb	r3, [r7, #3]
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b2e:	78fb      	ldrb	r3, [r7, #3]
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b36:	2b80      	cmp	r3, #128	@ 0x80
 8004b38:	d0ef      	beq.n	8004b1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b3a:	4b27      	ldr	r3, [pc, #156]	@ (8004bd8 <xPortStartScheduler+0x138>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f1c3 0307 	rsb	r3, r3, #7
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	d00b      	beq.n	8004b5e <xPortStartScheduler+0xbe>
	__asm volatile
 8004b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b4a:	f383 8811 	msr	BASEPRI, r3
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f3bf 8f4f 	dsb	sy
 8004b56:	60bb      	str	r3, [r7, #8]
}
 8004b58:	bf00      	nop
 8004b5a:	bf00      	nop
 8004b5c:	e7fd      	b.n	8004b5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8004bd8 <xPortStartScheduler+0x138>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	021b      	lsls	r3, r3, #8
 8004b64:	4a1c      	ldr	r2, [pc, #112]	@ (8004bd8 <xPortStartScheduler+0x138>)
 8004b66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b68:	4b1b      	ldr	r3, [pc, #108]	@ (8004bd8 <xPortStartScheduler+0x138>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004b70:	4a19      	ldr	r2, [pc, #100]	@ (8004bd8 <xPortStartScheduler+0x138>)
 8004b72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	b2da      	uxtb	r2, r3
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b7c:	4b17      	ldr	r3, [pc, #92]	@ (8004bdc <xPortStartScheduler+0x13c>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a16      	ldr	r2, [pc, #88]	@ (8004bdc <xPortStartScheduler+0x13c>)
 8004b82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004b86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004b88:	4b14      	ldr	r3, [pc, #80]	@ (8004bdc <xPortStartScheduler+0x13c>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a13      	ldr	r2, [pc, #76]	@ (8004bdc <xPortStartScheduler+0x13c>)
 8004b8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004b92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004b94:	f000 f8da 	bl	8004d4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b98:	4b11      	ldr	r3, [pc, #68]	@ (8004be0 <xPortStartScheduler+0x140>)
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004b9e:	f000 f8f9 	bl	8004d94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004ba2:	4b10      	ldr	r3, [pc, #64]	@ (8004be4 <xPortStartScheduler+0x144>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a0f      	ldr	r2, [pc, #60]	@ (8004be4 <xPortStartScheduler+0x144>)
 8004ba8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004bac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004bae:	f7ff ff63 	bl	8004a78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004bb2:	f7ff fcdf 	bl	8004574 <vTaskSwitchContext>
	prvTaskExitError();
 8004bb6:	f7ff ff1b 	bl	80049f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3718      	adds	r7, #24
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	e000ed00 	.word	0xe000ed00
 8004bc8:	410fc271 	.word	0x410fc271
 8004bcc:	410fc270 	.word	0x410fc270
 8004bd0:	e000e400 	.word	0xe000e400
 8004bd4:	20000614 	.word	0x20000614
 8004bd8:	20000618 	.word	0x20000618
 8004bdc:	e000ed20 	.word	0xe000ed20
 8004be0:	20000024 	.word	0x20000024
 8004be4:	e000ef34 	.word	0xe000ef34

08004be8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
	__asm volatile
 8004bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf2:	f383 8811 	msr	BASEPRI, r3
 8004bf6:	f3bf 8f6f 	isb	sy
 8004bfa:	f3bf 8f4f 	dsb	sy
 8004bfe:	607b      	str	r3, [r7, #4]
}
 8004c00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004c02:	4b10      	ldr	r3, [pc, #64]	@ (8004c44 <vPortEnterCritical+0x5c>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	3301      	adds	r3, #1
 8004c08:	4a0e      	ldr	r2, [pc, #56]	@ (8004c44 <vPortEnterCritical+0x5c>)
 8004c0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8004c44 <vPortEnterCritical+0x5c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d110      	bne.n	8004c36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c14:	4b0c      	ldr	r3, [pc, #48]	@ (8004c48 <vPortEnterCritical+0x60>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00b      	beq.n	8004c36 <vPortEnterCritical+0x4e>
	__asm volatile
 8004c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c22:	f383 8811 	msr	BASEPRI, r3
 8004c26:	f3bf 8f6f 	isb	sy
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	603b      	str	r3, [r7, #0]
}
 8004c30:	bf00      	nop
 8004c32:	bf00      	nop
 8004c34:	e7fd      	b.n	8004c32 <vPortEnterCritical+0x4a>
	}
}
 8004c36:	bf00      	nop
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	20000024 	.word	0x20000024
 8004c48:	e000ed04 	.word	0xe000ed04

08004c4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004c52:	4b12      	ldr	r3, [pc, #72]	@ (8004c9c <vPortExitCritical+0x50>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10b      	bne.n	8004c72 <vPortExitCritical+0x26>
	__asm volatile
 8004c5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c5e:	f383 8811 	msr	BASEPRI, r3
 8004c62:	f3bf 8f6f 	isb	sy
 8004c66:	f3bf 8f4f 	dsb	sy
 8004c6a:	607b      	str	r3, [r7, #4]
}
 8004c6c:	bf00      	nop
 8004c6e:	bf00      	nop
 8004c70:	e7fd      	b.n	8004c6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004c72:	4b0a      	ldr	r3, [pc, #40]	@ (8004c9c <vPortExitCritical+0x50>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	4a08      	ldr	r2, [pc, #32]	@ (8004c9c <vPortExitCritical+0x50>)
 8004c7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004c7c:	4b07      	ldr	r3, [pc, #28]	@ (8004c9c <vPortExitCritical+0x50>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d105      	bne.n	8004c90 <vPortExitCritical+0x44>
 8004c84:	2300      	movs	r3, #0
 8004c86:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004c8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	20000024 	.word	0x20000024

08004ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ca0:	f3ef 8009 	mrs	r0, PSP
 8004ca4:	f3bf 8f6f 	isb	sy
 8004ca8:	4b15      	ldr	r3, [pc, #84]	@ (8004d00 <pxCurrentTCBConst>)
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	f01e 0f10 	tst.w	lr, #16
 8004cb0:	bf08      	it	eq
 8004cb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004cb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cba:	6010      	str	r0, [r2, #0]
 8004cbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004cc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004cc4:	f380 8811 	msr	BASEPRI, r0
 8004cc8:	f3bf 8f4f 	dsb	sy
 8004ccc:	f3bf 8f6f 	isb	sy
 8004cd0:	f7ff fc50 	bl	8004574 <vTaskSwitchContext>
 8004cd4:	f04f 0000 	mov.w	r0, #0
 8004cd8:	f380 8811 	msr	BASEPRI, r0
 8004cdc:	bc09      	pop	{r0, r3}
 8004cde:	6819      	ldr	r1, [r3, #0]
 8004ce0:	6808      	ldr	r0, [r1, #0]
 8004ce2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ce6:	f01e 0f10 	tst.w	lr, #16
 8004cea:	bf08      	it	eq
 8004cec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004cf0:	f380 8809 	msr	PSP, r0
 8004cf4:	f3bf 8f6f 	isb	sy
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	f3af 8000 	nop.w

08004d00 <pxCurrentTCBConst>:
 8004d00:	200004e8 	.word	0x200004e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004d04:	bf00      	nop
 8004d06:	bf00      	nop

08004d08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d12:	f383 8811 	msr	BASEPRI, r3
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	607b      	str	r3, [r7, #4]
}
 8004d20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004d22:	f7ff fb6d 	bl	8004400 <xTaskIncrementTick>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d003      	beq.n	8004d34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d2c:	4b06      	ldr	r3, [pc, #24]	@ (8004d48 <SysTick_Handler+0x40>)
 8004d2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d32:	601a      	str	r2, [r3, #0]
 8004d34:	2300      	movs	r3, #0
 8004d36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	f383 8811 	msr	BASEPRI, r3
}
 8004d3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004d40:	bf00      	nop
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	e000ed04 	.word	0xe000ed04

08004d4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d50:	4b0b      	ldr	r3, [pc, #44]	@ (8004d80 <vPortSetupTimerInterrupt+0x34>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d56:	4b0b      	ldr	r3, [pc, #44]	@ (8004d84 <vPortSetupTimerInterrupt+0x38>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d88 <vPortSetupTimerInterrupt+0x3c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a0a      	ldr	r2, [pc, #40]	@ (8004d8c <vPortSetupTimerInterrupt+0x40>)
 8004d62:	fba2 2303 	umull	r2, r3, r2, r3
 8004d66:	099b      	lsrs	r3, r3, #6
 8004d68:	4a09      	ldr	r2, [pc, #36]	@ (8004d90 <vPortSetupTimerInterrupt+0x44>)
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d6e:	4b04      	ldr	r3, [pc, #16]	@ (8004d80 <vPortSetupTimerInterrupt+0x34>)
 8004d70:	2207      	movs	r2, #7
 8004d72:	601a      	str	r2, [r3, #0]
}
 8004d74:	bf00      	nop
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	e000e010 	.word	0xe000e010
 8004d84:	e000e018 	.word	0xe000e018
 8004d88:	20000018 	.word	0x20000018
 8004d8c:	10624dd3 	.word	0x10624dd3
 8004d90:	e000e014 	.word	0xe000e014

08004d94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004d94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004da4 <vPortEnableVFP+0x10>
 8004d98:	6801      	ldr	r1, [r0, #0]
 8004d9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004d9e:	6001      	str	r1, [r0, #0]
 8004da0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004da2:	bf00      	nop
 8004da4:	e000ed88 	.word	0xe000ed88

08004da8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b08a      	sub	sp, #40	@ 0x28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004db0:	2300      	movs	r3, #0
 8004db2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004db4:	f7ff fa78 	bl	80042a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004db8:	4b5c      	ldr	r3, [pc, #368]	@ (8004f2c <pvPortMalloc+0x184>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d101      	bne.n	8004dc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004dc0:	f000 f924 	bl	800500c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004dc4:	4b5a      	ldr	r3, [pc, #360]	@ (8004f30 <pvPortMalloc+0x188>)
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4013      	ands	r3, r2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f040 8095 	bne.w	8004efc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d01e      	beq.n	8004e16 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004dd8:	2208      	movs	r2, #8
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4413      	add	r3, r2
 8004dde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f003 0307 	and.w	r3, r3, #7
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d015      	beq.n	8004e16 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f023 0307 	bic.w	r3, r3, #7
 8004df0:	3308      	adds	r3, #8
 8004df2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f003 0307 	and.w	r3, r3, #7
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00b      	beq.n	8004e16 <pvPortMalloc+0x6e>
	__asm volatile
 8004dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	617b      	str	r3, [r7, #20]
}
 8004e10:	bf00      	nop
 8004e12:	bf00      	nop
 8004e14:	e7fd      	b.n	8004e12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d06f      	beq.n	8004efc <pvPortMalloc+0x154>
 8004e1c:	4b45      	ldr	r3, [pc, #276]	@ (8004f34 <pvPortMalloc+0x18c>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d86a      	bhi.n	8004efc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004e26:	4b44      	ldr	r3, [pc, #272]	@ (8004f38 <pvPortMalloc+0x190>)
 8004e28:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004e2a:	4b43      	ldr	r3, [pc, #268]	@ (8004f38 <pvPortMalloc+0x190>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e30:	e004      	b.n	8004e3c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e34:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d903      	bls.n	8004e4e <pvPortMalloc+0xa6>
 8004e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1f1      	bne.n	8004e32 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004e4e:	4b37      	ldr	r3, [pc, #220]	@ (8004f2c <pvPortMalloc+0x184>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e54:	429a      	cmp	r2, r3
 8004e56:	d051      	beq.n	8004efc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e58:	6a3b      	ldr	r3, [r7, #32]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2208      	movs	r2, #8
 8004e5e:	4413      	add	r3, r2
 8004e60:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	6a3b      	ldr	r3, [r7, #32]
 8004e68:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	1ad2      	subs	r2, r2, r3
 8004e72:	2308      	movs	r3, #8
 8004e74:	005b      	lsls	r3, r3, #1
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d920      	bls.n	8004ebc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4413      	add	r3, r2
 8004e80:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	f003 0307 	and.w	r3, r3, #7
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d00b      	beq.n	8004ea4 <pvPortMalloc+0xfc>
	__asm volatile
 8004e8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e90:	f383 8811 	msr	BASEPRI, r3
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	613b      	str	r3, [r7, #16]
}
 8004e9e:	bf00      	nop
 8004ea0:	bf00      	nop
 8004ea2:	e7fd      	b.n	8004ea0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea6:	685a      	ldr	r2, [r3, #4]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	1ad2      	subs	r2, r2, r3
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004eb6:	69b8      	ldr	r0, [r7, #24]
 8004eb8:	f000 f90a 	bl	80050d0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8004f34 <pvPortMalloc+0x18c>)
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	4a1b      	ldr	r2, [pc, #108]	@ (8004f34 <pvPortMalloc+0x18c>)
 8004ec8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004eca:	4b1a      	ldr	r3, [pc, #104]	@ (8004f34 <pvPortMalloc+0x18c>)
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	4b1b      	ldr	r3, [pc, #108]	@ (8004f3c <pvPortMalloc+0x194>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d203      	bcs.n	8004ede <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004ed6:	4b17      	ldr	r3, [pc, #92]	@ (8004f34 <pvPortMalloc+0x18c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a18      	ldr	r2, [pc, #96]	@ (8004f3c <pvPortMalloc+0x194>)
 8004edc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee0:	685a      	ldr	r2, [r3, #4]
 8004ee2:	4b13      	ldr	r3, [pc, #76]	@ (8004f30 <pvPortMalloc+0x188>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eee:	2200      	movs	r2, #0
 8004ef0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004ef2:	4b13      	ldr	r3, [pc, #76]	@ (8004f40 <pvPortMalloc+0x198>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	4a11      	ldr	r2, [pc, #68]	@ (8004f40 <pvPortMalloc+0x198>)
 8004efa:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004efc:	f7ff f9e2 	bl	80042c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	f003 0307 	and.w	r3, r3, #7
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00b      	beq.n	8004f22 <pvPortMalloc+0x17a>
	__asm volatile
 8004f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f0e:	f383 8811 	msr	BASEPRI, r3
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	60fb      	str	r3, [r7, #12]
}
 8004f1c:	bf00      	nop
 8004f1e:	bf00      	nop
 8004f20:	e7fd      	b.n	8004f1e <pvPortMalloc+0x176>
	return pvReturn;
 8004f22:	69fb      	ldr	r3, [r7, #28]
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3728      	adds	r7, #40	@ 0x28
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	20004224 	.word	0x20004224
 8004f30:	20004238 	.word	0x20004238
 8004f34:	20004228 	.word	0x20004228
 8004f38:	2000421c 	.word	0x2000421c
 8004f3c:	2000422c 	.word	0x2000422c
 8004f40:	20004230 	.word	0x20004230

08004f44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b086      	sub	sp, #24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d04f      	beq.n	8004ff6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f56:	2308      	movs	r3, #8
 8004f58:	425b      	negs	r3, r3
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	685a      	ldr	r2, [r3, #4]
 8004f68:	4b25      	ldr	r3, [pc, #148]	@ (8005000 <vPortFree+0xbc>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10b      	bne.n	8004f8a <vPortFree+0x46>
	__asm volatile
 8004f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f76:	f383 8811 	msr	BASEPRI, r3
 8004f7a:	f3bf 8f6f 	isb	sy
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	60fb      	str	r3, [r7, #12]
}
 8004f84:	bf00      	nop
 8004f86:	bf00      	nop
 8004f88:	e7fd      	b.n	8004f86 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00b      	beq.n	8004faa <vPortFree+0x66>
	__asm volatile
 8004f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f96:	f383 8811 	msr	BASEPRI, r3
 8004f9a:	f3bf 8f6f 	isb	sy
 8004f9e:	f3bf 8f4f 	dsb	sy
 8004fa2:	60bb      	str	r3, [r7, #8]
}
 8004fa4:	bf00      	nop
 8004fa6:	bf00      	nop
 8004fa8:	e7fd      	b.n	8004fa6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	685a      	ldr	r2, [r3, #4]
 8004fae:	4b14      	ldr	r3, [pc, #80]	@ (8005000 <vPortFree+0xbc>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d01e      	beq.n	8004ff6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d11a      	bne.n	8004ff6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8005000 <vPortFree+0xbc>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	43db      	mvns	r3, r3
 8004fca:	401a      	ands	r2, r3
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004fd0:	f7ff f96a 	bl	80042a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8005004 <vPortFree+0xc0>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4413      	add	r3, r2
 8004fde:	4a09      	ldr	r2, [pc, #36]	@ (8005004 <vPortFree+0xc0>)
 8004fe0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004fe2:	6938      	ldr	r0, [r7, #16]
 8004fe4:	f000 f874 	bl	80050d0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004fe8:	4b07      	ldr	r3, [pc, #28]	@ (8005008 <vPortFree+0xc4>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	3301      	adds	r3, #1
 8004fee:	4a06      	ldr	r2, [pc, #24]	@ (8005008 <vPortFree+0xc4>)
 8004ff0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004ff2:	f7ff f967 	bl	80042c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004ff6:	bf00      	nop
 8004ff8:	3718      	adds	r7, #24
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	20004238 	.word	0x20004238
 8005004:	20004228 	.word	0x20004228
 8005008:	20004234 	.word	0x20004234

0800500c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005012:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005016:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005018:	4b27      	ldr	r3, [pc, #156]	@ (80050b8 <prvHeapInit+0xac>)
 800501a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f003 0307 	and.w	r3, r3, #7
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00c      	beq.n	8005040 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	3307      	adds	r3, #7
 800502a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f023 0307 	bic.w	r3, r3, #7
 8005032:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005034:	68ba      	ldr	r2, [r7, #8]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	4a1f      	ldr	r2, [pc, #124]	@ (80050b8 <prvHeapInit+0xac>)
 800503c:	4413      	add	r3, r2
 800503e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005044:	4a1d      	ldr	r2, [pc, #116]	@ (80050bc <prvHeapInit+0xb0>)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800504a:	4b1c      	ldr	r3, [pc, #112]	@ (80050bc <prvHeapInit+0xb0>)
 800504c:	2200      	movs	r2, #0
 800504e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	4413      	add	r3, r2
 8005056:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005058:	2208      	movs	r2, #8
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	1a9b      	subs	r3, r3, r2
 800505e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f023 0307 	bic.w	r3, r3, #7
 8005066:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	4a15      	ldr	r2, [pc, #84]	@ (80050c0 <prvHeapInit+0xb4>)
 800506c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800506e:	4b14      	ldr	r3, [pc, #80]	@ (80050c0 <prvHeapInit+0xb4>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2200      	movs	r2, #0
 8005074:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005076:	4b12      	ldr	r3, [pc, #72]	@ (80050c0 <prvHeapInit+0xb4>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	2200      	movs	r2, #0
 800507c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	1ad2      	subs	r2, r2, r3
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800508c:	4b0c      	ldr	r3, [pc, #48]	@ (80050c0 <prvHeapInit+0xb4>)
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	4a0a      	ldr	r2, [pc, #40]	@ (80050c4 <prvHeapInit+0xb8>)
 800509a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	4a09      	ldr	r2, [pc, #36]	@ (80050c8 <prvHeapInit+0xbc>)
 80050a2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80050a4:	4b09      	ldr	r3, [pc, #36]	@ (80050cc <prvHeapInit+0xc0>)
 80050a6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80050aa:	601a      	str	r2, [r3, #0]
}
 80050ac:	bf00      	nop
 80050ae:	3714      	adds	r7, #20
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr
 80050b8:	2000061c 	.word	0x2000061c
 80050bc:	2000421c 	.word	0x2000421c
 80050c0:	20004224 	.word	0x20004224
 80050c4:	2000422c 	.word	0x2000422c
 80050c8:	20004228 	.word	0x20004228
 80050cc:	20004238 	.word	0x20004238

080050d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80050d8:	4b28      	ldr	r3, [pc, #160]	@ (800517c <prvInsertBlockIntoFreeList+0xac>)
 80050da:	60fb      	str	r3, [r7, #12]
 80050dc:	e002      	b.n	80050e4 <prvInsertBlockIntoFreeList+0x14>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d8f7      	bhi.n	80050de <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	68ba      	ldr	r2, [r7, #8]
 80050f8:	4413      	add	r3, r2
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d108      	bne.n	8005112 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	441a      	add	r2, r3
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	441a      	add	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	429a      	cmp	r2, r3
 8005124:	d118      	bne.n	8005158 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	4b15      	ldr	r3, [pc, #84]	@ (8005180 <prvInsertBlockIntoFreeList+0xb0>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	429a      	cmp	r2, r3
 8005130:	d00d      	beq.n	800514e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685a      	ldr	r2, [r3, #4]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	441a      	add	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	601a      	str	r2, [r3, #0]
 800514c:	e008      	b.n	8005160 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800514e:	4b0c      	ldr	r3, [pc, #48]	@ (8005180 <prvInsertBlockIntoFreeList+0xb0>)
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	601a      	str	r2, [r3, #0]
 8005156:	e003      	b.n	8005160 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005160:	68fa      	ldr	r2, [r7, #12]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	429a      	cmp	r2, r3
 8005166:	d002      	beq.n	800516e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800516e:	bf00      	nop
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	2000421c 	.word	0x2000421c
 8005180:	20004224 	.word	0x20004224

08005184 <atoi>:
 8005184:	220a      	movs	r2, #10
 8005186:	2100      	movs	r1, #0
 8005188:	f000 b87a 	b.w	8005280 <strtol>

0800518c <_strtol_l.constprop.0>:
 800518c:	2b24      	cmp	r3, #36	@ 0x24
 800518e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005192:	4686      	mov	lr, r0
 8005194:	4690      	mov	r8, r2
 8005196:	d801      	bhi.n	800519c <_strtol_l.constprop.0+0x10>
 8005198:	2b01      	cmp	r3, #1
 800519a:	d106      	bne.n	80051aa <_strtol_l.constprop.0+0x1e>
 800519c:	f000 fba4 	bl	80058e8 <__errno>
 80051a0:	2316      	movs	r3, #22
 80051a2:	6003      	str	r3, [r0, #0]
 80051a4:	2000      	movs	r0, #0
 80051a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051aa:	4834      	ldr	r0, [pc, #208]	@ (800527c <_strtol_l.constprop.0+0xf0>)
 80051ac:	460d      	mov	r5, r1
 80051ae:	462a      	mov	r2, r5
 80051b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80051b4:	5d06      	ldrb	r6, [r0, r4]
 80051b6:	f016 0608 	ands.w	r6, r6, #8
 80051ba:	d1f8      	bne.n	80051ae <_strtol_l.constprop.0+0x22>
 80051bc:	2c2d      	cmp	r4, #45	@ 0x2d
 80051be:	d12d      	bne.n	800521c <_strtol_l.constprop.0+0x90>
 80051c0:	782c      	ldrb	r4, [r5, #0]
 80051c2:	2601      	movs	r6, #1
 80051c4:	1c95      	adds	r5, r2, #2
 80051c6:	f033 0210 	bics.w	r2, r3, #16
 80051ca:	d109      	bne.n	80051e0 <_strtol_l.constprop.0+0x54>
 80051cc:	2c30      	cmp	r4, #48	@ 0x30
 80051ce:	d12a      	bne.n	8005226 <_strtol_l.constprop.0+0x9a>
 80051d0:	782a      	ldrb	r2, [r5, #0]
 80051d2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80051d6:	2a58      	cmp	r2, #88	@ 0x58
 80051d8:	d125      	bne.n	8005226 <_strtol_l.constprop.0+0x9a>
 80051da:	786c      	ldrb	r4, [r5, #1]
 80051dc:	2310      	movs	r3, #16
 80051de:	3502      	adds	r5, #2
 80051e0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80051e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80051e8:	2200      	movs	r2, #0
 80051ea:	fbbc f9f3 	udiv	r9, ip, r3
 80051ee:	4610      	mov	r0, r2
 80051f0:	fb03 ca19 	mls	sl, r3, r9, ip
 80051f4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80051f8:	2f09      	cmp	r7, #9
 80051fa:	d81b      	bhi.n	8005234 <_strtol_l.constprop.0+0xa8>
 80051fc:	463c      	mov	r4, r7
 80051fe:	42a3      	cmp	r3, r4
 8005200:	dd27      	ble.n	8005252 <_strtol_l.constprop.0+0xc6>
 8005202:	1c57      	adds	r7, r2, #1
 8005204:	d007      	beq.n	8005216 <_strtol_l.constprop.0+0x8a>
 8005206:	4581      	cmp	r9, r0
 8005208:	d320      	bcc.n	800524c <_strtol_l.constprop.0+0xc0>
 800520a:	d101      	bne.n	8005210 <_strtol_l.constprop.0+0x84>
 800520c:	45a2      	cmp	sl, r4
 800520e:	db1d      	blt.n	800524c <_strtol_l.constprop.0+0xc0>
 8005210:	fb00 4003 	mla	r0, r0, r3, r4
 8005214:	2201      	movs	r2, #1
 8005216:	f815 4b01 	ldrb.w	r4, [r5], #1
 800521a:	e7eb      	b.n	80051f4 <_strtol_l.constprop.0+0x68>
 800521c:	2c2b      	cmp	r4, #43	@ 0x2b
 800521e:	bf04      	itt	eq
 8005220:	782c      	ldrbeq	r4, [r5, #0]
 8005222:	1c95      	addeq	r5, r2, #2
 8005224:	e7cf      	b.n	80051c6 <_strtol_l.constprop.0+0x3a>
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1da      	bne.n	80051e0 <_strtol_l.constprop.0+0x54>
 800522a:	2c30      	cmp	r4, #48	@ 0x30
 800522c:	bf0c      	ite	eq
 800522e:	2308      	moveq	r3, #8
 8005230:	230a      	movne	r3, #10
 8005232:	e7d5      	b.n	80051e0 <_strtol_l.constprop.0+0x54>
 8005234:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005238:	2f19      	cmp	r7, #25
 800523a:	d801      	bhi.n	8005240 <_strtol_l.constprop.0+0xb4>
 800523c:	3c37      	subs	r4, #55	@ 0x37
 800523e:	e7de      	b.n	80051fe <_strtol_l.constprop.0+0x72>
 8005240:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005244:	2f19      	cmp	r7, #25
 8005246:	d804      	bhi.n	8005252 <_strtol_l.constprop.0+0xc6>
 8005248:	3c57      	subs	r4, #87	@ 0x57
 800524a:	e7d8      	b.n	80051fe <_strtol_l.constprop.0+0x72>
 800524c:	f04f 32ff 	mov.w	r2, #4294967295
 8005250:	e7e1      	b.n	8005216 <_strtol_l.constprop.0+0x8a>
 8005252:	1c53      	adds	r3, r2, #1
 8005254:	d108      	bne.n	8005268 <_strtol_l.constprop.0+0xdc>
 8005256:	2322      	movs	r3, #34	@ 0x22
 8005258:	f8ce 3000 	str.w	r3, [lr]
 800525c:	4660      	mov	r0, ip
 800525e:	f1b8 0f00 	cmp.w	r8, #0
 8005262:	d0a0      	beq.n	80051a6 <_strtol_l.constprop.0+0x1a>
 8005264:	1e69      	subs	r1, r5, #1
 8005266:	e006      	b.n	8005276 <_strtol_l.constprop.0+0xea>
 8005268:	b106      	cbz	r6, 800526c <_strtol_l.constprop.0+0xe0>
 800526a:	4240      	negs	r0, r0
 800526c:	f1b8 0f00 	cmp.w	r8, #0
 8005270:	d099      	beq.n	80051a6 <_strtol_l.constprop.0+0x1a>
 8005272:	2a00      	cmp	r2, #0
 8005274:	d1f6      	bne.n	8005264 <_strtol_l.constprop.0+0xd8>
 8005276:	f8c8 1000 	str.w	r1, [r8]
 800527a:	e794      	b.n	80051a6 <_strtol_l.constprop.0+0x1a>
 800527c:	08006919 	.word	0x08006919

08005280 <strtol>:
 8005280:	4613      	mov	r3, r2
 8005282:	460a      	mov	r2, r1
 8005284:	4601      	mov	r1, r0
 8005286:	4802      	ldr	r0, [pc, #8]	@ (8005290 <strtol+0x10>)
 8005288:	6800      	ldr	r0, [r0, #0]
 800528a:	f7ff bf7f 	b.w	800518c <_strtol_l.constprop.0>
 800528e:	bf00      	nop
 8005290:	20000034 	.word	0x20000034

08005294 <std>:
 8005294:	2300      	movs	r3, #0
 8005296:	b510      	push	{r4, lr}
 8005298:	4604      	mov	r4, r0
 800529a:	e9c0 3300 	strd	r3, r3, [r0]
 800529e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052a2:	6083      	str	r3, [r0, #8]
 80052a4:	8181      	strh	r1, [r0, #12]
 80052a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80052a8:	81c2      	strh	r2, [r0, #14]
 80052aa:	6183      	str	r3, [r0, #24]
 80052ac:	4619      	mov	r1, r3
 80052ae:	2208      	movs	r2, #8
 80052b0:	305c      	adds	r0, #92	@ 0x5c
 80052b2:	f000 fa19 	bl	80056e8 <memset>
 80052b6:	4b0d      	ldr	r3, [pc, #52]	@ (80052ec <std+0x58>)
 80052b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80052ba:	4b0d      	ldr	r3, [pc, #52]	@ (80052f0 <std+0x5c>)
 80052bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80052be:	4b0d      	ldr	r3, [pc, #52]	@ (80052f4 <std+0x60>)
 80052c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80052c2:	4b0d      	ldr	r3, [pc, #52]	@ (80052f8 <std+0x64>)
 80052c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80052c6:	4b0d      	ldr	r3, [pc, #52]	@ (80052fc <std+0x68>)
 80052c8:	6224      	str	r4, [r4, #32]
 80052ca:	429c      	cmp	r4, r3
 80052cc:	d006      	beq.n	80052dc <std+0x48>
 80052ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80052d2:	4294      	cmp	r4, r2
 80052d4:	d002      	beq.n	80052dc <std+0x48>
 80052d6:	33d0      	adds	r3, #208	@ 0xd0
 80052d8:	429c      	cmp	r4, r3
 80052da:	d105      	bne.n	80052e8 <std+0x54>
 80052dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80052e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052e4:	f000 bb2a 	b.w	800593c <__retarget_lock_init_recursive>
 80052e8:	bd10      	pop	{r4, pc}
 80052ea:	bf00      	nop
 80052ec:	08005539 	.word	0x08005539
 80052f0:	0800555b 	.word	0x0800555b
 80052f4:	08005593 	.word	0x08005593
 80052f8:	080055b7 	.word	0x080055b7
 80052fc:	2000423c 	.word	0x2000423c

08005300 <stdio_exit_handler>:
 8005300:	4a02      	ldr	r2, [pc, #8]	@ (800530c <stdio_exit_handler+0xc>)
 8005302:	4903      	ldr	r1, [pc, #12]	@ (8005310 <stdio_exit_handler+0x10>)
 8005304:	4803      	ldr	r0, [pc, #12]	@ (8005314 <stdio_exit_handler+0x14>)
 8005306:	f000 b869 	b.w	80053dc <_fwalk_sglue>
 800530a:	bf00      	nop
 800530c:	20000028 	.word	0x20000028
 8005310:	08006505 	.word	0x08006505
 8005314:	20000038 	.word	0x20000038

08005318 <cleanup_stdio>:
 8005318:	6841      	ldr	r1, [r0, #4]
 800531a:	4b0c      	ldr	r3, [pc, #48]	@ (800534c <cleanup_stdio+0x34>)
 800531c:	4299      	cmp	r1, r3
 800531e:	b510      	push	{r4, lr}
 8005320:	4604      	mov	r4, r0
 8005322:	d001      	beq.n	8005328 <cleanup_stdio+0x10>
 8005324:	f001 f8ee 	bl	8006504 <_fflush_r>
 8005328:	68a1      	ldr	r1, [r4, #8]
 800532a:	4b09      	ldr	r3, [pc, #36]	@ (8005350 <cleanup_stdio+0x38>)
 800532c:	4299      	cmp	r1, r3
 800532e:	d002      	beq.n	8005336 <cleanup_stdio+0x1e>
 8005330:	4620      	mov	r0, r4
 8005332:	f001 f8e7 	bl	8006504 <_fflush_r>
 8005336:	68e1      	ldr	r1, [r4, #12]
 8005338:	4b06      	ldr	r3, [pc, #24]	@ (8005354 <cleanup_stdio+0x3c>)
 800533a:	4299      	cmp	r1, r3
 800533c:	d004      	beq.n	8005348 <cleanup_stdio+0x30>
 800533e:	4620      	mov	r0, r4
 8005340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005344:	f001 b8de 	b.w	8006504 <_fflush_r>
 8005348:	bd10      	pop	{r4, pc}
 800534a:	bf00      	nop
 800534c:	2000423c 	.word	0x2000423c
 8005350:	200042a4 	.word	0x200042a4
 8005354:	2000430c 	.word	0x2000430c

08005358 <global_stdio_init.part.0>:
 8005358:	b510      	push	{r4, lr}
 800535a:	4b0b      	ldr	r3, [pc, #44]	@ (8005388 <global_stdio_init.part.0+0x30>)
 800535c:	4c0b      	ldr	r4, [pc, #44]	@ (800538c <global_stdio_init.part.0+0x34>)
 800535e:	4a0c      	ldr	r2, [pc, #48]	@ (8005390 <global_stdio_init.part.0+0x38>)
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	4620      	mov	r0, r4
 8005364:	2200      	movs	r2, #0
 8005366:	2104      	movs	r1, #4
 8005368:	f7ff ff94 	bl	8005294 <std>
 800536c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005370:	2201      	movs	r2, #1
 8005372:	2109      	movs	r1, #9
 8005374:	f7ff ff8e 	bl	8005294 <std>
 8005378:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800537c:	2202      	movs	r2, #2
 800537e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005382:	2112      	movs	r1, #18
 8005384:	f7ff bf86 	b.w	8005294 <std>
 8005388:	20004374 	.word	0x20004374
 800538c:	2000423c 	.word	0x2000423c
 8005390:	08005301 	.word	0x08005301

08005394 <__sfp_lock_acquire>:
 8005394:	4801      	ldr	r0, [pc, #4]	@ (800539c <__sfp_lock_acquire+0x8>)
 8005396:	f000 bad2 	b.w	800593e <__retarget_lock_acquire_recursive>
 800539a:	bf00      	nop
 800539c:	2000437d 	.word	0x2000437d

080053a0 <__sfp_lock_release>:
 80053a0:	4801      	ldr	r0, [pc, #4]	@ (80053a8 <__sfp_lock_release+0x8>)
 80053a2:	f000 bacd 	b.w	8005940 <__retarget_lock_release_recursive>
 80053a6:	bf00      	nop
 80053a8:	2000437d 	.word	0x2000437d

080053ac <__sinit>:
 80053ac:	b510      	push	{r4, lr}
 80053ae:	4604      	mov	r4, r0
 80053b0:	f7ff fff0 	bl	8005394 <__sfp_lock_acquire>
 80053b4:	6a23      	ldr	r3, [r4, #32]
 80053b6:	b11b      	cbz	r3, 80053c0 <__sinit+0x14>
 80053b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053bc:	f7ff bff0 	b.w	80053a0 <__sfp_lock_release>
 80053c0:	4b04      	ldr	r3, [pc, #16]	@ (80053d4 <__sinit+0x28>)
 80053c2:	6223      	str	r3, [r4, #32]
 80053c4:	4b04      	ldr	r3, [pc, #16]	@ (80053d8 <__sinit+0x2c>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1f5      	bne.n	80053b8 <__sinit+0xc>
 80053cc:	f7ff ffc4 	bl	8005358 <global_stdio_init.part.0>
 80053d0:	e7f2      	b.n	80053b8 <__sinit+0xc>
 80053d2:	bf00      	nop
 80053d4:	08005319 	.word	0x08005319
 80053d8:	20004374 	.word	0x20004374

080053dc <_fwalk_sglue>:
 80053dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053e0:	4607      	mov	r7, r0
 80053e2:	4688      	mov	r8, r1
 80053e4:	4614      	mov	r4, r2
 80053e6:	2600      	movs	r6, #0
 80053e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053ec:	f1b9 0901 	subs.w	r9, r9, #1
 80053f0:	d505      	bpl.n	80053fe <_fwalk_sglue+0x22>
 80053f2:	6824      	ldr	r4, [r4, #0]
 80053f4:	2c00      	cmp	r4, #0
 80053f6:	d1f7      	bne.n	80053e8 <_fwalk_sglue+0xc>
 80053f8:	4630      	mov	r0, r6
 80053fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053fe:	89ab      	ldrh	r3, [r5, #12]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d907      	bls.n	8005414 <_fwalk_sglue+0x38>
 8005404:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005408:	3301      	adds	r3, #1
 800540a:	d003      	beq.n	8005414 <_fwalk_sglue+0x38>
 800540c:	4629      	mov	r1, r5
 800540e:	4638      	mov	r0, r7
 8005410:	47c0      	blx	r8
 8005412:	4306      	orrs	r6, r0
 8005414:	3568      	adds	r5, #104	@ 0x68
 8005416:	e7e9      	b.n	80053ec <_fwalk_sglue+0x10>

08005418 <iprintf>:
 8005418:	b40f      	push	{r0, r1, r2, r3}
 800541a:	b507      	push	{r0, r1, r2, lr}
 800541c:	4906      	ldr	r1, [pc, #24]	@ (8005438 <iprintf+0x20>)
 800541e:	ab04      	add	r3, sp, #16
 8005420:	6808      	ldr	r0, [r1, #0]
 8005422:	f853 2b04 	ldr.w	r2, [r3], #4
 8005426:	6881      	ldr	r1, [r0, #8]
 8005428:	9301      	str	r3, [sp, #4]
 800542a:	f000 fd41 	bl	8005eb0 <_vfiprintf_r>
 800542e:	b003      	add	sp, #12
 8005430:	f85d eb04 	ldr.w	lr, [sp], #4
 8005434:	b004      	add	sp, #16
 8005436:	4770      	bx	lr
 8005438:	20000034 	.word	0x20000034

0800543c <_puts_r>:
 800543c:	6a03      	ldr	r3, [r0, #32]
 800543e:	b570      	push	{r4, r5, r6, lr}
 8005440:	6884      	ldr	r4, [r0, #8]
 8005442:	4605      	mov	r5, r0
 8005444:	460e      	mov	r6, r1
 8005446:	b90b      	cbnz	r3, 800544c <_puts_r+0x10>
 8005448:	f7ff ffb0 	bl	80053ac <__sinit>
 800544c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800544e:	07db      	lsls	r3, r3, #31
 8005450:	d405      	bmi.n	800545e <_puts_r+0x22>
 8005452:	89a3      	ldrh	r3, [r4, #12]
 8005454:	0598      	lsls	r0, r3, #22
 8005456:	d402      	bmi.n	800545e <_puts_r+0x22>
 8005458:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800545a:	f000 fa70 	bl	800593e <__retarget_lock_acquire_recursive>
 800545e:	89a3      	ldrh	r3, [r4, #12]
 8005460:	0719      	lsls	r1, r3, #28
 8005462:	d502      	bpl.n	800546a <_puts_r+0x2e>
 8005464:	6923      	ldr	r3, [r4, #16]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d135      	bne.n	80054d6 <_puts_r+0x9a>
 800546a:	4621      	mov	r1, r4
 800546c:	4628      	mov	r0, r5
 800546e:	f000 f8e5 	bl	800563c <__swsetup_r>
 8005472:	b380      	cbz	r0, 80054d6 <_puts_r+0x9a>
 8005474:	f04f 35ff 	mov.w	r5, #4294967295
 8005478:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800547a:	07da      	lsls	r2, r3, #31
 800547c:	d405      	bmi.n	800548a <_puts_r+0x4e>
 800547e:	89a3      	ldrh	r3, [r4, #12]
 8005480:	059b      	lsls	r3, r3, #22
 8005482:	d402      	bmi.n	800548a <_puts_r+0x4e>
 8005484:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005486:	f000 fa5b 	bl	8005940 <__retarget_lock_release_recursive>
 800548a:	4628      	mov	r0, r5
 800548c:	bd70      	pop	{r4, r5, r6, pc}
 800548e:	2b00      	cmp	r3, #0
 8005490:	da04      	bge.n	800549c <_puts_r+0x60>
 8005492:	69a2      	ldr	r2, [r4, #24]
 8005494:	429a      	cmp	r2, r3
 8005496:	dc17      	bgt.n	80054c8 <_puts_r+0x8c>
 8005498:	290a      	cmp	r1, #10
 800549a:	d015      	beq.n	80054c8 <_puts_r+0x8c>
 800549c:	6823      	ldr	r3, [r4, #0]
 800549e:	1c5a      	adds	r2, r3, #1
 80054a0:	6022      	str	r2, [r4, #0]
 80054a2:	7019      	strb	r1, [r3, #0]
 80054a4:	68a3      	ldr	r3, [r4, #8]
 80054a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80054aa:	3b01      	subs	r3, #1
 80054ac:	60a3      	str	r3, [r4, #8]
 80054ae:	2900      	cmp	r1, #0
 80054b0:	d1ed      	bne.n	800548e <_puts_r+0x52>
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	da11      	bge.n	80054da <_puts_r+0x9e>
 80054b6:	4622      	mov	r2, r4
 80054b8:	210a      	movs	r1, #10
 80054ba:	4628      	mov	r0, r5
 80054bc:	f000 f87f 	bl	80055be <__swbuf_r>
 80054c0:	3001      	adds	r0, #1
 80054c2:	d0d7      	beq.n	8005474 <_puts_r+0x38>
 80054c4:	250a      	movs	r5, #10
 80054c6:	e7d7      	b.n	8005478 <_puts_r+0x3c>
 80054c8:	4622      	mov	r2, r4
 80054ca:	4628      	mov	r0, r5
 80054cc:	f000 f877 	bl	80055be <__swbuf_r>
 80054d0:	3001      	adds	r0, #1
 80054d2:	d1e7      	bne.n	80054a4 <_puts_r+0x68>
 80054d4:	e7ce      	b.n	8005474 <_puts_r+0x38>
 80054d6:	3e01      	subs	r6, #1
 80054d8:	e7e4      	b.n	80054a4 <_puts_r+0x68>
 80054da:	6823      	ldr	r3, [r4, #0]
 80054dc:	1c5a      	adds	r2, r3, #1
 80054de:	6022      	str	r2, [r4, #0]
 80054e0:	220a      	movs	r2, #10
 80054e2:	701a      	strb	r2, [r3, #0]
 80054e4:	e7ee      	b.n	80054c4 <_puts_r+0x88>
	...

080054e8 <puts>:
 80054e8:	4b02      	ldr	r3, [pc, #8]	@ (80054f4 <puts+0xc>)
 80054ea:	4601      	mov	r1, r0
 80054ec:	6818      	ldr	r0, [r3, #0]
 80054ee:	f7ff bfa5 	b.w	800543c <_puts_r>
 80054f2:	bf00      	nop
 80054f4:	20000034 	.word	0x20000034

080054f8 <siprintf>:
 80054f8:	b40e      	push	{r1, r2, r3}
 80054fa:	b500      	push	{lr}
 80054fc:	b09c      	sub	sp, #112	@ 0x70
 80054fe:	ab1d      	add	r3, sp, #116	@ 0x74
 8005500:	9002      	str	r0, [sp, #8]
 8005502:	9006      	str	r0, [sp, #24]
 8005504:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005508:	4809      	ldr	r0, [pc, #36]	@ (8005530 <siprintf+0x38>)
 800550a:	9107      	str	r1, [sp, #28]
 800550c:	9104      	str	r1, [sp, #16]
 800550e:	4909      	ldr	r1, [pc, #36]	@ (8005534 <siprintf+0x3c>)
 8005510:	f853 2b04 	ldr.w	r2, [r3], #4
 8005514:	9105      	str	r1, [sp, #20]
 8005516:	6800      	ldr	r0, [r0, #0]
 8005518:	9301      	str	r3, [sp, #4]
 800551a:	a902      	add	r1, sp, #8
 800551c:	f000 fba2 	bl	8005c64 <_svfiprintf_r>
 8005520:	9b02      	ldr	r3, [sp, #8]
 8005522:	2200      	movs	r2, #0
 8005524:	701a      	strb	r2, [r3, #0]
 8005526:	b01c      	add	sp, #112	@ 0x70
 8005528:	f85d eb04 	ldr.w	lr, [sp], #4
 800552c:	b003      	add	sp, #12
 800552e:	4770      	bx	lr
 8005530:	20000034 	.word	0x20000034
 8005534:	ffff0208 	.word	0xffff0208

08005538 <__sread>:
 8005538:	b510      	push	{r4, lr}
 800553a:	460c      	mov	r4, r1
 800553c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005540:	f000 f9ae 	bl	80058a0 <_read_r>
 8005544:	2800      	cmp	r0, #0
 8005546:	bfab      	itete	ge
 8005548:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800554a:	89a3      	ldrhlt	r3, [r4, #12]
 800554c:	181b      	addge	r3, r3, r0
 800554e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005552:	bfac      	ite	ge
 8005554:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005556:	81a3      	strhlt	r3, [r4, #12]
 8005558:	bd10      	pop	{r4, pc}

0800555a <__swrite>:
 800555a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800555e:	461f      	mov	r7, r3
 8005560:	898b      	ldrh	r3, [r1, #12]
 8005562:	05db      	lsls	r3, r3, #23
 8005564:	4605      	mov	r5, r0
 8005566:	460c      	mov	r4, r1
 8005568:	4616      	mov	r6, r2
 800556a:	d505      	bpl.n	8005578 <__swrite+0x1e>
 800556c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005570:	2302      	movs	r3, #2
 8005572:	2200      	movs	r2, #0
 8005574:	f000 f982 	bl	800587c <_lseek_r>
 8005578:	89a3      	ldrh	r3, [r4, #12]
 800557a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800557e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005582:	81a3      	strh	r3, [r4, #12]
 8005584:	4632      	mov	r2, r6
 8005586:	463b      	mov	r3, r7
 8005588:	4628      	mov	r0, r5
 800558a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800558e:	f000 b999 	b.w	80058c4 <_write_r>

08005592 <__sseek>:
 8005592:	b510      	push	{r4, lr}
 8005594:	460c      	mov	r4, r1
 8005596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800559a:	f000 f96f 	bl	800587c <_lseek_r>
 800559e:	1c43      	adds	r3, r0, #1
 80055a0:	89a3      	ldrh	r3, [r4, #12]
 80055a2:	bf15      	itete	ne
 80055a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80055a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80055aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80055ae:	81a3      	strheq	r3, [r4, #12]
 80055b0:	bf18      	it	ne
 80055b2:	81a3      	strhne	r3, [r4, #12]
 80055b4:	bd10      	pop	{r4, pc}

080055b6 <__sclose>:
 80055b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ba:	f000 b8f9 	b.w	80057b0 <_close_r>

080055be <__swbuf_r>:
 80055be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055c0:	460e      	mov	r6, r1
 80055c2:	4614      	mov	r4, r2
 80055c4:	4605      	mov	r5, r0
 80055c6:	b118      	cbz	r0, 80055d0 <__swbuf_r+0x12>
 80055c8:	6a03      	ldr	r3, [r0, #32]
 80055ca:	b90b      	cbnz	r3, 80055d0 <__swbuf_r+0x12>
 80055cc:	f7ff feee 	bl	80053ac <__sinit>
 80055d0:	69a3      	ldr	r3, [r4, #24]
 80055d2:	60a3      	str	r3, [r4, #8]
 80055d4:	89a3      	ldrh	r3, [r4, #12]
 80055d6:	071a      	lsls	r2, r3, #28
 80055d8:	d501      	bpl.n	80055de <__swbuf_r+0x20>
 80055da:	6923      	ldr	r3, [r4, #16]
 80055dc:	b943      	cbnz	r3, 80055f0 <__swbuf_r+0x32>
 80055de:	4621      	mov	r1, r4
 80055e0:	4628      	mov	r0, r5
 80055e2:	f000 f82b 	bl	800563c <__swsetup_r>
 80055e6:	b118      	cbz	r0, 80055f0 <__swbuf_r+0x32>
 80055e8:	f04f 37ff 	mov.w	r7, #4294967295
 80055ec:	4638      	mov	r0, r7
 80055ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055f0:	6823      	ldr	r3, [r4, #0]
 80055f2:	6922      	ldr	r2, [r4, #16]
 80055f4:	1a98      	subs	r0, r3, r2
 80055f6:	6963      	ldr	r3, [r4, #20]
 80055f8:	b2f6      	uxtb	r6, r6
 80055fa:	4283      	cmp	r3, r0
 80055fc:	4637      	mov	r7, r6
 80055fe:	dc05      	bgt.n	800560c <__swbuf_r+0x4e>
 8005600:	4621      	mov	r1, r4
 8005602:	4628      	mov	r0, r5
 8005604:	f000 ff7e 	bl	8006504 <_fflush_r>
 8005608:	2800      	cmp	r0, #0
 800560a:	d1ed      	bne.n	80055e8 <__swbuf_r+0x2a>
 800560c:	68a3      	ldr	r3, [r4, #8]
 800560e:	3b01      	subs	r3, #1
 8005610:	60a3      	str	r3, [r4, #8]
 8005612:	6823      	ldr	r3, [r4, #0]
 8005614:	1c5a      	adds	r2, r3, #1
 8005616:	6022      	str	r2, [r4, #0]
 8005618:	701e      	strb	r6, [r3, #0]
 800561a:	6962      	ldr	r2, [r4, #20]
 800561c:	1c43      	adds	r3, r0, #1
 800561e:	429a      	cmp	r2, r3
 8005620:	d004      	beq.n	800562c <__swbuf_r+0x6e>
 8005622:	89a3      	ldrh	r3, [r4, #12]
 8005624:	07db      	lsls	r3, r3, #31
 8005626:	d5e1      	bpl.n	80055ec <__swbuf_r+0x2e>
 8005628:	2e0a      	cmp	r6, #10
 800562a:	d1df      	bne.n	80055ec <__swbuf_r+0x2e>
 800562c:	4621      	mov	r1, r4
 800562e:	4628      	mov	r0, r5
 8005630:	f000 ff68 	bl	8006504 <_fflush_r>
 8005634:	2800      	cmp	r0, #0
 8005636:	d0d9      	beq.n	80055ec <__swbuf_r+0x2e>
 8005638:	e7d6      	b.n	80055e8 <__swbuf_r+0x2a>
	...

0800563c <__swsetup_r>:
 800563c:	b538      	push	{r3, r4, r5, lr}
 800563e:	4b29      	ldr	r3, [pc, #164]	@ (80056e4 <__swsetup_r+0xa8>)
 8005640:	4605      	mov	r5, r0
 8005642:	6818      	ldr	r0, [r3, #0]
 8005644:	460c      	mov	r4, r1
 8005646:	b118      	cbz	r0, 8005650 <__swsetup_r+0x14>
 8005648:	6a03      	ldr	r3, [r0, #32]
 800564a:	b90b      	cbnz	r3, 8005650 <__swsetup_r+0x14>
 800564c:	f7ff feae 	bl	80053ac <__sinit>
 8005650:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005654:	0719      	lsls	r1, r3, #28
 8005656:	d422      	bmi.n	800569e <__swsetup_r+0x62>
 8005658:	06da      	lsls	r2, r3, #27
 800565a:	d407      	bmi.n	800566c <__swsetup_r+0x30>
 800565c:	2209      	movs	r2, #9
 800565e:	602a      	str	r2, [r5, #0]
 8005660:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005664:	81a3      	strh	r3, [r4, #12]
 8005666:	f04f 30ff 	mov.w	r0, #4294967295
 800566a:	e033      	b.n	80056d4 <__swsetup_r+0x98>
 800566c:	0758      	lsls	r0, r3, #29
 800566e:	d512      	bpl.n	8005696 <__swsetup_r+0x5a>
 8005670:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005672:	b141      	cbz	r1, 8005686 <__swsetup_r+0x4a>
 8005674:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005678:	4299      	cmp	r1, r3
 800567a:	d002      	beq.n	8005682 <__swsetup_r+0x46>
 800567c:	4628      	mov	r0, r5
 800567e:	f000 f995 	bl	80059ac <_free_r>
 8005682:	2300      	movs	r3, #0
 8005684:	6363      	str	r3, [r4, #52]	@ 0x34
 8005686:	89a3      	ldrh	r3, [r4, #12]
 8005688:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800568c:	81a3      	strh	r3, [r4, #12]
 800568e:	2300      	movs	r3, #0
 8005690:	6063      	str	r3, [r4, #4]
 8005692:	6923      	ldr	r3, [r4, #16]
 8005694:	6023      	str	r3, [r4, #0]
 8005696:	89a3      	ldrh	r3, [r4, #12]
 8005698:	f043 0308 	orr.w	r3, r3, #8
 800569c:	81a3      	strh	r3, [r4, #12]
 800569e:	6923      	ldr	r3, [r4, #16]
 80056a0:	b94b      	cbnz	r3, 80056b6 <__swsetup_r+0x7a>
 80056a2:	89a3      	ldrh	r3, [r4, #12]
 80056a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80056a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80056ac:	d003      	beq.n	80056b6 <__swsetup_r+0x7a>
 80056ae:	4621      	mov	r1, r4
 80056b0:	4628      	mov	r0, r5
 80056b2:	f000 ff87 	bl	80065c4 <__smakebuf_r>
 80056b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056ba:	f013 0201 	ands.w	r2, r3, #1
 80056be:	d00a      	beq.n	80056d6 <__swsetup_r+0x9a>
 80056c0:	2200      	movs	r2, #0
 80056c2:	60a2      	str	r2, [r4, #8]
 80056c4:	6962      	ldr	r2, [r4, #20]
 80056c6:	4252      	negs	r2, r2
 80056c8:	61a2      	str	r2, [r4, #24]
 80056ca:	6922      	ldr	r2, [r4, #16]
 80056cc:	b942      	cbnz	r2, 80056e0 <__swsetup_r+0xa4>
 80056ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80056d2:	d1c5      	bne.n	8005660 <__swsetup_r+0x24>
 80056d4:	bd38      	pop	{r3, r4, r5, pc}
 80056d6:	0799      	lsls	r1, r3, #30
 80056d8:	bf58      	it	pl
 80056da:	6962      	ldrpl	r2, [r4, #20]
 80056dc:	60a2      	str	r2, [r4, #8]
 80056de:	e7f4      	b.n	80056ca <__swsetup_r+0x8e>
 80056e0:	2000      	movs	r0, #0
 80056e2:	e7f7      	b.n	80056d4 <__swsetup_r+0x98>
 80056e4:	20000034 	.word	0x20000034

080056e8 <memset>:
 80056e8:	4402      	add	r2, r0
 80056ea:	4603      	mov	r3, r0
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d100      	bne.n	80056f2 <memset+0xa>
 80056f0:	4770      	bx	lr
 80056f2:	f803 1b01 	strb.w	r1, [r3], #1
 80056f6:	e7f9      	b.n	80056ec <memset+0x4>

080056f8 <strtok>:
 80056f8:	4b16      	ldr	r3, [pc, #88]	@ (8005754 <strtok+0x5c>)
 80056fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056fe:	681f      	ldr	r7, [r3, #0]
 8005700:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8005702:	4605      	mov	r5, r0
 8005704:	460e      	mov	r6, r1
 8005706:	b9ec      	cbnz	r4, 8005744 <strtok+0x4c>
 8005708:	2050      	movs	r0, #80	@ 0x50
 800570a:	f000 f999 	bl	8005a40 <malloc>
 800570e:	4602      	mov	r2, r0
 8005710:	6478      	str	r0, [r7, #68]	@ 0x44
 8005712:	b920      	cbnz	r0, 800571e <strtok+0x26>
 8005714:	4b10      	ldr	r3, [pc, #64]	@ (8005758 <strtok+0x60>)
 8005716:	4811      	ldr	r0, [pc, #68]	@ (800575c <strtok+0x64>)
 8005718:	215b      	movs	r1, #91	@ 0x5b
 800571a:	f000 f929 	bl	8005970 <__assert_func>
 800571e:	e9c0 4400 	strd	r4, r4, [r0]
 8005722:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005726:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800572a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800572e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8005732:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8005736:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800573a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800573e:	6184      	str	r4, [r0, #24]
 8005740:	7704      	strb	r4, [r0, #28]
 8005742:	6244      	str	r4, [r0, #36]	@ 0x24
 8005744:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005746:	4631      	mov	r1, r6
 8005748:	4628      	mov	r0, r5
 800574a:	2301      	movs	r3, #1
 800574c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005750:	f000 b806 	b.w	8005760 <__strtok_r>
 8005754:	20000034 	.word	0x20000034
 8005758:	08006a19 	.word	0x08006a19
 800575c:	08006a30 	.word	0x08006a30

08005760 <__strtok_r>:
 8005760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005762:	4604      	mov	r4, r0
 8005764:	b908      	cbnz	r0, 800576a <__strtok_r+0xa>
 8005766:	6814      	ldr	r4, [r2, #0]
 8005768:	b144      	cbz	r4, 800577c <__strtok_r+0x1c>
 800576a:	4620      	mov	r0, r4
 800576c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005770:	460f      	mov	r7, r1
 8005772:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005776:	b91e      	cbnz	r6, 8005780 <__strtok_r+0x20>
 8005778:	b965      	cbnz	r5, 8005794 <__strtok_r+0x34>
 800577a:	6015      	str	r5, [r2, #0]
 800577c:	2000      	movs	r0, #0
 800577e:	e005      	b.n	800578c <__strtok_r+0x2c>
 8005780:	42b5      	cmp	r5, r6
 8005782:	d1f6      	bne.n	8005772 <__strtok_r+0x12>
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1f0      	bne.n	800576a <__strtok_r+0xa>
 8005788:	6014      	str	r4, [r2, #0]
 800578a:	7003      	strb	r3, [r0, #0]
 800578c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800578e:	461c      	mov	r4, r3
 8005790:	e00c      	b.n	80057ac <__strtok_r+0x4c>
 8005792:	b915      	cbnz	r5, 800579a <__strtok_r+0x3a>
 8005794:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005798:	460e      	mov	r6, r1
 800579a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800579e:	42ab      	cmp	r3, r5
 80057a0:	d1f7      	bne.n	8005792 <__strtok_r+0x32>
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d0f3      	beq.n	800578e <__strtok_r+0x2e>
 80057a6:	2300      	movs	r3, #0
 80057a8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80057ac:	6014      	str	r4, [r2, #0]
 80057ae:	e7ed      	b.n	800578c <__strtok_r+0x2c>

080057b0 <_close_r>:
 80057b0:	b538      	push	{r3, r4, r5, lr}
 80057b2:	4d06      	ldr	r5, [pc, #24]	@ (80057cc <_close_r+0x1c>)
 80057b4:	2300      	movs	r3, #0
 80057b6:	4604      	mov	r4, r0
 80057b8:	4608      	mov	r0, r1
 80057ba:	602b      	str	r3, [r5, #0]
 80057bc:	f7fb fb70 	bl	8000ea0 <_close>
 80057c0:	1c43      	adds	r3, r0, #1
 80057c2:	d102      	bne.n	80057ca <_close_r+0x1a>
 80057c4:	682b      	ldr	r3, [r5, #0]
 80057c6:	b103      	cbz	r3, 80057ca <_close_r+0x1a>
 80057c8:	6023      	str	r3, [r4, #0]
 80057ca:	bd38      	pop	{r3, r4, r5, pc}
 80057cc:	20004378 	.word	0x20004378

080057d0 <_reclaim_reent>:
 80057d0:	4b29      	ldr	r3, [pc, #164]	@ (8005878 <_reclaim_reent+0xa8>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4283      	cmp	r3, r0
 80057d6:	b570      	push	{r4, r5, r6, lr}
 80057d8:	4604      	mov	r4, r0
 80057da:	d04b      	beq.n	8005874 <_reclaim_reent+0xa4>
 80057dc:	69c3      	ldr	r3, [r0, #28]
 80057de:	b1ab      	cbz	r3, 800580c <_reclaim_reent+0x3c>
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	b16b      	cbz	r3, 8005800 <_reclaim_reent+0x30>
 80057e4:	2500      	movs	r5, #0
 80057e6:	69e3      	ldr	r3, [r4, #28]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	5959      	ldr	r1, [r3, r5]
 80057ec:	2900      	cmp	r1, #0
 80057ee:	d13b      	bne.n	8005868 <_reclaim_reent+0x98>
 80057f0:	3504      	adds	r5, #4
 80057f2:	2d80      	cmp	r5, #128	@ 0x80
 80057f4:	d1f7      	bne.n	80057e6 <_reclaim_reent+0x16>
 80057f6:	69e3      	ldr	r3, [r4, #28]
 80057f8:	4620      	mov	r0, r4
 80057fa:	68d9      	ldr	r1, [r3, #12]
 80057fc:	f000 f8d6 	bl	80059ac <_free_r>
 8005800:	69e3      	ldr	r3, [r4, #28]
 8005802:	6819      	ldr	r1, [r3, #0]
 8005804:	b111      	cbz	r1, 800580c <_reclaim_reent+0x3c>
 8005806:	4620      	mov	r0, r4
 8005808:	f000 f8d0 	bl	80059ac <_free_r>
 800580c:	6961      	ldr	r1, [r4, #20]
 800580e:	b111      	cbz	r1, 8005816 <_reclaim_reent+0x46>
 8005810:	4620      	mov	r0, r4
 8005812:	f000 f8cb 	bl	80059ac <_free_r>
 8005816:	69e1      	ldr	r1, [r4, #28]
 8005818:	b111      	cbz	r1, 8005820 <_reclaim_reent+0x50>
 800581a:	4620      	mov	r0, r4
 800581c:	f000 f8c6 	bl	80059ac <_free_r>
 8005820:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005822:	b111      	cbz	r1, 800582a <_reclaim_reent+0x5a>
 8005824:	4620      	mov	r0, r4
 8005826:	f000 f8c1 	bl	80059ac <_free_r>
 800582a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800582c:	b111      	cbz	r1, 8005834 <_reclaim_reent+0x64>
 800582e:	4620      	mov	r0, r4
 8005830:	f000 f8bc 	bl	80059ac <_free_r>
 8005834:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005836:	b111      	cbz	r1, 800583e <_reclaim_reent+0x6e>
 8005838:	4620      	mov	r0, r4
 800583a:	f000 f8b7 	bl	80059ac <_free_r>
 800583e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005840:	b111      	cbz	r1, 8005848 <_reclaim_reent+0x78>
 8005842:	4620      	mov	r0, r4
 8005844:	f000 f8b2 	bl	80059ac <_free_r>
 8005848:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800584a:	b111      	cbz	r1, 8005852 <_reclaim_reent+0x82>
 800584c:	4620      	mov	r0, r4
 800584e:	f000 f8ad 	bl	80059ac <_free_r>
 8005852:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005854:	b111      	cbz	r1, 800585c <_reclaim_reent+0x8c>
 8005856:	4620      	mov	r0, r4
 8005858:	f000 f8a8 	bl	80059ac <_free_r>
 800585c:	6a23      	ldr	r3, [r4, #32]
 800585e:	b14b      	cbz	r3, 8005874 <_reclaim_reent+0xa4>
 8005860:	4620      	mov	r0, r4
 8005862:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005866:	4718      	bx	r3
 8005868:	680e      	ldr	r6, [r1, #0]
 800586a:	4620      	mov	r0, r4
 800586c:	f000 f89e 	bl	80059ac <_free_r>
 8005870:	4631      	mov	r1, r6
 8005872:	e7bb      	b.n	80057ec <_reclaim_reent+0x1c>
 8005874:	bd70      	pop	{r4, r5, r6, pc}
 8005876:	bf00      	nop
 8005878:	20000034 	.word	0x20000034

0800587c <_lseek_r>:
 800587c:	b538      	push	{r3, r4, r5, lr}
 800587e:	4d07      	ldr	r5, [pc, #28]	@ (800589c <_lseek_r+0x20>)
 8005880:	4604      	mov	r4, r0
 8005882:	4608      	mov	r0, r1
 8005884:	4611      	mov	r1, r2
 8005886:	2200      	movs	r2, #0
 8005888:	602a      	str	r2, [r5, #0]
 800588a:	461a      	mov	r2, r3
 800588c:	f7fb fb2f 	bl	8000eee <_lseek>
 8005890:	1c43      	adds	r3, r0, #1
 8005892:	d102      	bne.n	800589a <_lseek_r+0x1e>
 8005894:	682b      	ldr	r3, [r5, #0]
 8005896:	b103      	cbz	r3, 800589a <_lseek_r+0x1e>
 8005898:	6023      	str	r3, [r4, #0]
 800589a:	bd38      	pop	{r3, r4, r5, pc}
 800589c:	20004378 	.word	0x20004378

080058a0 <_read_r>:
 80058a0:	b538      	push	{r3, r4, r5, lr}
 80058a2:	4d07      	ldr	r5, [pc, #28]	@ (80058c0 <_read_r+0x20>)
 80058a4:	4604      	mov	r4, r0
 80058a6:	4608      	mov	r0, r1
 80058a8:	4611      	mov	r1, r2
 80058aa:	2200      	movs	r2, #0
 80058ac:	602a      	str	r2, [r5, #0]
 80058ae:	461a      	mov	r2, r3
 80058b0:	f7fb fabd 	bl	8000e2e <_read>
 80058b4:	1c43      	adds	r3, r0, #1
 80058b6:	d102      	bne.n	80058be <_read_r+0x1e>
 80058b8:	682b      	ldr	r3, [r5, #0]
 80058ba:	b103      	cbz	r3, 80058be <_read_r+0x1e>
 80058bc:	6023      	str	r3, [r4, #0]
 80058be:	bd38      	pop	{r3, r4, r5, pc}
 80058c0:	20004378 	.word	0x20004378

080058c4 <_write_r>:
 80058c4:	b538      	push	{r3, r4, r5, lr}
 80058c6:	4d07      	ldr	r5, [pc, #28]	@ (80058e4 <_write_r+0x20>)
 80058c8:	4604      	mov	r4, r0
 80058ca:	4608      	mov	r0, r1
 80058cc:	4611      	mov	r1, r2
 80058ce:	2200      	movs	r2, #0
 80058d0:	602a      	str	r2, [r5, #0]
 80058d2:	461a      	mov	r2, r3
 80058d4:	f7fb fac8 	bl	8000e68 <_write>
 80058d8:	1c43      	adds	r3, r0, #1
 80058da:	d102      	bne.n	80058e2 <_write_r+0x1e>
 80058dc:	682b      	ldr	r3, [r5, #0]
 80058de:	b103      	cbz	r3, 80058e2 <_write_r+0x1e>
 80058e0:	6023      	str	r3, [r4, #0]
 80058e2:	bd38      	pop	{r3, r4, r5, pc}
 80058e4:	20004378 	.word	0x20004378

080058e8 <__errno>:
 80058e8:	4b01      	ldr	r3, [pc, #4]	@ (80058f0 <__errno+0x8>)
 80058ea:	6818      	ldr	r0, [r3, #0]
 80058ec:	4770      	bx	lr
 80058ee:	bf00      	nop
 80058f0:	20000034 	.word	0x20000034

080058f4 <__libc_init_array>:
 80058f4:	b570      	push	{r4, r5, r6, lr}
 80058f6:	4d0d      	ldr	r5, [pc, #52]	@ (800592c <__libc_init_array+0x38>)
 80058f8:	4c0d      	ldr	r4, [pc, #52]	@ (8005930 <__libc_init_array+0x3c>)
 80058fa:	1b64      	subs	r4, r4, r5
 80058fc:	10a4      	asrs	r4, r4, #2
 80058fe:	2600      	movs	r6, #0
 8005900:	42a6      	cmp	r6, r4
 8005902:	d109      	bne.n	8005918 <__libc_init_array+0x24>
 8005904:	4d0b      	ldr	r5, [pc, #44]	@ (8005934 <__libc_init_array+0x40>)
 8005906:	4c0c      	ldr	r4, [pc, #48]	@ (8005938 <__libc_init_array+0x44>)
 8005908:	f000 ff66 	bl	80067d8 <_init>
 800590c:	1b64      	subs	r4, r4, r5
 800590e:	10a4      	asrs	r4, r4, #2
 8005910:	2600      	movs	r6, #0
 8005912:	42a6      	cmp	r6, r4
 8005914:	d105      	bne.n	8005922 <__libc_init_array+0x2e>
 8005916:	bd70      	pop	{r4, r5, r6, pc}
 8005918:	f855 3b04 	ldr.w	r3, [r5], #4
 800591c:	4798      	blx	r3
 800591e:	3601      	adds	r6, #1
 8005920:	e7ee      	b.n	8005900 <__libc_init_array+0xc>
 8005922:	f855 3b04 	ldr.w	r3, [r5], #4
 8005926:	4798      	blx	r3
 8005928:	3601      	adds	r6, #1
 800592a:	e7f2      	b.n	8005912 <__libc_init_array+0x1e>
 800592c:	08006b04 	.word	0x08006b04
 8005930:	08006b04 	.word	0x08006b04
 8005934:	08006b04 	.word	0x08006b04
 8005938:	08006b08 	.word	0x08006b08

0800593c <__retarget_lock_init_recursive>:
 800593c:	4770      	bx	lr

0800593e <__retarget_lock_acquire_recursive>:
 800593e:	4770      	bx	lr

08005940 <__retarget_lock_release_recursive>:
 8005940:	4770      	bx	lr

08005942 <strcpy>:
 8005942:	4603      	mov	r3, r0
 8005944:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005948:	f803 2b01 	strb.w	r2, [r3], #1
 800594c:	2a00      	cmp	r2, #0
 800594e:	d1f9      	bne.n	8005944 <strcpy+0x2>
 8005950:	4770      	bx	lr

08005952 <memcpy>:
 8005952:	440a      	add	r2, r1
 8005954:	4291      	cmp	r1, r2
 8005956:	f100 33ff 	add.w	r3, r0, #4294967295
 800595a:	d100      	bne.n	800595e <memcpy+0xc>
 800595c:	4770      	bx	lr
 800595e:	b510      	push	{r4, lr}
 8005960:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005964:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005968:	4291      	cmp	r1, r2
 800596a:	d1f9      	bne.n	8005960 <memcpy+0xe>
 800596c:	bd10      	pop	{r4, pc}
	...

08005970 <__assert_func>:
 8005970:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005972:	4614      	mov	r4, r2
 8005974:	461a      	mov	r2, r3
 8005976:	4b09      	ldr	r3, [pc, #36]	@ (800599c <__assert_func+0x2c>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4605      	mov	r5, r0
 800597c:	68d8      	ldr	r0, [r3, #12]
 800597e:	b954      	cbnz	r4, 8005996 <__assert_func+0x26>
 8005980:	4b07      	ldr	r3, [pc, #28]	@ (80059a0 <__assert_func+0x30>)
 8005982:	461c      	mov	r4, r3
 8005984:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005988:	9100      	str	r1, [sp, #0]
 800598a:	462b      	mov	r3, r5
 800598c:	4905      	ldr	r1, [pc, #20]	@ (80059a4 <__assert_func+0x34>)
 800598e:	f000 fde1 	bl	8006554 <fiprintf>
 8005992:	f000 fe9f 	bl	80066d4 <abort>
 8005996:	4b04      	ldr	r3, [pc, #16]	@ (80059a8 <__assert_func+0x38>)
 8005998:	e7f4      	b.n	8005984 <__assert_func+0x14>
 800599a:	bf00      	nop
 800599c:	20000034 	.word	0x20000034
 80059a0:	08006ac5 	.word	0x08006ac5
 80059a4:	08006a97 	.word	0x08006a97
 80059a8:	08006a8a 	.word	0x08006a8a

080059ac <_free_r>:
 80059ac:	b538      	push	{r3, r4, r5, lr}
 80059ae:	4605      	mov	r5, r0
 80059b0:	2900      	cmp	r1, #0
 80059b2:	d041      	beq.n	8005a38 <_free_r+0x8c>
 80059b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059b8:	1f0c      	subs	r4, r1, #4
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	bfb8      	it	lt
 80059be:	18e4      	addlt	r4, r4, r3
 80059c0:	f000 f8e8 	bl	8005b94 <__malloc_lock>
 80059c4:	4a1d      	ldr	r2, [pc, #116]	@ (8005a3c <_free_r+0x90>)
 80059c6:	6813      	ldr	r3, [r2, #0]
 80059c8:	b933      	cbnz	r3, 80059d8 <_free_r+0x2c>
 80059ca:	6063      	str	r3, [r4, #4]
 80059cc:	6014      	str	r4, [r2, #0]
 80059ce:	4628      	mov	r0, r5
 80059d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059d4:	f000 b8e4 	b.w	8005ba0 <__malloc_unlock>
 80059d8:	42a3      	cmp	r3, r4
 80059da:	d908      	bls.n	80059ee <_free_r+0x42>
 80059dc:	6820      	ldr	r0, [r4, #0]
 80059de:	1821      	adds	r1, r4, r0
 80059e0:	428b      	cmp	r3, r1
 80059e2:	bf01      	itttt	eq
 80059e4:	6819      	ldreq	r1, [r3, #0]
 80059e6:	685b      	ldreq	r3, [r3, #4]
 80059e8:	1809      	addeq	r1, r1, r0
 80059ea:	6021      	streq	r1, [r4, #0]
 80059ec:	e7ed      	b.n	80059ca <_free_r+0x1e>
 80059ee:	461a      	mov	r2, r3
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	b10b      	cbz	r3, 80059f8 <_free_r+0x4c>
 80059f4:	42a3      	cmp	r3, r4
 80059f6:	d9fa      	bls.n	80059ee <_free_r+0x42>
 80059f8:	6811      	ldr	r1, [r2, #0]
 80059fa:	1850      	adds	r0, r2, r1
 80059fc:	42a0      	cmp	r0, r4
 80059fe:	d10b      	bne.n	8005a18 <_free_r+0x6c>
 8005a00:	6820      	ldr	r0, [r4, #0]
 8005a02:	4401      	add	r1, r0
 8005a04:	1850      	adds	r0, r2, r1
 8005a06:	4283      	cmp	r3, r0
 8005a08:	6011      	str	r1, [r2, #0]
 8005a0a:	d1e0      	bne.n	80059ce <_free_r+0x22>
 8005a0c:	6818      	ldr	r0, [r3, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	6053      	str	r3, [r2, #4]
 8005a12:	4408      	add	r0, r1
 8005a14:	6010      	str	r0, [r2, #0]
 8005a16:	e7da      	b.n	80059ce <_free_r+0x22>
 8005a18:	d902      	bls.n	8005a20 <_free_r+0x74>
 8005a1a:	230c      	movs	r3, #12
 8005a1c:	602b      	str	r3, [r5, #0]
 8005a1e:	e7d6      	b.n	80059ce <_free_r+0x22>
 8005a20:	6820      	ldr	r0, [r4, #0]
 8005a22:	1821      	adds	r1, r4, r0
 8005a24:	428b      	cmp	r3, r1
 8005a26:	bf04      	itt	eq
 8005a28:	6819      	ldreq	r1, [r3, #0]
 8005a2a:	685b      	ldreq	r3, [r3, #4]
 8005a2c:	6063      	str	r3, [r4, #4]
 8005a2e:	bf04      	itt	eq
 8005a30:	1809      	addeq	r1, r1, r0
 8005a32:	6021      	streq	r1, [r4, #0]
 8005a34:	6054      	str	r4, [r2, #4]
 8005a36:	e7ca      	b.n	80059ce <_free_r+0x22>
 8005a38:	bd38      	pop	{r3, r4, r5, pc}
 8005a3a:	bf00      	nop
 8005a3c:	20004384 	.word	0x20004384

08005a40 <malloc>:
 8005a40:	4b02      	ldr	r3, [pc, #8]	@ (8005a4c <malloc+0xc>)
 8005a42:	4601      	mov	r1, r0
 8005a44:	6818      	ldr	r0, [r3, #0]
 8005a46:	f000 b825 	b.w	8005a94 <_malloc_r>
 8005a4a:	bf00      	nop
 8005a4c:	20000034 	.word	0x20000034

08005a50 <sbrk_aligned>:
 8005a50:	b570      	push	{r4, r5, r6, lr}
 8005a52:	4e0f      	ldr	r6, [pc, #60]	@ (8005a90 <sbrk_aligned+0x40>)
 8005a54:	460c      	mov	r4, r1
 8005a56:	6831      	ldr	r1, [r6, #0]
 8005a58:	4605      	mov	r5, r0
 8005a5a:	b911      	cbnz	r1, 8005a62 <sbrk_aligned+0x12>
 8005a5c:	f000 fe2a 	bl	80066b4 <_sbrk_r>
 8005a60:	6030      	str	r0, [r6, #0]
 8005a62:	4621      	mov	r1, r4
 8005a64:	4628      	mov	r0, r5
 8005a66:	f000 fe25 	bl	80066b4 <_sbrk_r>
 8005a6a:	1c43      	adds	r3, r0, #1
 8005a6c:	d103      	bne.n	8005a76 <sbrk_aligned+0x26>
 8005a6e:	f04f 34ff 	mov.w	r4, #4294967295
 8005a72:	4620      	mov	r0, r4
 8005a74:	bd70      	pop	{r4, r5, r6, pc}
 8005a76:	1cc4      	adds	r4, r0, #3
 8005a78:	f024 0403 	bic.w	r4, r4, #3
 8005a7c:	42a0      	cmp	r0, r4
 8005a7e:	d0f8      	beq.n	8005a72 <sbrk_aligned+0x22>
 8005a80:	1a21      	subs	r1, r4, r0
 8005a82:	4628      	mov	r0, r5
 8005a84:	f000 fe16 	bl	80066b4 <_sbrk_r>
 8005a88:	3001      	adds	r0, #1
 8005a8a:	d1f2      	bne.n	8005a72 <sbrk_aligned+0x22>
 8005a8c:	e7ef      	b.n	8005a6e <sbrk_aligned+0x1e>
 8005a8e:	bf00      	nop
 8005a90:	20004380 	.word	0x20004380

08005a94 <_malloc_r>:
 8005a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a98:	1ccd      	adds	r5, r1, #3
 8005a9a:	f025 0503 	bic.w	r5, r5, #3
 8005a9e:	3508      	adds	r5, #8
 8005aa0:	2d0c      	cmp	r5, #12
 8005aa2:	bf38      	it	cc
 8005aa4:	250c      	movcc	r5, #12
 8005aa6:	2d00      	cmp	r5, #0
 8005aa8:	4606      	mov	r6, r0
 8005aaa:	db01      	blt.n	8005ab0 <_malloc_r+0x1c>
 8005aac:	42a9      	cmp	r1, r5
 8005aae:	d904      	bls.n	8005aba <_malloc_r+0x26>
 8005ab0:	230c      	movs	r3, #12
 8005ab2:	6033      	str	r3, [r6, #0]
 8005ab4:	2000      	movs	r0, #0
 8005ab6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005aba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005b90 <_malloc_r+0xfc>
 8005abe:	f000 f869 	bl	8005b94 <__malloc_lock>
 8005ac2:	f8d8 3000 	ldr.w	r3, [r8]
 8005ac6:	461c      	mov	r4, r3
 8005ac8:	bb44      	cbnz	r4, 8005b1c <_malloc_r+0x88>
 8005aca:	4629      	mov	r1, r5
 8005acc:	4630      	mov	r0, r6
 8005ace:	f7ff ffbf 	bl	8005a50 <sbrk_aligned>
 8005ad2:	1c43      	adds	r3, r0, #1
 8005ad4:	4604      	mov	r4, r0
 8005ad6:	d158      	bne.n	8005b8a <_malloc_r+0xf6>
 8005ad8:	f8d8 4000 	ldr.w	r4, [r8]
 8005adc:	4627      	mov	r7, r4
 8005ade:	2f00      	cmp	r7, #0
 8005ae0:	d143      	bne.n	8005b6a <_malloc_r+0xd6>
 8005ae2:	2c00      	cmp	r4, #0
 8005ae4:	d04b      	beq.n	8005b7e <_malloc_r+0xea>
 8005ae6:	6823      	ldr	r3, [r4, #0]
 8005ae8:	4639      	mov	r1, r7
 8005aea:	4630      	mov	r0, r6
 8005aec:	eb04 0903 	add.w	r9, r4, r3
 8005af0:	f000 fde0 	bl	80066b4 <_sbrk_r>
 8005af4:	4581      	cmp	r9, r0
 8005af6:	d142      	bne.n	8005b7e <_malloc_r+0xea>
 8005af8:	6821      	ldr	r1, [r4, #0]
 8005afa:	1a6d      	subs	r5, r5, r1
 8005afc:	4629      	mov	r1, r5
 8005afe:	4630      	mov	r0, r6
 8005b00:	f7ff ffa6 	bl	8005a50 <sbrk_aligned>
 8005b04:	3001      	adds	r0, #1
 8005b06:	d03a      	beq.n	8005b7e <_malloc_r+0xea>
 8005b08:	6823      	ldr	r3, [r4, #0]
 8005b0a:	442b      	add	r3, r5
 8005b0c:	6023      	str	r3, [r4, #0]
 8005b0e:	f8d8 3000 	ldr.w	r3, [r8]
 8005b12:	685a      	ldr	r2, [r3, #4]
 8005b14:	bb62      	cbnz	r2, 8005b70 <_malloc_r+0xdc>
 8005b16:	f8c8 7000 	str.w	r7, [r8]
 8005b1a:	e00f      	b.n	8005b3c <_malloc_r+0xa8>
 8005b1c:	6822      	ldr	r2, [r4, #0]
 8005b1e:	1b52      	subs	r2, r2, r5
 8005b20:	d420      	bmi.n	8005b64 <_malloc_r+0xd0>
 8005b22:	2a0b      	cmp	r2, #11
 8005b24:	d917      	bls.n	8005b56 <_malloc_r+0xc2>
 8005b26:	1961      	adds	r1, r4, r5
 8005b28:	42a3      	cmp	r3, r4
 8005b2a:	6025      	str	r5, [r4, #0]
 8005b2c:	bf18      	it	ne
 8005b2e:	6059      	strne	r1, [r3, #4]
 8005b30:	6863      	ldr	r3, [r4, #4]
 8005b32:	bf08      	it	eq
 8005b34:	f8c8 1000 	streq.w	r1, [r8]
 8005b38:	5162      	str	r2, [r4, r5]
 8005b3a:	604b      	str	r3, [r1, #4]
 8005b3c:	4630      	mov	r0, r6
 8005b3e:	f000 f82f 	bl	8005ba0 <__malloc_unlock>
 8005b42:	f104 000b 	add.w	r0, r4, #11
 8005b46:	1d23      	adds	r3, r4, #4
 8005b48:	f020 0007 	bic.w	r0, r0, #7
 8005b4c:	1ac2      	subs	r2, r0, r3
 8005b4e:	bf1c      	itt	ne
 8005b50:	1a1b      	subne	r3, r3, r0
 8005b52:	50a3      	strne	r3, [r4, r2]
 8005b54:	e7af      	b.n	8005ab6 <_malloc_r+0x22>
 8005b56:	6862      	ldr	r2, [r4, #4]
 8005b58:	42a3      	cmp	r3, r4
 8005b5a:	bf0c      	ite	eq
 8005b5c:	f8c8 2000 	streq.w	r2, [r8]
 8005b60:	605a      	strne	r2, [r3, #4]
 8005b62:	e7eb      	b.n	8005b3c <_malloc_r+0xa8>
 8005b64:	4623      	mov	r3, r4
 8005b66:	6864      	ldr	r4, [r4, #4]
 8005b68:	e7ae      	b.n	8005ac8 <_malloc_r+0x34>
 8005b6a:	463c      	mov	r4, r7
 8005b6c:	687f      	ldr	r7, [r7, #4]
 8005b6e:	e7b6      	b.n	8005ade <_malloc_r+0x4a>
 8005b70:	461a      	mov	r2, r3
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	42a3      	cmp	r3, r4
 8005b76:	d1fb      	bne.n	8005b70 <_malloc_r+0xdc>
 8005b78:	2300      	movs	r3, #0
 8005b7a:	6053      	str	r3, [r2, #4]
 8005b7c:	e7de      	b.n	8005b3c <_malloc_r+0xa8>
 8005b7e:	230c      	movs	r3, #12
 8005b80:	6033      	str	r3, [r6, #0]
 8005b82:	4630      	mov	r0, r6
 8005b84:	f000 f80c 	bl	8005ba0 <__malloc_unlock>
 8005b88:	e794      	b.n	8005ab4 <_malloc_r+0x20>
 8005b8a:	6005      	str	r5, [r0, #0]
 8005b8c:	e7d6      	b.n	8005b3c <_malloc_r+0xa8>
 8005b8e:	bf00      	nop
 8005b90:	20004384 	.word	0x20004384

08005b94 <__malloc_lock>:
 8005b94:	4801      	ldr	r0, [pc, #4]	@ (8005b9c <__malloc_lock+0x8>)
 8005b96:	f7ff bed2 	b.w	800593e <__retarget_lock_acquire_recursive>
 8005b9a:	bf00      	nop
 8005b9c:	2000437c 	.word	0x2000437c

08005ba0 <__malloc_unlock>:
 8005ba0:	4801      	ldr	r0, [pc, #4]	@ (8005ba8 <__malloc_unlock+0x8>)
 8005ba2:	f7ff becd 	b.w	8005940 <__retarget_lock_release_recursive>
 8005ba6:	bf00      	nop
 8005ba8:	2000437c 	.word	0x2000437c

08005bac <__ssputs_r>:
 8005bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bb0:	688e      	ldr	r6, [r1, #8]
 8005bb2:	461f      	mov	r7, r3
 8005bb4:	42be      	cmp	r6, r7
 8005bb6:	680b      	ldr	r3, [r1, #0]
 8005bb8:	4682      	mov	sl, r0
 8005bba:	460c      	mov	r4, r1
 8005bbc:	4690      	mov	r8, r2
 8005bbe:	d82d      	bhi.n	8005c1c <__ssputs_r+0x70>
 8005bc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005bc4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005bc8:	d026      	beq.n	8005c18 <__ssputs_r+0x6c>
 8005bca:	6965      	ldr	r5, [r4, #20]
 8005bcc:	6909      	ldr	r1, [r1, #16]
 8005bce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005bd2:	eba3 0901 	sub.w	r9, r3, r1
 8005bd6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005bda:	1c7b      	adds	r3, r7, #1
 8005bdc:	444b      	add	r3, r9
 8005bde:	106d      	asrs	r5, r5, #1
 8005be0:	429d      	cmp	r5, r3
 8005be2:	bf38      	it	cc
 8005be4:	461d      	movcc	r5, r3
 8005be6:	0553      	lsls	r3, r2, #21
 8005be8:	d527      	bpl.n	8005c3a <__ssputs_r+0x8e>
 8005bea:	4629      	mov	r1, r5
 8005bec:	f7ff ff52 	bl	8005a94 <_malloc_r>
 8005bf0:	4606      	mov	r6, r0
 8005bf2:	b360      	cbz	r0, 8005c4e <__ssputs_r+0xa2>
 8005bf4:	6921      	ldr	r1, [r4, #16]
 8005bf6:	464a      	mov	r2, r9
 8005bf8:	f7ff feab 	bl	8005952 <memcpy>
 8005bfc:	89a3      	ldrh	r3, [r4, #12]
 8005bfe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005c02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c06:	81a3      	strh	r3, [r4, #12]
 8005c08:	6126      	str	r6, [r4, #16]
 8005c0a:	6165      	str	r5, [r4, #20]
 8005c0c:	444e      	add	r6, r9
 8005c0e:	eba5 0509 	sub.w	r5, r5, r9
 8005c12:	6026      	str	r6, [r4, #0]
 8005c14:	60a5      	str	r5, [r4, #8]
 8005c16:	463e      	mov	r6, r7
 8005c18:	42be      	cmp	r6, r7
 8005c1a:	d900      	bls.n	8005c1e <__ssputs_r+0x72>
 8005c1c:	463e      	mov	r6, r7
 8005c1e:	6820      	ldr	r0, [r4, #0]
 8005c20:	4632      	mov	r2, r6
 8005c22:	4641      	mov	r1, r8
 8005c24:	f000 fd0a 	bl	800663c <memmove>
 8005c28:	68a3      	ldr	r3, [r4, #8]
 8005c2a:	1b9b      	subs	r3, r3, r6
 8005c2c:	60a3      	str	r3, [r4, #8]
 8005c2e:	6823      	ldr	r3, [r4, #0]
 8005c30:	4433      	add	r3, r6
 8005c32:	6023      	str	r3, [r4, #0]
 8005c34:	2000      	movs	r0, #0
 8005c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c3a:	462a      	mov	r2, r5
 8005c3c:	f000 fd51 	bl	80066e2 <_realloc_r>
 8005c40:	4606      	mov	r6, r0
 8005c42:	2800      	cmp	r0, #0
 8005c44:	d1e0      	bne.n	8005c08 <__ssputs_r+0x5c>
 8005c46:	6921      	ldr	r1, [r4, #16]
 8005c48:	4650      	mov	r0, sl
 8005c4a:	f7ff feaf 	bl	80059ac <_free_r>
 8005c4e:	230c      	movs	r3, #12
 8005c50:	f8ca 3000 	str.w	r3, [sl]
 8005c54:	89a3      	ldrh	r3, [r4, #12]
 8005c56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c5a:	81a3      	strh	r3, [r4, #12]
 8005c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c60:	e7e9      	b.n	8005c36 <__ssputs_r+0x8a>
	...

08005c64 <_svfiprintf_r>:
 8005c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c68:	4698      	mov	r8, r3
 8005c6a:	898b      	ldrh	r3, [r1, #12]
 8005c6c:	061b      	lsls	r3, r3, #24
 8005c6e:	b09d      	sub	sp, #116	@ 0x74
 8005c70:	4607      	mov	r7, r0
 8005c72:	460d      	mov	r5, r1
 8005c74:	4614      	mov	r4, r2
 8005c76:	d510      	bpl.n	8005c9a <_svfiprintf_r+0x36>
 8005c78:	690b      	ldr	r3, [r1, #16]
 8005c7a:	b973      	cbnz	r3, 8005c9a <_svfiprintf_r+0x36>
 8005c7c:	2140      	movs	r1, #64	@ 0x40
 8005c7e:	f7ff ff09 	bl	8005a94 <_malloc_r>
 8005c82:	6028      	str	r0, [r5, #0]
 8005c84:	6128      	str	r0, [r5, #16]
 8005c86:	b930      	cbnz	r0, 8005c96 <_svfiprintf_r+0x32>
 8005c88:	230c      	movs	r3, #12
 8005c8a:	603b      	str	r3, [r7, #0]
 8005c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c90:	b01d      	add	sp, #116	@ 0x74
 8005c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c96:	2340      	movs	r3, #64	@ 0x40
 8005c98:	616b      	str	r3, [r5, #20]
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c9e:	2320      	movs	r3, #32
 8005ca0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005ca4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ca8:	2330      	movs	r3, #48	@ 0x30
 8005caa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005e48 <_svfiprintf_r+0x1e4>
 8005cae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005cb2:	f04f 0901 	mov.w	r9, #1
 8005cb6:	4623      	mov	r3, r4
 8005cb8:	469a      	mov	sl, r3
 8005cba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cbe:	b10a      	cbz	r2, 8005cc4 <_svfiprintf_r+0x60>
 8005cc0:	2a25      	cmp	r2, #37	@ 0x25
 8005cc2:	d1f9      	bne.n	8005cb8 <_svfiprintf_r+0x54>
 8005cc4:	ebba 0b04 	subs.w	fp, sl, r4
 8005cc8:	d00b      	beq.n	8005ce2 <_svfiprintf_r+0x7e>
 8005cca:	465b      	mov	r3, fp
 8005ccc:	4622      	mov	r2, r4
 8005cce:	4629      	mov	r1, r5
 8005cd0:	4638      	mov	r0, r7
 8005cd2:	f7ff ff6b 	bl	8005bac <__ssputs_r>
 8005cd6:	3001      	adds	r0, #1
 8005cd8:	f000 80a7 	beq.w	8005e2a <_svfiprintf_r+0x1c6>
 8005cdc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005cde:	445a      	add	r2, fp
 8005ce0:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ce2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f000 809f 	beq.w	8005e2a <_svfiprintf_r+0x1c6>
 8005cec:	2300      	movs	r3, #0
 8005cee:	f04f 32ff 	mov.w	r2, #4294967295
 8005cf2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cf6:	f10a 0a01 	add.w	sl, sl, #1
 8005cfa:	9304      	str	r3, [sp, #16]
 8005cfc:	9307      	str	r3, [sp, #28]
 8005cfe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d02:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d04:	4654      	mov	r4, sl
 8005d06:	2205      	movs	r2, #5
 8005d08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d0c:	484e      	ldr	r0, [pc, #312]	@ (8005e48 <_svfiprintf_r+0x1e4>)
 8005d0e:	f7fa fa7f 	bl	8000210 <memchr>
 8005d12:	9a04      	ldr	r2, [sp, #16]
 8005d14:	b9d8      	cbnz	r0, 8005d4e <_svfiprintf_r+0xea>
 8005d16:	06d0      	lsls	r0, r2, #27
 8005d18:	bf44      	itt	mi
 8005d1a:	2320      	movmi	r3, #32
 8005d1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d20:	0711      	lsls	r1, r2, #28
 8005d22:	bf44      	itt	mi
 8005d24:	232b      	movmi	r3, #43	@ 0x2b
 8005d26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d2a:	f89a 3000 	ldrb.w	r3, [sl]
 8005d2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d30:	d015      	beq.n	8005d5e <_svfiprintf_r+0xfa>
 8005d32:	9a07      	ldr	r2, [sp, #28]
 8005d34:	4654      	mov	r4, sl
 8005d36:	2000      	movs	r0, #0
 8005d38:	f04f 0c0a 	mov.w	ip, #10
 8005d3c:	4621      	mov	r1, r4
 8005d3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d42:	3b30      	subs	r3, #48	@ 0x30
 8005d44:	2b09      	cmp	r3, #9
 8005d46:	d94b      	bls.n	8005de0 <_svfiprintf_r+0x17c>
 8005d48:	b1b0      	cbz	r0, 8005d78 <_svfiprintf_r+0x114>
 8005d4a:	9207      	str	r2, [sp, #28]
 8005d4c:	e014      	b.n	8005d78 <_svfiprintf_r+0x114>
 8005d4e:	eba0 0308 	sub.w	r3, r0, r8
 8005d52:	fa09 f303 	lsl.w	r3, r9, r3
 8005d56:	4313      	orrs	r3, r2
 8005d58:	9304      	str	r3, [sp, #16]
 8005d5a:	46a2      	mov	sl, r4
 8005d5c:	e7d2      	b.n	8005d04 <_svfiprintf_r+0xa0>
 8005d5e:	9b03      	ldr	r3, [sp, #12]
 8005d60:	1d19      	adds	r1, r3, #4
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	9103      	str	r1, [sp, #12]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	bfbb      	ittet	lt
 8005d6a:	425b      	neglt	r3, r3
 8005d6c:	f042 0202 	orrlt.w	r2, r2, #2
 8005d70:	9307      	strge	r3, [sp, #28]
 8005d72:	9307      	strlt	r3, [sp, #28]
 8005d74:	bfb8      	it	lt
 8005d76:	9204      	strlt	r2, [sp, #16]
 8005d78:	7823      	ldrb	r3, [r4, #0]
 8005d7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d7c:	d10a      	bne.n	8005d94 <_svfiprintf_r+0x130>
 8005d7e:	7863      	ldrb	r3, [r4, #1]
 8005d80:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d82:	d132      	bne.n	8005dea <_svfiprintf_r+0x186>
 8005d84:	9b03      	ldr	r3, [sp, #12]
 8005d86:	1d1a      	adds	r2, r3, #4
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	9203      	str	r2, [sp, #12]
 8005d8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005d90:	3402      	adds	r4, #2
 8005d92:	9305      	str	r3, [sp, #20]
 8005d94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005e58 <_svfiprintf_r+0x1f4>
 8005d98:	7821      	ldrb	r1, [r4, #0]
 8005d9a:	2203      	movs	r2, #3
 8005d9c:	4650      	mov	r0, sl
 8005d9e:	f7fa fa37 	bl	8000210 <memchr>
 8005da2:	b138      	cbz	r0, 8005db4 <_svfiprintf_r+0x150>
 8005da4:	9b04      	ldr	r3, [sp, #16]
 8005da6:	eba0 000a 	sub.w	r0, r0, sl
 8005daa:	2240      	movs	r2, #64	@ 0x40
 8005dac:	4082      	lsls	r2, r0
 8005dae:	4313      	orrs	r3, r2
 8005db0:	3401      	adds	r4, #1
 8005db2:	9304      	str	r3, [sp, #16]
 8005db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005db8:	4824      	ldr	r0, [pc, #144]	@ (8005e4c <_svfiprintf_r+0x1e8>)
 8005dba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005dbe:	2206      	movs	r2, #6
 8005dc0:	f7fa fa26 	bl	8000210 <memchr>
 8005dc4:	2800      	cmp	r0, #0
 8005dc6:	d036      	beq.n	8005e36 <_svfiprintf_r+0x1d2>
 8005dc8:	4b21      	ldr	r3, [pc, #132]	@ (8005e50 <_svfiprintf_r+0x1ec>)
 8005dca:	bb1b      	cbnz	r3, 8005e14 <_svfiprintf_r+0x1b0>
 8005dcc:	9b03      	ldr	r3, [sp, #12]
 8005dce:	3307      	adds	r3, #7
 8005dd0:	f023 0307 	bic.w	r3, r3, #7
 8005dd4:	3308      	adds	r3, #8
 8005dd6:	9303      	str	r3, [sp, #12]
 8005dd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dda:	4433      	add	r3, r6
 8005ddc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dde:	e76a      	b.n	8005cb6 <_svfiprintf_r+0x52>
 8005de0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005de4:	460c      	mov	r4, r1
 8005de6:	2001      	movs	r0, #1
 8005de8:	e7a8      	b.n	8005d3c <_svfiprintf_r+0xd8>
 8005dea:	2300      	movs	r3, #0
 8005dec:	3401      	adds	r4, #1
 8005dee:	9305      	str	r3, [sp, #20]
 8005df0:	4619      	mov	r1, r3
 8005df2:	f04f 0c0a 	mov.w	ip, #10
 8005df6:	4620      	mov	r0, r4
 8005df8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005dfc:	3a30      	subs	r2, #48	@ 0x30
 8005dfe:	2a09      	cmp	r2, #9
 8005e00:	d903      	bls.n	8005e0a <_svfiprintf_r+0x1a6>
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d0c6      	beq.n	8005d94 <_svfiprintf_r+0x130>
 8005e06:	9105      	str	r1, [sp, #20]
 8005e08:	e7c4      	b.n	8005d94 <_svfiprintf_r+0x130>
 8005e0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e0e:	4604      	mov	r4, r0
 8005e10:	2301      	movs	r3, #1
 8005e12:	e7f0      	b.n	8005df6 <_svfiprintf_r+0x192>
 8005e14:	ab03      	add	r3, sp, #12
 8005e16:	9300      	str	r3, [sp, #0]
 8005e18:	462a      	mov	r2, r5
 8005e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8005e54 <_svfiprintf_r+0x1f0>)
 8005e1c:	a904      	add	r1, sp, #16
 8005e1e:	4638      	mov	r0, r7
 8005e20:	f3af 8000 	nop.w
 8005e24:	1c42      	adds	r2, r0, #1
 8005e26:	4606      	mov	r6, r0
 8005e28:	d1d6      	bne.n	8005dd8 <_svfiprintf_r+0x174>
 8005e2a:	89ab      	ldrh	r3, [r5, #12]
 8005e2c:	065b      	lsls	r3, r3, #25
 8005e2e:	f53f af2d 	bmi.w	8005c8c <_svfiprintf_r+0x28>
 8005e32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e34:	e72c      	b.n	8005c90 <_svfiprintf_r+0x2c>
 8005e36:	ab03      	add	r3, sp, #12
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	462a      	mov	r2, r5
 8005e3c:	4b05      	ldr	r3, [pc, #20]	@ (8005e54 <_svfiprintf_r+0x1f0>)
 8005e3e:	a904      	add	r1, sp, #16
 8005e40:	4638      	mov	r0, r7
 8005e42:	f000 f9bb 	bl	80061bc <_printf_i>
 8005e46:	e7ed      	b.n	8005e24 <_svfiprintf_r+0x1c0>
 8005e48:	08006ac6 	.word	0x08006ac6
 8005e4c:	08006ad0 	.word	0x08006ad0
 8005e50:	00000000 	.word	0x00000000
 8005e54:	08005bad 	.word	0x08005bad
 8005e58:	08006acc 	.word	0x08006acc

08005e5c <__sfputc_r>:
 8005e5c:	6893      	ldr	r3, [r2, #8]
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	b410      	push	{r4}
 8005e64:	6093      	str	r3, [r2, #8]
 8005e66:	da08      	bge.n	8005e7a <__sfputc_r+0x1e>
 8005e68:	6994      	ldr	r4, [r2, #24]
 8005e6a:	42a3      	cmp	r3, r4
 8005e6c:	db01      	blt.n	8005e72 <__sfputc_r+0x16>
 8005e6e:	290a      	cmp	r1, #10
 8005e70:	d103      	bne.n	8005e7a <__sfputc_r+0x1e>
 8005e72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e76:	f7ff bba2 	b.w	80055be <__swbuf_r>
 8005e7a:	6813      	ldr	r3, [r2, #0]
 8005e7c:	1c58      	adds	r0, r3, #1
 8005e7e:	6010      	str	r0, [r2, #0]
 8005e80:	7019      	strb	r1, [r3, #0]
 8005e82:	4608      	mov	r0, r1
 8005e84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <__sfputs_r>:
 8005e8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e8c:	4606      	mov	r6, r0
 8005e8e:	460f      	mov	r7, r1
 8005e90:	4614      	mov	r4, r2
 8005e92:	18d5      	adds	r5, r2, r3
 8005e94:	42ac      	cmp	r4, r5
 8005e96:	d101      	bne.n	8005e9c <__sfputs_r+0x12>
 8005e98:	2000      	movs	r0, #0
 8005e9a:	e007      	b.n	8005eac <__sfputs_r+0x22>
 8005e9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ea0:	463a      	mov	r2, r7
 8005ea2:	4630      	mov	r0, r6
 8005ea4:	f7ff ffda 	bl	8005e5c <__sfputc_r>
 8005ea8:	1c43      	adds	r3, r0, #1
 8005eaa:	d1f3      	bne.n	8005e94 <__sfputs_r+0xa>
 8005eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005eb0 <_vfiprintf_r>:
 8005eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eb4:	460d      	mov	r5, r1
 8005eb6:	b09d      	sub	sp, #116	@ 0x74
 8005eb8:	4614      	mov	r4, r2
 8005eba:	4698      	mov	r8, r3
 8005ebc:	4606      	mov	r6, r0
 8005ebe:	b118      	cbz	r0, 8005ec8 <_vfiprintf_r+0x18>
 8005ec0:	6a03      	ldr	r3, [r0, #32]
 8005ec2:	b90b      	cbnz	r3, 8005ec8 <_vfiprintf_r+0x18>
 8005ec4:	f7ff fa72 	bl	80053ac <__sinit>
 8005ec8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005eca:	07d9      	lsls	r1, r3, #31
 8005ecc:	d405      	bmi.n	8005eda <_vfiprintf_r+0x2a>
 8005ece:	89ab      	ldrh	r3, [r5, #12]
 8005ed0:	059a      	lsls	r2, r3, #22
 8005ed2:	d402      	bmi.n	8005eda <_vfiprintf_r+0x2a>
 8005ed4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005ed6:	f7ff fd32 	bl	800593e <__retarget_lock_acquire_recursive>
 8005eda:	89ab      	ldrh	r3, [r5, #12]
 8005edc:	071b      	lsls	r3, r3, #28
 8005ede:	d501      	bpl.n	8005ee4 <_vfiprintf_r+0x34>
 8005ee0:	692b      	ldr	r3, [r5, #16]
 8005ee2:	b99b      	cbnz	r3, 8005f0c <_vfiprintf_r+0x5c>
 8005ee4:	4629      	mov	r1, r5
 8005ee6:	4630      	mov	r0, r6
 8005ee8:	f7ff fba8 	bl	800563c <__swsetup_r>
 8005eec:	b170      	cbz	r0, 8005f0c <_vfiprintf_r+0x5c>
 8005eee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ef0:	07dc      	lsls	r4, r3, #31
 8005ef2:	d504      	bpl.n	8005efe <_vfiprintf_r+0x4e>
 8005ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef8:	b01d      	add	sp, #116	@ 0x74
 8005efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005efe:	89ab      	ldrh	r3, [r5, #12]
 8005f00:	0598      	lsls	r0, r3, #22
 8005f02:	d4f7      	bmi.n	8005ef4 <_vfiprintf_r+0x44>
 8005f04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005f06:	f7ff fd1b 	bl	8005940 <__retarget_lock_release_recursive>
 8005f0a:	e7f3      	b.n	8005ef4 <_vfiprintf_r+0x44>
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f10:	2320      	movs	r3, #32
 8005f12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005f16:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f1a:	2330      	movs	r3, #48	@ 0x30
 8005f1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80060cc <_vfiprintf_r+0x21c>
 8005f20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005f24:	f04f 0901 	mov.w	r9, #1
 8005f28:	4623      	mov	r3, r4
 8005f2a:	469a      	mov	sl, r3
 8005f2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f30:	b10a      	cbz	r2, 8005f36 <_vfiprintf_r+0x86>
 8005f32:	2a25      	cmp	r2, #37	@ 0x25
 8005f34:	d1f9      	bne.n	8005f2a <_vfiprintf_r+0x7a>
 8005f36:	ebba 0b04 	subs.w	fp, sl, r4
 8005f3a:	d00b      	beq.n	8005f54 <_vfiprintf_r+0xa4>
 8005f3c:	465b      	mov	r3, fp
 8005f3e:	4622      	mov	r2, r4
 8005f40:	4629      	mov	r1, r5
 8005f42:	4630      	mov	r0, r6
 8005f44:	f7ff ffa1 	bl	8005e8a <__sfputs_r>
 8005f48:	3001      	adds	r0, #1
 8005f4a:	f000 80a7 	beq.w	800609c <_vfiprintf_r+0x1ec>
 8005f4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f50:	445a      	add	r2, fp
 8005f52:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f54:	f89a 3000 	ldrb.w	r3, [sl]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f000 809f 	beq.w	800609c <_vfiprintf_r+0x1ec>
 8005f5e:	2300      	movs	r3, #0
 8005f60:	f04f 32ff 	mov.w	r2, #4294967295
 8005f64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f68:	f10a 0a01 	add.w	sl, sl, #1
 8005f6c:	9304      	str	r3, [sp, #16]
 8005f6e:	9307      	str	r3, [sp, #28]
 8005f70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005f74:	931a      	str	r3, [sp, #104]	@ 0x68
 8005f76:	4654      	mov	r4, sl
 8005f78:	2205      	movs	r2, #5
 8005f7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f7e:	4853      	ldr	r0, [pc, #332]	@ (80060cc <_vfiprintf_r+0x21c>)
 8005f80:	f7fa f946 	bl	8000210 <memchr>
 8005f84:	9a04      	ldr	r2, [sp, #16]
 8005f86:	b9d8      	cbnz	r0, 8005fc0 <_vfiprintf_r+0x110>
 8005f88:	06d1      	lsls	r1, r2, #27
 8005f8a:	bf44      	itt	mi
 8005f8c:	2320      	movmi	r3, #32
 8005f8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f92:	0713      	lsls	r3, r2, #28
 8005f94:	bf44      	itt	mi
 8005f96:	232b      	movmi	r3, #43	@ 0x2b
 8005f98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f9c:	f89a 3000 	ldrb.w	r3, [sl]
 8005fa0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fa2:	d015      	beq.n	8005fd0 <_vfiprintf_r+0x120>
 8005fa4:	9a07      	ldr	r2, [sp, #28]
 8005fa6:	4654      	mov	r4, sl
 8005fa8:	2000      	movs	r0, #0
 8005faa:	f04f 0c0a 	mov.w	ip, #10
 8005fae:	4621      	mov	r1, r4
 8005fb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fb4:	3b30      	subs	r3, #48	@ 0x30
 8005fb6:	2b09      	cmp	r3, #9
 8005fb8:	d94b      	bls.n	8006052 <_vfiprintf_r+0x1a2>
 8005fba:	b1b0      	cbz	r0, 8005fea <_vfiprintf_r+0x13a>
 8005fbc:	9207      	str	r2, [sp, #28]
 8005fbe:	e014      	b.n	8005fea <_vfiprintf_r+0x13a>
 8005fc0:	eba0 0308 	sub.w	r3, r0, r8
 8005fc4:	fa09 f303 	lsl.w	r3, r9, r3
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	9304      	str	r3, [sp, #16]
 8005fcc:	46a2      	mov	sl, r4
 8005fce:	e7d2      	b.n	8005f76 <_vfiprintf_r+0xc6>
 8005fd0:	9b03      	ldr	r3, [sp, #12]
 8005fd2:	1d19      	adds	r1, r3, #4
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	9103      	str	r1, [sp, #12]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	bfbb      	ittet	lt
 8005fdc:	425b      	neglt	r3, r3
 8005fde:	f042 0202 	orrlt.w	r2, r2, #2
 8005fe2:	9307      	strge	r3, [sp, #28]
 8005fe4:	9307      	strlt	r3, [sp, #28]
 8005fe6:	bfb8      	it	lt
 8005fe8:	9204      	strlt	r2, [sp, #16]
 8005fea:	7823      	ldrb	r3, [r4, #0]
 8005fec:	2b2e      	cmp	r3, #46	@ 0x2e
 8005fee:	d10a      	bne.n	8006006 <_vfiprintf_r+0x156>
 8005ff0:	7863      	ldrb	r3, [r4, #1]
 8005ff2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ff4:	d132      	bne.n	800605c <_vfiprintf_r+0x1ac>
 8005ff6:	9b03      	ldr	r3, [sp, #12]
 8005ff8:	1d1a      	adds	r2, r3, #4
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	9203      	str	r2, [sp, #12]
 8005ffe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006002:	3402      	adds	r4, #2
 8006004:	9305      	str	r3, [sp, #20]
 8006006:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80060dc <_vfiprintf_r+0x22c>
 800600a:	7821      	ldrb	r1, [r4, #0]
 800600c:	2203      	movs	r2, #3
 800600e:	4650      	mov	r0, sl
 8006010:	f7fa f8fe 	bl	8000210 <memchr>
 8006014:	b138      	cbz	r0, 8006026 <_vfiprintf_r+0x176>
 8006016:	9b04      	ldr	r3, [sp, #16]
 8006018:	eba0 000a 	sub.w	r0, r0, sl
 800601c:	2240      	movs	r2, #64	@ 0x40
 800601e:	4082      	lsls	r2, r0
 8006020:	4313      	orrs	r3, r2
 8006022:	3401      	adds	r4, #1
 8006024:	9304      	str	r3, [sp, #16]
 8006026:	f814 1b01 	ldrb.w	r1, [r4], #1
 800602a:	4829      	ldr	r0, [pc, #164]	@ (80060d0 <_vfiprintf_r+0x220>)
 800602c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006030:	2206      	movs	r2, #6
 8006032:	f7fa f8ed 	bl	8000210 <memchr>
 8006036:	2800      	cmp	r0, #0
 8006038:	d03f      	beq.n	80060ba <_vfiprintf_r+0x20a>
 800603a:	4b26      	ldr	r3, [pc, #152]	@ (80060d4 <_vfiprintf_r+0x224>)
 800603c:	bb1b      	cbnz	r3, 8006086 <_vfiprintf_r+0x1d6>
 800603e:	9b03      	ldr	r3, [sp, #12]
 8006040:	3307      	adds	r3, #7
 8006042:	f023 0307 	bic.w	r3, r3, #7
 8006046:	3308      	adds	r3, #8
 8006048:	9303      	str	r3, [sp, #12]
 800604a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800604c:	443b      	add	r3, r7
 800604e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006050:	e76a      	b.n	8005f28 <_vfiprintf_r+0x78>
 8006052:	fb0c 3202 	mla	r2, ip, r2, r3
 8006056:	460c      	mov	r4, r1
 8006058:	2001      	movs	r0, #1
 800605a:	e7a8      	b.n	8005fae <_vfiprintf_r+0xfe>
 800605c:	2300      	movs	r3, #0
 800605e:	3401      	adds	r4, #1
 8006060:	9305      	str	r3, [sp, #20]
 8006062:	4619      	mov	r1, r3
 8006064:	f04f 0c0a 	mov.w	ip, #10
 8006068:	4620      	mov	r0, r4
 800606a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800606e:	3a30      	subs	r2, #48	@ 0x30
 8006070:	2a09      	cmp	r2, #9
 8006072:	d903      	bls.n	800607c <_vfiprintf_r+0x1cc>
 8006074:	2b00      	cmp	r3, #0
 8006076:	d0c6      	beq.n	8006006 <_vfiprintf_r+0x156>
 8006078:	9105      	str	r1, [sp, #20]
 800607a:	e7c4      	b.n	8006006 <_vfiprintf_r+0x156>
 800607c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006080:	4604      	mov	r4, r0
 8006082:	2301      	movs	r3, #1
 8006084:	e7f0      	b.n	8006068 <_vfiprintf_r+0x1b8>
 8006086:	ab03      	add	r3, sp, #12
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	462a      	mov	r2, r5
 800608c:	4b12      	ldr	r3, [pc, #72]	@ (80060d8 <_vfiprintf_r+0x228>)
 800608e:	a904      	add	r1, sp, #16
 8006090:	4630      	mov	r0, r6
 8006092:	f3af 8000 	nop.w
 8006096:	4607      	mov	r7, r0
 8006098:	1c78      	adds	r0, r7, #1
 800609a:	d1d6      	bne.n	800604a <_vfiprintf_r+0x19a>
 800609c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800609e:	07d9      	lsls	r1, r3, #31
 80060a0:	d405      	bmi.n	80060ae <_vfiprintf_r+0x1fe>
 80060a2:	89ab      	ldrh	r3, [r5, #12]
 80060a4:	059a      	lsls	r2, r3, #22
 80060a6:	d402      	bmi.n	80060ae <_vfiprintf_r+0x1fe>
 80060a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060aa:	f7ff fc49 	bl	8005940 <__retarget_lock_release_recursive>
 80060ae:	89ab      	ldrh	r3, [r5, #12]
 80060b0:	065b      	lsls	r3, r3, #25
 80060b2:	f53f af1f 	bmi.w	8005ef4 <_vfiprintf_r+0x44>
 80060b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80060b8:	e71e      	b.n	8005ef8 <_vfiprintf_r+0x48>
 80060ba:	ab03      	add	r3, sp, #12
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	462a      	mov	r2, r5
 80060c0:	4b05      	ldr	r3, [pc, #20]	@ (80060d8 <_vfiprintf_r+0x228>)
 80060c2:	a904      	add	r1, sp, #16
 80060c4:	4630      	mov	r0, r6
 80060c6:	f000 f879 	bl	80061bc <_printf_i>
 80060ca:	e7e4      	b.n	8006096 <_vfiprintf_r+0x1e6>
 80060cc:	08006ac6 	.word	0x08006ac6
 80060d0:	08006ad0 	.word	0x08006ad0
 80060d4:	00000000 	.word	0x00000000
 80060d8:	08005e8b 	.word	0x08005e8b
 80060dc:	08006acc 	.word	0x08006acc

080060e0 <_printf_common>:
 80060e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060e4:	4616      	mov	r6, r2
 80060e6:	4698      	mov	r8, r3
 80060e8:	688a      	ldr	r2, [r1, #8]
 80060ea:	690b      	ldr	r3, [r1, #16]
 80060ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80060f0:	4293      	cmp	r3, r2
 80060f2:	bfb8      	it	lt
 80060f4:	4613      	movlt	r3, r2
 80060f6:	6033      	str	r3, [r6, #0]
 80060f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80060fc:	4607      	mov	r7, r0
 80060fe:	460c      	mov	r4, r1
 8006100:	b10a      	cbz	r2, 8006106 <_printf_common+0x26>
 8006102:	3301      	adds	r3, #1
 8006104:	6033      	str	r3, [r6, #0]
 8006106:	6823      	ldr	r3, [r4, #0]
 8006108:	0699      	lsls	r1, r3, #26
 800610a:	bf42      	ittt	mi
 800610c:	6833      	ldrmi	r3, [r6, #0]
 800610e:	3302      	addmi	r3, #2
 8006110:	6033      	strmi	r3, [r6, #0]
 8006112:	6825      	ldr	r5, [r4, #0]
 8006114:	f015 0506 	ands.w	r5, r5, #6
 8006118:	d106      	bne.n	8006128 <_printf_common+0x48>
 800611a:	f104 0a19 	add.w	sl, r4, #25
 800611e:	68e3      	ldr	r3, [r4, #12]
 8006120:	6832      	ldr	r2, [r6, #0]
 8006122:	1a9b      	subs	r3, r3, r2
 8006124:	42ab      	cmp	r3, r5
 8006126:	dc26      	bgt.n	8006176 <_printf_common+0x96>
 8006128:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800612c:	6822      	ldr	r2, [r4, #0]
 800612e:	3b00      	subs	r3, #0
 8006130:	bf18      	it	ne
 8006132:	2301      	movne	r3, #1
 8006134:	0692      	lsls	r2, r2, #26
 8006136:	d42b      	bmi.n	8006190 <_printf_common+0xb0>
 8006138:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800613c:	4641      	mov	r1, r8
 800613e:	4638      	mov	r0, r7
 8006140:	47c8      	blx	r9
 8006142:	3001      	adds	r0, #1
 8006144:	d01e      	beq.n	8006184 <_printf_common+0xa4>
 8006146:	6823      	ldr	r3, [r4, #0]
 8006148:	6922      	ldr	r2, [r4, #16]
 800614a:	f003 0306 	and.w	r3, r3, #6
 800614e:	2b04      	cmp	r3, #4
 8006150:	bf02      	ittt	eq
 8006152:	68e5      	ldreq	r5, [r4, #12]
 8006154:	6833      	ldreq	r3, [r6, #0]
 8006156:	1aed      	subeq	r5, r5, r3
 8006158:	68a3      	ldr	r3, [r4, #8]
 800615a:	bf0c      	ite	eq
 800615c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006160:	2500      	movne	r5, #0
 8006162:	4293      	cmp	r3, r2
 8006164:	bfc4      	itt	gt
 8006166:	1a9b      	subgt	r3, r3, r2
 8006168:	18ed      	addgt	r5, r5, r3
 800616a:	2600      	movs	r6, #0
 800616c:	341a      	adds	r4, #26
 800616e:	42b5      	cmp	r5, r6
 8006170:	d11a      	bne.n	80061a8 <_printf_common+0xc8>
 8006172:	2000      	movs	r0, #0
 8006174:	e008      	b.n	8006188 <_printf_common+0xa8>
 8006176:	2301      	movs	r3, #1
 8006178:	4652      	mov	r2, sl
 800617a:	4641      	mov	r1, r8
 800617c:	4638      	mov	r0, r7
 800617e:	47c8      	blx	r9
 8006180:	3001      	adds	r0, #1
 8006182:	d103      	bne.n	800618c <_printf_common+0xac>
 8006184:	f04f 30ff 	mov.w	r0, #4294967295
 8006188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800618c:	3501      	adds	r5, #1
 800618e:	e7c6      	b.n	800611e <_printf_common+0x3e>
 8006190:	18e1      	adds	r1, r4, r3
 8006192:	1c5a      	adds	r2, r3, #1
 8006194:	2030      	movs	r0, #48	@ 0x30
 8006196:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800619a:	4422      	add	r2, r4
 800619c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80061a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80061a4:	3302      	adds	r3, #2
 80061a6:	e7c7      	b.n	8006138 <_printf_common+0x58>
 80061a8:	2301      	movs	r3, #1
 80061aa:	4622      	mov	r2, r4
 80061ac:	4641      	mov	r1, r8
 80061ae:	4638      	mov	r0, r7
 80061b0:	47c8      	blx	r9
 80061b2:	3001      	adds	r0, #1
 80061b4:	d0e6      	beq.n	8006184 <_printf_common+0xa4>
 80061b6:	3601      	adds	r6, #1
 80061b8:	e7d9      	b.n	800616e <_printf_common+0x8e>
	...

080061bc <_printf_i>:
 80061bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061c0:	7e0f      	ldrb	r7, [r1, #24]
 80061c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80061c4:	2f78      	cmp	r7, #120	@ 0x78
 80061c6:	4691      	mov	r9, r2
 80061c8:	4680      	mov	r8, r0
 80061ca:	460c      	mov	r4, r1
 80061cc:	469a      	mov	sl, r3
 80061ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80061d2:	d807      	bhi.n	80061e4 <_printf_i+0x28>
 80061d4:	2f62      	cmp	r7, #98	@ 0x62
 80061d6:	d80a      	bhi.n	80061ee <_printf_i+0x32>
 80061d8:	2f00      	cmp	r7, #0
 80061da:	f000 80d2 	beq.w	8006382 <_printf_i+0x1c6>
 80061de:	2f58      	cmp	r7, #88	@ 0x58
 80061e0:	f000 80b9 	beq.w	8006356 <_printf_i+0x19a>
 80061e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80061ec:	e03a      	b.n	8006264 <_printf_i+0xa8>
 80061ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80061f2:	2b15      	cmp	r3, #21
 80061f4:	d8f6      	bhi.n	80061e4 <_printf_i+0x28>
 80061f6:	a101      	add	r1, pc, #4	@ (adr r1, 80061fc <_printf_i+0x40>)
 80061f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061fc:	08006255 	.word	0x08006255
 8006200:	08006269 	.word	0x08006269
 8006204:	080061e5 	.word	0x080061e5
 8006208:	080061e5 	.word	0x080061e5
 800620c:	080061e5 	.word	0x080061e5
 8006210:	080061e5 	.word	0x080061e5
 8006214:	08006269 	.word	0x08006269
 8006218:	080061e5 	.word	0x080061e5
 800621c:	080061e5 	.word	0x080061e5
 8006220:	080061e5 	.word	0x080061e5
 8006224:	080061e5 	.word	0x080061e5
 8006228:	08006369 	.word	0x08006369
 800622c:	08006293 	.word	0x08006293
 8006230:	08006323 	.word	0x08006323
 8006234:	080061e5 	.word	0x080061e5
 8006238:	080061e5 	.word	0x080061e5
 800623c:	0800638b 	.word	0x0800638b
 8006240:	080061e5 	.word	0x080061e5
 8006244:	08006293 	.word	0x08006293
 8006248:	080061e5 	.word	0x080061e5
 800624c:	080061e5 	.word	0x080061e5
 8006250:	0800632b 	.word	0x0800632b
 8006254:	6833      	ldr	r3, [r6, #0]
 8006256:	1d1a      	adds	r2, r3, #4
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	6032      	str	r2, [r6, #0]
 800625c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006260:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006264:	2301      	movs	r3, #1
 8006266:	e09d      	b.n	80063a4 <_printf_i+0x1e8>
 8006268:	6833      	ldr	r3, [r6, #0]
 800626a:	6820      	ldr	r0, [r4, #0]
 800626c:	1d19      	adds	r1, r3, #4
 800626e:	6031      	str	r1, [r6, #0]
 8006270:	0606      	lsls	r6, r0, #24
 8006272:	d501      	bpl.n	8006278 <_printf_i+0xbc>
 8006274:	681d      	ldr	r5, [r3, #0]
 8006276:	e003      	b.n	8006280 <_printf_i+0xc4>
 8006278:	0645      	lsls	r5, r0, #25
 800627a:	d5fb      	bpl.n	8006274 <_printf_i+0xb8>
 800627c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006280:	2d00      	cmp	r5, #0
 8006282:	da03      	bge.n	800628c <_printf_i+0xd0>
 8006284:	232d      	movs	r3, #45	@ 0x2d
 8006286:	426d      	negs	r5, r5
 8006288:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800628c:	4859      	ldr	r0, [pc, #356]	@ (80063f4 <_printf_i+0x238>)
 800628e:	230a      	movs	r3, #10
 8006290:	e011      	b.n	80062b6 <_printf_i+0xfa>
 8006292:	6821      	ldr	r1, [r4, #0]
 8006294:	6833      	ldr	r3, [r6, #0]
 8006296:	0608      	lsls	r0, r1, #24
 8006298:	f853 5b04 	ldr.w	r5, [r3], #4
 800629c:	d402      	bmi.n	80062a4 <_printf_i+0xe8>
 800629e:	0649      	lsls	r1, r1, #25
 80062a0:	bf48      	it	mi
 80062a2:	b2ad      	uxthmi	r5, r5
 80062a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80062a6:	4853      	ldr	r0, [pc, #332]	@ (80063f4 <_printf_i+0x238>)
 80062a8:	6033      	str	r3, [r6, #0]
 80062aa:	bf14      	ite	ne
 80062ac:	230a      	movne	r3, #10
 80062ae:	2308      	moveq	r3, #8
 80062b0:	2100      	movs	r1, #0
 80062b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80062b6:	6866      	ldr	r6, [r4, #4]
 80062b8:	60a6      	str	r6, [r4, #8]
 80062ba:	2e00      	cmp	r6, #0
 80062bc:	bfa2      	ittt	ge
 80062be:	6821      	ldrge	r1, [r4, #0]
 80062c0:	f021 0104 	bicge.w	r1, r1, #4
 80062c4:	6021      	strge	r1, [r4, #0]
 80062c6:	b90d      	cbnz	r5, 80062cc <_printf_i+0x110>
 80062c8:	2e00      	cmp	r6, #0
 80062ca:	d04b      	beq.n	8006364 <_printf_i+0x1a8>
 80062cc:	4616      	mov	r6, r2
 80062ce:	fbb5 f1f3 	udiv	r1, r5, r3
 80062d2:	fb03 5711 	mls	r7, r3, r1, r5
 80062d6:	5dc7      	ldrb	r7, [r0, r7]
 80062d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80062dc:	462f      	mov	r7, r5
 80062de:	42bb      	cmp	r3, r7
 80062e0:	460d      	mov	r5, r1
 80062e2:	d9f4      	bls.n	80062ce <_printf_i+0x112>
 80062e4:	2b08      	cmp	r3, #8
 80062e6:	d10b      	bne.n	8006300 <_printf_i+0x144>
 80062e8:	6823      	ldr	r3, [r4, #0]
 80062ea:	07df      	lsls	r7, r3, #31
 80062ec:	d508      	bpl.n	8006300 <_printf_i+0x144>
 80062ee:	6923      	ldr	r3, [r4, #16]
 80062f0:	6861      	ldr	r1, [r4, #4]
 80062f2:	4299      	cmp	r1, r3
 80062f4:	bfde      	ittt	le
 80062f6:	2330      	movle	r3, #48	@ 0x30
 80062f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80062fc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006300:	1b92      	subs	r2, r2, r6
 8006302:	6122      	str	r2, [r4, #16]
 8006304:	f8cd a000 	str.w	sl, [sp]
 8006308:	464b      	mov	r3, r9
 800630a:	aa03      	add	r2, sp, #12
 800630c:	4621      	mov	r1, r4
 800630e:	4640      	mov	r0, r8
 8006310:	f7ff fee6 	bl	80060e0 <_printf_common>
 8006314:	3001      	adds	r0, #1
 8006316:	d14a      	bne.n	80063ae <_printf_i+0x1f2>
 8006318:	f04f 30ff 	mov.w	r0, #4294967295
 800631c:	b004      	add	sp, #16
 800631e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006322:	6823      	ldr	r3, [r4, #0]
 8006324:	f043 0320 	orr.w	r3, r3, #32
 8006328:	6023      	str	r3, [r4, #0]
 800632a:	4833      	ldr	r0, [pc, #204]	@ (80063f8 <_printf_i+0x23c>)
 800632c:	2778      	movs	r7, #120	@ 0x78
 800632e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006332:	6823      	ldr	r3, [r4, #0]
 8006334:	6831      	ldr	r1, [r6, #0]
 8006336:	061f      	lsls	r7, r3, #24
 8006338:	f851 5b04 	ldr.w	r5, [r1], #4
 800633c:	d402      	bmi.n	8006344 <_printf_i+0x188>
 800633e:	065f      	lsls	r7, r3, #25
 8006340:	bf48      	it	mi
 8006342:	b2ad      	uxthmi	r5, r5
 8006344:	6031      	str	r1, [r6, #0]
 8006346:	07d9      	lsls	r1, r3, #31
 8006348:	bf44      	itt	mi
 800634a:	f043 0320 	orrmi.w	r3, r3, #32
 800634e:	6023      	strmi	r3, [r4, #0]
 8006350:	b11d      	cbz	r5, 800635a <_printf_i+0x19e>
 8006352:	2310      	movs	r3, #16
 8006354:	e7ac      	b.n	80062b0 <_printf_i+0xf4>
 8006356:	4827      	ldr	r0, [pc, #156]	@ (80063f4 <_printf_i+0x238>)
 8006358:	e7e9      	b.n	800632e <_printf_i+0x172>
 800635a:	6823      	ldr	r3, [r4, #0]
 800635c:	f023 0320 	bic.w	r3, r3, #32
 8006360:	6023      	str	r3, [r4, #0]
 8006362:	e7f6      	b.n	8006352 <_printf_i+0x196>
 8006364:	4616      	mov	r6, r2
 8006366:	e7bd      	b.n	80062e4 <_printf_i+0x128>
 8006368:	6833      	ldr	r3, [r6, #0]
 800636a:	6825      	ldr	r5, [r4, #0]
 800636c:	6961      	ldr	r1, [r4, #20]
 800636e:	1d18      	adds	r0, r3, #4
 8006370:	6030      	str	r0, [r6, #0]
 8006372:	062e      	lsls	r6, r5, #24
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	d501      	bpl.n	800637c <_printf_i+0x1c0>
 8006378:	6019      	str	r1, [r3, #0]
 800637a:	e002      	b.n	8006382 <_printf_i+0x1c6>
 800637c:	0668      	lsls	r0, r5, #25
 800637e:	d5fb      	bpl.n	8006378 <_printf_i+0x1bc>
 8006380:	8019      	strh	r1, [r3, #0]
 8006382:	2300      	movs	r3, #0
 8006384:	6123      	str	r3, [r4, #16]
 8006386:	4616      	mov	r6, r2
 8006388:	e7bc      	b.n	8006304 <_printf_i+0x148>
 800638a:	6833      	ldr	r3, [r6, #0]
 800638c:	1d1a      	adds	r2, r3, #4
 800638e:	6032      	str	r2, [r6, #0]
 8006390:	681e      	ldr	r6, [r3, #0]
 8006392:	6862      	ldr	r2, [r4, #4]
 8006394:	2100      	movs	r1, #0
 8006396:	4630      	mov	r0, r6
 8006398:	f7f9 ff3a 	bl	8000210 <memchr>
 800639c:	b108      	cbz	r0, 80063a2 <_printf_i+0x1e6>
 800639e:	1b80      	subs	r0, r0, r6
 80063a0:	6060      	str	r0, [r4, #4]
 80063a2:	6863      	ldr	r3, [r4, #4]
 80063a4:	6123      	str	r3, [r4, #16]
 80063a6:	2300      	movs	r3, #0
 80063a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063ac:	e7aa      	b.n	8006304 <_printf_i+0x148>
 80063ae:	6923      	ldr	r3, [r4, #16]
 80063b0:	4632      	mov	r2, r6
 80063b2:	4649      	mov	r1, r9
 80063b4:	4640      	mov	r0, r8
 80063b6:	47d0      	blx	sl
 80063b8:	3001      	adds	r0, #1
 80063ba:	d0ad      	beq.n	8006318 <_printf_i+0x15c>
 80063bc:	6823      	ldr	r3, [r4, #0]
 80063be:	079b      	lsls	r3, r3, #30
 80063c0:	d413      	bmi.n	80063ea <_printf_i+0x22e>
 80063c2:	68e0      	ldr	r0, [r4, #12]
 80063c4:	9b03      	ldr	r3, [sp, #12]
 80063c6:	4298      	cmp	r0, r3
 80063c8:	bfb8      	it	lt
 80063ca:	4618      	movlt	r0, r3
 80063cc:	e7a6      	b.n	800631c <_printf_i+0x160>
 80063ce:	2301      	movs	r3, #1
 80063d0:	4632      	mov	r2, r6
 80063d2:	4649      	mov	r1, r9
 80063d4:	4640      	mov	r0, r8
 80063d6:	47d0      	blx	sl
 80063d8:	3001      	adds	r0, #1
 80063da:	d09d      	beq.n	8006318 <_printf_i+0x15c>
 80063dc:	3501      	adds	r5, #1
 80063de:	68e3      	ldr	r3, [r4, #12]
 80063e0:	9903      	ldr	r1, [sp, #12]
 80063e2:	1a5b      	subs	r3, r3, r1
 80063e4:	42ab      	cmp	r3, r5
 80063e6:	dcf2      	bgt.n	80063ce <_printf_i+0x212>
 80063e8:	e7eb      	b.n	80063c2 <_printf_i+0x206>
 80063ea:	2500      	movs	r5, #0
 80063ec:	f104 0619 	add.w	r6, r4, #25
 80063f0:	e7f5      	b.n	80063de <_printf_i+0x222>
 80063f2:	bf00      	nop
 80063f4:	08006ad7 	.word	0x08006ad7
 80063f8:	08006ae8 	.word	0x08006ae8

080063fc <__sflush_r>:
 80063fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006404:	0716      	lsls	r6, r2, #28
 8006406:	4605      	mov	r5, r0
 8006408:	460c      	mov	r4, r1
 800640a:	d454      	bmi.n	80064b6 <__sflush_r+0xba>
 800640c:	684b      	ldr	r3, [r1, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	dc02      	bgt.n	8006418 <__sflush_r+0x1c>
 8006412:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006414:	2b00      	cmp	r3, #0
 8006416:	dd48      	ble.n	80064aa <__sflush_r+0xae>
 8006418:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800641a:	2e00      	cmp	r6, #0
 800641c:	d045      	beq.n	80064aa <__sflush_r+0xae>
 800641e:	2300      	movs	r3, #0
 8006420:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006424:	682f      	ldr	r7, [r5, #0]
 8006426:	6a21      	ldr	r1, [r4, #32]
 8006428:	602b      	str	r3, [r5, #0]
 800642a:	d030      	beq.n	800648e <__sflush_r+0x92>
 800642c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800642e:	89a3      	ldrh	r3, [r4, #12]
 8006430:	0759      	lsls	r1, r3, #29
 8006432:	d505      	bpl.n	8006440 <__sflush_r+0x44>
 8006434:	6863      	ldr	r3, [r4, #4]
 8006436:	1ad2      	subs	r2, r2, r3
 8006438:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800643a:	b10b      	cbz	r3, 8006440 <__sflush_r+0x44>
 800643c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800643e:	1ad2      	subs	r2, r2, r3
 8006440:	2300      	movs	r3, #0
 8006442:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006444:	6a21      	ldr	r1, [r4, #32]
 8006446:	4628      	mov	r0, r5
 8006448:	47b0      	blx	r6
 800644a:	1c43      	adds	r3, r0, #1
 800644c:	89a3      	ldrh	r3, [r4, #12]
 800644e:	d106      	bne.n	800645e <__sflush_r+0x62>
 8006450:	6829      	ldr	r1, [r5, #0]
 8006452:	291d      	cmp	r1, #29
 8006454:	d82b      	bhi.n	80064ae <__sflush_r+0xb2>
 8006456:	4a2a      	ldr	r2, [pc, #168]	@ (8006500 <__sflush_r+0x104>)
 8006458:	410a      	asrs	r2, r1
 800645a:	07d6      	lsls	r6, r2, #31
 800645c:	d427      	bmi.n	80064ae <__sflush_r+0xb2>
 800645e:	2200      	movs	r2, #0
 8006460:	6062      	str	r2, [r4, #4]
 8006462:	04d9      	lsls	r1, r3, #19
 8006464:	6922      	ldr	r2, [r4, #16]
 8006466:	6022      	str	r2, [r4, #0]
 8006468:	d504      	bpl.n	8006474 <__sflush_r+0x78>
 800646a:	1c42      	adds	r2, r0, #1
 800646c:	d101      	bne.n	8006472 <__sflush_r+0x76>
 800646e:	682b      	ldr	r3, [r5, #0]
 8006470:	b903      	cbnz	r3, 8006474 <__sflush_r+0x78>
 8006472:	6560      	str	r0, [r4, #84]	@ 0x54
 8006474:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006476:	602f      	str	r7, [r5, #0]
 8006478:	b1b9      	cbz	r1, 80064aa <__sflush_r+0xae>
 800647a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800647e:	4299      	cmp	r1, r3
 8006480:	d002      	beq.n	8006488 <__sflush_r+0x8c>
 8006482:	4628      	mov	r0, r5
 8006484:	f7ff fa92 	bl	80059ac <_free_r>
 8006488:	2300      	movs	r3, #0
 800648a:	6363      	str	r3, [r4, #52]	@ 0x34
 800648c:	e00d      	b.n	80064aa <__sflush_r+0xae>
 800648e:	2301      	movs	r3, #1
 8006490:	4628      	mov	r0, r5
 8006492:	47b0      	blx	r6
 8006494:	4602      	mov	r2, r0
 8006496:	1c50      	adds	r0, r2, #1
 8006498:	d1c9      	bne.n	800642e <__sflush_r+0x32>
 800649a:	682b      	ldr	r3, [r5, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d0c6      	beq.n	800642e <__sflush_r+0x32>
 80064a0:	2b1d      	cmp	r3, #29
 80064a2:	d001      	beq.n	80064a8 <__sflush_r+0xac>
 80064a4:	2b16      	cmp	r3, #22
 80064a6:	d11e      	bne.n	80064e6 <__sflush_r+0xea>
 80064a8:	602f      	str	r7, [r5, #0]
 80064aa:	2000      	movs	r0, #0
 80064ac:	e022      	b.n	80064f4 <__sflush_r+0xf8>
 80064ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064b2:	b21b      	sxth	r3, r3
 80064b4:	e01b      	b.n	80064ee <__sflush_r+0xf2>
 80064b6:	690f      	ldr	r7, [r1, #16]
 80064b8:	2f00      	cmp	r7, #0
 80064ba:	d0f6      	beq.n	80064aa <__sflush_r+0xae>
 80064bc:	0793      	lsls	r3, r2, #30
 80064be:	680e      	ldr	r6, [r1, #0]
 80064c0:	bf08      	it	eq
 80064c2:	694b      	ldreq	r3, [r1, #20]
 80064c4:	600f      	str	r7, [r1, #0]
 80064c6:	bf18      	it	ne
 80064c8:	2300      	movne	r3, #0
 80064ca:	eba6 0807 	sub.w	r8, r6, r7
 80064ce:	608b      	str	r3, [r1, #8]
 80064d0:	f1b8 0f00 	cmp.w	r8, #0
 80064d4:	dde9      	ble.n	80064aa <__sflush_r+0xae>
 80064d6:	6a21      	ldr	r1, [r4, #32]
 80064d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80064da:	4643      	mov	r3, r8
 80064dc:	463a      	mov	r2, r7
 80064de:	4628      	mov	r0, r5
 80064e0:	47b0      	blx	r6
 80064e2:	2800      	cmp	r0, #0
 80064e4:	dc08      	bgt.n	80064f8 <__sflush_r+0xfc>
 80064e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064ee:	81a3      	strh	r3, [r4, #12]
 80064f0:	f04f 30ff 	mov.w	r0, #4294967295
 80064f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064f8:	4407      	add	r7, r0
 80064fa:	eba8 0800 	sub.w	r8, r8, r0
 80064fe:	e7e7      	b.n	80064d0 <__sflush_r+0xd4>
 8006500:	dfbffffe 	.word	0xdfbffffe

08006504 <_fflush_r>:
 8006504:	b538      	push	{r3, r4, r5, lr}
 8006506:	690b      	ldr	r3, [r1, #16]
 8006508:	4605      	mov	r5, r0
 800650a:	460c      	mov	r4, r1
 800650c:	b913      	cbnz	r3, 8006514 <_fflush_r+0x10>
 800650e:	2500      	movs	r5, #0
 8006510:	4628      	mov	r0, r5
 8006512:	bd38      	pop	{r3, r4, r5, pc}
 8006514:	b118      	cbz	r0, 800651e <_fflush_r+0x1a>
 8006516:	6a03      	ldr	r3, [r0, #32]
 8006518:	b90b      	cbnz	r3, 800651e <_fflush_r+0x1a>
 800651a:	f7fe ff47 	bl	80053ac <__sinit>
 800651e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d0f3      	beq.n	800650e <_fflush_r+0xa>
 8006526:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006528:	07d0      	lsls	r0, r2, #31
 800652a:	d404      	bmi.n	8006536 <_fflush_r+0x32>
 800652c:	0599      	lsls	r1, r3, #22
 800652e:	d402      	bmi.n	8006536 <_fflush_r+0x32>
 8006530:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006532:	f7ff fa04 	bl	800593e <__retarget_lock_acquire_recursive>
 8006536:	4628      	mov	r0, r5
 8006538:	4621      	mov	r1, r4
 800653a:	f7ff ff5f 	bl	80063fc <__sflush_r>
 800653e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006540:	07da      	lsls	r2, r3, #31
 8006542:	4605      	mov	r5, r0
 8006544:	d4e4      	bmi.n	8006510 <_fflush_r+0xc>
 8006546:	89a3      	ldrh	r3, [r4, #12]
 8006548:	059b      	lsls	r3, r3, #22
 800654a:	d4e1      	bmi.n	8006510 <_fflush_r+0xc>
 800654c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800654e:	f7ff f9f7 	bl	8005940 <__retarget_lock_release_recursive>
 8006552:	e7dd      	b.n	8006510 <_fflush_r+0xc>

08006554 <fiprintf>:
 8006554:	b40e      	push	{r1, r2, r3}
 8006556:	b503      	push	{r0, r1, lr}
 8006558:	4601      	mov	r1, r0
 800655a:	ab03      	add	r3, sp, #12
 800655c:	4805      	ldr	r0, [pc, #20]	@ (8006574 <fiprintf+0x20>)
 800655e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006562:	6800      	ldr	r0, [r0, #0]
 8006564:	9301      	str	r3, [sp, #4]
 8006566:	f7ff fca3 	bl	8005eb0 <_vfiprintf_r>
 800656a:	b002      	add	sp, #8
 800656c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006570:	b003      	add	sp, #12
 8006572:	4770      	bx	lr
 8006574:	20000034 	.word	0x20000034

08006578 <__swhatbuf_r>:
 8006578:	b570      	push	{r4, r5, r6, lr}
 800657a:	460c      	mov	r4, r1
 800657c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006580:	2900      	cmp	r1, #0
 8006582:	b096      	sub	sp, #88	@ 0x58
 8006584:	4615      	mov	r5, r2
 8006586:	461e      	mov	r6, r3
 8006588:	da0d      	bge.n	80065a6 <__swhatbuf_r+0x2e>
 800658a:	89a3      	ldrh	r3, [r4, #12]
 800658c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006590:	f04f 0100 	mov.w	r1, #0
 8006594:	bf14      	ite	ne
 8006596:	2340      	movne	r3, #64	@ 0x40
 8006598:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800659c:	2000      	movs	r0, #0
 800659e:	6031      	str	r1, [r6, #0]
 80065a0:	602b      	str	r3, [r5, #0]
 80065a2:	b016      	add	sp, #88	@ 0x58
 80065a4:	bd70      	pop	{r4, r5, r6, pc}
 80065a6:	466a      	mov	r2, sp
 80065a8:	f000 f862 	bl	8006670 <_fstat_r>
 80065ac:	2800      	cmp	r0, #0
 80065ae:	dbec      	blt.n	800658a <__swhatbuf_r+0x12>
 80065b0:	9901      	ldr	r1, [sp, #4]
 80065b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80065b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80065ba:	4259      	negs	r1, r3
 80065bc:	4159      	adcs	r1, r3
 80065be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80065c2:	e7eb      	b.n	800659c <__swhatbuf_r+0x24>

080065c4 <__smakebuf_r>:
 80065c4:	898b      	ldrh	r3, [r1, #12]
 80065c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065c8:	079d      	lsls	r5, r3, #30
 80065ca:	4606      	mov	r6, r0
 80065cc:	460c      	mov	r4, r1
 80065ce:	d507      	bpl.n	80065e0 <__smakebuf_r+0x1c>
 80065d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80065d4:	6023      	str	r3, [r4, #0]
 80065d6:	6123      	str	r3, [r4, #16]
 80065d8:	2301      	movs	r3, #1
 80065da:	6163      	str	r3, [r4, #20]
 80065dc:	b003      	add	sp, #12
 80065de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065e0:	ab01      	add	r3, sp, #4
 80065e2:	466a      	mov	r2, sp
 80065e4:	f7ff ffc8 	bl	8006578 <__swhatbuf_r>
 80065e8:	9f00      	ldr	r7, [sp, #0]
 80065ea:	4605      	mov	r5, r0
 80065ec:	4639      	mov	r1, r7
 80065ee:	4630      	mov	r0, r6
 80065f0:	f7ff fa50 	bl	8005a94 <_malloc_r>
 80065f4:	b948      	cbnz	r0, 800660a <__smakebuf_r+0x46>
 80065f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065fa:	059a      	lsls	r2, r3, #22
 80065fc:	d4ee      	bmi.n	80065dc <__smakebuf_r+0x18>
 80065fe:	f023 0303 	bic.w	r3, r3, #3
 8006602:	f043 0302 	orr.w	r3, r3, #2
 8006606:	81a3      	strh	r3, [r4, #12]
 8006608:	e7e2      	b.n	80065d0 <__smakebuf_r+0xc>
 800660a:	89a3      	ldrh	r3, [r4, #12]
 800660c:	6020      	str	r0, [r4, #0]
 800660e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006612:	81a3      	strh	r3, [r4, #12]
 8006614:	9b01      	ldr	r3, [sp, #4]
 8006616:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800661a:	b15b      	cbz	r3, 8006634 <__smakebuf_r+0x70>
 800661c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006620:	4630      	mov	r0, r6
 8006622:	f000 f837 	bl	8006694 <_isatty_r>
 8006626:	b128      	cbz	r0, 8006634 <__smakebuf_r+0x70>
 8006628:	89a3      	ldrh	r3, [r4, #12]
 800662a:	f023 0303 	bic.w	r3, r3, #3
 800662e:	f043 0301 	orr.w	r3, r3, #1
 8006632:	81a3      	strh	r3, [r4, #12]
 8006634:	89a3      	ldrh	r3, [r4, #12]
 8006636:	431d      	orrs	r5, r3
 8006638:	81a5      	strh	r5, [r4, #12]
 800663a:	e7cf      	b.n	80065dc <__smakebuf_r+0x18>

0800663c <memmove>:
 800663c:	4288      	cmp	r0, r1
 800663e:	b510      	push	{r4, lr}
 8006640:	eb01 0402 	add.w	r4, r1, r2
 8006644:	d902      	bls.n	800664c <memmove+0x10>
 8006646:	4284      	cmp	r4, r0
 8006648:	4623      	mov	r3, r4
 800664a:	d807      	bhi.n	800665c <memmove+0x20>
 800664c:	1e43      	subs	r3, r0, #1
 800664e:	42a1      	cmp	r1, r4
 8006650:	d008      	beq.n	8006664 <memmove+0x28>
 8006652:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006656:	f803 2f01 	strb.w	r2, [r3, #1]!
 800665a:	e7f8      	b.n	800664e <memmove+0x12>
 800665c:	4402      	add	r2, r0
 800665e:	4601      	mov	r1, r0
 8006660:	428a      	cmp	r2, r1
 8006662:	d100      	bne.n	8006666 <memmove+0x2a>
 8006664:	bd10      	pop	{r4, pc}
 8006666:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800666a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800666e:	e7f7      	b.n	8006660 <memmove+0x24>

08006670 <_fstat_r>:
 8006670:	b538      	push	{r3, r4, r5, lr}
 8006672:	4d07      	ldr	r5, [pc, #28]	@ (8006690 <_fstat_r+0x20>)
 8006674:	2300      	movs	r3, #0
 8006676:	4604      	mov	r4, r0
 8006678:	4608      	mov	r0, r1
 800667a:	4611      	mov	r1, r2
 800667c:	602b      	str	r3, [r5, #0]
 800667e:	f7fa fc1b 	bl	8000eb8 <_fstat>
 8006682:	1c43      	adds	r3, r0, #1
 8006684:	d102      	bne.n	800668c <_fstat_r+0x1c>
 8006686:	682b      	ldr	r3, [r5, #0]
 8006688:	b103      	cbz	r3, 800668c <_fstat_r+0x1c>
 800668a:	6023      	str	r3, [r4, #0]
 800668c:	bd38      	pop	{r3, r4, r5, pc}
 800668e:	bf00      	nop
 8006690:	20004378 	.word	0x20004378

08006694 <_isatty_r>:
 8006694:	b538      	push	{r3, r4, r5, lr}
 8006696:	4d06      	ldr	r5, [pc, #24]	@ (80066b0 <_isatty_r+0x1c>)
 8006698:	2300      	movs	r3, #0
 800669a:	4604      	mov	r4, r0
 800669c:	4608      	mov	r0, r1
 800669e:	602b      	str	r3, [r5, #0]
 80066a0:	f7fa fc1a 	bl	8000ed8 <_isatty>
 80066a4:	1c43      	adds	r3, r0, #1
 80066a6:	d102      	bne.n	80066ae <_isatty_r+0x1a>
 80066a8:	682b      	ldr	r3, [r5, #0]
 80066aa:	b103      	cbz	r3, 80066ae <_isatty_r+0x1a>
 80066ac:	6023      	str	r3, [r4, #0]
 80066ae:	bd38      	pop	{r3, r4, r5, pc}
 80066b0:	20004378 	.word	0x20004378

080066b4 <_sbrk_r>:
 80066b4:	b538      	push	{r3, r4, r5, lr}
 80066b6:	4d06      	ldr	r5, [pc, #24]	@ (80066d0 <_sbrk_r+0x1c>)
 80066b8:	2300      	movs	r3, #0
 80066ba:	4604      	mov	r4, r0
 80066bc:	4608      	mov	r0, r1
 80066be:	602b      	str	r3, [r5, #0]
 80066c0:	f7fa fc22 	bl	8000f08 <_sbrk>
 80066c4:	1c43      	adds	r3, r0, #1
 80066c6:	d102      	bne.n	80066ce <_sbrk_r+0x1a>
 80066c8:	682b      	ldr	r3, [r5, #0]
 80066ca:	b103      	cbz	r3, 80066ce <_sbrk_r+0x1a>
 80066cc:	6023      	str	r3, [r4, #0]
 80066ce:	bd38      	pop	{r3, r4, r5, pc}
 80066d0:	20004378 	.word	0x20004378

080066d4 <abort>:
 80066d4:	b508      	push	{r3, lr}
 80066d6:	2006      	movs	r0, #6
 80066d8:	f000 f85a 	bl	8006790 <raise>
 80066dc:	2001      	movs	r0, #1
 80066de:	f7fa fb9b 	bl	8000e18 <_exit>

080066e2 <_realloc_r>:
 80066e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066e6:	4680      	mov	r8, r0
 80066e8:	4615      	mov	r5, r2
 80066ea:	460c      	mov	r4, r1
 80066ec:	b921      	cbnz	r1, 80066f8 <_realloc_r+0x16>
 80066ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066f2:	4611      	mov	r1, r2
 80066f4:	f7ff b9ce 	b.w	8005a94 <_malloc_r>
 80066f8:	b92a      	cbnz	r2, 8006706 <_realloc_r+0x24>
 80066fa:	f7ff f957 	bl	80059ac <_free_r>
 80066fe:	2400      	movs	r4, #0
 8006700:	4620      	mov	r0, r4
 8006702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006706:	f000 f85f 	bl	80067c8 <_malloc_usable_size_r>
 800670a:	4285      	cmp	r5, r0
 800670c:	4606      	mov	r6, r0
 800670e:	d802      	bhi.n	8006716 <_realloc_r+0x34>
 8006710:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006714:	d8f4      	bhi.n	8006700 <_realloc_r+0x1e>
 8006716:	4629      	mov	r1, r5
 8006718:	4640      	mov	r0, r8
 800671a:	f7ff f9bb 	bl	8005a94 <_malloc_r>
 800671e:	4607      	mov	r7, r0
 8006720:	2800      	cmp	r0, #0
 8006722:	d0ec      	beq.n	80066fe <_realloc_r+0x1c>
 8006724:	42b5      	cmp	r5, r6
 8006726:	462a      	mov	r2, r5
 8006728:	4621      	mov	r1, r4
 800672a:	bf28      	it	cs
 800672c:	4632      	movcs	r2, r6
 800672e:	f7ff f910 	bl	8005952 <memcpy>
 8006732:	4621      	mov	r1, r4
 8006734:	4640      	mov	r0, r8
 8006736:	f7ff f939 	bl	80059ac <_free_r>
 800673a:	463c      	mov	r4, r7
 800673c:	e7e0      	b.n	8006700 <_realloc_r+0x1e>

0800673e <_raise_r>:
 800673e:	291f      	cmp	r1, #31
 8006740:	b538      	push	{r3, r4, r5, lr}
 8006742:	4605      	mov	r5, r0
 8006744:	460c      	mov	r4, r1
 8006746:	d904      	bls.n	8006752 <_raise_r+0x14>
 8006748:	2316      	movs	r3, #22
 800674a:	6003      	str	r3, [r0, #0]
 800674c:	f04f 30ff 	mov.w	r0, #4294967295
 8006750:	bd38      	pop	{r3, r4, r5, pc}
 8006752:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006754:	b112      	cbz	r2, 800675c <_raise_r+0x1e>
 8006756:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800675a:	b94b      	cbnz	r3, 8006770 <_raise_r+0x32>
 800675c:	4628      	mov	r0, r5
 800675e:	f000 f831 	bl	80067c4 <_getpid_r>
 8006762:	4622      	mov	r2, r4
 8006764:	4601      	mov	r1, r0
 8006766:	4628      	mov	r0, r5
 8006768:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800676c:	f000 b818 	b.w	80067a0 <_kill_r>
 8006770:	2b01      	cmp	r3, #1
 8006772:	d00a      	beq.n	800678a <_raise_r+0x4c>
 8006774:	1c59      	adds	r1, r3, #1
 8006776:	d103      	bne.n	8006780 <_raise_r+0x42>
 8006778:	2316      	movs	r3, #22
 800677a:	6003      	str	r3, [r0, #0]
 800677c:	2001      	movs	r0, #1
 800677e:	e7e7      	b.n	8006750 <_raise_r+0x12>
 8006780:	2100      	movs	r1, #0
 8006782:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006786:	4620      	mov	r0, r4
 8006788:	4798      	blx	r3
 800678a:	2000      	movs	r0, #0
 800678c:	e7e0      	b.n	8006750 <_raise_r+0x12>
	...

08006790 <raise>:
 8006790:	4b02      	ldr	r3, [pc, #8]	@ (800679c <raise+0xc>)
 8006792:	4601      	mov	r1, r0
 8006794:	6818      	ldr	r0, [r3, #0]
 8006796:	f7ff bfd2 	b.w	800673e <_raise_r>
 800679a:	bf00      	nop
 800679c:	20000034 	.word	0x20000034

080067a0 <_kill_r>:
 80067a0:	b538      	push	{r3, r4, r5, lr}
 80067a2:	4d07      	ldr	r5, [pc, #28]	@ (80067c0 <_kill_r+0x20>)
 80067a4:	2300      	movs	r3, #0
 80067a6:	4604      	mov	r4, r0
 80067a8:	4608      	mov	r0, r1
 80067aa:	4611      	mov	r1, r2
 80067ac:	602b      	str	r3, [r5, #0]
 80067ae:	f7fa fb23 	bl	8000df8 <_kill>
 80067b2:	1c43      	adds	r3, r0, #1
 80067b4:	d102      	bne.n	80067bc <_kill_r+0x1c>
 80067b6:	682b      	ldr	r3, [r5, #0]
 80067b8:	b103      	cbz	r3, 80067bc <_kill_r+0x1c>
 80067ba:	6023      	str	r3, [r4, #0]
 80067bc:	bd38      	pop	{r3, r4, r5, pc}
 80067be:	bf00      	nop
 80067c0:	20004378 	.word	0x20004378

080067c4 <_getpid_r>:
 80067c4:	f7fa bb10 	b.w	8000de8 <_getpid>

080067c8 <_malloc_usable_size_r>:
 80067c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067cc:	1f18      	subs	r0, r3, #4
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	bfbc      	itt	lt
 80067d2:	580b      	ldrlt	r3, [r1, r0]
 80067d4:	18c0      	addlt	r0, r0, r3
 80067d6:	4770      	bx	lr

080067d8 <_init>:
 80067d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067da:	bf00      	nop
 80067dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067de:	bc08      	pop	{r3}
 80067e0:	469e      	mov	lr, r3
 80067e2:	4770      	bx	lr

080067e4 <_fini>:
 80067e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067e6:	bf00      	nop
 80067e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ea:	bc08      	pop	{r3}
 80067ec:	469e      	mov	lr, r3
 80067ee:	4770      	bx	lr
