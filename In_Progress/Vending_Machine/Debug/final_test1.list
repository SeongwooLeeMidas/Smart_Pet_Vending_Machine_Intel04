
final_test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049a0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c8  08004b40  08004b40  00005b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005308  08005308  00007074  2**0
                  CONTENTS
  4 .ARM          00000008  08005308  08005308  00006308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005310  08005310  00007074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005310  08005310  00006310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005314  08005314  00006314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08005318  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aa0  20000074  0800538c  00007074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b14  0800538c  00007b14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000094ba  00000000  00000000  000070a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ca6  00000000  00000000  0001055e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000830  00000000  00000000  00012208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000637  00000000  00000000  00012a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b0c  00000000  00000000  0001306f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a69c  00000000  00000000  00029b7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087df0  00000000  00000000  00034217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bc007  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002db4  00000000  00000000  000bc04c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000bee00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004b28 	.word	0x08004b28

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08004b28 	.word	0x08004b28

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <esp_at_command>:
static uint8_t data;
//static cb_data_t cb_data;
cb_data_t cb_data;
UART_HandleTypeDef huart6;
static int esp_at_command(uint8_t *cmd, uint8_t *resp, uint16_t *length, int16_t time_out)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
 80005ac:	807b      	strh	r3, [r7, #2]
    *length = 0;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2200      	movs	r2, #0
 80005b2:	801a      	strh	r2, [r3, #0]
    memset(resp, 0x00, MAX_UART_RX_BUFFER);
 80005b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80005b8:	2100      	movs	r1, #0
 80005ba:	68b8      	ldr	r0, [r7, #8]
 80005bc:	f003 fa28 	bl	8003a10 <memset>
    memset(&cb_data, 0x00, sizeof(cb_data_t));
 80005c0:	f240 4202 	movw	r2, #1026	@ 0x402
 80005c4:	2100      	movs	r1, #0
 80005c6:	4827      	ldr	r0, [pc, #156]	@ (8000664 <esp_at_command+0xc4>)
 80005c8:	f003 fa22 	bl	8003a10 <memset>
    if(HAL_UART_Transmit(&huart6, cmd, strlen((char *)cmd), 100) != HAL_OK)
 80005cc:	68f8      	ldr	r0, [r7, #12]
 80005ce:	f7ff fe11 	bl	80001f4 <strlen>
 80005d2:	4603      	mov	r3, r0
 80005d4:	b29a      	uxth	r2, r3
 80005d6:	2364      	movs	r3, #100	@ 0x64
 80005d8:	68f9      	ldr	r1, [r7, #12]
 80005da:	4823      	ldr	r0, [pc, #140]	@ (8000668 <esp_at_command+0xc8>)
 80005dc:	f001 ff58 	bl	8002490 <HAL_UART_Transmit>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d031      	beq.n	800064a <esp_at_command+0xaa>
        return -1;
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ea:	e037      	b.n	800065c <esp_at_command+0xbc>

    while(time_out > 0)
    {
        if(cb_data.length >= MAX_UART_RX_BUFFER)
 80005ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000664 <esp_at_command+0xc4>)
 80005ee:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80005f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80005f6:	d302      	bcc.n	80005fe <esp_at_command+0x5e>
            return -2;
 80005f8:	f06f 0301 	mvn.w	r3, #1
 80005fc:	e02e      	b.n	800065c <esp_at_command+0xbc>
        else if(strstr((char *)cb_data.buf, "ERROR") != NULL)
 80005fe:	491b      	ldr	r1, [pc, #108]	@ (800066c <esp_at_command+0xcc>)
 8000600:	4818      	ldr	r0, [pc, #96]	@ (8000664 <esp_at_command+0xc4>)
 8000602:	f003 fa89 	bl	8003b18 <strstr>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d002      	beq.n	8000612 <esp_at_command+0x72>
            return -3;
 800060c:	f06f 0302 	mvn.w	r3, #2
 8000610:	e024      	b.n	800065c <esp_at_command+0xbc>
        else if(strstr((char *)cb_data.buf, "OK") != NULL)
 8000612:	4917      	ldr	r1, [pc, #92]	@ (8000670 <esp_at_command+0xd0>)
 8000614:	4813      	ldr	r0, [pc, #76]	@ (8000664 <esp_at_command+0xc4>)
 8000616:	f003 fa7f 	bl	8003b18 <strstr>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d00d      	beq.n	800063c <esp_at_command+0x9c>
        {
            memcpy(resp, cb_data.buf, cb_data.length);
 8000620:	4b10      	ldr	r3, [pc, #64]	@ (8000664 <esp_at_command+0xc4>)
 8000622:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000626:	461a      	mov	r2, r3
 8000628:	490e      	ldr	r1, [pc, #56]	@ (8000664 <esp_at_command+0xc4>)
 800062a:	68b8      	ldr	r0, [r7, #8]
 800062c:	f003 fb05 	bl	8003c3a <memcpy>
            *length = cb_data.length;
 8000630:	4b0c      	ldr	r3, [pc, #48]	@ (8000664 <esp_at_command+0xc4>)
 8000632:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	@ 0x400
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	801a      	strh	r2, [r3, #0]

            break;
 800063a:	e00a      	b.n	8000652 <esp_at_command+0xb2>
        }

        time_out -= 10;
 800063c:	887b      	ldrh	r3, [r7, #2]
 800063e:	3b0a      	subs	r3, #10
 8000640:	b29b      	uxth	r3, r3
 8000642:	807b      	strh	r3, [r7, #2]
        HAL_Delay(10);
 8000644:	200a      	movs	r0, #10
 8000646:	f000 fed5 	bl	80013f4 <HAL_Delay>
    while(time_out > 0)
 800064a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800064e:	2b00      	cmp	r3, #0
 8000650:	dccc      	bgt.n	80005ec <esp_at_command+0x4c>
    }
    HAL_Delay(500);
 8000652:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000656:	f000 fecd 	bl	80013f4 <HAL_Delay>
    return 0;
 800065a:	2300      	movs	r3, #0
}
 800065c:	4618      	mov	r0, r3
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000520 	.word	0x20000520
 8000668:	20000924 	.word	0x20000924
 800066c:	08004b40 	.word	0x08004b40
 8000670:	08004b48 	.word	0x08004b48

08000674 <esp_reset>:

static int esp_reset(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
    uint16_t length = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	80fb      	strh	r3, [r7, #6]
    if(esp_at_command((uint8_t *)"AT+RST\r\n", (uint8_t *)response, &length, 1000) != 0)
 800067e:	1dba      	adds	r2, r7, #6
 8000680:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000684:	490a      	ldr	r1, [pc, #40]	@ (80006b0 <esp_reset+0x3c>)
 8000686:	480b      	ldr	r0, [pc, #44]	@ (80006b4 <esp_reset+0x40>)
 8000688:	f7ff ff8a 	bl	80005a0 <esp_at_command>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d002      	beq.n	8000698 <esp_reset+0x24>
    {
       return -1;
 8000692:	f04f 33ff 	mov.w	r3, #4294967295
 8000696:	e007      	b.n	80006a8 <esp_reset+0x34>
    }
    return esp_at_command((uint8_t *)"AT\r\n", (uint8_t *)response, &length, 1000);
 8000698:	1dba      	adds	r2, r7, #6
 800069a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800069e:	4904      	ldr	r1, [pc, #16]	@ (80006b0 <esp_reset+0x3c>)
 80006a0:	4805      	ldr	r0, [pc, #20]	@ (80006b8 <esp_reset+0x44>)
 80006a2:	f7ff ff7d 	bl	80005a0 <esp_at_command>
 80006a6:	4603      	mov	r3, r0
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	200000a0 	.word	0x200000a0
 80006b4:	08004b4c 	.word	0x08004b4c
 80006b8:	08004b58 	.word	0x08004b58

080006bc <request_ip_addr>:

    return 0;
}

static int request_ip_addr(uint8_t is_debug)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	71fb      	strb	r3, [r7, #7]
    uint16_t length = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	817b      	strh	r3, [r7, #10]

    if(esp_at_command((uint8_t *)"AT+CIFSR\r\n", (uint8_t *)response, &length, 1000) != 0)
 80006ca:	f107 020a 	add.w	r2, r7, #10
 80006ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006d2:	492d      	ldr	r1, [pc, #180]	@ (8000788 <request_ip_addr+0xcc>)
 80006d4:	482d      	ldr	r0, [pc, #180]	@ (800078c <request_ip_addr+0xd0>)
 80006d6:	f7ff ff63 	bl	80005a0 <esp_at_command>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d003      	beq.n	80006e8 <request_ip_addr+0x2c>
        printf("request ip_addr command fail\r\n");
 80006e0:	482b      	ldr	r0, [pc, #172]	@ (8000790 <request_ip_addr+0xd4>)
 80006e2:	f003 f895 	bl	8003810 <puts>
 80006e6:	e049      	b.n	800077c <request_ip_addr+0xc0>
    else
    {
        char *line = strtok(response, "\r\n");
 80006e8:	492a      	ldr	r1, [pc, #168]	@ (8000794 <request_ip_addr+0xd8>)
 80006ea:	4827      	ldr	r0, [pc, #156]	@ (8000788 <request_ip_addr+0xcc>)
 80006ec:	f003 f9b8 	bl	8003a60 <strtok>
 80006f0:	6178      	str	r0, [r7, #20]

        if(is_debug)
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d03e      	beq.n	8000776 <request_ip_addr+0xba>
        {
            for(int i = 0 ; i < length ; i++)
 80006f8:	2300      	movs	r3, #0
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	e009      	b.n	8000712 <request_ip_addr+0x56>
                printf("%c", response[i]);
 80006fe:	4a22      	ldr	r2, [pc, #136]	@ (8000788 <request_ip_addr+0xcc>)
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	4413      	add	r3, r2
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	4618      	mov	r0, r3
 8000708:	f003 f824 	bl	8003754 <putchar>
            for(int i = 0 ; i < length ; i++)
 800070c:	693b      	ldr	r3, [r7, #16]
 800070e:	3301      	adds	r3, #1
 8000710:	613b      	str	r3, [r7, #16]
 8000712:	897b      	ldrh	r3, [r7, #10]
 8000714:	461a      	mov	r2, r3
 8000716:	693b      	ldr	r3, [r7, #16]
 8000718:	4293      	cmp	r3, r2
 800071a:	dbf0      	blt.n	80006fe <request_ip_addr+0x42>
        }

        while(line != NULL)
 800071c:	e02b      	b.n	8000776 <request_ip_addr+0xba>
        {
            if(strstr(line, "CIFSR:STAIP") != NULL)
 800071e:	491e      	ldr	r1, [pc, #120]	@ (8000798 <request_ip_addr+0xdc>)
 8000720:	6978      	ldr	r0, [r7, #20]
 8000722:	f003 f9f9 	bl	8003b18 <strstr>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d01f      	beq.n	800076c <request_ip_addr+0xb0>
            {
                char *ip;

                strtok(line, "\"");
 800072c:	491b      	ldr	r1, [pc, #108]	@ (800079c <request_ip_addr+0xe0>)
 800072e:	6978      	ldr	r0, [r7, #20]
 8000730:	f003 f996 	bl	8003a60 <strtok>
                ip = strtok(NULL, "\"");
 8000734:	4919      	ldr	r1, [pc, #100]	@ (800079c <request_ip_addr+0xe0>)
 8000736:	2000      	movs	r0, #0
 8000738:	f003 f992 	bl	8003a60 <strtok>
 800073c:	60f8      	str	r0, [r7, #12]
                if(strcmp(ip, "0.0.0.0") != 0)
 800073e:	4918      	ldr	r1, [pc, #96]	@ (80007a0 <request_ip_addr+0xe4>)
 8000740:	68f8      	ldr	r0, [r7, #12]
 8000742:	f7ff fd4d 	bl	80001e0 <strcmp>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d00f      	beq.n	800076c <request_ip_addr+0xb0>
                {
                    memset(ip_addr, 0x00, sizeof(ip_addr));
 800074c:	2210      	movs	r2, #16
 800074e:	2100      	movs	r1, #0
 8000750:	4814      	ldr	r0, [pc, #80]	@ (80007a4 <request_ip_addr+0xe8>)
 8000752:	f003 f95d 	bl	8003a10 <memset>
                    memcpy(ip_addr, ip, strlen(ip));
 8000756:	68f8      	ldr	r0, [r7, #12]
 8000758:	f7ff fd4c 	bl	80001f4 <strlen>
 800075c:	4603      	mov	r3, r0
 800075e:	461a      	mov	r2, r3
 8000760:	68f9      	ldr	r1, [r7, #12]
 8000762:	4810      	ldr	r0, [pc, #64]	@ (80007a4 <request_ip_addr+0xe8>)
 8000764:	f003 fa69 	bl	8003c3a <memcpy>
                    return 0;
 8000768:	2300      	movs	r3, #0
 800076a:	e009      	b.n	8000780 <request_ip_addr+0xc4>
                }
            }
            line = strtok(NULL, "\r\n");
 800076c:	4909      	ldr	r1, [pc, #36]	@ (8000794 <request_ip_addr+0xd8>)
 800076e:	2000      	movs	r0, #0
 8000770:	f003 f976 	bl	8003a60 <strtok>
 8000774:	6178      	str	r0, [r7, #20]
        while(line != NULL)
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d1d0      	bne.n	800071e <request_ip_addr+0x62>
        }
    }

    return -1;
 800077c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000780:	4618      	mov	r0, r3
 8000782:	3718      	adds	r7, #24
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	200000a0 	.word	0x200000a0
 800078c:	08004b9c 	.word	0x08004b9c
 8000790:	08004ba8 	.word	0x08004ba8
 8000794:	08004b90 	.word	0x08004b90
 8000798:	08004bc8 	.word	0x08004bc8
 800079c:	08004b98 	.word	0x08004b98
 80007a0:	08004b60 	.word	0x08004b60
 80007a4:	20000090 	.word	0x20000090

080007a8 <esp_client_conn>:
int esp_client_conn()
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b092      	sub	sp, #72	@ 0x48
 80007ac:	af00      	add	r7, sp, #0
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	223c      	movs	r2, #60	@ 0x3c
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f003 f928 	bl	8003a10 <memset>
  uint16_t length = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	80fb      	strh	r3, [r7, #6]
	sprintf(at_cmd,"AT+CIPSTART=\"TCP\",\"%s\",%d\r\n",DST_IP,DST_PORT);
 80007c4:	f107 0008 	add.w	r0, r7, #8
 80007c8:	f241 3388 	movw	r3, #5000	@ 0x1388
 80007cc:	4a09      	ldr	r2, [pc, #36]	@ (80007f4 <esp_client_conn+0x4c>)
 80007ce:	490a      	ldr	r1, [pc, #40]	@ (80007f8 <esp_client_conn+0x50>)
 80007d0:	f003 f826 	bl	8003820 <siprintf>
	esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000);					//CONNECT
 80007d4:	1dba      	adds	r2, r7, #6
 80007d6:	f107 0008 	add.w	r0, r7, #8
 80007da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007de:	4907      	ldr	r1, [pc, #28]	@ (80007fc <esp_client_conn+0x54>)
 80007e0:	f7ff fede 	bl	80005a0 <esp_at_command>

	esp_send_data("["LOGID":"PASSWD"]");
 80007e4:	4806      	ldr	r0, [pc, #24]	@ (8000800 <esp_client_conn+0x58>)
 80007e6:	f000 f919 	bl	8000a1c <esp_send_data>
	return 0;
 80007ea:	2300      	movs	r3, #0
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3748      	adds	r7, #72	@ 0x48
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	08004bd4 	.word	0x08004bd4
 80007f8:	08004be4 	.word	0x08004be4
 80007fc:	200000a0 	.word	0x200000a0
 8000800:	08004c00 	.word	0x08004c00

08000804 <drv_esp_init>:

int drv_esp_init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
    huart6.Instance = USART6;
 8000808:	4b18      	ldr	r3, [pc, #96]	@ (800086c <drv_esp_init+0x68>)
 800080a:	4a19      	ldr	r2, [pc, #100]	@ (8000870 <drv_esp_init+0x6c>)
 800080c:	601a      	str	r2, [r3, #0]
    huart6.Init.BaudRate = 38400;
 800080e:	4b17      	ldr	r3, [pc, #92]	@ (800086c <drv_esp_init+0x68>)
 8000810:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000814:	605a      	str	r2, [r3, #4]
    huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b15      	ldr	r3, [pc, #84]	@ (800086c <drv_esp_init+0x68>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
    huart6.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b13      	ldr	r3, [pc, #76]	@ (800086c <drv_esp_init+0x68>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
    huart6.Init.Parity = UART_PARITY_NONE;
 8000822:	4b12      	ldr	r3, [pc, #72]	@ (800086c <drv_esp_init+0x68>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
    huart6.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b10      	ldr	r3, [pc, #64]	@ (800086c <drv_esp_init+0x68>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
    huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <drv_esp_init+0x68>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
    huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b0d      	ldr	r3, [pc, #52]	@ (800086c <drv_esp_init+0x68>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
    if(HAL_UART_Init(&huart6) != HAL_OK)
 800083a:	480c      	ldr	r0, [pc, #48]	@ (800086c <drv_esp_init+0x68>)
 800083c:	f001 fdd8 	bl	80023f0 <HAL_UART_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d002      	beq.n	800084c <drv_esp_init+0x48>
        return -1;
 8000846:	f04f 33ff 	mov.w	r3, #4294967295
 800084a:	e00c      	b.n	8000866 <drv_esp_init+0x62>

    memset(ip_addr, 0x00, sizeof(ip_addr));
 800084c:	2210      	movs	r2, #16
 800084e:	2100      	movs	r1, #0
 8000850:	4808      	ldr	r0, [pc, #32]	@ (8000874 <drv_esp_init+0x70>)
 8000852:	f003 f8dd 	bl	8003a10 <memset>
    HAL_UART_Receive_IT(&huart6, &data, 1);
 8000856:	2201      	movs	r2, #1
 8000858:	4907      	ldr	r1, [pc, #28]	@ (8000878 <drv_esp_init+0x74>)
 800085a:	4804      	ldr	r0, [pc, #16]	@ (800086c <drv_esp_init+0x68>)
 800085c:	f001 fea3 	bl	80025a6 <HAL_UART_Receive_IT>

    return esp_reset();
 8000860:	f7ff ff08 	bl	8000674 <esp_reset>
 8000864:	4603      	mov	r3, r0
}
 8000866:	4618      	mov	r0, r3
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000924 	.word	0x20000924
 8000870:	40011400 	.word	0x40011400
 8000874:	20000090 	.word	0x20000090
 8000878:	2000051f 	.word	0x2000051f

0800087c <reset_func>:
void reset_func()
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	printf("esp reset... ");
 8000880:	4808      	ldr	r0, [pc, #32]	@ (80008a4 <reset_func+0x28>)
 8000882:	f002 ff55 	bl	8003730 <iprintf>
	if(esp_reset() == 0)
 8000886:	f7ff fef5 	bl	8000674 <esp_reset>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d103      	bne.n	8000898 <reset_func+0x1c>
			printf("OK\r\n");
 8000890:	4805      	ldr	r0, [pc, #20]	@ (80008a8 <reset_func+0x2c>)
 8000892:	f002 ffbd 	bl	8003810 <puts>
	else
			printf("fail\r\n");
}
 8000896:	e002      	b.n	800089e <reset_func+0x22>
			printf("fail\r\n");
 8000898:	4804      	ldr	r0, [pc, #16]	@ (80008ac <reset_func+0x30>)
 800089a:	f002 ffb9 	bl	8003810 <puts>
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	08004c14 	.word	0x08004c14
 80008a8:	08004c24 	.word	0x08004c24
 80008ac:	08004c28 	.word	0x08004c28

080008b0 <ap_conn_func>:
          printf("%c", response[i]);
  }
}

void ap_conn_func(char *ssid, char *passwd)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b094      	sub	sp, #80	@ 0x50
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
  uint16_t length = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 80008c0:	2300      	movs	r3, #0
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	f107 0310 	add.w	r3, r7, #16
 80008c8:	223c      	movs	r2, #60	@ 0x3c
 80008ca:	2100      	movs	r1, #0
 80008cc:	4618      	mov	r0, r3
 80008ce:	f003 f89f 	bl	8003a10 <memset>
  if(ssid == NULL || passwd == NULL)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d002      	beq.n	80008de <ap_conn_func+0x2e>
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d103      	bne.n	80008e6 <ap_conn_func+0x36>
  {
      printf("invalid command : ap_conn <ssid> <passwd>\r\n");
 80008de:	4812      	ldr	r0, [pc, #72]	@ (8000928 <ap_conn_func+0x78>)
 80008e0:	f002 ff96 	bl	8003810 <puts>
 80008e4:	e01c      	b.n	8000920 <ap_conn_func+0x70>
      return;
  }

  memset(at_cmd, 0x00, sizeof(at_cmd));
 80008e6:	f107 030c 	add.w	r3, r7, #12
 80008ea:	2240      	movs	r2, #64	@ 0x40
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f003 f88e 	bl	8003a10 <memset>
  sprintf(at_cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid,passwd);
 80008f4:	f107 000c 	add.w	r0, r7, #12
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	490b      	ldr	r1, [pc, #44]	@ (800092c <ap_conn_func+0x7c>)
 80008fe:	f002 ff8f 	bl	8003820 <siprintf>
  if(esp_at_command((uint8_t *)at_cmd, (uint8_t *)response, &length, 6000) != 0)
 8000902:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8000906:	f107 000c 	add.w	r0, r7, #12
 800090a:	f241 7370 	movw	r3, #6000	@ 0x1770
 800090e:	4908      	ldr	r1, [pc, #32]	@ (8000930 <ap_conn_func+0x80>)
 8000910:	f7ff fe46 	bl	80005a0 <esp_at_command>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d002      	beq.n	8000920 <ap_conn_func+0x70>
      printf("ap scan command fail\r\n");
 800091a:	4806      	ldr	r0, [pc, #24]	@ (8000934 <ap_conn_func+0x84>)
 800091c:	f002 ff78 	bl	8003810 <puts>
  else
  {
//      for(int i = 0 ; i < length ; i++)
//          printf("%c", response[i]);
  }
}
 8000920:	3750      	adds	r7, #80	@ 0x50
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	08004c6c 	.word	0x08004c6c
 800092c:	08004c98 	.word	0x08004c98
 8000930:	200000a0 	.word	0x200000a0
 8000934:	08004c54 	.word	0x08004c54

08000938 <HAL_UART_RxCpltCallback>:

    return 0;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]

    if(huart->Instance == USART6)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a23      	ldr	r2, [pc, #140]	@ (80009d4 <HAL_UART_RxCpltCallback+0x9c>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d117      	bne.n	800097a <HAL_UART_RxCpltCallback+0x42>
    {
        if(cb_data.length < MAX_ESP_RX_BUFFER)
 800094a:	4b23      	ldr	r3, [pc, #140]	@ (80009d8 <HAL_UART_RxCpltCallback+0xa0>)
 800094c:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000950:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000954:	d20c      	bcs.n	8000970 <HAL_UART_RxCpltCallback+0x38>
        {
            cb_data.buf[cb_data.length++] = data;
 8000956:	4b20      	ldr	r3, [pc, #128]	@ (80009d8 <HAL_UART_RxCpltCallback+0xa0>)
 8000958:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 800095c:	1c5a      	adds	r2, r3, #1
 800095e:	b291      	uxth	r1, r2
 8000960:	4a1d      	ldr	r2, [pc, #116]	@ (80009d8 <HAL_UART_RxCpltCallback+0xa0>)
 8000962:	f8a2 1400 	strh.w	r1, [r2, #1024]	@ 0x400
 8000966:	461a      	mov	r2, r3
 8000968:	4b1c      	ldr	r3, [pc, #112]	@ (80009dc <HAL_UART_RxCpltCallback+0xa4>)
 800096a:	7819      	ldrb	r1, [r3, #0]
 800096c:	4b1a      	ldr	r3, [pc, #104]	@ (80009d8 <HAL_UART_RxCpltCallback+0xa0>)
 800096e:	5499      	strb	r1, [r3, r2]
        }

        HAL_UART_Receive_IT(huart, &data, 1);
 8000970:	2201      	movs	r2, #1
 8000972:	491a      	ldr	r1, [pc, #104]	@ (80009dc <HAL_UART_RxCpltCallback+0xa4>)
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f001 fe16 	bl	80025a6 <HAL_UART_Receive_IT>
    }
    if(huart->Instance == USART2)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a18      	ldr	r2, [pc, #96]	@ (80009e0 <HAL_UART_RxCpltCallback+0xa8>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d122      	bne.n	80009ca <HAL_UART_RxCpltCallback+0x92>
    {
    	static int i=0;
    	rx2Data[i] = cdata;
 8000984:	4b17      	ldr	r3, [pc, #92]	@ (80009e4 <HAL_UART_RxCpltCallback+0xac>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a17      	ldr	r2, [pc, #92]	@ (80009e8 <HAL_UART_RxCpltCallback+0xb0>)
 800098a:	7811      	ldrb	r1, [r2, #0]
 800098c:	4a17      	ldr	r2, [pc, #92]	@ (80009ec <HAL_UART_RxCpltCallback+0xb4>)
 800098e:	54d1      	strb	r1, [r2, r3]
    	if(rx2Data[i] == '\r')
 8000990:	4b14      	ldr	r3, [pc, #80]	@ (80009e4 <HAL_UART_RxCpltCallback+0xac>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a15      	ldr	r2, [pc, #84]	@ (80009ec <HAL_UART_RxCpltCallback+0xb4>)
 8000996:	5cd3      	ldrb	r3, [r2, r3]
 8000998:	b2db      	uxtb	r3, r3
 800099a:	2b0d      	cmp	r3, #13
 800099c:	d10b      	bne.n	80009b6 <HAL_UART_RxCpltCallback+0x7e>
    	{
    		rx2Data[i] = '\0';
 800099e:	4b11      	ldr	r3, [pc, #68]	@ (80009e4 <HAL_UART_RxCpltCallback+0xac>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a12      	ldr	r2, [pc, #72]	@ (80009ec <HAL_UART_RxCpltCallback+0xb4>)
 80009a4:	2100      	movs	r1, #0
 80009a6:	54d1      	strb	r1, [r2, r3]
    		rx2Flag = 1;
 80009a8:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <HAL_UART_RxCpltCallback+0xb8>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	701a      	strb	r2, [r3, #0]
    		i = 0;
 80009ae:	4b0d      	ldr	r3, [pc, #52]	@ (80009e4 <HAL_UART_RxCpltCallback+0xac>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	e004      	b.n	80009c0 <HAL_UART_RxCpltCallback+0x88>
    	}
    	else
    	{
    		i++;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	@ (80009e4 <HAL_UART_RxCpltCallback+0xac>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	3301      	adds	r3, #1
 80009bc:	4a09      	ldr	r2, [pc, #36]	@ (80009e4 <HAL_UART_RxCpltCallback+0xac>)
 80009be:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(huart, &cdata,1);
 80009c0:	2201      	movs	r2, #1
 80009c2:	4909      	ldr	r1, [pc, #36]	@ (80009e8 <HAL_UART_RxCpltCallback+0xb0>)
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f001 fdee 	bl	80025a6 <HAL_UART_Receive_IT>
    }
}
 80009ca:	bf00      	nop
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40011400 	.word	0x40011400
 80009d8:	20000520 	.word	0x20000520
 80009dc:	2000051f 	.word	0x2000051f
 80009e0:	40004400 	.word	0x40004400
 80009e4:	2000096c 	.word	0x2000096c
 80009e8:	2000051e 	.word	0x2000051e
 80009ec:	200004ec 	.word	0x200004ec
 80009f0:	200004e8 	.word	0x200004e8

080009f4 <AiotClient_Init>:


void AiotClient_Init()
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	reset_func();
 80009f8:	f7ff ff40 	bl	800087c <reset_func>
//	version_func();
	ap_conn_func(SSID,PASS);
 80009fc:	4905      	ldr	r1, [pc, #20]	@ (8000a14 <AiotClient_Init+0x20>)
 80009fe:	4806      	ldr	r0, [pc, #24]	@ (8000a18 <AiotClient_Init+0x24>)
 8000a00:	f7ff ff56 	bl	80008b0 <ap_conn_func>
//	start_esp_server();
//	ip_state_func();
	request_ip_addr(1);
 8000a04:	2001      	movs	r0, #1
 8000a06:	f7ff fe59 	bl	80006bc <request_ip_addr>
	esp_client_conn();
 8000a0a:	f7ff fecd 	bl	80007a8 <esp_client_conn>
//	ip_state_func();
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	0800506c 	.word	0x0800506c
 8000a18:	08005000 	.word	0x08005000

08000a1c <esp_send_data>:

void esp_send_data(char *data)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b094      	sub	sp, #80	@ 0x50
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8000a24:	2300      	movs	r3, #0
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	223c      	movs	r2, #60	@ 0x3c
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f002 ffed 	bl	8003a10 <memset>
  uint16_t length = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	81fb      	strh	r3, [r7, #14]
	sprintf(at_cmd,"AT+CIPSEND=%d\r\n",strlen(data));
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f7ff fbda 	bl	80001f4 <strlen>
 8000a40:	4602      	mov	r2, r0
 8000a42:	f107 0310 	add.w	r3, r7, #16
 8000a46:	490e      	ldr	r1, [pc, #56]	@ (8000a80 <esp_send_data+0x64>)
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f002 fee9 	bl	8003820 <siprintf>
	if(esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000) == 0)
 8000a4e:	f107 020e 	add.w	r2, r7, #14
 8000a52:	f107 0010 	add.w	r0, r7, #16
 8000a56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a5a:	490a      	ldr	r1, [pc, #40]	@ (8000a84 <esp_send_data+0x68>)
 8000a5c:	f7ff fda0 	bl	80005a0 <esp_at_command>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d107      	bne.n	8000a76 <esp_send_data+0x5a>
	{
			esp_at_command((uint8_t *)data,(uint8_t *)response, &length, 1000);
 8000a66:	f107 020e 	add.w	r2, r7, #14
 8000a6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a6e:	4905      	ldr	r1, [pc, #20]	@ (8000a84 <esp_send_data+0x68>)
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f7ff fd95 	bl	80005a0 <esp_at_command>
	}
}
 8000a76:	bf00      	nop
 8000a78:	3750      	adds	r7, #80	@ 0x50
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	08005078 	.word	0x08005078
 8000a84:	200000a0 	.word	0x200000a0

08000a88 <drv_uart_init>:

//==================uart2=========================
int drv_uart_init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8000a8c:	4b14      	ldr	r3, [pc, #80]	@ (8000ae0 <drv_uart_init+0x58>)
 8000a8e:	4a15      	ldr	r2, [pc, #84]	@ (8000ae4 <drv_uart_init+0x5c>)
 8000a90:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 115200;
 8000a92:	4b13      	ldr	r3, [pc, #76]	@ (8000ae0 <drv_uart_init+0x58>)
 8000a94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a98:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ae0 <drv_uart_init+0x58>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae0 <drv_uart_init+0x58>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae0 <drv_uart_init+0x58>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae0 <drv_uart_init+0x58>)
 8000aae:	220c      	movs	r2, #12
 8000ab0:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae0 <drv_uart_init+0x58>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab8:	4b09      	ldr	r3, [pc, #36]	@ (8000ae0 <drv_uart_init+0x58>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart2) != HAL_OK)
 8000abe:	4808      	ldr	r0, [pc, #32]	@ (8000ae0 <drv_uart_init+0x58>)
 8000ac0:	f001 fc96 	bl	80023f0 <HAL_UART_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d002      	beq.n	8000ad0 <drv_uart_init+0x48>
        return -1;
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ace:	e005      	b.n	8000adc <drv_uart_init+0x54>

    HAL_UART_Receive_IT(&huart2, &cdata,1);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	4905      	ldr	r1, [pc, #20]	@ (8000ae8 <drv_uart_init+0x60>)
 8000ad4:	4802      	ldr	r0, [pc, #8]	@ (8000ae0 <drv_uart_init+0x58>)
 8000ad6:	f001 fd66 	bl	80025a6 <HAL_UART_Receive_IT>
    return 0;
 8000ada:	2300      	movs	r3, #0
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	200004a0 	.word	0x200004a0
 8000ae4:	40004400 	.word	0x40004400
 8000ae8:	2000051e 	.word	0x2000051e

08000aec <__io_putchar>:
        return -1;

    return 0;
}
int __io_putchar(int ch)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
    if(HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) == HAL_OK)
 8000af4:	1d39      	adds	r1, r7, #4
 8000af6:	230a      	movs	r3, #10
 8000af8:	2201      	movs	r2, #1
 8000afa:	4807      	ldr	r0, [pc, #28]	@ (8000b18 <__io_putchar+0x2c>)
 8000afc:	f001 fcc8 	bl	8002490 <HAL_UART_Transmit>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d101      	bne.n	8000b0a <__io_putchar+0x1e>
        return ch;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	e001      	b.n	8000b0e <__io_putchar+0x22>
    return -1;
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	200004a0 	.word	0x200004a0

08000b1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int ret = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b26:	f000 fbf3 	bl	8001310 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b2a:	f000 f86f 	bl	8000c0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b2e:	f000 f8d7 	bl	8000ce0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  ret |= drv_uart_init();
 8000b32:	f7ff ffa9 	bl	8000a88 <drv_uart_init>
 8000b36:	4602      	mov	r2, r0
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	603b      	str	r3, [r7, #0]
  ret |= drv_esp_init();
 8000b3e:	f7ff fe61 	bl	8000804 <drv_esp_init>
 8000b42:	4602      	mov	r2, r0
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	4313      	orrs	r3, r2
 8000b48:	603b      	str	r3, [r7, #0]
  if(ret != 0) Error_Handler();
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <main+0x38>
 8000b50:	f000 f9ee 	bl	8000f30 <Error_Handler>
  printf("Start main() \r\n");
 8000b54:	4824      	ldr	r0, [pc, #144]	@ (8000be8 <main+0xcc>)
 8000b56:	f002 fe5b 	bl	8003810 <puts>
  AiotClient_Init();
 8000b5a:	f7ff ff4b 	bl	80009f4 <AiotClient_Init>
  for (int i = 0; i < NUM_IR_PINS; i++) {
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	e00c      	b.n	8000b7e <main+0x62>
			previousIrValues[i] = GPIO_PIN_RESET;  // 초기값은 RESET
 8000b64:	4a21      	ldr	r2, [pc, #132]	@ (8000bec <main+0xd0>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4413      	add	r3, r2
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	701a      	strb	r2, [r3, #0]
			currentIrValues[i] = GPIO_PIN_RESET;   // 초기값은 RESET
 8000b6e:	4a20      	ldr	r2, [pc, #128]	@ (8000bf0 <main+0xd4>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	4413      	add	r3, r2
 8000b74:	2200      	movs	r2, #0
 8000b76:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < NUM_IR_PINS; i++) {
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2b05      	cmp	r3, #5
 8000b82:	ddef      	ble.n	8000b64 <main+0x48>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		if(strstr((char *)cb_data.buf,"+IPD") && cb_data.buf[cb_data.length-1] == '\n')
 8000b84:	491b      	ldr	r1, [pc, #108]	@ (8000bf4 <main+0xd8>)
 8000b86:	481c      	ldr	r0, [pc, #112]	@ (8000bf8 <main+0xdc>)
 8000b88:	f002 ffc6 	bl	8003b18 <strstr>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d01d      	beq.n	8000bce <main+0xb2>
 8000b92:	4b19      	ldr	r3, [pc, #100]	@ (8000bf8 <main+0xdc>)
 8000b94:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	4a17      	ldr	r2, [pc, #92]	@ (8000bf8 <main+0xdc>)
 8000b9c:	5cd3      	ldrb	r3, [r2, r3]
 8000b9e:	2b0a      	cmp	r3, #10
 8000ba0:	d115      	bne.n	8000bce <main+0xb2>
		{
			strcpy(strBuff,strchr((char *)cb_data.buf,'['));
 8000ba2:	215b      	movs	r1, #91	@ 0x5b
 8000ba4:	4814      	ldr	r0, [pc, #80]	@ (8000bf8 <main+0xdc>)
 8000ba6:	f002 ff3b 	bl	8003a20 <strchr>
 8000baa:	4603      	mov	r3, r0
 8000bac:	4619      	mov	r1, r3
 8000bae:	4813      	ldr	r0, [pc, #76]	@ (8000bfc <main+0xe0>)
 8000bb0:	f003 f83b 	bl	8003c2a <strcpy>
			memset(cb_data.buf,0x0,sizeof(cb_data.buf));
 8000bb4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bb8:	2100      	movs	r1, #0
 8000bba:	480f      	ldr	r0, [pc, #60]	@ (8000bf8 <main+0xdc>)
 8000bbc:	f002 ff28 	bl	8003a10 <memset>
			cb_data.length = 0;
 8000bc0:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf8 <main+0xdc>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
			esp_event(strBuff);
 8000bc8:	480c      	ldr	r0, [pc, #48]	@ (8000bfc <main+0xe0>)
 8000bca:	f000 f907 	bl	8000ddc <esp_event>
		}
		if(rx2Flag)
 8000bce:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <main+0xe4>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d0d5      	beq.n	8000b84 <main+0x68>
		{
			printf("recv2 : %s\r\n",rx2Data);
 8000bd8:	490a      	ldr	r1, [pc, #40]	@ (8000c04 <main+0xe8>)
 8000bda:	480b      	ldr	r0, [pc, #44]	@ (8000c08 <main+0xec>)
 8000bdc:	f002 fda8 	bl	8003730 <iprintf>
			rx2Flag =0;
 8000be0:	4b07      	ldr	r3, [pc, #28]	@ (8000c00 <main+0xe4>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	701a      	strb	r2, [r3, #0]
		if(strstr((char *)cb_data.buf,"+IPD") && cb_data.buf[cb_data.length-1] == '\n')
 8000be6:	e7cd      	b.n	8000b84 <main+0x68>
 8000be8:	08005088 	.word	0x08005088
 8000bec:	20000978 	.word	0x20000978
 8000bf0:	20000970 	.word	0x20000970
 8000bf4:	08005098 	.word	0x08005098
 8000bf8:	20000520 	.word	0x20000520
 8000bfc:	20000980 	.word	0x20000980
 8000c00:	200004e8 	.word	0x200004e8
 8000c04:	200004ec 	.word	0x200004ec
 8000c08:	080050a0 	.word	0x080050a0

08000c0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b094      	sub	sp, #80	@ 0x50
 8000c10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c12:	f107 0320 	add.w	r3, r7, #32
 8000c16:	2230      	movs	r2, #48	@ 0x30
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f002 fef8 	bl	8003a10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c20:	f107 030c 	add.w	r3, r7, #12
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c30:	2300      	movs	r3, #0
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	4b28      	ldr	r3, [pc, #160]	@ (8000cd8 <SystemClock_Config+0xcc>)
 8000c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c38:	4a27      	ldr	r2, [pc, #156]	@ (8000cd8 <SystemClock_Config+0xcc>)
 8000c3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c40:	4b25      	ldr	r3, [pc, #148]	@ (8000cd8 <SystemClock_Config+0xcc>)
 8000c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	4b22      	ldr	r3, [pc, #136]	@ (8000cdc <SystemClock_Config+0xd0>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a21      	ldr	r2, [pc, #132]	@ (8000cdc <SystemClock_Config+0xd0>)
 8000c56:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c5a:	6013      	str	r3, [r2, #0]
 8000c5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000cdc <SystemClock_Config+0xd0>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c70:	2310      	movs	r3, #16
 8000c72:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c74:	2302      	movs	r3, #2
 8000c76:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000c7c:	2310      	movs	r3, #16
 8000c7e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c80:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000c84:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c86:	2304      	movs	r3, #4
 8000c88:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c8a:	2304      	movs	r3, #4
 8000c8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c8e:	f107 0320 	add.w	r3, r7, #32
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 ff14 	bl	8001ac0 <HAL_RCC_OscConfig>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c9e:	f000 f947 	bl	8000f30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca2:	230f      	movs	r3, #15
 8000ca4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000caa:	2300      	movs	r3, #0
 8000cac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cb2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cb8:	f107 030c 	add.w	r3, r7, #12
 8000cbc:	2102      	movs	r1, #2
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f001 f976 	bl	8001fb0 <HAL_RCC_ClockConfig>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000cca:	f000 f931 	bl	8000f30 <Error_Handler>
  }
}
 8000cce:	bf00      	nop
 8000cd0:	3750      	adds	r7, #80	@ 0x50
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40007000 	.word	0x40007000

08000ce0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	@ 0x28
 8000ce4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
 8000cf4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
 8000cfa:	4b34      	ldr	r3, [pc, #208]	@ (8000dcc <MX_GPIO_Init+0xec>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	4a33      	ldr	r2, [pc, #204]	@ (8000dcc <MX_GPIO_Init+0xec>)
 8000d00:	f043 0304 	orr.w	r3, r3, #4
 8000d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d06:	4b31      	ldr	r3, [pc, #196]	@ (8000dcc <MX_GPIO_Init+0xec>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	f003 0304 	and.w	r3, r3, #4
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	4b2d      	ldr	r3, [pc, #180]	@ (8000dcc <MX_GPIO_Init+0xec>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	4a2c      	ldr	r2, [pc, #176]	@ (8000dcc <MX_GPIO_Init+0xec>)
 8000d1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d22:	4b2a      	ldr	r3, [pc, #168]	@ (8000dcc <MX_GPIO_Init+0xec>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	4b26      	ldr	r3, [pc, #152]	@ (8000dcc <MX_GPIO_Init+0xec>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	4a25      	ldr	r2, [pc, #148]	@ (8000dcc <MX_GPIO_Init+0xec>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3e:	4b23      	ldr	r3, [pc, #140]	@ (8000dcc <MX_GPIO_Init+0xec>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	607b      	str	r3, [r7, #4]
 8000d4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000dcc <MX_GPIO_Init+0xec>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	4a1e      	ldr	r2, [pc, #120]	@ (8000dcc <MX_GPIO_Init+0xec>)
 8000d54:	f043 0302 	orr.w	r3, r3, #2
 8000d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dcc <MX_GPIO_Init+0xec>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000d66:	2200      	movs	r2, #0
 8000d68:	21f3      	movs	r1, #243	@ 0xf3
 8000d6a:	4819      	ldr	r0, [pc, #100]	@ (8000dd0 <MX_GPIO_Init+0xf0>)
 8000d6c:	f000 fe8e 	bl	8001a8c <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d70:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d76:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	4619      	mov	r1, r3
 8000d86:	4813      	ldr	r0, [pc, #76]	@ (8000dd4 <MX_GPIO_Init+0xf4>)
 8000d88:	f000 fcfc 	bl	8001784 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000d8c:	23f3      	movs	r3, #243	@ 0xf3
 8000d8e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d90:	2301      	movs	r3, #1
 8000d92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	4619      	mov	r1, r3
 8000da2:	480b      	ldr	r0, [pc, #44]	@ (8000dd0 <MX_GPIO_Init+0xf0>)
 8000da4:	f000 fcee 	bl	8001784 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB13
                           PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_13
 8000da8:	f24e 0307 	movw	r3, #57351	@ 0xe007
 8000dac:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db6:	f107 0314 	add.w	r3, r7, #20
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4806      	ldr	r0, [pc, #24]	@ (8000dd8 <MX_GPIO_Init+0xf8>)
 8000dbe:	f000 fce1 	bl	8001784 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8000dc2:	bf00      	nop
 8000dc4:	3728      	adds	r7, #40	@ 0x28
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40020000 	.word	0x40020000
 8000dd4:	40020800 	.word	0x40020800
 8000dd8:	40020400 	.word	0x40020400

08000ddc <esp_event>:

/* USER CODE BEGIN 4 */
void esp_event(char * recvBuf)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b09c      	sub	sp, #112	@ 0x70
 8000de0:	af02      	add	r7, sp, #8
 8000de2:	6078      	str	r0, [r7, #4]
  int i=0;
 8000de4:	2300      	movs	r3, #0
 8000de6:	667b      	str	r3, [r7, #100]	@ 0x64
  int motorNumber = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  char * pToken;
  char * pArray[ARR_CNT]={0};
 8000dec:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  char sendBuf[MAX_UART_COMMAND_LEN]={0};
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60bb      	str	r3, [r7, #8]
 8000e00:	f107 030c 	add.w	r3, r7, #12
 8000e04:	223c      	movs	r2, #60	@ 0x3c
 8000e06:	2100      	movs	r1, #0
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f002 fe01 	bl	8003a10 <memset>

	strBuff[strlen(recvBuf)-1] = '\0';	//'\n' cut
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f7ff f9f0 	bl	80001f4 <strlen>
 8000e14:	4603      	mov	r3, r0
 8000e16:	3b01      	subs	r3, #1
 8000e18:	4a3b      	ldr	r2, [pc, #236]	@ (8000f08 <esp_event+0x12c>)
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	54d1      	strb	r1, [r2, r3]
	printf("\r\nDebug recv : %s\r\n",recvBuf);
 8000e1e:	6879      	ldr	r1, [r7, #4]
 8000e20:	483a      	ldr	r0, [pc, #232]	@ (8000f0c <esp_event+0x130>)
 8000e22:	f002 fc85 	bl	8003730 <iprintf>

  pToken = strtok(recvBuf,"[@]");
 8000e26:	493a      	ldr	r1, [pc, #232]	@ (8000f10 <esp_event+0x134>)
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f002 fe19 	bl	8003a60 <strtok>
 8000e2e:	6638      	str	r0, [r7, #96]	@ 0x60
  while(pToken != NULL)
 8000e30:	e011      	b.n	8000e56 <esp_event+0x7a>
  {
    pArray[i] = pToken;
 8000e32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	3368      	adds	r3, #104	@ 0x68
 8000e38:	443b      	add	r3, r7
 8000e3a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000e3c:	f843 2c20 	str.w	r2, [r3, #-32]
    if(++i >= ARR_CNT)
 8000e40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000e42:	3301      	adds	r3, #1
 8000e44:	667b      	str	r3, [r7, #100]	@ 0x64
 8000e46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8000e48:	2b04      	cmp	r3, #4
 8000e4a:	dc08      	bgt.n	8000e5e <esp_event+0x82>
      break;
    pToken = strtok(NULL,"[@]");
 8000e4c:	4930      	ldr	r1, [pc, #192]	@ (8000f10 <esp_event+0x134>)
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f002 fe06 	bl	8003a60 <strtok>
 8000e54:	6638      	str	r0, [r7, #96]	@ 0x60
  while(pToken != NULL)
 8000e56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d1ea      	bne.n	8000e32 <esp_event+0x56>
 8000e5c:	e000      	b.n	8000e60 <esp_event+0x84>
      break;
 8000e5e:	bf00      	nop
  }

  if(!strcmp(pArray[1], "MOTOR")) {
 8000e60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e62:	492c      	ldr	r1, [pc, #176]	@ (8000f14 <esp_event+0x138>)
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff f9bb 	bl	80001e0 <strcmp>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d124      	bne.n	8000eba <esp_event+0xde>
      motorNumber = atoi(pArray[2]);  // pArray[2] 문자?��?�� ?��?���? �??��
 8000e70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000e72:	4618      	mov	r0, r3
 8000e74:	f002 fb12 	bl	800349c <atoi>
 8000e78:	65f8      	str	r0, [r7, #92]	@ 0x5c
      if(motorNumber >= 1 && motorNumber <= NUM_MOTOR_PINS) {
 8000e7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	dd0c      	ble.n	8000e9a <esp_event+0xbe>
 8000e80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000e82:	2b06      	cmp	r3, #6
 8000e84:	dc09      	bgt.n	8000e9a <esp_event+0xbe>
          HAL_GPIO_WritePin(MOTOR_PORT, motorPins[motorNumber - 1], GPIO_PIN_SET);  // 모터 번호?�� 맞는 ?? ?��?��
 8000e86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000e88:	3b01      	subs	r3, #1
 8000e8a:	4a23      	ldr	r2, [pc, #140]	@ (8000f18 <esp_event+0x13c>)
 8000e8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e90:	2201      	movs	r2, #1
 8000e92:	4619      	mov	r1, r3
 8000e94:	4821      	ldr	r0, [pc, #132]	@ (8000f1c <esp_event+0x140>)
 8000e96:	f000 fdf9 	bl	8001a8c <HAL_GPIO_WritePin>
      }
      sprintf(sendBuf, "[%s]%s@%s\n", pArray[0], pArray[1], pArray[2]);
 8000e9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000e9c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000e9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000ea0:	f107 0008 	add.w	r0, r7, #8
 8000ea4:	9300      	str	r3, [sp, #0]
 8000ea6:	460b      	mov	r3, r1
 8000ea8:	491d      	ldr	r1, [pc, #116]	@ (8000f20 <esp_event+0x144>)
 8000eaa:	f002 fcb9 	bl	8003820 <siprintf>
      return;
  }
  else
      return;

  esp_send_data(sendBuf);
 8000eae:	f107 0308 	add.w	r3, r7, #8
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fdb2 	bl	8000a1c <esp_send_data>
 8000eb8:	e022      	b.n	8000f00 <esp_event+0x124>
  else if(!strncmp(pArray[1]," New conn",8))
 8000eba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ebc:	2208      	movs	r2, #8
 8000ebe:	4919      	ldr	r1, [pc, #100]	@ (8000f24 <esp_event+0x148>)
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f002 fdba 	bl	8003a3a <strncmp>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d106      	bne.n	8000eda <esp_event+0xfe>
	   printf("Debug : %s, %s\r\n",pArray[0],pArray[1]);
 8000ecc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000ece:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4815      	ldr	r0, [pc, #84]	@ (8000f28 <esp_event+0x14c>)
 8000ed4:	f002 fc2c 	bl	8003730 <iprintf>
     return;
 8000ed8:	e012      	b.n	8000f00 <esp_event+0x124>
  else if(!strncmp(pArray[1]," Already log",8))
 8000eda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000edc:	2208      	movs	r2, #8
 8000ede:	4913      	ldr	r1, [pc, #76]	@ (8000f2c <esp_event+0x150>)
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f002 fdaa 	bl	8003a3a <strncmp>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d108      	bne.n	8000efe <esp_event+0x122>
 	    printf("Debug : %s, %s\r\n",pArray[0],pArray[1]);
 8000eec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000eee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	480d      	ldr	r0, [pc, #52]	@ (8000f28 <esp_event+0x14c>)
 8000ef4:	f002 fc1c 	bl	8003730 <iprintf>
			esp_client_conn();
 8000ef8:	f7ff fc56 	bl	80007a8 <esp_client_conn>
      return;
 8000efc:	e000      	b.n	8000f00 <esp_event+0x124>
      return;
 8000efe:	bf00      	nop
  //printf("Debug send : %s\r\n",sendBuf);
}
 8000f00:	3768      	adds	r7, #104	@ 0x68
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000980 	.word	0x20000980
 8000f0c:	080050b0 	.word	0x080050b0
 8000f10:	080050c4 	.word	0x080050c4
 8000f14:	080050c8 	.word	0x080050c8
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	40020000 	.word	0x40020000
 8000f20:	080050d0 	.word	0x080050d0
 8000f24:	080050dc 	.word	0x080050dc
 8000f28:	080050e8 	.word	0x080050e8
 8000f2c:	080050fc 	.word	0x080050fc

08000f30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f34:	b672      	cpsid	i
}
 8000f36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <Error_Handler+0x8>

08000f3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	607b      	str	r3, [r7, #4]
 8000f46:	4b10      	ldr	r3, [pc, #64]	@ (8000f88 <HAL_MspInit+0x4c>)
 8000f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f4a:	4a0f      	ldr	r2, [pc, #60]	@ (8000f88 <HAL_MspInit+0x4c>)
 8000f4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f50:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f52:	4b0d      	ldr	r3, [pc, #52]	@ (8000f88 <HAL_MspInit+0x4c>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	603b      	str	r3, [r7, #0]
 8000f62:	4b09      	ldr	r3, [pc, #36]	@ (8000f88 <HAL_MspInit+0x4c>)
 8000f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f66:	4a08      	ldr	r2, [pc, #32]	@ (8000f88 <HAL_MspInit+0x4c>)
 8000f68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f6e:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <HAL_MspInit+0x4c>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f76:	603b      	str	r3, [r7, #0]
 8000f78:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f7a:	2007      	movs	r0, #7
 8000f7c:	f000 fb2e 	bl	80015dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f80:	bf00      	nop
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	40023800 	.word	0x40023800

08000f8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08c      	sub	sp, #48	@ 0x30
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 031c 	add.w	r3, r7, #28
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a36      	ldr	r2, [pc, #216]	@ (8001084 <HAL_UART_MspInit+0xf8>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d12c      	bne.n	8001008 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61bb      	str	r3, [r7, #24]
 8000fb2:	4b35      	ldr	r3, [pc, #212]	@ (8001088 <HAL_UART_MspInit+0xfc>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb6:	4a34      	ldr	r2, [pc, #208]	@ (8001088 <HAL_UART_MspInit+0xfc>)
 8000fb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fbc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fbe:	4b32      	ldr	r3, [pc, #200]	@ (8001088 <HAL_UART_MspInit+0xfc>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fc6:	61bb      	str	r3, [r7, #24]
 8000fc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
 8000fce:	4b2e      	ldr	r3, [pc, #184]	@ (8001088 <HAL_UART_MspInit+0xfc>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	4a2d      	ldr	r2, [pc, #180]	@ (8001088 <HAL_UART_MspInit+0xfc>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fda:	4b2b      	ldr	r3, [pc, #172]	@ (8001088 <HAL_UART_MspInit+0xfc>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fe6:	230c      	movs	r3, #12
 8000fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ff6:	2307      	movs	r3, #7
 8000ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffa:	f107 031c 	add.w	r3, r7, #28
 8000ffe:	4619      	mov	r1, r3
 8001000:	4822      	ldr	r0, [pc, #136]	@ (800108c <HAL_UART_MspInit+0x100>)
 8001002:	f000 fbbf 	bl	8001784 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001006:	e038      	b.n	800107a <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART6)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a20      	ldr	r2, [pc, #128]	@ (8001090 <HAL_UART_MspInit+0x104>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d133      	bne.n	800107a <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	4b1c      	ldr	r3, [pc, #112]	@ (8001088 <HAL_UART_MspInit+0xfc>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101a:	4a1b      	ldr	r2, [pc, #108]	@ (8001088 <HAL_UART_MspInit+0xfc>)
 800101c:	f043 0320 	orr.w	r3, r3, #32
 8001020:	6453      	str	r3, [r2, #68]	@ 0x44
 8001022:	4b19      	ldr	r3, [pc, #100]	@ (8001088 <HAL_UART_MspInit+0xfc>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001026:	f003 0320 	and.w	r3, r3, #32
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	4b15      	ldr	r3, [pc, #84]	@ (8001088 <HAL_UART_MspInit+0xfc>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	4a14      	ldr	r2, [pc, #80]	@ (8001088 <HAL_UART_MspInit+0xfc>)
 8001038:	f043 0304 	orr.w	r3, r3, #4
 800103c:	6313      	str	r3, [r2, #48]	@ 0x30
 800103e:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <HAL_UART_MspInit+0xfc>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001042:	f003 0304 	and.w	r3, r3, #4
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800104a:	23c0      	movs	r3, #192	@ 0xc0
 800104c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001056:	2303      	movs	r3, #3
 8001058:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800105a:	2308      	movs	r3, #8
 800105c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800105e:	f107 031c 	add.w	r3, r7, #28
 8001062:	4619      	mov	r1, r3
 8001064:	480b      	ldr	r0, [pc, #44]	@ (8001094 <HAL_UART_MspInit+0x108>)
 8001066:	f000 fb8d 	bl	8001784 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2100      	movs	r1, #0
 800106e:	2047      	movs	r0, #71	@ 0x47
 8001070:	f000 fabf 	bl	80015f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001074:	2047      	movs	r0, #71	@ 0x47
 8001076:	f000 fad8 	bl	800162a <HAL_NVIC_EnableIRQ>
}
 800107a:	bf00      	nop
 800107c:	3730      	adds	r7, #48	@ 0x30
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40004400 	.word	0x40004400
 8001088:	40023800 	.word	0x40023800
 800108c:	40020000 	.word	0x40020000
 8001090:	40011400 	.word	0x40011400
 8001094:	40020800 	.word	0x40020800

08001098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <NMI_Handler+0x4>

080010a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <HardFault_Handler+0x4>

080010a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <MemManage_Handler+0x4>

080010b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <BusFault_Handler+0x4>

080010b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010bc:	bf00      	nop
 80010be:	e7fd      	b.n	80010bc <UsageFault_Handler+0x4>

080010c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ee:	f000 f961 	bl	80013b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80010fc:	4802      	ldr	r0, [pc, #8]	@ (8001108 <USART6_IRQHandler+0x10>)
 80010fe:	f001 fa77 	bl	80025f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000924 	.word	0x20000924

0800110c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return 1;
 8001110:	2301      	movs	r3, #1
}
 8001112:	4618      	mov	r0, r3
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <_kill>:

int _kill(int pid, int sig)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001126:	f002 fd53 	bl	8003bd0 <__errno>
 800112a:	4603      	mov	r3, r0
 800112c:	2216      	movs	r2, #22
 800112e:	601a      	str	r2, [r3, #0]
  return -1;
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001134:	4618      	mov	r0, r3
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}

0800113c <_exit>:

void _exit (int status)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001144:	f04f 31ff 	mov.w	r1, #4294967295
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ffe7 	bl	800111c <_kill>
  while (1) {}    /* Make sure we hang here */
 800114e:	bf00      	nop
 8001150:	e7fd      	b.n	800114e <_exit+0x12>

08001152 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b086      	sub	sp, #24
 8001156:	af00      	add	r7, sp, #0
 8001158:	60f8      	str	r0, [r7, #12]
 800115a:	60b9      	str	r1, [r7, #8]
 800115c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
 8001162:	e00a      	b.n	800117a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001164:	f3af 8000 	nop.w
 8001168:	4601      	mov	r1, r0
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	1c5a      	adds	r2, r3, #1
 800116e:	60ba      	str	r2, [r7, #8]
 8001170:	b2ca      	uxtb	r2, r1
 8001172:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	3301      	adds	r3, #1
 8001178:	617b      	str	r3, [r7, #20]
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	429a      	cmp	r2, r3
 8001180:	dbf0      	blt.n	8001164 <_read+0x12>
  }

  return len;
 8001182:	687b      	ldr	r3, [r7, #4]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
 800119c:	e009      	b.n	80011b2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	1c5a      	adds	r2, r3, #1
 80011a2:	60ba      	str	r2, [r7, #8]
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff fca0 	bl	8000aec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	3301      	adds	r3, #1
 80011b0:	617b      	str	r3, [r7, #20]
 80011b2:	697a      	ldr	r2, [r7, #20]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	dbf1      	blt.n	800119e <_write+0x12>
  }
  return len;
 80011ba:	687b      	ldr	r3, [r7, #4]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <_close>:

int _close(int file)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011ec:	605a      	str	r2, [r3, #4]
  return 0;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <_isatty>:

int _isatty(int file)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001204:	2301      	movs	r3, #1
}
 8001206:	4618      	mov	r0, r3
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001212:	b480      	push	{r7}
 8001214:	b085      	sub	sp, #20
 8001216:	af00      	add	r7, sp, #0
 8001218:	60f8      	str	r0, [r7, #12]
 800121a:	60b9      	str	r1, [r7, #8]
 800121c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800121e:	2300      	movs	r3, #0
}
 8001220:	4618      	mov	r0, r3
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001234:	4a14      	ldr	r2, [pc, #80]	@ (8001288 <_sbrk+0x5c>)
 8001236:	4b15      	ldr	r3, [pc, #84]	@ (800128c <_sbrk+0x60>)
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001240:	4b13      	ldr	r3, [pc, #76]	@ (8001290 <_sbrk+0x64>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d102      	bne.n	800124e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001248:	4b11      	ldr	r3, [pc, #68]	@ (8001290 <_sbrk+0x64>)
 800124a:	4a12      	ldr	r2, [pc, #72]	@ (8001294 <_sbrk+0x68>)
 800124c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800124e:	4b10      	ldr	r3, [pc, #64]	@ (8001290 <_sbrk+0x64>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4413      	add	r3, r2
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	429a      	cmp	r2, r3
 800125a:	d207      	bcs.n	800126c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800125c:	f002 fcb8 	bl	8003bd0 <__errno>
 8001260:	4603      	mov	r3, r0
 8001262:	220c      	movs	r2, #12
 8001264:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001266:	f04f 33ff 	mov.w	r3, #4294967295
 800126a:	e009      	b.n	8001280 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800126c:	4b08      	ldr	r3, [pc, #32]	@ (8001290 <_sbrk+0x64>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001272:	4b07      	ldr	r3, [pc, #28]	@ (8001290 <_sbrk+0x64>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	4a05      	ldr	r2, [pc, #20]	@ (8001290 <_sbrk+0x64>)
 800127c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800127e:	68fb      	ldr	r3, [r7, #12]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3718      	adds	r7, #24
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	20020000 	.word	0x20020000
 800128c:	00000400 	.word	0x00000400
 8001290:	200009c0 	.word	0x200009c0
 8001294:	20000b18 	.word	0x20000b18

08001298 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800129c:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <SystemInit+0x20>)
 800129e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012a2:	4a05      	ldr	r2, [pc, #20]	@ (80012b8 <SystemInit+0x20>)
 80012a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000ed00 	.word	0xe000ed00

080012bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80012bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012c0:	f7ff ffea 	bl	8001298 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012c4:	480c      	ldr	r0, [pc, #48]	@ (80012f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012c6:	490d      	ldr	r1, [pc, #52]	@ (80012fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001300 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012cc:	e002      	b.n	80012d4 <LoopCopyDataInit>

080012ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012d2:	3304      	adds	r3, #4

080012d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d8:	d3f9      	bcc.n	80012ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012da:	4a0a      	ldr	r2, [pc, #40]	@ (8001304 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001308 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e0:	e001      	b.n	80012e6 <LoopFillZerobss>

080012e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e4:	3204      	adds	r2, #4

080012e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e8:	d3fb      	bcc.n	80012e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ea:	f002 fc77 	bl	8003bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ee:	f7ff fc15 	bl	8000b1c <main>
  bx  lr    
 80012f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012fc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001300:	08005318 	.word	0x08005318
  ldr r2, =_sbss
 8001304:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001308:	20000b14 	.word	0x20000b14

0800130c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800130c:	e7fe      	b.n	800130c <ADC_IRQHandler>
	...

08001310 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001314:	4b0e      	ldr	r3, [pc, #56]	@ (8001350 <HAL_Init+0x40>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a0d      	ldr	r2, [pc, #52]	@ (8001350 <HAL_Init+0x40>)
 800131a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800131e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001320:	4b0b      	ldr	r3, [pc, #44]	@ (8001350 <HAL_Init+0x40>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a0a      	ldr	r2, [pc, #40]	@ (8001350 <HAL_Init+0x40>)
 8001326:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800132a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800132c:	4b08      	ldr	r3, [pc, #32]	@ (8001350 <HAL_Init+0x40>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a07      	ldr	r2, [pc, #28]	@ (8001350 <HAL_Init+0x40>)
 8001332:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001336:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001338:	2003      	movs	r0, #3
 800133a:	f000 f94f 	bl	80015dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800133e:	2000      	movs	r0, #0
 8001340:	f000 f808 	bl	8001354 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001344:	f7ff fdfa 	bl	8000f3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40023c00 	.word	0x40023c00

08001354 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800135c:	4b12      	ldr	r3, [pc, #72]	@ (80013a8 <HAL_InitTick+0x54>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <HAL_InitTick+0x58>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	4619      	mov	r1, r3
 8001366:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800136a:	fbb3 f3f1 	udiv	r3, r3, r1
 800136e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001372:	4618      	mov	r0, r3
 8001374:	f000 f967 	bl	8001646 <HAL_SYSTICK_Config>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e00e      	b.n	80013a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b0f      	cmp	r3, #15
 8001386:	d80a      	bhi.n	800139e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001388:	2200      	movs	r2, #0
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	f04f 30ff 	mov.w	r0, #4294967295
 8001390:	f000 f92f 	bl	80015f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001394:	4a06      	ldr	r2, [pc, #24]	@ (80013b0 <HAL_InitTick+0x5c>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800139a:	2300      	movs	r3, #0
 800139c:	e000      	b.n	80013a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	2000000c 	.word	0x2000000c
 80013ac:	20000014 	.word	0x20000014
 80013b0:	20000010 	.word	0x20000010

080013b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b8:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <HAL_IncTick+0x20>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	461a      	mov	r2, r3
 80013be:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <HAL_IncTick+0x24>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4413      	add	r3, r2
 80013c4:	4a04      	ldr	r2, [pc, #16]	@ (80013d8 <HAL_IncTick+0x24>)
 80013c6:	6013      	str	r3, [r2, #0]
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	20000014 	.word	0x20000014
 80013d8:	200009c4 	.word	0x200009c4

080013dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  return uwTick;
 80013e0:	4b03      	ldr	r3, [pc, #12]	@ (80013f0 <HAL_GetTick+0x14>)
 80013e2:	681b      	ldr	r3, [r3, #0]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	200009c4 	.word	0x200009c4

080013f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013fc:	f7ff ffee 	bl	80013dc <HAL_GetTick>
 8001400:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800140c:	d005      	beq.n	800141a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800140e:	4b0a      	ldr	r3, [pc, #40]	@ (8001438 <HAL_Delay+0x44>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	461a      	mov	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4413      	add	r3, r2
 8001418:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800141a:	bf00      	nop
 800141c:	f7ff ffde 	bl	80013dc <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	429a      	cmp	r2, r3
 800142a:	d8f7      	bhi.n	800141c <HAL_Delay+0x28>
  {
  }
}
 800142c:	bf00      	nop
 800142e:	bf00      	nop
 8001430:	3710      	adds	r7, #16
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	20000014 	.word	0x20000014

0800143c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800144c:	4b0c      	ldr	r3, [pc, #48]	@ (8001480 <__NVIC_SetPriorityGrouping+0x44>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001458:	4013      	ands	r3, r2
 800145a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001464:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001468:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800146c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800146e:	4a04      	ldr	r2, [pc, #16]	@ (8001480 <__NVIC_SetPriorityGrouping+0x44>)
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	60d3      	str	r3, [r2, #12]
}
 8001474:	bf00      	nop
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	e000ed00 	.word	0xe000ed00

08001484 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001488:	4b04      	ldr	r3, [pc, #16]	@ (800149c <__NVIC_GetPriorityGrouping+0x18>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	0a1b      	lsrs	r3, r3, #8
 800148e:	f003 0307 	and.w	r3, r3, #7
}
 8001492:	4618      	mov	r0, r3
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	db0b      	blt.n	80014ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	f003 021f 	and.w	r2, r3, #31
 80014b8:	4907      	ldr	r1, [pc, #28]	@ (80014d8 <__NVIC_EnableIRQ+0x38>)
 80014ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014be:	095b      	lsrs	r3, r3, #5
 80014c0:	2001      	movs	r0, #1
 80014c2:	fa00 f202 	lsl.w	r2, r0, r2
 80014c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000e100 	.word	0xe000e100

080014dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	6039      	str	r1, [r7, #0]
 80014e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	db0a      	blt.n	8001506 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	490c      	ldr	r1, [pc, #48]	@ (8001528 <__NVIC_SetPriority+0x4c>)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	0112      	lsls	r2, r2, #4
 80014fc:	b2d2      	uxtb	r2, r2
 80014fe:	440b      	add	r3, r1
 8001500:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001504:	e00a      	b.n	800151c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	b2da      	uxtb	r2, r3
 800150a:	4908      	ldr	r1, [pc, #32]	@ (800152c <__NVIC_SetPriority+0x50>)
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	3b04      	subs	r3, #4
 8001514:	0112      	lsls	r2, r2, #4
 8001516:	b2d2      	uxtb	r2, r2
 8001518:	440b      	add	r3, r1
 800151a:	761a      	strb	r2, [r3, #24]
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000e100 	.word	0xe000e100
 800152c:	e000ed00 	.word	0xe000ed00

08001530 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001530:	b480      	push	{r7}
 8001532:	b089      	sub	sp, #36	@ 0x24
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	60b9      	str	r1, [r7, #8]
 800153a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f1c3 0307 	rsb	r3, r3, #7
 800154a:	2b04      	cmp	r3, #4
 800154c:	bf28      	it	cs
 800154e:	2304      	movcs	r3, #4
 8001550:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3304      	adds	r3, #4
 8001556:	2b06      	cmp	r3, #6
 8001558:	d902      	bls.n	8001560 <NVIC_EncodePriority+0x30>
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3b03      	subs	r3, #3
 800155e:	e000      	b.n	8001562 <NVIC_EncodePriority+0x32>
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001564:	f04f 32ff 	mov.w	r2, #4294967295
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	43da      	mvns	r2, r3
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	401a      	ands	r2, r3
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001578:	f04f 31ff 	mov.w	r1, #4294967295
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	fa01 f303 	lsl.w	r3, r1, r3
 8001582:	43d9      	mvns	r1, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001588:	4313      	orrs	r3, r2
         );
}
 800158a:	4618      	mov	r0, r3
 800158c:	3724      	adds	r7, #36	@ 0x24
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
	...

08001598 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015a8:	d301      	bcc.n	80015ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015aa:	2301      	movs	r3, #1
 80015ac:	e00f      	b.n	80015ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ae:	4a0a      	ldr	r2, [pc, #40]	@ (80015d8 <SysTick_Config+0x40>)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3b01      	subs	r3, #1
 80015b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015b6:	210f      	movs	r1, #15
 80015b8:	f04f 30ff 	mov.w	r0, #4294967295
 80015bc:	f7ff ff8e 	bl	80014dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c0:	4b05      	ldr	r3, [pc, #20]	@ (80015d8 <SysTick_Config+0x40>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015c6:	4b04      	ldr	r3, [pc, #16]	@ (80015d8 <SysTick_Config+0x40>)
 80015c8:	2207      	movs	r2, #7
 80015ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	e000e010 	.word	0xe000e010

080015dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff ff29 	bl	800143c <__NVIC_SetPriorityGrouping>
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b086      	sub	sp, #24
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	4603      	mov	r3, r0
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	607a      	str	r2, [r7, #4]
 80015fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001604:	f7ff ff3e 	bl	8001484 <__NVIC_GetPriorityGrouping>
 8001608:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	68b9      	ldr	r1, [r7, #8]
 800160e:	6978      	ldr	r0, [r7, #20]
 8001610:	f7ff ff8e 	bl	8001530 <NVIC_EncodePriority>
 8001614:	4602      	mov	r2, r0
 8001616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800161a:	4611      	mov	r1, r2
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff ff5d 	bl	80014dc <__NVIC_SetPriority>
}
 8001622:	bf00      	nop
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
 8001630:	4603      	mov	r3, r0
 8001632:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ff31 	bl	80014a0 <__NVIC_EnableIRQ>
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff ffa2 	bl	8001598 <SysTick_Config>
 8001654:	4603      	mov	r3, r0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	b084      	sub	sp, #16
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800166a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800166c:	f7ff feb6 	bl	80013dc <HAL_GetTick>
 8001670:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d008      	beq.n	8001690 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2280      	movs	r2, #128	@ 0x80
 8001682:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e052      	b.n	8001736 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 0216 	bic.w	r2, r2, #22
 800169e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	695a      	ldr	r2, [r3, #20]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016ae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d103      	bne.n	80016c0 <HAL_DMA_Abort+0x62>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d007      	beq.n	80016d0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 0208 	bic.w	r2, r2, #8
 80016ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 0201 	bic.w	r2, r2, #1
 80016de:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016e0:	e013      	b.n	800170a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016e2:	f7ff fe7b 	bl	80013dc <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b05      	cmp	r3, #5
 80016ee:	d90c      	bls.n	800170a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2220      	movs	r2, #32
 80016f4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2203      	movs	r2, #3
 80016fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e015      	b.n	8001736 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1e4      	bne.n	80016e2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800171c:	223f      	movs	r2, #63	@ 0x3f
 800171e:	409a      	lsls	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3710      	adds	r7, #16
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800173e:	b480      	push	{r7}
 8001740:	b083      	sub	sp, #12
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d004      	beq.n	800175c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2280      	movs	r2, #128	@ 0x80
 8001756:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e00c      	b.n	8001776 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2205      	movs	r2, #5
 8001760:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f022 0201 	bic.w	r2, r2, #1
 8001772:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
	...

08001784 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001784:	b480      	push	{r7}
 8001786:	b089      	sub	sp, #36	@ 0x24
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001796:	2300      	movs	r3, #0
 8001798:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
 800179e:	e159      	b.n	8001a54 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017a0:	2201      	movs	r2, #1
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	4013      	ands	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017b4:	693a      	ldr	r2, [r7, #16]
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	f040 8148 	bne.w	8001a4e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 0303 	and.w	r3, r3, #3
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d005      	beq.n	80017d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d130      	bne.n	8001838 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	2203      	movs	r2, #3
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4013      	ands	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	68da      	ldr	r2, [r3, #12]
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800180c:	2201      	movs	r2, #1
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	091b      	lsrs	r3, r3, #4
 8001822:	f003 0201 	and.w	r2, r3, #1
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 0303 	and.w	r3, r3, #3
 8001840:	2b03      	cmp	r3, #3
 8001842:	d017      	beq.n	8001874 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	2203      	movs	r2, #3
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4013      	ands	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	689a      	ldr	r2, [r3, #8]
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4313      	orrs	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 0303 	and.w	r3, r3, #3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d123      	bne.n	80018c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	08da      	lsrs	r2, r3, #3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3208      	adds	r2, #8
 8001888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800188c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	220f      	movs	r2, #15
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	691a      	ldr	r2, [r3, #16]
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	08da      	lsrs	r2, r3, #3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	3208      	adds	r2, #8
 80018c2:	69b9      	ldr	r1, [r7, #24]
 80018c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	2203      	movs	r2, #3
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4013      	ands	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 0203 	and.w	r2, r3, #3
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001904:	2b00      	cmp	r3, #0
 8001906:	f000 80a2 	beq.w	8001a4e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	4b57      	ldr	r3, [pc, #348]	@ (8001a6c <HAL_GPIO_Init+0x2e8>)
 8001910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001912:	4a56      	ldr	r2, [pc, #344]	@ (8001a6c <HAL_GPIO_Init+0x2e8>)
 8001914:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001918:	6453      	str	r3, [r2, #68]	@ 0x44
 800191a:	4b54      	ldr	r3, [pc, #336]	@ (8001a6c <HAL_GPIO_Init+0x2e8>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800191e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001926:	4a52      	ldr	r2, [pc, #328]	@ (8001a70 <HAL_GPIO_Init+0x2ec>)
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	089b      	lsrs	r3, r3, #2
 800192c:	3302      	adds	r3, #2
 800192e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001932:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	220f      	movs	r2, #15
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4013      	ands	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a49      	ldr	r2, [pc, #292]	@ (8001a74 <HAL_GPIO_Init+0x2f0>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d019      	beq.n	8001986 <HAL_GPIO_Init+0x202>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a48      	ldr	r2, [pc, #288]	@ (8001a78 <HAL_GPIO_Init+0x2f4>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d013      	beq.n	8001982 <HAL_GPIO_Init+0x1fe>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a47      	ldr	r2, [pc, #284]	@ (8001a7c <HAL_GPIO_Init+0x2f8>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d00d      	beq.n	800197e <HAL_GPIO_Init+0x1fa>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a46      	ldr	r2, [pc, #280]	@ (8001a80 <HAL_GPIO_Init+0x2fc>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d007      	beq.n	800197a <HAL_GPIO_Init+0x1f6>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a45      	ldr	r2, [pc, #276]	@ (8001a84 <HAL_GPIO_Init+0x300>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d101      	bne.n	8001976 <HAL_GPIO_Init+0x1f2>
 8001972:	2304      	movs	r3, #4
 8001974:	e008      	b.n	8001988 <HAL_GPIO_Init+0x204>
 8001976:	2307      	movs	r3, #7
 8001978:	e006      	b.n	8001988 <HAL_GPIO_Init+0x204>
 800197a:	2303      	movs	r3, #3
 800197c:	e004      	b.n	8001988 <HAL_GPIO_Init+0x204>
 800197e:	2302      	movs	r3, #2
 8001980:	e002      	b.n	8001988 <HAL_GPIO_Init+0x204>
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <HAL_GPIO_Init+0x204>
 8001986:	2300      	movs	r3, #0
 8001988:	69fa      	ldr	r2, [r7, #28]
 800198a:	f002 0203 	and.w	r2, r2, #3
 800198e:	0092      	lsls	r2, r2, #2
 8001990:	4093      	lsls	r3, r2
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4313      	orrs	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001998:	4935      	ldr	r1, [pc, #212]	@ (8001a70 <HAL_GPIO_Init+0x2ec>)
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	089b      	lsrs	r3, r3, #2
 800199e:	3302      	adds	r3, #2
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019a6:	4b38      	ldr	r3, [pc, #224]	@ (8001a88 <HAL_GPIO_Init+0x304>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	43db      	mvns	r3, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4013      	ands	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019ca:	4a2f      	ldr	r2, [pc, #188]	@ (8001a88 <HAL_GPIO_Init+0x304>)
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001a88 <HAL_GPIO_Init+0x304>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	43db      	mvns	r3, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019f4:	4a24      	ldr	r2, [pc, #144]	@ (8001a88 <HAL_GPIO_Init+0x304>)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019fa:	4b23      	ldr	r3, [pc, #140]	@ (8001a88 <HAL_GPIO_Init+0x304>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	4013      	ands	r3, r2
 8001a08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a1e:	4a1a      	ldr	r2, [pc, #104]	@ (8001a88 <HAL_GPIO_Init+0x304>)
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a24:	4b18      	ldr	r3, [pc, #96]	@ (8001a88 <HAL_GPIO_Init+0x304>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4013      	ands	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a48:	4a0f      	ldr	r2, [pc, #60]	@ (8001a88 <HAL_GPIO_Init+0x304>)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	3301      	adds	r3, #1
 8001a52:	61fb      	str	r3, [r7, #28]
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	2b0f      	cmp	r3, #15
 8001a58:	f67f aea2 	bls.w	80017a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a5c:	bf00      	nop
 8001a5e:	bf00      	nop
 8001a60:	3724      	adds	r7, #36	@ 0x24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40013800 	.word	0x40013800
 8001a74:	40020000 	.word	0x40020000
 8001a78:	40020400 	.word	0x40020400
 8001a7c:	40020800 	.word	0x40020800
 8001a80:	40020c00 	.word	0x40020c00
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40013c00 	.word	0x40013c00

08001a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	460b      	mov	r3, r1
 8001a96:	807b      	strh	r3, [r7, #2]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a9c:	787b      	ldrb	r3, [r7, #1]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d003      	beq.n	8001aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aa2:	887a      	ldrh	r2, [r7, #2]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001aa8:	e003      	b.n	8001ab2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001aaa:	887b      	ldrh	r3, [r7, #2]
 8001aac:	041a      	lsls	r2, r3, #16
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	619a      	str	r2, [r3, #24]
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
	...

08001ac0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e267      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d075      	beq.n	8001bca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001ade:	4b88      	ldr	r3, [pc, #544]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	d00c      	beq.n	8001b04 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aea:	4b85      	ldr	r3, [pc, #532]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d112      	bne.n	8001b1c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001af6:	4b82      	ldr	r3, [pc, #520]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001afe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b02:	d10b      	bne.n	8001b1c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b04:	4b7e      	ldr	r3, [pc, #504]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d05b      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x108>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d157      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e242      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b24:	d106      	bne.n	8001b34 <HAL_RCC_OscConfig+0x74>
 8001b26:	4b76      	ldr	r3, [pc, #472]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a75      	ldr	r2, [pc, #468]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	e01d      	b.n	8001b70 <HAL_RCC_OscConfig+0xb0>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b3c:	d10c      	bne.n	8001b58 <HAL_RCC_OscConfig+0x98>
 8001b3e:	4b70      	ldr	r3, [pc, #448]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a6f      	ldr	r2, [pc, #444]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	4b6d      	ldr	r3, [pc, #436]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a6c      	ldr	r2, [pc, #432]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	e00b      	b.n	8001b70 <HAL_RCC_OscConfig+0xb0>
 8001b58:	4b69      	ldr	r3, [pc, #420]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a68      	ldr	r2, [pc, #416]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b62:	6013      	str	r3, [r2, #0]
 8001b64:	4b66      	ldr	r3, [pc, #408]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a65      	ldr	r2, [pc, #404]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d013      	beq.n	8001ba0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b78:	f7ff fc30 	bl	80013dc <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b80:	f7ff fc2c 	bl	80013dc <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b64      	cmp	r3, #100	@ 0x64
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e207      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b92:	4b5b      	ldr	r3, [pc, #364]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0f0      	beq.n	8001b80 <HAL_RCC_OscConfig+0xc0>
 8001b9e:	e014      	b.n	8001bca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba0:	f7ff fc1c 	bl	80013dc <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba8:	f7ff fc18 	bl	80013dc <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b64      	cmp	r3, #100	@ 0x64
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e1f3      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bba:	4b51      	ldr	r3, [pc, #324]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1f0      	bne.n	8001ba8 <HAL_RCC_OscConfig+0xe8>
 8001bc6:	e000      	b.n	8001bca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 0302 	and.w	r3, r3, #2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d063      	beq.n	8001c9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001bd6:	4b4a      	ldr	r3, [pc, #296]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 030c 	and.w	r3, r3, #12
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00b      	beq.n	8001bfa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001be2:	4b47      	ldr	r3, [pc, #284]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001bea:	2b08      	cmp	r3, #8
 8001bec:	d11c      	bne.n	8001c28 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bee:	4b44      	ldr	r3, [pc, #272]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d116      	bne.n	8001c28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bfa:	4b41      	ldr	r3, [pc, #260]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d005      	beq.n	8001c12 <HAL_RCC_OscConfig+0x152>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d001      	beq.n	8001c12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e1c7      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c12:	4b3b      	ldr	r3, [pc, #236]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	4937      	ldr	r1, [pc, #220]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c26:	e03a      	b.n	8001c9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d020      	beq.n	8001c72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c30:	4b34      	ldr	r3, [pc, #208]	@ (8001d04 <HAL_RCC_OscConfig+0x244>)
 8001c32:	2201      	movs	r2, #1
 8001c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c36:	f7ff fbd1 	bl	80013dc <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c3e:	f7ff fbcd 	bl	80013dc <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e1a8      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c50:	4b2b      	ldr	r3, [pc, #172]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0f0      	beq.n	8001c3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5c:	4b28      	ldr	r3, [pc, #160]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	4925      	ldr	r1, [pc, #148]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	600b      	str	r3, [r1, #0]
 8001c70:	e015      	b.n	8001c9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c72:	4b24      	ldr	r3, [pc, #144]	@ (8001d04 <HAL_RCC_OscConfig+0x244>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c78:	f7ff fbb0 	bl	80013dc <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c80:	f7ff fbac 	bl	80013dc <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e187      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c92:	4b1b      	ldr	r3, [pc, #108]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d036      	beq.n	8001d18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d016      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cb2:	4b15      	ldr	r3, [pc, #84]	@ (8001d08 <HAL_RCC_OscConfig+0x248>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb8:	f7ff fb90 	bl	80013dc <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc0:	f7ff fb8c 	bl	80013dc <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e167      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d00 <HAL_RCC_OscConfig+0x240>)
 8001cd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x200>
 8001cde:	e01b      	b.n	8001d18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ce0:	4b09      	ldr	r3, [pc, #36]	@ (8001d08 <HAL_RCC_OscConfig+0x248>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce6:	f7ff fb79 	bl	80013dc <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cec:	e00e      	b.n	8001d0c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cee:	f7ff fb75 	bl	80013dc <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d907      	bls.n	8001d0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e150      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
 8001d00:	40023800 	.word	0x40023800
 8001d04:	42470000 	.word	0x42470000
 8001d08:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d0c:	4b88      	ldr	r3, [pc, #544]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001d0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1ea      	bne.n	8001cee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0304 	and.w	r3, r3, #4
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 8097 	beq.w	8001e54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d26:	2300      	movs	r3, #0
 8001d28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d2a:	4b81      	ldr	r3, [pc, #516]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10f      	bne.n	8001d56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	60bb      	str	r3, [r7, #8]
 8001d3a:	4b7d      	ldr	r3, [pc, #500]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3e:	4a7c      	ldr	r2, [pc, #496]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001d40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d46:	4b7a      	ldr	r3, [pc, #488]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d4e:	60bb      	str	r3, [r7, #8]
 8001d50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d52:	2301      	movs	r3, #1
 8001d54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d56:	4b77      	ldr	r3, [pc, #476]	@ (8001f34 <HAL_RCC_OscConfig+0x474>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d118      	bne.n	8001d94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d62:	4b74      	ldr	r3, [pc, #464]	@ (8001f34 <HAL_RCC_OscConfig+0x474>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a73      	ldr	r2, [pc, #460]	@ (8001f34 <HAL_RCC_OscConfig+0x474>)
 8001d68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d6e:	f7ff fb35 	bl	80013dc <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d76:	f7ff fb31 	bl	80013dc <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e10c      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d88:	4b6a      	ldr	r3, [pc, #424]	@ (8001f34 <HAL_RCC_OscConfig+0x474>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d106      	bne.n	8001daa <HAL_RCC_OscConfig+0x2ea>
 8001d9c:	4b64      	ldr	r3, [pc, #400]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001d9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001da0:	4a63      	ldr	r2, [pc, #396]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001da2:	f043 0301 	orr.w	r3, r3, #1
 8001da6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001da8:	e01c      	b.n	8001de4 <HAL_RCC_OscConfig+0x324>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	2b05      	cmp	r3, #5
 8001db0:	d10c      	bne.n	8001dcc <HAL_RCC_OscConfig+0x30c>
 8001db2:	4b5f      	ldr	r3, [pc, #380]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001db6:	4a5e      	ldr	r2, [pc, #376]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001db8:	f043 0304 	orr.w	r3, r3, #4
 8001dbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dbe:	4b5c      	ldr	r3, [pc, #368]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dc2:	4a5b      	ldr	r2, [pc, #364]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dca:	e00b      	b.n	8001de4 <HAL_RCC_OscConfig+0x324>
 8001dcc:	4b58      	ldr	r3, [pc, #352]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001dce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dd0:	4a57      	ldr	r2, [pc, #348]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001dd2:	f023 0301 	bic.w	r3, r3, #1
 8001dd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dd8:	4b55      	ldr	r3, [pc, #340]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ddc:	4a54      	ldr	r2, [pc, #336]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001dde:	f023 0304 	bic.w	r3, r3, #4
 8001de2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d015      	beq.n	8001e18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dec:	f7ff faf6 	bl	80013dc <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df2:	e00a      	b.n	8001e0a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df4:	f7ff faf2 	bl	80013dc <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e0cb      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e0a:	4b49      	ldr	r3, [pc, #292]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0ee      	beq.n	8001df4 <HAL_RCC_OscConfig+0x334>
 8001e16:	e014      	b.n	8001e42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e18:	f7ff fae0 	bl	80013dc <HAL_GetTick>
 8001e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e1e:	e00a      	b.n	8001e36 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e20:	f7ff fadc 	bl	80013dc <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e0b5      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e36:	4b3e      	ldr	r3, [pc, #248]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001e38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1ee      	bne.n	8001e20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e42:	7dfb      	ldrb	r3, [r7, #23]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d105      	bne.n	8001e54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e48:	4b39      	ldr	r3, [pc, #228]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4c:	4a38      	ldr	r2, [pc, #224]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001e4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e52:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 80a1 	beq.w	8001fa0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e5e:	4b34      	ldr	r3, [pc, #208]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 030c 	and.w	r3, r3, #12
 8001e66:	2b08      	cmp	r3, #8
 8001e68:	d05c      	beq.n	8001f24 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	699b      	ldr	r3, [r3, #24]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d141      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e72:	4b31      	ldr	r3, [pc, #196]	@ (8001f38 <HAL_RCC_OscConfig+0x478>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e78:	f7ff fab0 	bl	80013dc <HAL_GetTick>
 8001e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e80:	f7ff faac 	bl	80013dc <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e087      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e92:	4b27      	ldr	r3, [pc, #156]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f0      	bne.n	8001e80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	69da      	ldr	r2, [r3, #28]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eac:	019b      	lsls	r3, r3, #6
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb4:	085b      	lsrs	r3, r3, #1
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	041b      	lsls	r3, r3, #16
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec0:	061b      	lsls	r3, r3, #24
 8001ec2:	491b      	ldr	r1, [pc, #108]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f38 <HAL_RCC_OscConfig+0x478>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ece:	f7ff fa85 	bl	80013dc <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed6:	f7ff fa81 	bl	80013dc <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e05c      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ee8:	4b11      	ldr	r3, [pc, #68]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0f0      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x416>
 8001ef4:	e054      	b.n	8001fa0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef6:	4b10      	ldr	r3, [pc, #64]	@ (8001f38 <HAL_RCC_OscConfig+0x478>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efc:	f7ff fa6e 	bl	80013dc <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f04:	f7ff fa6a 	bl	80013dc <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e045      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f16:	4b06      	ldr	r3, [pc, #24]	@ (8001f30 <HAL_RCC_OscConfig+0x470>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0x444>
 8001f22:	e03d      	b.n	8001fa0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d107      	bne.n	8001f3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e038      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40007000 	.word	0x40007000
 8001f38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fac <HAL_RCC_OscConfig+0x4ec>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d028      	beq.n	8001f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d121      	bne.n	8001f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d11a      	bne.n	8001f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d111      	bne.n	8001f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f82:	085b      	lsrs	r3, r3, #1
 8001f84:	3b01      	subs	r3, #1
 8001f86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d107      	bne.n	8001f9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d001      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40023800 	.word	0x40023800

08001fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d101      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e0cc      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fc4:	4b68      	ldr	r3, [pc, #416]	@ (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d90c      	bls.n	8001fec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd2:	4b65      	ldr	r3, [pc, #404]	@ (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	b2d2      	uxtb	r2, r2
 8001fd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fda:	4b63      	ldr	r3, [pc, #396]	@ (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	683a      	ldr	r2, [r7, #0]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d001      	beq.n	8001fec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e0b8      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d020      	beq.n	800203a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	2b00      	cmp	r3, #0
 8002002:	d005      	beq.n	8002010 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002004:	4b59      	ldr	r3, [pc, #356]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	4a58      	ldr	r2, [pc, #352]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 800200a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800200e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0308 	and.w	r3, r3, #8
 8002018:	2b00      	cmp	r3, #0
 800201a:	d005      	beq.n	8002028 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800201c:	4b53      	ldr	r3, [pc, #332]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	4a52      	ldr	r2, [pc, #328]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002022:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002026:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002028:	4b50      	ldr	r3, [pc, #320]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	494d      	ldr	r1, [pc, #308]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	4313      	orrs	r3, r2
 8002038:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d044      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d107      	bne.n	800205e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204e:	4b47      	ldr	r3, [pc, #284]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d119      	bne.n	800208e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e07f      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b02      	cmp	r3, #2
 8002064:	d003      	beq.n	800206e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800206a:	2b03      	cmp	r3, #3
 800206c:	d107      	bne.n	800207e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800206e:	4b3f      	ldr	r3, [pc, #252]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d109      	bne.n	800208e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e06f      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800207e:	4b3b      	ldr	r3, [pc, #236]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e067      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800208e:	4b37      	ldr	r3, [pc, #220]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f023 0203 	bic.w	r2, r3, #3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	4934      	ldr	r1, [pc, #208]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 800209c:	4313      	orrs	r3, r2
 800209e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020a0:	f7ff f99c 	bl	80013dc <HAL_GetTick>
 80020a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020a6:	e00a      	b.n	80020be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a8:	f7ff f998 	bl	80013dc <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e04f      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020be:	4b2b      	ldr	r3, [pc, #172]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 020c 	and.w	r2, r3, #12
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d1eb      	bne.n	80020a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020d0:	4b25      	ldr	r3, [pc, #148]	@ (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d20c      	bcs.n	80020f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020de:	4b22      	ldr	r3, [pc, #136]	@ (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e6:	4b20      	ldr	r3, [pc, #128]	@ (8002168 <HAL_RCC_ClockConfig+0x1b8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d001      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e032      	b.n	800215e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	2b00      	cmp	r3, #0
 8002102:	d008      	beq.n	8002116 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002104:	4b19      	ldr	r3, [pc, #100]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	4916      	ldr	r1, [pc, #88]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002112:	4313      	orrs	r3, r2
 8002114:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	2b00      	cmp	r3, #0
 8002120:	d009      	beq.n	8002136 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002122:	4b12      	ldr	r3, [pc, #72]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	490e      	ldr	r1, [pc, #56]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 8002132:	4313      	orrs	r3, r2
 8002134:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002136:	f000 f821 	bl	800217c <HAL_RCC_GetSysClockFreq>
 800213a:	4602      	mov	r2, r0
 800213c:	4b0b      	ldr	r3, [pc, #44]	@ (800216c <HAL_RCC_ClockConfig+0x1bc>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	091b      	lsrs	r3, r3, #4
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	490a      	ldr	r1, [pc, #40]	@ (8002170 <HAL_RCC_ClockConfig+0x1c0>)
 8002148:	5ccb      	ldrb	r3, [r1, r3]
 800214a:	fa22 f303 	lsr.w	r3, r2, r3
 800214e:	4a09      	ldr	r2, [pc, #36]	@ (8002174 <HAL_RCC_ClockConfig+0x1c4>)
 8002150:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002152:	4b09      	ldr	r3, [pc, #36]	@ (8002178 <HAL_RCC_ClockConfig+0x1c8>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff f8fc 	bl	8001354 <HAL_InitTick>

  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40023c00 	.word	0x40023c00
 800216c:	40023800 	.word	0x40023800
 8002170:	0800510c 	.word	0x0800510c
 8002174:	2000000c 	.word	0x2000000c
 8002178:	20000010 	.word	0x20000010

0800217c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800217c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002180:	b094      	sub	sp, #80	@ 0x50
 8002182:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002184:	2300      	movs	r3, #0
 8002186:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002188:	2300      	movs	r3, #0
 800218a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800218c:	2300      	movs	r3, #0
 800218e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002190:	2300      	movs	r3, #0
 8002192:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002194:	4b79      	ldr	r3, [pc, #484]	@ (800237c <HAL_RCC_GetSysClockFreq+0x200>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 030c 	and.w	r3, r3, #12
 800219c:	2b08      	cmp	r3, #8
 800219e:	d00d      	beq.n	80021bc <HAL_RCC_GetSysClockFreq+0x40>
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	f200 80e1 	bhi.w	8002368 <HAL_RCC_GetSysClockFreq+0x1ec>
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d002      	beq.n	80021b0 <HAL_RCC_GetSysClockFreq+0x34>
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	d003      	beq.n	80021b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80021ae:	e0db      	b.n	8002368 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021b0:	4b73      	ldr	r3, [pc, #460]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x204>)
 80021b2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80021b4:	e0db      	b.n	800236e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021b6:	4b73      	ldr	r3, [pc, #460]	@ (8002384 <HAL_RCC_GetSysClockFreq+0x208>)
 80021b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80021ba:	e0d8      	b.n	800236e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021bc:	4b6f      	ldr	r3, [pc, #444]	@ (800237c <HAL_RCC_GetSysClockFreq+0x200>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021c4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021c6:	4b6d      	ldr	r3, [pc, #436]	@ (800237c <HAL_RCC_GetSysClockFreq+0x200>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d063      	beq.n	800229a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021d2:	4b6a      	ldr	r3, [pc, #424]	@ (800237c <HAL_RCC_GetSysClockFreq+0x200>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	099b      	lsrs	r3, r3, #6
 80021d8:	2200      	movs	r2, #0
 80021da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80021dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80021de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80021e6:	2300      	movs	r3, #0
 80021e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80021ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80021ee:	4622      	mov	r2, r4
 80021f0:	462b      	mov	r3, r5
 80021f2:	f04f 0000 	mov.w	r0, #0
 80021f6:	f04f 0100 	mov.w	r1, #0
 80021fa:	0159      	lsls	r1, r3, #5
 80021fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002200:	0150      	lsls	r0, r2, #5
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	4621      	mov	r1, r4
 8002208:	1a51      	subs	r1, r2, r1
 800220a:	6139      	str	r1, [r7, #16]
 800220c:	4629      	mov	r1, r5
 800220e:	eb63 0301 	sbc.w	r3, r3, r1
 8002212:	617b      	str	r3, [r7, #20]
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	f04f 0300 	mov.w	r3, #0
 800221c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002220:	4659      	mov	r1, fp
 8002222:	018b      	lsls	r3, r1, #6
 8002224:	4651      	mov	r1, sl
 8002226:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800222a:	4651      	mov	r1, sl
 800222c:	018a      	lsls	r2, r1, #6
 800222e:	4651      	mov	r1, sl
 8002230:	ebb2 0801 	subs.w	r8, r2, r1
 8002234:	4659      	mov	r1, fp
 8002236:	eb63 0901 	sbc.w	r9, r3, r1
 800223a:	f04f 0200 	mov.w	r2, #0
 800223e:	f04f 0300 	mov.w	r3, #0
 8002242:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002246:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800224a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800224e:	4690      	mov	r8, r2
 8002250:	4699      	mov	r9, r3
 8002252:	4623      	mov	r3, r4
 8002254:	eb18 0303 	adds.w	r3, r8, r3
 8002258:	60bb      	str	r3, [r7, #8]
 800225a:	462b      	mov	r3, r5
 800225c:	eb49 0303 	adc.w	r3, r9, r3
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	f04f 0300 	mov.w	r3, #0
 800226a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800226e:	4629      	mov	r1, r5
 8002270:	024b      	lsls	r3, r1, #9
 8002272:	4621      	mov	r1, r4
 8002274:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002278:	4621      	mov	r1, r4
 800227a:	024a      	lsls	r2, r1, #9
 800227c:	4610      	mov	r0, r2
 800227e:	4619      	mov	r1, r3
 8002280:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002282:	2200      	movs	r2, #0
 8002284:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002286:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002288:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800228c:	f7fe f810 	bl	80002b0 <__aeabi_uldivmod>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4613      	mov	r3, r2
 8002296:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002298:	e058      	b.n	800234c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800229a:	4b38      	ldr	r3, [pc, #224]	@ (800237c <HAL_RCC_GetSysClockFreq+0x200>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	099b      	lsrs	r3, r3, #6
 80022a0:	2200      	movs	r2, #0
 80022a2:	4618      	mov	r0, r3
 80022a4:	4611      	mov	r1, r2
 80022a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022aa:	623b      	str	r3, [r7, #32]
 80022ac:	2300      	movs	r3, #0
 80022ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80022b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80022b4:	4642      	mov	r2, r8
 80022b6:	464b      	mov	r3, r9
 80022b8:	f04f 0000 	mov.w	r0, #0
 80022bc:	f04f 0100 	mov.w	r1, #0
 80022c0:	0159      	lsls	r1, r3, #5
 80022c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022c6:	0150      	lsls	r0, r2, #5
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	4641      	mov	r1, r8
 80022ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80022d2:	4649      	mov	r1, r9
 80022d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80022d8:	f04f 0200 	mov.w	r2, #0
 80022dc:	f04f 0300 	mov.w	r3, #0
 80022e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80022e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80022e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80022ec:	ebb2 040a 	subs.w	r4, r2, sl
 80022f0:	eb63 050b 	sbc.w	r5, r3, fp
 80022f4:	f04f 0200 	mov.w	r2, #0
 80022f8:	f04f 0300 	mov.w	r3, #0
 80022fc:	00eb      	lsls	r3, r5, #3
 80022fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002302:	00e2      	lsls	r2, r4, #3
 8002304:	4614      	mov	r4, r2
 8002306:	461d      	mov	r5, r3
 8002308:	4643      	mov	r3, r8
 800230a:	18e3      	adds	r3, r4, r3
 800230c:	603b      	str	r3, [r7, #0]
 800230e:	464b      	mov	r3, r9
 8002310:	eb45 0303 	adc.w	r3, r5, r3
 8002314:	607b      	str	r3, [r7, #4]
 8002316:	f04f 0200 	mov.w	r2, #0
 800231a:	f04f 0300 	mov.w	r3, #0
 800231e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002322:	4629      	mov	r1, r5
 8002324:	028b      	lsls	r3, r1, #10
 8002326:	4621      	mov	r1, r4
 8002328:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800232c:	4621      	mov	r1, r4
 800232e:	028a      	lsls	r2, r1, #10
 8002330:	4610      	mov	r0, r2
 8002332:	4619      	mov	r1, r3
 8002334:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002336:	2200      	movs	r2, #0
 8002338:	61bb      	str	r3, [r7, #24]
 800233a:	61fa      	str	r2, [r7, #28]
 800233c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002340:	f7fd ffb6 	bl	80002b0 <__aeabi_uldivmod>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	4613      	mov	r3, r2
 800234a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800234c:	4b0b      	ldr	r3, [pc, #44]	@ (800237c <HAL_RCC_GetSysClockFreq+0x200>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	0c1b      	lsrs	r3, r3, #16
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	3301      	adds	r3, #1
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800235c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800235e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002360:	fbb2 f3f3 	udiv	r3, r2, r3
 8002364:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002366:	e002      	b.n	800236e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002368:	4b05      	ldr	r3, [pc, #20]	@ (8002380 <HAL_RCC_GetSysClockFreq+0x204>)
 800236a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800236c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800236e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002370:	4618      	mov	r0, r3
 8002372:	3750      	adds	r7, #80	@ 0x50
 8002374:	46bd      	mov	sp, r7
 8002376:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800237a:	bf00      	nop
 800237c:	40023800 	.word	0x40023800
 8002380:	00f42400 	.word	0x00f42400
 8002384:	007a1200 	.word	0x007a1200

08002388 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800238c:	4b03      	ldr	r3, [pc, #12]	@ (800239c <HAL_RCC_GetHCLKFreq+0x14>)
 800238e:	681b      	ldr	r3, [r3, #0]
}
 8002390:	4618      	mov	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	2000000c 	.word	0x2000000c

080023a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023a4:	f7ff fff0 	bl	8002388 <HAL_RCC_GetHCLKFreq>
 80023a8:	4602      	mov	r2, r0
 80023aa:	4b05      	ldr	r3, [pc, #20]	@ (80023c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	0a9b      	lsrs	r3, r3, #10
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	4903      	ldr	r1, [pc, #12]	@ (80023c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023b6:	5ccb      	ldrb	r3, [r1, r3]
 80023b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023bc:	4618      	mov	r0, r3
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40023800 	.word	0x40023800
 80023c4:	0800511c 	.word	0x0800511c

080023c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023cc:	f7ff ffdc 	bl	8002388 <HAL_RCC_GetHCLKFreq>
 80023d0:	4602      	mov	r2, r0
 80023d2:	4b05      	ldr	r3, [pc, #20]	@ (80023e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	0b5b      	lsrs	r3, r3, #13
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	4903      	ldr	r1, [pc, #12]	@ (80023ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80023de:	5ccb      	ldrb	r3, [r1, r3]
 80023e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40023800 	.word	0x40023800
 80023ec:	0800511c 	.word	0x0800511c

080023f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e042      	b.n	8002488 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d106      	bne.n	800241c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f7fe fdb8 	bl	8000f8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2224      	movs	r2, #36	@ 0x24
 8002420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002432:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 fdbd 	bl	8002fb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	691a      	ldr	r2, [r3, #16]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002448:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	695a      	ldr	r2, [r3, #20]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002458:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68da      	ldr	r2, [r3, #12]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002468:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2220      	movs	r2, #32
 8002474:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2220      	movs	r2, #32
 800247c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b08a      	sub	sp, #40	@ 0x28
 8002494:	af02      	add	r7, sp, #8
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	603b      	str	r3, [r7, #0]
 800249c:	4613      	mov	r3, r2
 800249e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b20      	cmp	r3, #32
 80024ae:	d175      	bne.n	800259c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d002      	beq.n	80024bc <HAL_UART_Transmit+0x2c>
 80024b6:	88fb      	ldrh	r3, [r7, #6]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e06e      	b.n	800259e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2221      	movs	r2, #33	@ 0x21
 80024ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024ce:	f7fe ff85 	bl	80013dc <HAL_GetTick>
 80024d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	88fa      	ldrh	r2, [r7, #6]
 80024d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	88fa      	ldrh	r2, [r7, #6]
 80024de:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024e8:	d108      	bne.n	80024fc <HAL_UART_Transmit+0x6c>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d104      	bne.n	80024fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	61bb      	str	r3, [r7, #24]
 80024fa:	e003      	b.n	8002504 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002500:	2300      	movs	r3, #0
 8002502:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002504:	e02e      	b.n	8002564 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	2200      	movs	r2, #0
 800250e:	2180      	movs	r1, #128	@ 0x80
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f000 fb1f 	bl	8002b54 <UART_WaitOnFlagUntilTimeout>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d005      	beq.n	8002528 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2220      	movs	r2, #32
 8002520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e03a      	b.n	800259e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10b      	bne.n	8002546 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	881b      	ldrh	r3, [r3, #0]
 8002532:	461a      	mov	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800253c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	3302      	adds	r3, #2
 8002542:	61bb      	str	r3, [r7, #24]
 8002544:	e007      	b.n	8002556 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	781a      	ldrb	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	3301      	adds	r3, #1
 8002554:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800255a:	b29b      	uxth	r3, r3
 800255c:	3b01      	subs	r3, #1
 800255e:	b29a      	uxth	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002568:	b29b      	uxth	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1cb      	bne.n	8002506 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	9300      	str	r3, [sp, #0]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	2200      	movs	r2, #0
 8002576:	2140      	movs	r1, #64	@ 0x40
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f000 faeb 	bl	8002b54 <UART_WaitOnFlagUntilTimeout>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2220      	movs	r2, #32
 8002588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e006      	b.n	800259e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2220      	movs	r2, #32
 8002594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002598:	2300      	movs	r3, #0
 800259a:	e000      	b.n	800259e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800259c:	2302      	movs	r3, #2
  }
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3720      	adds	r7, #32
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b084      	sub	sp, #16
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	60f8      	str	r0, [r7, #12]
 80025ae:	60b9      	str	r1, [r7, #8]
 80025b0:	4613      	mov	r3, r2
 80025b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b20      	cmp	r3, #32
 80025be:	d112      	bne.n	80025e6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d002      	beq.n	80025cc <HAL_UART_Receive_IT+0x26>
 80025c6:	88fb      	ldrh	r3, [r7, #6]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e00b      	b.n	80025e8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80025d6:	88fb      	ldrh	r3, [r7, #6]
 80025d8:	461a      	mov	r2, r3
 80025da:	68b9      	ldr	r1, [r7, #8]
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 fb12 	bl	8002c06 <UART_Start_Receive_IT>
 80025e2:	4603      	mov	r3, r0
 80025e4:	e000      	b.n	80025e8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80025e6:	2302      	movs	r3, #2
  }
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b0ba      	sub	sp, #232	@ 0xe8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002616:	2300      	movs	r3, #0
 8002618:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800261c:	2300      	movs	r3, #0
 800261e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800262e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10f      	bne.n	8002656 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800263a:	f003 0320 	and.w	r3, r3, #32
 800263e:	2b00      	cmp	r3, #0
 8002640:	d009      	beq.n	8002656 <HAL_UART_IRQHandler+0x66>
 8002642:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002646:	f003 0320 	and.w	r3, r3, #32
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 fbf2 	bl	8002e38 <UART_Receive_IT>
      return;
 8002654:	e25b      	b.n	8002b0e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002656:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800265a:	2b00      	cmp	r3, #0
 800265c:	f000 80de 	beq.w	800281c <HAL_UART_IRQHandler+0x22c>
 8002660:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	d106      	bne.n	800267a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800266c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002670:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 80d1 	beq.w	800281c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800267a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00b      	beq.n	800269e <HAL_UART_IRQHandler+0xae>
 8002686:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800268a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800268e:	2b00      	cmp	r3, #0
 8002690:	d005      	beq.n	800269e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002696:	f043 0201 	orr.w	r2, r3, #1
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800269e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00b      	beq.n	80026c2 <HAL_UART_IRQHandler+0xd2>
 80026aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d005      	beq.n	80026c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ba:	f043 0202 	orr.w	r2, r3, #2
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00b      	beq.n	80026e6 <HAL_UART_IRQHandler+0xf6>
 80026ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d005      	beq.n	80026e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026de:	f043 0204 	orr.w	r2, r3, #4
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80026e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026ea:	f003 0308 	and.w	r3, r3, #8
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d011      	beq.n	8002716 <HAL_UART_IRQHandler+0x126>
 80026f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026f6:	f003 0320 	and.w	r3, r3, #32
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d105      	bne.n	800270a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80026fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d005      	beq.n	8002716 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800270e:	f043 0208 	orr.w	r2, r3, #8
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 81f2 	beq.w	8002b04 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002724:	f003 0320 	and.w	r3, r3, #32
 8002728:	2b00      	cmp	r3, #0
 800272a:	d008      	beq.n	800273e <HAL_UART_IRQHandler+0x14e>
 800272c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002730:	f003 0320 	and.w	r3, r3, #32
 8002734:	2b00      	cmp	r3, #0
 8002736:	d002      	beq.n	800273e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 fb7d 	bl	8002e38 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002748:	2b40      	cmp	r3, #64	@ 0x40
 800274a:	bf0c      	ite	eq
 800274c:	2301      	moveq	r3, #1
 800274e:	2300      	movne	r3, #0
 8002750:	b2db      	uxtb	r3, r3
 8002752:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d103      	bne.n	800276a <HAL_UART_IRQHandler+0x17a>
 8002762:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002766:	2b00      	cmp	r3, #0
 8002768:	d04f      	beq.n	800280a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 fa85 	bl	8002c7a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800277a:	2b40      	cmp	r3, #64	@ 0x40
 800277c:	d141      	bne.n	8002802 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	3314      	adds	r3, #20
 8002784:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002788:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800278c:	e853 3f00 	ldrex	r3, [r3]
 8002790:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002794:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002798:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800279c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	3314      	adds	r3, #20
 80027a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80027aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80027ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80027b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80027ba:	e841 2300 	strex	r3, r2, [r1]
 80027be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80027c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1d9      	bne.n	800277e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d013      	beq.n	80027fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027d6:	4a7e      	ldr	r2, [pc, #504]	@ (80029d0 <HAL_UART_IRQHandler+0x3e0>)
 80027d8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fe ffad 	bl	800173e <HAL_DMA_Abort_IT>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d016      	beq.n	8002818 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80027f4:	4610      	mov	r0, r2
 80027f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027f8:	e00e      	b.n	8002818 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f994 	bl	8002b28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002800:	e00a      	b.n	8002818 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f990 	bl	8002b28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002808:	e006      	b.n	8002818 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f98c 	bl	8002b28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002816:	e175      	b.n	8002b04 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002818:	bf00      	nop
    return;
 800281a:	e173      	b.n	8002b04 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002820:	2b01      	cmp	r3, #1
 8002822:	f040 814f 	bne.w	8002ac4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800282a:	f003 0310 	and.w	r3, r3, #16
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 8148 	beq.w	8002ac4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002838:	f003 0310 	and.w	r3, r3, #16
 800283c:	2b00      	cmp	r3, #0
 800283e:	f000 8141 	beq.w	8002ac4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002842:	2300      	movs	r3, #0
 8002844:	60bb      	str	r3, [r7, #8]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	60bb      	str	r3, [r7, #8]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002862:	2b40      	cmp	r3, #64	@ 0x40
 8002864:	f040 80b6 	bne.w	80029d4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002874:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002878:	2b00      	cmp	r3, #0
 800287a:	f000 8145 	beq.w	8002b08 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002882:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002886:	429a      	cmp	r2, r3
 8002888:	f080 813e 	bcs.w	8002b08 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002892:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800289e:	f000 8088 	beq.w	80029b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	330c      	adds	r3, #12
 80028a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80028b0:	e853 3f00 	ldrex	r3, [r3]
 80028b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80028b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80028c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	330c      	adds	r3, #12
 80028ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80028ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80028d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80028da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80028de:	e841 2300 	strex	r3, r2, [r1]
 80028e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80028e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1d9      	bne.n	80028a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	3314      	adds	r3, #20
 80028f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80028f8:	e853 3f00 	ldrex	r3, [r3]
 80028fc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80028fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002900:	f023 0301 	bic.w	r3, r3, #1
 8002904:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	3314      	adds	r3, #20
 800290e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002912:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002916:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002918:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800291a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800291e:	e841 2300 	strex	r3, r2, [r1]
 8002922:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002924:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1e1      	bne.n	80028ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	3314      	adds	r3, #20
 8002930:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002932:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002934:	e853 3f00 	ldrex	r3, [r3]
 8002938:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800293a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800293c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002940:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	3314      	adds	r3, #20
 800294a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800294e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002950:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002952:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002954:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002956:	e841 2300 	strex	r3, r2, [r1]
 800295a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800295c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1e3      	bne.n	800292a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2220      	movs	r2, #32
 8002966:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	330c      	adds	r3, #12
 8002976:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002978:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800297a:	e853 3f00 	ldrex	r3, [r3]
 800297e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002980:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002982:	f023 0310 	bic.w	r3, r3, #16
 8002986:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	330c      	adds	r3, #12
 8002990:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002994:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002996:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002998:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800299a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800299c:	e841 2300 	strex	r3, r2, [r1]
 80029a0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80029a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1e3      	bne.n	8002970 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7fe fe56 	bl	800165e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2202      	movs	r2, #2
 80029b6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	4619      	mov	r1, r3
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 f8b7 	bl	8002b3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80029ce:	e09b      	b.n	8002b08 <HAL_UART_IRQHandler+0x518>
 80029d0:	08002d41 	.word	0x08002d41
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80029dc:	b29b      	uxth	r3, r3
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 808e 	beq.w	8002b0c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80029f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 8089 	beq.w	8002b0c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	330c      	adds	r3, #12
 8002a00:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a04:	e853 3f00 	ldrex	r3, [r3]
 8002a08:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	330c      	adds	r3, #12
 8002a1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002a1e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002a20:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a22:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002a24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a26:	e841 2300 	strex	r3, r2, [r1]
 8002a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002a2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1e3      	bne.n	80029fa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	3314      	adds	r3, #20
 8002a38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3c:	e853 3f00 	ldrex	r3, [r3]
 8002a40:	623b      	str	r3, [r7, #32]
   return(result);
 8002a42:	6a3b      	ldr	r3, [r7, #32]
 8002a44:	f023 0301 	bic.w	r3, r3, #1
 8002a48:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	3314      	adds	r3, #20
 8002a52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002a56:	633a      	str	r2, [r7, #48]	@ 0x30
 8002a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a5e:	e841 2300 	strex	r3, r2, [r1]
 8002a62:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1e3      	bne.n	8002a32 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	330c      	adds	r3, #12
 8002a7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	e853 3f00 	ldrex	r3, [r3]
 8002a86:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f023 0310 	bic.w	r3, r3, #16
 8002a8e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	330c      	adds	r3, #12
 8002a98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002a9c:	61fa      	str	r2, [r7, #28]
 8002a9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aa0:	69b9      	ldr	r1, [r7, #24]
 8002aa2:	69fa      	ldr	r2, [r7, #28]
 8002aa4:	e841 2300 	strex	r3, r2, [r1]
 8002aa8:	617b      	str	r3, [r7, #20]
   return(result);
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d1e3      	bne.n	8002a78 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ab6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002aba:	4619      	mov	r1, r3
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 f83d 	bl	8002b3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ac2:	e023      	b.n	8002b0c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ac8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d009      	beq.n	8002ae4 <HAL_UART_IRQHandler+0x4f4>
 8002ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ad4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f943 	bl	8002d68 <UART_Transmit_IT>
    return;
 8002ae2:	e014      	b.n	8002b0e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00e      	beq.n	8002b0e <HAL_UART_IRQHandler+0x51e>
 8002af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002af4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d008      	beq.n	8002b0e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f983 	bl	8002e08 <UART_EndTransmit_IT>
    return;
 8002b02:	e004      	b.n	8002b0e <HAL_UART_IRQHandler+0x51e>
    return;
 8002b04:	bf00      	nop
 8002b06:	e002      	b.n	8002b0e <HAL_UART_IRQHandler+0x51e>
      return;
 8002b08:	bf00      	nop
 8002b0a:	e000      	b.n	8002b0e <HAL_UART_IRQHandler+0x51e>
      return;
 8002b0c:	bf00      	nop
  }
}
 8002b0e:	37e8      	adds	r7, #232	@ 0xe8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b086      	sub	sp, #24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	603b      	str	r3, [r7, #0]
 8002b60:	4613      	mov	r3, r2
 8002b62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b64:	e03b      	b.n	8002bde <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b6c:	d037      	beq.n	8002bde <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b6e:	f7fe fc35 	bl	80013dc <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	6a3a      	ldr	r2, [r7, #32]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d302      	bcc.n	8002b84 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b7e:	6a3b      	ldr	r3, [r7, #32]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e03a      	b.n	8002bfe <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f003 0304 	and.w	r3, r3, #4
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d023      	beq.n	8002bde <UART_WaitOnFlagUntilTimeout+0x8a>
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2b80      	cmp	r3, #128	@ 0x80
 8002b9a:	d020      	beq.n	8002bde <UART_WaitOnFlagUntilTimeout+0x8a>
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	2b40      	cmp	r3, #64	@ 0x40
 8002ba0:	d01d      	beq.n	8002bde <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0308 	and.w	r3, r3, #8
 8002bac:	2b08      	cmp	r3, #8
 8002bae:	d116      	bne.n	8002bde <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	617b      	str	r3, [r7, #20]
 8002bc4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 f857 	bl	8002c7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2208      	movs	r2, #8
 8002bd0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e00f      	b.n	8002bfe <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	4013      	ands	r3, r2
 8002be8:	68ba      	ldr	r2, [r7, #8]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	bf0c      	ite	eq
 8002bee:	2301      	moveq	r3, #1
 8002bf0:	2300      	movne	r3, #0
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	79fb      	ldrb	r3, [r7, #7]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d0b4      	beq.n	8002b66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3718      	adds	r7, #24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b085      	sub	sp, #20
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	60f8      	str	r0, [r7, #12]
 8002c0e:	60b9      	str	r1, [r7, #8]
 8002c10:	4613      	mov	r3, r2
 8002c12:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	88fa      	ldrh	r2, [r7, #6]
 8002c1e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	88fa      	ldrh	r2, [r7, #6]
 8002c24:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2222      	movs	r2, #34	@ 0x22
 8002c30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d007      	beq.n	8002c4c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68da      	ldr	r2, [r3, #12]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c4a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	695a      	ldr	r2, [r3, #20]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 0201 	orr.w	r2, r2, #1
 8002c5a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68da      	ldr	r2, [r3, #12]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0220 	orr.w	r2, r2, #32
 8002c6a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b095      	sub	sp, #84	@ 0x54
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	330c      	adds	r3, #12
 8002c88:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c8c:	e853 3f00 	ldrex	r3, [r3]
 8002c90:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	330c      	adds	r3, #12
 8002ca0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ca2:	643a      	str	r2, [r7, #64]	@ 0x40
 8002ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002ca8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002caa:	e841 2300 	strex	r3, r2, [r1]
 8002cae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002cb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d1e5      	bne.n	8002c82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	3314      	adds	r3, #20
 8002cbc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	e853 3f00 	ldrex	r3, [r3]
 8002cc4:	61fb      	str	r3, [r7, #28]
   return(result);
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	f023 0301 	bic.w	r3, r3, #1
 8002ccc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	3314      	adds	r3, #20
 8002cd4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002cd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cdc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cde:	e841 2300 	strex	r3, r2, [r1]
 8002ce2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1e5      	bne.n	8002cb6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d119      	bne.n	8002d26 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	330c      	adds	r3, #12
 8002cf8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	e853 3f00 	ldrex	r3, [r3]
 8002d00:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f023 0310 	bic.w	r3, r3, #16
 8002d08:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	330c      	adds	r3, #12
 8002d10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d12:	61ba      	str	r2, [r7, #24]
 8002d14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d16:	6979      	ldr	r1, [r7, #20]
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	e841 2300 	strex	r3, r2, [r1]
 8002d1e:	613b      	str	r3, [r7, #16]
   return(result);
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1e5      	bne.n	8002cf2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2220      	movs	r2, #32
 8002d2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002d34:	bf00      	nop
 8002d36:	3754      	adds	r7, #84	@ 0x54
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f7ff fee4 	bl	8002b28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d60:	bf00      	nop
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b21      	cmp	r3, #33	@ 0x21
 8002d7a:	d13e      	bne.n	8002dfa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d84:	d114      	bne.n	8002db0 <UART_Transmit_IT+0x48>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d110      	bne.n	8002db0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	881b      	ldrh	r3, [r3, #0]
 8002d98:	461a      	mov	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002da2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	1c9a      	adds	r2, r3, #2
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	621a      	str	r2, [r3, #32]
 8002dae:	e008      	b.n	8002dc2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	1c59      	adds	r1, r3, #1
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6211      	str	r1, [r2, #32]
 8002dba:	781a      	ldrb	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	4619      	mov	r1, r3
 8002dd0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10f      	bne.n	8002df6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68da      	ldr	r2, [r3, #12]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002de4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68da      	ldr	r2, [r3, #12]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002df4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002df6:	2300      	movs	r3, #0
 8002df8:	e000      	b.n	8002dfc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002dfa:	2302      	movs	r3, #2
  }
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e1e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7ff fe73 	bl	8002b14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b08c      	sub	sp, #48	@ 0x30
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b22      	cmp	r3, #34	@ 0x22
 8002e4a:	f040 80ae 	bne.w	8002faa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e56:	d117      	bne.n	8002e88 <UART_Receive_IT+0x50>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d113      	bne.n	8002e88 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002e60:	2300      	movs	r3, #0
 8002e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e68:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e7a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e80:	1c9a      	adds	r2, r3, #2
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e86:	e026      	b.n	8002ed6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e9a:	d007      	beq.n	8002eac <UART_Receive_IT+0x74>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10a      	bne.n	8002eba <UART_Receive_IT+0x82>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d106      	bne.n	8002eba <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	b2da      	uxtb	r2, r3
 8002eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eb6:	701a      	strb	r2, [r3, #0]
 8002eb8:	e008      	b.n	8002ecc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eca:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed0:	1c5a      	adds	r2, r3, #1
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	3b01      	subs	r3, #1
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d15d      	bne.n	8002fa6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68da      	ldr	r2, [r3, #12]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0220 	bic.w	r2, r2, #32
 8002ef8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68da      	ldr	r2, [r3, #12]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f08:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	695a      	ldr	r2, [r3, #20]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 0201 	bic.w	r2, r2, #1
 8002f18:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d135      	bne.n	8002f9c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	330c      	adds	r3, #12
 8002f3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	e853 3f00 	ldrex	r3, [r3]
 8002f44:	613b      	str	r3, [r7, #16]
   return(result);
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	f023 0310 	bic.w	r3, r3, #16
 8002f4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	330c      	adds	r3, #12
 8002f54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f56:	623a      	str	r2, [r7, #32]
 8002f58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f5a:	69f9      	ldr	r1, [r7, #28]
 8002f5c:	6a3a      	ldr	r2, [r7, #32]
 8002f5e:	e841 2300 	strex	r3, r2, [r1]
 8002f62:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1e5      	bne.n	8002f36 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0310 	and.w	r3, r3, #16
 8002f74:	2b10      	cmp	r3, #16
 8002f76:	d10a      	bne.n	8002f8e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f78:	2300      	movs	r3, #0
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	60fb      	str	r3, [r7, #12]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002f92:	4619      	mov	r1, r3
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f7ff fdd1 	bl	8002b3c <HAL_UARTEx_RxEventCallback>
 8002f9a:	e002      	b.n	8002fa2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7fd fccb 	bl	8000938 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	e002      	b.n	8002fac <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	e000      	b.n	8002fac <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002faa:	2302      	movs	r3, #2
  }
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3730      	adds	r7, #48	@ 0x30
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fb8:	b0c0      	sub	sp, #256	@ 0x100
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fd0:	68d9      	ldr	r1, [r3, #12]
 8002fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	ea40 0301 	orr.w	r3, r0, r1
 8002fdc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	431a      	orrs	r2, r3
 8002fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	431a      	orrs	r2, r3
 8002ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003000:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800300c:	f021 010c 	bic.w	r1, r1, #12
 8003010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800301a:	430b      	orrs	r3, r1
 800301c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800301e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800302a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800302e:	6999      	ldr	r1, [r3, #24]
 8003030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	ea40 0301 	orr.w	r3, r0, r1
 800303a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800303c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	4b8f      	ldr	r3, [pc, #572]	@ (8003280 <UART_SetConfig+0x2cc>)
 8003044:	429a      	cmp	r2, r3
 8003046:	d005      	beq.n	8003054 <UART_SetConfig+0xa0>
 8003048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	4b8d      	ldr	r3, [pc, #564]	@ (8003284 <UART_SetConfig+0x2d0>)
 8003050:	429a      	cmp	r2, r3
 8003052:	d104      	bne.n	800305e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003054:	f7ff f9b8 	bl	80023c8 <HAL_RCC_GetPCLK2Freq>
 8003058:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800305c:	e003      	b.n	8003066 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800305e:	f7ff f99f 	bl	80023a0 <HAL_RCC_GetPCLK1Freq>
 8003062:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003070:	f040 810c 	bne.w	800328c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003074:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003078:	2200      	movs	r2, #0
 800307a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800307e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003082:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003086:	4622      	mov	r2, r4
 8003088:	462b      	mov	r3, r5
 800308a:	1891      	adds	r1, r2, r2
 800308c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800308e:	415b      	adcs	r3, r3
 8003090:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003092:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003096:	4621      	mov	r1, r4
 8003098:	eb12 0801 	adds.w	r8, r2, r1
 800309c:	4629      	mov	r1, r5
 800309e:	eb43 0901 	adc.w	r9, r3, r1
 80030a2:	f04f 0200 	mov.w	r2, #0
 80030a6:	f04f 0300 	mov.w	r3, #0
 80030aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030b6:	4690      	mov	r8, r2
 80030b8:	4699      	mov	r9, r3
 80030ba:	4623      	mov	r3, r4
 80030bc:	eb18 0303 	adds.w	r3, r8, r3
 80030c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80030c4:	462b      	mov	r3, r5
 80030c6:	eb49 0303 	adc.w	r3, r9, r3
 80030ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80030ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80030da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80030de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80030e2:	460b      	mov	r3, r1
 80030e4:	18db      	adds	r3, r3, r3
 80030e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80030e8:	4613      	mov	r3, r2
 80030ea:	eb42 0303 	adc.w	r3, r2, r3
 80030ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80030f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80030f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80030f8:	f7fd f8da 	bl	80002b0 <__aeabi_uldivmod>
 80030fc:	4602      	mov	r2, r0
 80030fe:	460b      	mov	r3, r1
 8003100:	4b61      	ldr	r3, [pc, #388]	@ (8003288 <UART_SetConfig+0x2d4>)
 8003102:	fba3 2302 	umull	r2, r3, r3, r2
 8003106:	095b      	lsrs	r3, r3, #5
 8003108:	011c      	lsls	r4, r3, #4
 800310a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800310e:	2200      	movs	r2, #0
 8003110:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003114:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003118:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800311c:	4642      	mov	r2, r8
 800311e:	464b      	mov	r3, r9
 8003120:	1891      	adds	r1, r2, r2
 8003122:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003124:	415b      	adcs	r3, r3
 8003126:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003128:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800312c:	4641      	mov	r1, r8
 800312e:	eb12 0a01 	adds.w	sl, r2, r1
 8003132:	4649      	mov	r1, r9
 8003134:	eb43 0b01 	adc.w	fp, r3, r1
 8003138:	f04f 0200 	mov.w	r2, #0
 800313c:	f04f 0300 	mov.w	r3, #0
 8003140:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003144:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003148:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800314c:	4692      	mov	sl, r2
 800314e:	469b      	mov	fp, r3
 8003150:	4643      	mov	r3, r8
 8003152:	eb1a 0303 	adds.w	r3, sl, r3
 8003156:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800315a:	464b      	mov	r3, r9
 800315c:	eb4b 0303 	adc.w	r3, fp, r3
 8003160:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003170:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003174:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003178:	460b      	mov	r3, r1
 800317a:	18db      	adds	r3, r3, r3
 800317c:	643b      	str	r3, [r7, #64]	@ 0x40
 800317e:	4613      	mov	r3, r2
 8003180:	eb42 0303 	adc.w	r3, r2, r3
 8003184:	647b      	str	r3, [r7, #68]	@ 0x44
 8003186:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800318a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800318e:	f7fd f88f 	bl	80002b0 <__aeabi_uldivmod>
 8003192:	4602      	mov	r2, r0
 8003194:	460b      	mov	r3, r1
 8003196:	4611      	mov	r1, r2
 8003198:	4b3b      	ldr	r3, [pc, #236]	@ (8003288 <UART_SetConfig+0x2d4>)
 800319a:	fba3 2301 	umull	r2, r3, r3, r1
 800319e:	095b      	lsrs	r3, r3, #5
 80031a0:	2264      	movs	r2, #100	@ 0x64
 80031a2:	fb02 f303 	mul.w	r3, r2, r3
 80031a6:	1acb      	subs	r3, r1, r3
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80031ae:	4b36      	ldr	r3, [pc, #216]	@ (8003288 <UART_SetConfig+0x2d4>)
 80031b0:	fba3 2302 	umull	r2, r3, r3, r2
 80031b4:	095b      	lsrs	r3, r3, #5
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80031bc:	441c      	add	r4, r3
 80031be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031c2:	2200      	movs	r2, #0
 80031c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80031c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80031cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80031d0:	4642      	mov	r2, r8
 80031d2:	464b      	mov	r3, r9
 80031d4:	1891      	adds	r1, r2, r2
 80031d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80031d8:	415b      	adcs	r3, r3
 80031da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80031e0:	4641      	mov	r1, r8
 80031e2:	1851      	adds	r1, r2, r1
 80031e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80031e6:	4649      	mov	r1, r9
 80031e8:	414b      	adcs	r3, r1
 80031ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80031ec:	f04f 0200 	mov.w	r2, #0
 80031f0:	f04f 0300 	mov.w	r3, #0
 80031f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80031f8:	4659      	mov	r1, fp
 80031fa:	00cb      	lsls	r3, r1, #3
 80031fc:	4651      	mov	r1, sl
 80031fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003202:	4651      	mov	r1, sl
 8003204:	00ca      	lsls	r2, r1, #3
 8003206:	4610      	mov	r0, r2
 8003208:	4619      	mov	r1, r3
 800320a:	4603      	mov	r3, r0
 800320c:	4642      	mov	r2, r8
 800320e:	189b      	adds	r3, r3, r2
 8003210:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003214:	464b      	mov	r3, r9
 8003216:	460a      	mov	r2, r1
 8003218:	eb42 0303 	adc.w	r3, r2, r3
 800321c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800322c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003230:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003234:	460b      	mov	r3, r1
 8003236:	18db      	adds	r3, r3, r3
 8003238:	62bb      	str	r3, [r7, #40]	@ 0x28
 800323a:	4613      	mov	r3, r2
 800323c:	eb42 0303 	adc.w	r3, r2, r3
 8003240:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003242:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003246:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800324a:	f7fd f831 	bl	80002b0 <__aeabi_uldivmod>
 800324e:	4602      	mov	r2, r0
 8003250:	460b      	mov	r3, r1
 8003252:	4b0d      	ldr	r3, [pc, #52]	@ (8003288 <UART_SetConfig+0x2d4>)
 8003254:	fba3 1302 	umull	r1, r3, r3, r2
 8003258:	095b      	lsrs	r3, r3, #5
 800325a:	2164      	movs	r1, #100	@ 0x64
 800325c:	fb01 f303 	mul.w	r3, r1, r3
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	3332      	adds	r3, #50	@ 0x32
 8003266:	4a08      	ldr	r2, [pc, #32]	@ (8003288 <UART_SetConfig+0x2d4>)
 8003268:	fba2 2303 	umull	r2, r3, r2, r3
 800326c:	095b      	lsrs	r3, r3, #5
 800326e:	f003 0207 	and.w	r2, r3, #7
 8003272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4422      	add	r2, r4
 800327a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800327c:	e106      	b.n	800348c <UART_SetConfig+0x4d8>
 800327e:	bf00      	nop
 8003280:	40011000 	.word	0x40011000
 8003284:	40011400 	.word	0x40011400
 8003288:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800328c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003290:	2200      	movs	r2, #0
 8003292:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003296:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800329a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800329e:	4642      	mov	r2, r8
 80032a0:	464b      	mov	r3, r9
 80032a2:	1891      	adds	r1, r2, r2
 80032a4:	6239      	str	r1, [r7, #32]
 80032a6:	415b      	adcs	r3, r3
 80032a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80032aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032ae:	4641      	mov	r1, r8
 80032b0:	1854      	adds	r4, r2, r1
 80032b2:	4649      	mov	r1, r9
 80032b4:	eb43 0501 	adc.w	r5, r3, r1
 80032b8:	f04f 0200 	mov.w	r2, #0
 80032bc:	f04f 0300 	mov.w	r3, #0
 80032c0:	00eb      	lsls	r3, r5, #3
 80032c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032c6:	00e2      	lsls	r2, r4, #3
 80032c8:	4614      	mov	r4, r2
 80032ca:	461d      	mov	r5, r3
 80032cc:	4643      	mov	r3, r8
 80032ce:	18e3      	adds	r3, r4, r3
 80032d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80032d4:	464b      	mov	r3, r9
 80032d6:	eb45 0303 	adc.w	r3, r5, r3
 80032da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80032de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80032ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	f04f 0300 	mov.w	r3, #0
 80032f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80032fa:	4629      	mov	r1, r5
 80032fc:	008b      	lsls	r3, r1, #2
 80032fe:	4621      	mov	r1, r4
 8003300:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003304:	4621      	mov	r1, r4
 8003306:	008a      	lsls	r2, r1, #2
 8003308:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800330c:	f7fc ffd0 	bl	80002b0 <__aeabi_uldivmod>
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	4b60      	ldr	r3, [pc, #384]	@ (8003498 <UART_SetConfig+0x4e4>)
 8003316:	fba3 2302 	umull	r2, r3, r3, r2
 800331a:	095b      	lsrs	r3, r3, #5
 800331c:	011c      	lsls	r4, r3, #4
 800331e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003322:	2200      	movs	r2, #0
 8003324:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003328:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800332c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003330:	4642      	mov	r2, r8
 8003332:	464b      	mov	r3, r9
 8003334:	1891      	adds	r1, r2, r2
 8003336:	61b9      	str	r1, [r7, #24]
 8003338:	415b      	adcs	r3, r3
 800333a:	61fb      	str	r3, [r7, #28]
 800333c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003340:	4641      	mov	r1, r8
 8003342:	1851      	adds	r1, r2, r1
 8003344:	6139      	str	r1, [r7, #16]
 8003346:	4649      	mov	r1, r9
 8003348:	414b      	adcs	r3, r1
 800334a:	617b      	str	r3, [r7, #20]
 800334c:	f04f 0200 	mov.w	r2, #0
 8003350:	f04f 0300 	mov.w	r3, #0
 8003354:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003358:	4659      	mov	r1, fp
 800335a:	00cb      	lsls	r3, r1, #3
 800335c:	4651      	mov	r1, sl
 800335e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003362:	4651      	mov	r1, sl
 8003364:	00ca      	lsls	r2, r1, #3
 8003366:	4610      	mov	r0, r2
 8003368:	4619      	mov	r1, r3
 800336a:	4603      	mov	r3, r0
 800336c:	4642      	mov	r2, r8
 800336e:	189b      	adds	r3, r3, r2
 8003370:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003374:	464b      	mov	r3, r9
 8003376:	460a      	mov	r2, r1
 8003378:	eb42 0303 	adc.w	r3, r2, r3
 800337c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	67bb      	str	r3, [r7, #120]	@ 0x78
 800338a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800338c:	f04f 0200 	mov.w	r2, #0
 8003390:	f04f 0300 	mov.w	r3, #0
 8003394:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003398:	4649      	mov	r1, r9
 800339a:	008b      	lsls	r3, r1, #2
 800339c:	4641      	mov	r1, r8
 800339e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033a2:	4641      	mov	r1, r8
 80033a4:	008a      	lsls	r2, r1, #2
 80033a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80033aa:	f7fc ff81 	bl	80002b0 <__aeabi_uldivmod>
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	4611      	mov	r1, r2
 80033b4:	4b38      	ldr	r3, [pc, #224]	@ (8003498 <UART_SetConfig+0x4e4>)
 80033b6:	fba3 2301 	umull	r2, r3, r3, r1
 80033ba:	095b      	lsrs	r3, r3, #5
 80033bc:	2264      	movs	r2, #100	@ 0x64
 80033be:	fb02 f303 	mul.w	r3, r2, r3
 80033c2:	1acb      	subs	r3, r1, r3
 80033c4:	011b      	lsls	r3, r3, #4
 80033c6:	3332      	adds	r3, #50	@ 0x32
 80033c8:	4a33      	ldr	r2, [pc, #204]	@ (8003498 <UART_SetConfig+0x4e4>)
 80033ca:	fba2 2303 	umull	r2, r3, r2, r3
 80033ce:	095b      	lsrs	r3, r3, #5
 80033d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033d4:	441c      	add	r4, r3
 80033d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033da:	2200      	movs	r2, #0
 80033dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80033de:	677a      	str	r2, [r7, #116]	@ 0x74
 80033e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80033e4:	4642      	mov	r2, r8
 80033e6:	464b      	mov	r3, r9
 80033e8:	1891      	adds	r1, r2, r2
 80033ea:	60b9      	str	r1, [r7, #8]
 80033ec:	415b      	adcs	r3, r3
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033f4:	4641      	mov	r1, r8
 80033f6:	1851      	adds	r1, r2, r1
 80033f8:	6039      	str	r1, [r7, #0]
 80033fa:	4649      	mov	r1, r9
 80033fc:	414b      	adcs	r3, r1
 80033fe:	607b      	str	r3, [r7, #4]
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800340c:	4659      	mov	r1, fp
 800340e:	00cb      	lsls	r3, r1, #3
 8003410:	4651      	mov	r1, sl
 8003412:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003416:	4651      	mov	r1, sl
 8003418:	00ca      	lsls	r2, r1, #3
 800341a:	4610      	mov	r0, r2
 800341c:	4619      	mov	r1, r3
 800341e:	4603      	mov	r3, r0
 8003420:	4642      	mov	r2, r8
 8003422:	189b      	adds	r3, r3, r2
 8003424:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003426:	464b      	mov	r3, r9
 8003428:	460a      	mov	r2, r1
 800342a:	eb42 0303 	adc.w	r3, r2, r3
 800342e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	663b      	str	r3, [r7, #96]	@ 0x60
 800343a:	667a      	str	r2, [r7, #100]	@ 0x64
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	f04f 0300 	mov.w	r3, #0
 8003444:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003448:	4649      	mov	r1, r9
 800344a:	008b      	lsls	r3, r1, #2
 800344c:	4641      	mov	r1, r8
 800344e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003452:	4641      	mov	r1, r8
 8003454:	008a      	lsls	r2, r1, #2
 8003456:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800345a:	f7fc ff29 	bl	80002b0 <__aeabi_uldivmod>
 800345e:	4602      	mov	r2, r0
 8003460:	460b      	mov	r3, r1
 8003462:	4b0d      	ldr	r3, [pc, #52]	@ (8003498 <UART_SetConfig+0x4e4>)
 8003464:	fba3 1302 	umull	r1, r3, r3, r2
 8003468:	095b      	lsrs	r3, r3, #5
 800346a:	2164      	movs	r1, #100	@ 0x64
 800346c:	fb01 f303 	mul.w	r3, r1, r3
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	011b      	lsls	r3, r3, #4
 8003474:	3332      	adds	r3, #50	@ 0x32
 8003476:	4a08      	ldr	r2, [pc, #32]	@ (8003498 <UART_SetConfig+0x4e4>)
 8003478:	fba2 2303 	umull	r2, r3, r2, r3
 800347c:	095b      	lsrs	r3, r3, #5
 800347e:	f003 020f 	and.w	r2, r3, #15
 8003482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4422      	add	r2, r4
 800348a:	609a      	str	r2, [r3, #8]
}
 800348c:	bf00      	nop
 800348e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003492:	46bd      	mov	sp, r7
 8003494:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003498:	51eb851f 	.word	0x51eb851f

0800349c <atoi>:
 800349c:	220a      	movs	r2, #10
 800349e:	2100      	movs	r1, #0
 80034a0:	f000 b87a 	b.w	8003598 <strtol>

080034a4 <_strtol_l.constprop.0>:
 80034a4:	2b24      	cmp	r3, #36	@ 0x24
 80034a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034aa:	4686      	mov	lr, r0
 80034ac:	4690      	mov	r8, r2
 80034ae:	d801      	bhi.n	80034b4 <_strtol_l.constprop.0+0x10>
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d106      	bne.n	80034c2 <_strtol_l.constprop.0+0x1e>
 80034b4:	f000 fb8c 	bl	8003bd0 <__errno>
 80034b8:	2316      	movs	r3, #22
 80034ba:	6003      	str	r3, [r0, #0]
 80034bc:	2000      	movs	r0, #0
 80034be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034c2:	4834      	ldr	r0, [pc, #208]	@ (8003594 <_strtol_l.constprop.0+0xf0>)
 80034c4:	460d      	mov	r5, r1
 80034c6:	462a      	mov	r2, r5
 80034c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80034cc:	5d06      	ldrb	r6, [r0, r4]
 80034ce:	f016 0608 	ands.w	r6, r6, #8
 80034d2:	d1f8      	bne.n	80034c6 <_strtol_l.constprop.0+0x22>
 80034d4:	2c2d      	cmp	r4, #45	@ 0x2d
 80034d6:	d12d      	bne.n	8003534 <_strtol_l.constprop.0+0x90>
 80034d8:	782c      	ldrb	r4, [r5, #0]
 80034da:	2601      	movs	r6, #1
 80034dc:	1c95      	adds	r5, r2, #2
 80034de:	f033 0210 	bics.w	r2, r3, #16
 80034e2:	d109      	bne.n	80034f8 <_strtol_l.constprop.0+0x54>
 80034e4:	2c30      	cmp	r4, #48	@ 0x30
 80034e6:	d12a      	bne.n	800353e <_strtol_l.constprop.0+0x9a>
 80034e8:	782a      	ldrb	r2, [r5, #0]
 80034ea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80034ee:	2a58      	cmp	r2, #88	@ 0x58
 80034f0:	d125      	bne.n	800353e <_strtol_l.constprop.0+0x9a>
 80034f2:	786c      	ldrb	r4, [r5, #1]
 80034f4:	2310      	movs	r3, #16
 80034f6:	3502      	adds	r5, #2
 80034f8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80034fc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003500:	2200      	movs	r2, #0
 8003502:	fbbc f9f3 	udiv	r9, ip, r3
 8003506:	4610      	mov	r0, r2
 8003508:	fb03 ca19 	mls	sl, r3, r9, ip
 800350c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003510:	2f09      	cmp	r7, #9
 8003512:	d81b      	bhi.n	800354c <_strtol_l.constprop.0+0xa8>
 8003514:	463c      	mov	r4, r7
 8003516:	42a3      	cmp	r3, r4
 8003518:	dd27      	ble.n	800356a <_strtol_l.constprop.0+0xc6>
 800351a:	1c57      	adds	r7, r2, #1
 800351c:	d007      	beq.n	800352e <_strtol_l.constprop.0+0x8a>
 800351e:	4581      	cmp	r9, r0
 8003520:	d320      	bcc.n	8003564 <_strtol_l.constprop.0+0xc0>
 8003522:	d101      	bne.n	8003528 <_strtol_l.constprop.0+0x84>
 8003524:	45a2      	cmp	sl, r4
 8003526:	db1d      	blt.n	8003564 <_strtol_l.constprop.0+0xc0>
 8003528:	fb00 4003 	mla	r0, r0, r3, r4
 800352c:	2201      	movs	r2, #1
 800352e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003532:	e7eb      	b.n	800350c <_strtol_l.constprop.0+0x68>
 8003534:	2c2b      	cmp	r4, #43	@ 0x2b
 8003536:	bf04      	itt	eq
 8003538:	782c      	ldrbeq	r4, [r5, #0]
 800353a:	1c95      	addeq	r5, r2, #2
 800353c:	e7cf      	b.n	80034de <_strtol_l.constprop.0+0x3a>
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1da      	bne.n	80034f8 <_strtol_l.constprop.0+0x54>
 8003542:	2c30      	cmp	r4, #48	@ 0x30
 8003544:	bf0c      	ite	eq
 8003546:	2308      	moveq	r3, #8
 8003548:	230a      	movne	r3, #10
 800354a:	e7d5      	b.n	80034f8 <_strtol_l.constprop.0+0x54>
 800354c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8003550:	2f19      	cmp	r7, #25
 8003552:	d801      	bhi.n	8003558 <_strtol_l.constprop.0+0xb4>
 8003554:	3c37      	subs	r4, #55	@ 0x37
 8003556:	e7de      	b.n	8003516 <_strtol_l.constprop.0+0x72>
 8003558:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800355c:	2f19      	cmp	r7, #25
 800355e:	d804      	bhi.n	800356a <_strtol_l.constprop.0+0xc6>
 8003560:	3c57      	subs	r4, #87	@ 0x57
 8003562:	e7d8      	b.n	8003516 <_strtol_l.constprop.0+0x72>
 8003564:	f04f 32ff 	mov.w	r2, #4294967295
 8003568:	e7e1      	b.n	800352e <_strtol_l.constprop.0+0x8a>
 800356a:	1c53      	adds	r3, r2, #1
 800356c:	d108      	bne.n	8003580 <_strtol_l.constprop.0+0xdc>
 800356e:	2322      	movs	r3, #34	@ 0x22
 8003570:	f8ce 3000 	str.w	r3, [lr]
 8003574:	4660      	mov	r0, ip
 8003576:	f1b8 0f00 	cmp.w	r8, #0
 800357a:	d0a0      	beq.n	80034be <_strtol_l.constprop.0+0x1a>
 800357c:	1e69      	subs	r1, r5, #1
 800357e:	e006      	b.n	800358e <_strtol_l.constprop.0+0xea>
 8003580:	b106      	cbz	r6, 8003584 <_strtol_l.constprop.0+0xe0>
 8003582:	4240      	negs	r0, r0
 8003584:	f1b8 0f00 	cmp.w	r8, #0
 8003588:	d099      	beq.n	80034be <_strtol_l.constprop.0+0x1a>
 800358a:	2a00      	cmp	r2, #0
 800358c:	d1f6      	bne.n	800357c <_strtol_l.constprop.0+0xd8>
 800358e:	f8c8 1000 	str.w	r1, [r8]
 8003592:	e794      	b.n	80034be <_strtol_l.constprop.0+0x1a>
 8003594:	08005125 	.word	0x08005125

08003598 <strtol>:
 8003598:	4613      	mov	r3, r2
 800359a:	460a      	mov	r2, r1
 800359c:	4601      	mov	r1, r0
 800359e:	4802      	ldr	r0, [pc, #8]	@ (80035a8 <strtol+0x10>)
 80035a0:	6800      	ldr	r0, [r0, #0]
 80035a2:	f7ff bf7f 	b.w	80034a4 <_strtol_l.constprop.0>
 80035a6:	bf00      	nop
 80035a8:	20000024 	.word	0x20000024

080035ac <std>:
 80035ac:	2300      	movs	r3, #0
 80035ae:	b510      	push	{r4, lr}
 80035b0:	4604      	mov	r4, r0
 80035b2:	e9c0 3300 	strd	r3, r3, [r0]
 80035b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80035ba:	6083      	str	r3, [r0, #8]
 80035bc:	8181      	strh	r1, [r0, #12]
 80035be:	6643      	str	r3, [r0, #100]	@ 0x64
 80035c0:	81c2      	strh	r2, [r0, #14]
 80035c2:	6183      	str	r3, [r0, #24]
 80035c4:	4619      	mov	r1, r3
 80035c6:	2208      	movs	r2, #8
 80035c8:	305c      	adds	r0, #92	@ 0x5c
 80035ca:	f000 fa21 	bl	8003a10 <memset>
 80035ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003604 <std+0x58>)
 80035d0:	6263      	str	r3, [r4, #36]	@ 0x24
 80035d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003608 <std+0x5c>)
 80035d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80035d6:	4b0d      	ldr	r3, [pc, #52]	@ (800360c <std+0x60>)
 80035d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80035da:	4b0d      	ldr	r3, [pc, #52]	@ (8003610 <std+0x64>)
 80035dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80035de:	4b0d      	ldr	r3, [pc, #52]	@ (8003614 <std+0x68>)
 80035e0:	6224      	str	r4, [r4, #32]
 80035e2:	429c      	cmp	r4, r3
 80035e4:	d006      	beq.n	80035f4 <std+0x48>
 80035e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80035ea:	4294      	cmp	r4, r2
 80035ec:	d002      	beq.n	80035f4 <std+0x48>
 80035ee:	33d0      	adds	r3, #208	@ 0xd0
 80035f0:	429c      	cmp	r4, r3
 80035f2:	d105      	bne.n	8003600 <std+0x54>
 80035f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80035f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035fc:	f000 bb12 	b.w	8003c24 <__retarget_lock_init_recursive>
 8003600:	bd10      	pop	{r4, pc}
 8003602:	bf00      	nop
 8003604:	08003861 	.word	0x08003861
 8003608:	08003883 	.word	0x08003883
 800360c:	080038bb 	.word	0x080038bb
 8003610:	080038df 	.word	0x080038df
 8003614:	200009c8 	.word	0x200009c8

08003618 <stdio_exit_handler>:
 8003618:	4a02      	ldr	r2, [pc, #8]	@ (8003624 <stdio_exit_handler+0xc>)
 800361a:	4903      	ldr	r1, [pc, #12]	@ (8003628 <stdio_exit_handler+0x10>)
 800361c:	4803      	ldr	r0, [pc, #12]	@ (800362c <stdio_exit_handler+0x14>)
 800361e:	f000 b869 	b.w	80036f4 <_fwalk_sglue>
 8003622:	bf00      	nop
 8003624:	20000018 	.word	0x20000018
 8003628:	080047ed 	.word	0x080047ed
 800362c:	20000028 	.word	0x20000028

08003630 <cleanup_stdio>:
 8003630:	6841      	ldr	r1, [r0, #4]
 8003632:	4b0c      	ldr	r3, [pc, #48]	@ (8003664 <cleanup_stdio+0x34>)
 8003634:	4299      	cmp	r1, r3
 8003636:	b510      	push	{r4, lr}
 8003638:	4604      	mov	r4, r0
 800363a:	d001      	beq.n	8003640 <cleanup_stdio+0x10>
 800363c:	f001 f8d6 	bl	80047ec <_fflush_r>
 8003640:	68a1      	ldr	r1, [r4, #8]
 8003642:	4b09      	ldr	r3, [pc, #36]	@ (8003668 <cleanup_stdio+0x38>)
 8003644:	4299      	cmp	r1, r3
 8003646:	d002      	beq.n	800364e <cleanup_stdio+0x1e>
 8003648:	4620      	mov	r0, r4
 800364a:	f001 f8cf 	bl	80047ec <_fflush_r>
 800364e:	68e1      	ldr	r1, [r4, #12]
 8003650:	4b06      	ldr	r3, [pc, #24]	@ (800366c <cleanup_stdio+0x3c>)
 8003652:	4299      	cmp	r1, r3
 8003654:	d004      	beq.n	8003660 <cleanup_stdio+0x30>
 8003656:	4620      	mov	r0, r4
 8003658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800365c:	f001 b8c6 	b.w	80047ec <_fflush_r>
 8003660:	bd10      	pop	{r4, pc}
 8003662:	bf00      	nop
 8003664:	200009c8 	.word	0x200009c8
 8003668:	20000a30 	.word	0x20000a30
 800366c:	20000a98 	.word	0x20000a98

08003670 <global_stdio_init.part.0>:
 8003670:	b510      	push	{r4, lr}
 8003672:	4b0b      	ldr	r3, [pc, #44]	@ (80036a0 <global_stdio_init.part.0+0x30>)
 8003674:	4c0b      	ldr	r4, [pc, #44]	@ (80036a4 <global_stdio_init.part.0+0x34>)
 8003676:	4a0c      	ldr	r2, [pc, #48]	@ (80036a8 <global_stdio_init.part.0+0x38>)
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	4620      	mov	r0, r4
 800367c:	2200      	movs	r2, #0
 800367e:	2104      	movs	r1, #4
 8003680:	f7ff ff94 	bl	80035ac <std>
 8003684:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003688:	2201      	movs	r2, #1
 800368a:	2109      	movs	r1, #9
 800368c:	f7ff ff8e 	bl	80035ac <std>
 8003690:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003694:	2202      	movs	r2, #2
 8003696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800369a:	2112      	movs	r1, #18
 800369c:	f7ff bf86 	b.w	80035ac <std>
 80036a0:	20000b00 	.word	0x20000b00
 80036a4:	200009c8 	.word	0x200009c8
 80036a8:	08003619 	.word	0x08003619

080036ac <__sfp_lock_acquire>:
 80036ac:	4801      	ldr	r0, [pc, #4]	@ (80036b4 <__sfp_lock_acquire+0x8>)
 80036ae:	f000 baba 	b.w	8003c26 <__retarget_lock_acquire_recursive>
 80036b2:	bf00      	nop
 80036b4:	20000b09 	.word	0x20000b09

080036b8 <__sfp_lock_release>:
 80036b8:	4801      	ldr	r0, [pc, #4]	@ (80036c0 <__sfp_lock_release+0x8>)
 80036ba:	f000 bab5 	b.w	8003c28 <__retarget_lock_release_recursive>
 80036be:	bf00      	nop
 80036c0:	20000b09 	.word	0x20000b09

080036c4 <__sinit>:
 80036c4:	b510      	push	{r4, lr}
 80036c6:	4604      	mov	r4, r0
 80036c8:	f7ff fff0 	bl	80036ac <__sfp_lock_acquire>
 80036cc:	6a23      	ldr	r3, [r4, #32]
 80036ce:	b11b      	cbz	r3, 80036d8 <__sinit+0x14>
 80036d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036d4:	f7ff bff0 	b.w	80036b8 <__sfp_lock_release>
 80036d8:	4b04      	ldr	r3, [pc, #16]	@ (80036ec <__sinit+0x28>)
 80036da:	6223      	str	r3, [r4, #32]
 80036dc:	4b04      	ldr	r3, [pc, #16]	@ (80036f0 <__sinit+0x2c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1f5      	bne.n	80036d0 <__sinit+0xc>
 80036e4:	f7ff ffc4 	bl	8003670 <global_stdio_init.part.0>
 80036e8:	e7f2      	b.n	80036d0 <__sinit+0xc>
 80036ea:	bf00      	nop
 80036ec:	08003631 	.word	0x08003631
 80036f0:	20000b00 	.word	0x20000b00

080036f4 <_fwalk_sglue>:
 80036f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036f8:	4607      	mov	r7, r0
 80036fa:	4688      	mov	r8, r1
 80036fc:	4614      	mov	r4, r2
 80036fe:	2600      	movs	r6, #0
 8003700:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003704:	f1b9 0901 	subs.w	r9, r9, #1
 8003708:	d505      	bpl.n	8003716 <_fwalk_sglue+0x22>
 800370a:	6824      	ldr	r4, [r4, #0]
 800370c:	2c00      	cmp	r4, #0
 800370e:	d1f7      	bne.n	8003700 <_fwalk_sglue+0xc>
 8003710:	4630      	mov	r0, r6
 8003712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003716:	89ab      	ldrh	r3, [r5, #12]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d907      	bls.n	800372c <_fwalk_sglue+0x38>
 800371c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003720:	3301      	adds	r3, #1
 8003722:	d003      	beq.n	800372c <_fwalk_sglue+0x38>
 8003724:	4629      	mov	r1, r5
 8003726:	4638      	mov	r0, r7
 8003728:	47c0      	blx	r8
 800372a:	4306      	orrs	r6, r0
 800372c:	3568      	adds	r5, #104	@ 0x68
 800372e:	e7e9      	b.n	8003704 <_fwalk_sglue+0x10>

08003730 <iprintf>:
 8003730:	b40f      	push	{r0, r1, r2, r3}
 8003732:	b507      	push	{r0, r1, r2, lr}
 8003734:	4906      	ldr	r1, [pc, #24]	@ (8003750 <iprintf+0x20>)
 8003736:	ab04      	add	r3, sp, #16
 8003738:	6808      	ldr	r0, [r1, #0]
 800373a:	f853 2b04 	ldr.w	r2, [r3], #4
 800373e:	6881      	ldr	r1, [r0, #8]
 8003740:	9301      	str	r3, [sp, #4]
 8003742:	f000 fd29 	bl	8004198 <_vfiprintf_r>
 8003746:	b003      	add	sp, #12
 8003748:	f85d eb04 	ldr.w	lr, [sp], #4
 800374c:	b004      	add	sp, #16
 800374e:	4770      	bx	lr
 8003750:	20000024 	.word	0x20000024

08003754 <putchar>:
 8003754:	4b02      	ldr	r3, [pc, #8]	@ (8003760 <putchar+0xc>)
 8003756:	4601      	mov	r1, r0
 8003758:	6818      	ldr	r0, [r3, #0]
 800375a:	6882      	ldr	r2, [r0, #8]
 800375c:	f001 b8e2 	b.w	8004924 <_putc_r>
 8003760:	20000024 	.word	0x20000024

08003764 <_puts_r>:
 8003764:	6a03      	ldr	r3, [r0, #32]
 8003766:	b570      	push	{r4, r5, r6, lr}
 8003768:	6884      	ldr	r4, [r0, #8]
 800376a:	4605      	mov	r5, r0
 800376c:	460e      	mov	r6, r1
 800376e:	b90b      	cbnz	r3, 8003774 <_puts_r+0x10>
 8003770:	f7ff ffa8 	bl	80036c4 <__sinit>
 8003774:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003776:	07db      	lsls	r3, r3, #31
 8003778:	d405      	bmi.n	8003786 <_puts_r+0x22>
 800377a:	89a3      	ldrh	r3, [r4, #12]
 800377c:	0598      	lsls	r0, r3, #22
 800377e:	d402      	bmi.n	8003786 <_puts_r+0x22>
 8003780:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003782:	f000 fa50 	bl	8003c26 <__retarget_lock_acquire_recursive>
 8003786:	89a3      	ldrh	r3, [r4, #12]
 8003788:	0719      	lsls	r1, r3, #28
 800378a:	d502      	bpl.n	8003792 <_puts_r+0x2e>
 800378c:	6923      	ldr	r3, [r4, #16]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d135      	bne.n	80037fe <_puts_r+0x9a>
 8003792:	4621      	mov	r1, r4
 8003794:	4628      	mov	r0, r5
 8003796:	f000 f8e5 	bl	8003964 <__swsetup_r>
 800379a:	b380      	cbz	r0, 80037fe <_puts_r+0x9a>
 800379c:	f04f 35ff 	mov.w	r5, #4294967295
 80037a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80037a2:	07da      	lsls	r2, r3, #31
 80037a4:	d405      	bmi.n	80037b2 <_puts_r+0x4e>
 80037a6:	89a3      	ldrh	r3, [r4, #12]
 80037a8:	059b      	lsls	r3, r3, #22
 80037aa:	d402      	bmi.n	80037b2 <_puts_r+0x4e>
 80037ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80037ae:	f000 fa3b 	bl	8003c28 <__retarget_lock_release_recursive>
 80037b2:	4628      	mov	r0, r5
 80037b4:	bd70      	pop	{r4, r5, r6, pc}
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	da04      	bge.n	80037c4 <_puts_r+0x60>
 80037ba:	69a2      	ldr	r2, [r4, #24]
 80037bc:	429a      	cmp	r2, r3
 80037be:	dc17      	bgt.n	80037f0 <_puts_r+0x8c>
 80037c0:	290a      	cmp	r1, #10
 80037c2:	d015      	beq.n	80037f0 <_puts_r+0x8c>
 80037c4:	6823      	ldr	r3, [r4, #0]
 80037c6:	1c5a      	adds	r2, r3, #1
 80037c8:	6022      	str	r2, [r4, #0]
 80037ca:	7019      	strb	r1, [r3, #0]
 80037cc:	68a3      	ldr	r3, [r4, #8]
 80037ce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80037d2:	3b01      	subs	r3, #1
 80037d4:	60a3      	str	r3, [r4, #8]
 80037d6:	2900      	cmp	r1, #0
 80037d8:	d1ed      	bne.n	80037b6 <_puts_r+0x52>
 80037da:	2b00      	cmp	r3, #0
 80037dc:	da11      	bge.n	8003802 <_puts_r+0x9e>
 80037de:	4622      	mov	r2, r4
 80037e0:	210a      	movs	r1, #10
 80037e2:	4628      	mov	r0, r5
 80037e4:	f000 f87f 	bl	80038e6 <__swbuf_r>
 80037e8:	3001      	adds	r0, #1
 80037ea:	d0d7      	beq.n	800379c <_puts_r+0x38>
 80037ec:	250a      	movs	r5, #10
 80037ee:	e7d7      	b.n	80037a0 <_puts_r+0x3c>
 80037f0:	4622      	mov	r2, r4
 80037f2:	4628      	mov	r0, r5
 80037f4:	f000 f877 	bl	80038e6 <__swbuf_r>
 80037f8:	3001      	adds	r0, #1
 80037fa:	d1e7      	bne.n	80037cc <_puts_r+0x68>
 80037fc:	e7ce      	b.n	800379c <_puts_r+0x38>
 80037fe:	3e01      	subs	r6, #1
 8003800:	e7e4      	b.n	80037cc <_puts_r+0x68>
 8003802:	6823      	ldr	r3, [r4, #0]
 8003804:	1c5a      	adds	r2, r3, #1
 8003806:	6022      	str	r2, [r4, #0]
 8003808:	220a      	movs	r2, #10
 800380a:	701a      	strb	r2, [r3, #0]
 800380c:	e7ee      	b.n	80037ec <_puts_r+0x88>
	...

08003810 <puts>:
 8003810:	4b02      	ldr	r3, [pc, #8]	@ (800381c <puts+0xc>)
 8003812:	4601      	mov	r1, r0
 8003814:	6818      	ldr	r0, [r3, #0]
 8003816:	f7ff bfa5 	b.w	8003764 <_puts_r>
 800381a:	bf00      	nop
 800381c:	20000024 	.word	0x20000024

08003820 <siprintf>:
 8003820:	b40e      	push	{r1, r2, r3}
 8003822:	b500      	push	{lr}
 8003824:	b09c      	sub	sp, #112	@ 0x70
 8003826:	ab1d      	add	r3, sp, #116	@ 0x74
 8003828:	9002      	str	r0, [sp, #8]
 800382a:	9006      	str	r0, [sp, #24]
 800382c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003830:	4809      	ldr	r0, [pc, #36]	@ (8003858 <siprintf+0x38>)
 8003832:	9107      	str	r1, [sp, #28]
 8003834:	9104      	str	r1, [sp, #16]
 8003836:	4909      	ldr	r1, [pc, #36]	@ (800385c <siprintf+0x3c>)
 8003838:	f853 2b04 	ldr.w	r2, [r3], #4
 800383c:	9105      	str	r1, [sp, #20]
 800383e:	6800      	ldr	r0, [r0, #0]
 8003840:	9301      	str	r3, [sp, #4]
 8003842:	a902      	add	r1, sp, #8
 8003844:	f000 fb82 	bl	8003f4c <_svfiprintf_r>
 8003848:	9b02      	ldr	r3, [sp, #8]
 800384a:	2200      	movs	r2, #0
 800384c:	701a      	strb	r2, [r3, #0]
 800384e:	b01c      	add	sp, #112	@ 0x70
 8003850:	f85d eb04 	ldr.w	lr, [sp], #4
 8003854:	b003      	add	sp, #12
 8003856:	4770      	bx	lr
 8003858:	20000024 	.word	0x20000024
 800385c:	ffff0208 	.word	0xffff0208

08003860 <__sread>:
 8003860:	b510      	push	{r4, lr}
 8003862:	460c      	mov	r4, r1
 8003864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003868:	f000 f98e 	bl	8003b88 <_read_r>
 800386c:	2800      	cmp	r0, #0
 800386e:	bfab      	itete	ge
 8003870:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003872:	89a3      	ldrhlt	r3, [r4, #12]
 8003874:	181b      	addge	r3, r3, r0
 8003876:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800387a:	bfac      	ite	ge
 800387c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800387e:	81a3      	strhlt	r3, [r4, #12]
 8003880:	bd10      	pop	{r4, pc}

08003882 <__swrite>:
 8003882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003886:	461f      	mov	r7, r3
 8003888:	898b      	ldrh	r3, [r1, #12]
 800388a:	05db      	lsls	r3, r3, #23
 800388c:	4605      	mov	r5, r0
 800388e:	460c      	mov	r4, r1
 8003890:	4616      	mov	r6, r2
 8003892:	d505      	bpl.n	80038a0 <__swrite+0x1e>
 8003894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003898:	2302      	movs	r3, #2
 800389a:	2200      	movs	r2, #0
 800389c:	f000 f962 	bl	8003b64 <_lseek_r>
 80038a0:	89a3      	ldrh	r3, [r4, #12]
 80038a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80038aa:	81a3      	strh	r3, [r4, #12]
 80038ac:	4632      	mov	r2, r6
 80038ae:	463b      	mov	r3, r7
 80038b0:	4628      	mov	r0, r5
 80038b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038b6:	f000 b979 	b.w	8003bac <_write_r>

080038ba <__sseek>:
 80038ba:	b510      	push	{r4, lr}
 80038bc:	460c      	mov	r4, r1
 80038be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038c2:	f000 f94f 	bl	8003b64 <_lseek_r>
 80038c6:	1c43      	adds	r3, r0, #1
 80038c8:	89a3      	ldrh	r3, [r4, #12]
 80038ca:	bf15      	itete	ne
 80038cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80038ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80038d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80038d6:	81a3      	strheq	r3, [r4, #12]
 80038d8:	bf18      	it	ne
 80038da:	81a3      	strhne	r3, [r4, #12]
 80038dc:	bd10      	pop	{r4, pc}

080038de <__sclose>:
 80038de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038e2:	f000 b92f 	b.w	8003b44 <_close_r>

080038e6 <__swbuf_r>:
 80038e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e8:	460e      	mov	r6, r1
 80038ea:	4614      	mov	r4, r2
 80038ec:	4605      	mov	r5, r0
 80038ee:	b118      	cbz	r0, 80038f8 <__swbuf_r+0x12>
 80038f0:	6a03      	ldr	r3, [r0, #32]
 80038f2:	b90b      	cbnz	r3, 80038f8 <__swbuf_r+0x12>
 80038f4:	f7ff fee6 	bl	80036c4 <__sinit>
 80038f8:	69a3      	ldr	r3, [r4, #24]
 80038fa:	60a3      	str	r3, [r4, #8]
 80038fc:	89a3      	ldrh	r3, [r4, #12]
 80038fe:	071a      	lsls	r2, r3, #28
 8003900:	d501      	bpl.n	8003906 <__swbuf_r+0x20>
 8003902:	6923      	ldr	r3, [r4, #16]
 8003904:	b943      	cbnz	r3, 8003918 <__swbuf_r+0x32>
 8003906:	4621      	mov	r1, r4
 8003908:	4628      	mov	r0, r5
 800390a:	f000 f82b 	bl	8003964 <__swsetup_r>
 800390e:	b118      	cbz	r0, 8003918 <__swbuf_r+0x32>
 8003910:	f04f 37ff 	mov.w	r7, #4294967295
 8003914:	4638      	mov	r0, r7
 8003916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003918:	6823      	ldr	r3, [r4, #0]
 800391a:	6922      	ldr	r2, [r4, #16]
 800391c:	1a98      	subs	r0, r3, r2
 800391e:	6963      	ldr	r3, [r4, #20]
 8003920:	b2f6      	uxtb	r6, r6
 8003922:	4283      	cmp	r3, r0
 8003924:	4637      	mov	r7, r6
 8003926:	dc05      	bgt.n	8003934 <__swbuf_r+0x4e>
 8003928:	4621      	mov	r1, r4
 800392a:	4628      	mov	r0, r5
 800392c:	f000 ff5e 	bl	80047ec <_fflush_r>
 8003930:	2800      	cmp	r0, #0
 8003932:	d1ed      	bne.n	8003910 <__swbuf_r+0x2a>
 8003934:	68a3      	ldr	r3, [r4, #8]
 8003936:	3b01      	subs	r3, #1
 8003938:	60a3      	str	r3, [r4, #8]
 800393a:	6823      	ldr	r3, [r4, #0]
 800393c:	1c5a      	adds	r2, r3, #1
 800393e:	6022      	str	r2, [r4, #0]
 8003940:	701e      	strb	r6, [r3, #0]
 8003942:	6962      	ldr	r2, [r4, #20]
 8003944:	1c43      	adds	r3, r0, #1
 8003946:	429a      	cmp	r2, r3
 8003948:	d004      	beq.n	8003954 <__swbuf_r+0x6e>
 800394a:	89a3      	ldrh	r3, [r4, #12]
 800394c:	07db      	lsls	r3, r3, #31
 800394e:	d5e1      	bpl.n	8003914 <__swbuf_r+0x2e>
 8003950:	2e0a      	cmp	r6, #10
 8003952:	d1df      	bne.n	8003914 <__swbuf_r+0x2e>
 8003954:	4621      	mov	r1, r4
 8003956:	4628      	mov	r0, r5
 8003958:	f000 ff48 	bl	80047ec <_fflush_r>
 800395c:	2800      	cmp	r0, #0
 800395e:	d0d9      	beq.n	8003914 <__swbuf_r+0x2e>
 8003960:	e7d6      	b.n	8003910 <__swbuf_r+0x2a>
	...

08003964 <__swsetup_r>:
 8003964:	b538      	push	{r3, r4, r5, lr}
 8003966:	4b29      	ldr	r3, [pc, #164]	@ (8003a0c <__swsetup_r+0xa8>)
 8003968:	4605      	mov	r5, r0
 800396a:	6818      	ldr	r0, [r3, #0]
 800396c:	460c      	mov	r4, r1
 800396e:	b118      	cbz	r0, 8003978 <__swsetup_r+0x14>
 8003970:	6a03      	ldr	r3, [r0, #32]
 8003972:	b90b      	cbnz	r3, 8003978 <__swsetup_r+0x14>
 8003974:	f7ff fea6 	bl	80036c4 <__sinit>
 8003978:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800397c:	0719      	lsls	r1, r3, #28
 800397e:	d422      	bmi.n	80039c6 <__swsetup_r+0x62>
 8003980:	06da      	lsls	r2, r3, #27
 8003982:	d407      	bmi.n	8003994 <__swsetup_r+0x30>
 8003984:	2209      	movs	r2, #9
 8003986:	602a      	str	r2, [r5, #0]
 8003988:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800398c:	81a3      	strh	r3, [r4, #12]
 800398e:	f04f 30ff 	mov.w	r0, #4294967295
 8003992:	e033      	b.n	80039fc <__swsetup_r+0x98>
 8003994:	0758      	lsls	r0, r3, #29
 8003996:	d512      	bpl.n	80039be <__swsetup_r+0x5a>
 8003998:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800399a:	b141      	cbz	r1, 80039ae <__swsetup_r+0x4a>
 800399c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80039a0:	4299      	cmp	r1, r3
 80039a2:	d002      	beq.n	80039aa <__swsetup_r+0x46>
 80039a4:	4628      	mov	r0, r5
 80039a6:	f000 f975 	bl	8003c94 <_free_r>
 80039aa:	2300      	movs	r3, #0
 80039ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80039ae:	89a3      	ldrh	r3, [r4, #12]
 80039b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80039b4:	81a3      	strh	r3, [r4, #12]
 80039b6:	2300      	movs	r3, #0
 80039b8:	6063      	str	r3, [r4, #4]
 80039ba:	6923      	ldr	r3, [r4, #16]
 80039bc:	6023      	str	r3, [r4, #0]
 80039be:	89a3      	ldrh	r3, [r4, #12]
 80039c0:	f043 0308 	orr.w	r3, r3, #8
 80039c4:	81a3      	strh	r3, [r4, #12]
 80039c6:	6923      	ldr	r3, [r4, #16]
 80039c8:	b94b      	cbnz	r3, 80039de <__swsetup_r+0x7a>
 80039ca:	89a3      	ldrh	r3, [r4, #12]
 80039cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80039d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039d4:	d003      	beq.n	80039de <__swsetup_r+0x7a>
 80039d6:	4621      	mov	r1, r4
 80039d8:	4628      	mov	r0, r5
 80039da:	f000 ff67 	bl	80048ac <__smakebuf_r>
 80039de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039e2:	f013 0201 	ands.w	r2, r3, #1
 80039e6:	d00a      	beq.n	80039fe <__swsetup_r+0x9a>
 80039e8:	2200      	movs	r2, #0
 80039ea:	60a2      	str	r2, [r4, #8]
 80039ec:	6962      	ldr	r2, [r4, #20]
 80039ee:	4252      	negs	r2, r2
 80039f0:	61a2      	str	r2, [r4, #24]
 80039f2:	6922      	ldr	r2, [r4, #16]
 80039f4:	b942      	cbnz	r2, 8003a08 <__swsetup_r+0xa4>
 80039f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80039fa:	d1c5      	bne.n	8003988 <__swsetup_r+0x24>
 80039fc:	bd38      	pop	{r3, r4, r5, pc}
 80039fe:	0799      	lsls	r1, r3, #30
 8003a00:	bf58      	it	pl
 8003a02:	6962      	ldrpl	r2, [r4, #20]
 8003a04:	60a2      	str	r2, [r4, #8]
 8003a06:	e7f4      	b.n	80039f2 <__swsetup_r+0x8e>
 8003a08:	2000      	movs	r0, #0
 8003a0a:	e7f7      	b.n	80039fc <__swsetup_r+0x98>
 8003a0c:	20000024 	.word	0x20000024

08003a10 <memset>:
 8003a10:	4402      	add	r2, r0
 8003a12:	4603      	mov	r3, r0
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d100      	bne.n	8003a1a <memset+0xa>
 8003a18:	4770      	bx	lr
 8003a1a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a1e:	e7f9      	b.n	8003a14 <memset+0x4>

08003a20 <strchr>:
 8003a20:	b2c9      	uxtb	r1, r1
 8003a22:	4603      	mov	r3, r0
 8003a24:	4618      	mov	r0, r3
 8003a26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a2a:	b112      	cbz	r2, 8003a32 <strchr+0x12>
 8003a2c:	428a      	cmp	r2, r1
 8003a2e:	d1f9      	bne.n	8003a24 <strchr+0x4>
 8003a30:	4770      	bx	lr
 8003a32:	2900      	cmp	r1, #0
 8003a34:	bf18      	it	ne
 8003a36:	2000      	movne	r0, #0
 8003a38:	4770      	bx	lr

08003a3a <strncmp>:
 8003a3a:	b510      	push	{r4, lr}
 8003a3c:	b16a      	cbz	r2, 8003a5a <strncmp+0x20>
 8003a3e:	3901      	subs	r1, #1
 8003a40:	1884      	adds	r4, r0, r2
 8003a42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a46:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d103      	bne.n	8003a56 <strncmp+0x1c>
 8003a4e:	42a0      	cmp	r0, r4
 8003a50:	d001      	beq.n	8003a56 <strncmp+0x1c>
 8003a52:	2a00      	cmp	r2, #0
 8003a54:	d1f5      	bne.n	8003a42 <strncmp+0x8>
 8003a56:	1ad0      	subs	r0, r2, r3
 8003a58:	bd10      	pop	{r4, pc}
 8003a5a:	4610      	mov	r0, r2
 8003a5c:	e7fc      	b.n	8003a58 <strncmp+0x1e>
	...

08003a60 <strtok>:
 8003a60:	4b16      	ldr	r3, [pc, #88]	@ (8003abc <strtok+0x5c>)
 8003a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a66:	681f      	ldr	r7, [r3, #0]
 8003a68:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8003a6a:	4605      	mov	r5, r0
 8003a6c:	460e      	mov	r6, r1
 8003a6e:	b9ec      	cbnz	r4, 8003aac <strtok+0x4c>
 8003a70:	2050      	movs	r0, #80	@ 0x50
 8003a72:	f000 f959 	bl	8003d28 <malloc>
 8003a76:	4602      	mov	r2, r0
 8003a78:	6478      	str	r0, [r7, #68]	@ 0x44
 8003a7a:	b920      	cbnz	r0, 8003a86 <strtok+0x26>
 8003a7c:	4b10      	ldr	r3, [pc, #64]	@ (8003ac0 <strtok+0x60>)
 8003a7e:	4811      	ldr	r0, [pc, #68]	@ (8003ac4 <strtok+0x64>)
 8003a80:	215b      	movs	r1, #91	@ 0x5b
 8003a82:	f000 f8e9 	bl	8003c58 <__assert_func>
 8003a86:	e9c0 4400 	strd	r4, r4, [r0]
 8003a8a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003a8e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003a92:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8003a96:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8003a9a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8003a9e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8003aa2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8003aa6:	6184      	str	r4, [r0, #24]
 8003aa8:	7704      	strb	r4, [r0, #28]
 8003aaa:	6244      	str	r4, [r0, #36]	@ 0x24
 8003aac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003aae:	4631      	mov	r1, r6
 8003ab0:	4628      	mov	r0, r5
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ab8:	f000 b806 	b.w	8003ac8 <__strtok_r>
 8003abc:	20000024 	.word	0x20000024
 8003ac0:	08005225 	.word	0x08005225
 8003ac4:	0800523c 	.word	0x0800523c

08003ac8 <__strtok_r>:
 8003ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aca:	4604      	mov	r4, r0
 8003acc:	b908      	cbnz	r0, 8003ad2 <__strtok_r+0xa>
 8003ace:	6814      	ldr	r4, [r2, #0]
 8003ad0:	b144      	cbz	r4, 8003ae4 <__strtok_r+0x1c>
 8003ad2:	4620      	mov	r0, r4
 8003ad4:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003ad8:	460f      	mov	r7, r1
 8003ada:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003ade:	b91e      	cbnz	r6, 8003ae8 <__strtok_r+0x20>
 8003ae0:	b965      	cbnz	r5, 8003afc <__strtok_r+0x34>
 8003ae2:	6015      	str	r5, [r2, #0]
 8003ae4:	2000      	movs	r0, #0
 8003ae6:	e005      	b.n	8003af4 <__strtok_r+0x2c>
 8003ae8:	42b5      	cmp	r5, r6
 8003aea:	d1f6      	bne.n	8003ada <__strtok_r+0x12>
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1f0      	bne.n	8003ad2 <__strtok_r+0xa>
 8003af0:	6014      	str	r4, [r2, #0]
 8003af2:	7003      	strb	r3, [r0, #0]
 8003af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003af6:	461c      	mov	r4, r3
 8003af8:	e00c      	b.n	8003b14 <__strtok_r+0x4c>
 8003afa:	b915      	cbnz	r5, 8003b02 <__strtok_r+0x3a>
 8003afc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003b00:	460e      	mov	r6, r1
 8003b02:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003b06:	42ab      	cmp	r3, r5
 8003b08:	d1f7      	bne.n	8003afa <__strtok_r+0x32>
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d0f3      	beq.n	8003af6 <__strtok_r+0x2e>
 8003b0e:	2300      	movs	r3, #0
 8003b10:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003b14:	6014      	str	r4, [r2, #0]
 8003b16:	e7ed      	b.n	8003af4 <__strtok_r+0x2c>

08003b18 <strstr>:
 8003b18:	780a      	ldrb	r2, [r1, #0]
 8003b1a:	b570      	push	{r4, r5, r6, lr}
 8003b1c:	b96a      	cbnz	r2, 8003b3a <strstr+0x22>
 8003b1e:	bd70      	pop	{r4, r5, r6, pc}
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d109      	bne.n	8003b38 <strstr+0x20>
 8003b24:	460c      	mov	r4, r1
 8003b26:	4605      	mov	r5, r0
 8003b28:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0f6      	beq.n	8003b1e <strstr+0x6>
 8003b30:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003b34:	429e      	cmp	r6, r3
 8003b36:	d0f7      	beq.n	8003b28 <strstr+0x10>
 8003b38:	3001      	adds	r0, #1
 8003b3a:	7803      	ldrb	r3, [r0, #0]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1ef      	bne.n	8003b20 <strstr+0x8>
 8003b40:	4618      	mov	r0, r3
 8003b42:	e7ec      	b.n	8003b1e <strstr+0x6>

08003b44 <_close_r>:
 8003b44:	b538      	push	{r3, r4, r5, lr}
 8003b46:	4d06      	ldr	r5, [pc, #24]	@ (8003b60 <_close_r+0x1c>)
 8003b48:	2300      	movs	r3, #0
 8003b4a:	4604      	mov	r4, r0
 8003b4c:	4608      	mov	r0, r1
 8003b4e:	602b      	str	r3, [r5, #0]
 8003b50:	f7fd fb38 	bl	80011c4 <_close>
 8003b54:	1c43      	adds	r3, r0, #1
 8003b56:	d102      	bne.n	8003b5e <_close_r+0x1a>
 8003b58:	682b      	ldr	r3, [r5, #0]
 8003b5a:	b103      	cbz	r3, 8003b5e <_close_r+0x1a>
 8003b5c:	6023      	str	r3, [r4, #0]
 8003b5e:	bd38      	pop	{r3, r4, r5, pc}
 8003b60:	20000b04 	.word	0x20000b04

08003b64 <_lseek_r>:
 8003b64:	b538      	push	{r3, r4, r5, lr}
 8003b66:	4d07      	ldr	r5, [pc, #28]	@ (8003b84 <_lseek_r+0x20>)
 8003b68:	4604      	mov	r4, r0
 8003b6a:	4608      	mov	r0, r1
 8003b6c:	4611      	mov	r1, r2
 8003b6e:	2200      	movs	r2, #0
 8003b70:	602a      	str	r2, [r5, #0]
 8003b72:	461a      	mov	r2, r3
 8003b74:	f7fd fb4d 	bl	8001212 <_lseek>
 8003b78:	1c43      	adds	r3, r0, #1
 8003b7a:	d102      	bne.n	8003b82 <_lseek_r+0x1e>
 8003b7c:	682b      	ldr	r3, [r5, #0]
 8003b7e:	b103      	cbz	r3, 8003b82 <_lseek_r+0x1e>
 8003b80:	6023      	str	r3, [r4, #0]
 8003b82:	bd38      	pop	{r3, r4, r5, pc}
 8003b84:	20000b04 	.word	0x20000b04

08003b88 <_read_r>:
 8003b88:	b538      	push	{r3, r4, r5, lr}
 8003b8a:	4d07      	ldr	r5, [pc, #28]	@ (8003ba8 <_read_r+0x20>)
 8003b8c:	4604      	mov	r4, r0
 8003b8e:	4608      	mov	r0, r1
 8003b90:	4611      	mov	r1, r2
 8003b92:	2200      	movs	r2, #0
 8003b94:	602a      	str	r2, [r5, #0]
 8003b96:	461a      	mov	r2, r3
 8003b98:	f7fd fadb 	bl	8001152 <_read>
 8003b9c:	1c43      	adds	r3, r0, #1
 8003b9e:	d102      	bne.n	8003ba6 <_read_r+0x1e>
 8003ba0:	682b      	ldr	r3, [r5, #0]
 8003ba2:	b103      	cbz	r3, 8003ba6 <_read_r+0x1e>
 8003ba4:	6023      	str	r3, [r4, #0]
 8003ba6:	bd38      	pop	{r3, r4, r5, pc}
 8003ba8:	20000b04 	.word	0x20000b04

08003bac <_write_r>:
 8003bac:	b538      	push	{r3, r4, r5, lr}
 8003bae:	4d07      	ldr	r5, [pc, #28]	@ (8003bcc <_write_r+0x20>)
 8003bb0:	4604      	mov	r4, r0
 8003bb2:	4608      	mov	r0, r1
 8003bb4:	4611      	mov	r1, r2
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	602a      	str	r2, [r5, #0]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	f7fd fae6 	bl	800118c <_write>
 8003bc0:	1c43      	adds	r3, r0, #1
 8003bc2:	d102      	bne.n	8003bca <_write_r+0x1e>
 8003bc4:	682b      	ldr	r3, [r5, #0]
 8003bc6:	b103      	cbz	r3, 8003bca <_write_r+0x1e>
 8003bc8:	6023      	str	r3, [r4, #0]
 8003bca:	bd38      	pop	{r3, r4, r5, pc}
 8003bcc:	20000b04 	.word	0x20000b04

08003bd0 <__errno>:
 8003bd0:	4b01      	ldr	r3, [pc, #4]	@ (8003bd8 <__errno+0x8>)
 8003bd2:	6818      	ldr	r0, [r3, #0]
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	20000024 	.word	0x20000024

08003bdc <__libc_init_array>:
 8003bdc:	b570      	push	{r4, r5, r6, lr}
 8003bde:	4d0d      	ldr	r5, [pc, #52]	@ (8003c14 <__libc_init_array+0x38>)
 8003be0:	4c0d      	ldr	r4, [pc, #52]	@ (8003c18 <__libc_init_array+0x3c>)
 8003be2:	1b64      	subs	r4, r4, r5
 8003be4:	10a4      	asrs	r4, r4, #2
 8003be6:	2600      	movs	r6, #0
 8003be8:	42a6      	cmp	r6, r4
 8003bea:	d109      	bne.n	8003c00 <__libc_init_array+0x24>
 8003bec:	4d0b      	ldr	r5, [pc, #44]	@ (8003c1c <__libc_init_array+0x40>)
 8003bee:	4c0c      	ldr	r4, [pc, #48]	@ (8003c20 <__libc_init_array+0x44>)
 8003bf0:	f000 ff9a 	bl	8004b28 <_init>
 8003bf4:	1b64      	subs	r4, r4, r5
 8003bf6:	10a4      	asrs	r4, r4, #2
 8003bf8:	2600      	movs	r6, #0
 8003bfa:	42a6      	cmp	r6, r4
 8003bfc:	d105      	bne.n	8003c0a <__libc_init_array+0x2e>
 8003bfe:	bd70      	pop	{r4, r5, r6, pc}
 8003c00:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c04:	4798      	blx	r3
 8003c06:	3601      	adds	r6, #1
 8003c08:	e7ee      	b.n	8003be8 <__libc_init_array+0xc>
 8003c0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c0e:	4798      	blx	r3
 8003c10:	3601      	adds	r6, #1
 8003c12:	e7f2      	b.n	8003bfa <__libc_init_array+0x1e>
 8003c14:	08005310 	.word	0x08005310
 8003c18:	08005310 	.word	0x08005310
 8003c1c:	08005310 	.word	0x08005310
 8003c20:	08005314 	.word	0x08005314

08003c24 <__retarget_lock_init_recursive>:
 8003c24:	4770      	bx	lr

08003c26 <__retarget_lock_acquire_recursive>:
 8003c26:	4770      	bx	lr

08003c28 <__retarget_lock_release_recursive>:
 8003c28:	4770      	bx	lr

08003c2a <strcpy>:
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c30:	f803 2b01 	strb.w	r2, [r3], #1
 8003c34:	2a00      	cmp	r2, #0
 8003c36:	d1f9      	bne.n	8003c2c <strcpy+0x2>
 8003c38:	4770      	bx	lr

08003c3a <memcpy>:
 8003c3a:	440a      	add	r2, r1
 8003c3c:	4291      	cmp	r1, r2
 8003c3e:	f100 33ff 	add.w	r3, r0, #4294967295
 8003c42:	d100      	bne.n	8003c46 <memcpy+0xc>
 8003c44:	4770      	bx	lr
 8003c46:	b510      	push	{r4, lr}
 8003c48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c50:	4291      	cmp	r1, r2
 8003c52:	d1f9      	bne.n	8003c48 <memcpy+0xe>
 8003c54:	bd10      	pop	{r4, pc}
	...

08003c58 <__assert_func>:
 8003c58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003c5a:	4614      	mov	r4, r2
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	4b09      	ldr	r3, [pc, #36]	@ (8003c84 <__assert_func+0x2c>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4605      	mov	r5, r0
 8003c64:	68d8      	ldr	r0, [r3, #12]
 8003c66:	b954      	cbnz	r4, 8003c7e <__assert_func+0x26>
 8003c68:	4b07      	ldr	r3, [pc, #28]	@ (8003c88 <__assert_func+0x30>)
 8003c6a:	461c      	mov	r4, r3
 8003c6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003c70:	9100      	str	r1, [sp, #0]
 8003c72:	462b      	mov	r3, r5
 8003c74:	4905      	ldr	r1, [pc, #20]	@ (8003c8c <__assert_func+0x34>)
 8003c76:	f000 fde1 	bl	800483c <fiprintf>
 8003c7a:	f000 fed3 	bl	8004a24 <abort>
 8003c7e:	4b04      	ldr	r3, [pc, #16]	@ (8003c90 <__assert_func+0x38>)
 8003c80:	e7f4      	b.n	8003c6c <__assert_func+0x14>
 8003c82:	bf00      	nop
 8003c84:	20000024 	.word	0x20000024
 8003c88:	080052d1 	.word	0x080052d1
 8003c8c:	080052a3 	.word	0x080052a3
 8003c90:	08005296 	.word	0x08005296

08003c94 <_free_r>:
 8003c94:	b538      	push	{r3, r4, r5, lr}
 8003c96:	4605      	mov	r5, r0
 8003c98:	2900      	cmp	r1, #0
 8003c9a:	d041      	beq.n	8003d20 <_free_r+0x8c>
 8003c9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ca0:	1f0c      	subs	r4, r1, #4
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	bfb8      	it	lt
 8003ca6:	18e4      	addlt	r4, r4, r3
 8003ca8:	f000 f8e8 	bl	8003e7c <__malloc_lock>
 8003cac:	4a1d      	ldr	r2, [pc, #116]	@ (8003d24 <_free_r+0x90>)
 8003cae:	6813      	ldr	r3, [r2, #0]
 8003cb0:	b933      	cbnz	r3, 8003cc0 <_free_r+0x2c>
 8003cb2:	6063      	str	r3, [r4, #4]
 8003cb4:	6014      	str	r4, [r2, #0]
 8003cb6:	4628      	mov	r0, r5
 8003cb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cbc:	f000 b8e4 	b.w	8003e88 <__malloc_unlock>
 8003cc0:	42a3      	cmp	r3, r4
 8003cc2:	d908      	bls.n	8003cd6 <_free_r+0x42>
 8003cc4:	6820      	ldr	r0, [r4, #0]
 8003cc6:	1821      	adds	r1, r4, r0
 8003cc8:	428b      	cmp	r3, r1
 8003cca:	bf01      	itttt	eq
 8003ccc:	6819      	ldreq	r1, [r3, #0]
 8003cce:	685b      	ldreq	r3, [r3, #4]
 8003cd0:	1809      	addeq	r1, r1, r0
 8003cd2:	6021      	streq	r1, [r4, #0]
 8003cd4:	e7ed      	b.n	8003cb2 <_free_r+0x1e>
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	b10b      	cbz	r3, 8003ce0 <_free_r+0x4c>
 8003cdc:	42a3      	cmp	r3, r4
 8003cde:	d9fa      	bls.n	8003cd6 <_free_r+0x42>
 8003ce0:	6811      	ldr	r1, [r2, #0]
 8003ce2:	1850      	adds	r0, r2, r1
 8003ce4:	42a0      	cmp	r0, r4
 8003ce6:	d10b      	bne.n	8003d00 <_free_r+0x6c>
 8003ce8:	6820      	ldr	r0, [r4, #0]
 8003cea:	4401      	add	r1, r0
 8003cec:	1850      	adds	r0, r2, r1
 8003cee:	4283      	cmp	r3, r0
 8003cf0:	6011      	str	r1, [r2, #0]
 8003cf2:	d1e0      	bne.n	8003cb6 <_free_r+0x22>
 8003cf4:	6818      	ldr	r0, [r3, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	6053      	str	r3, [r2, #4]
 8003cfa:	4408      	add	r0, r1
 8003cfc:	6010      	str	r0, [r2, #0]
 8003cfe:	e7da      	b.n	8003cb6 <_free_r+0x22>
 8003d00:	d902      	bls.n	8003d08 <_free_r+0x74>
 8003d02:	230c      	movs	r3, #12
 8003d04:	602b      	str	r3, [r5, #0]
 8003d06:	e7d6      	b.n	8003cb6 <_free_r+0x22>
 8003d08:	6820      	ldr	r0, [r4, #0]
 8003d0a:	1821      	adds	r1, r4, r0
 8003d0c:	428b      	cmp	r3, r1
 8003d0e:	bf04      	itt	eq
 8003d10:	6819      	ldreq	r1, [r3, #0]
 8003d12:	685b      	ldreq	r3, [r3, #4]
 8003d14:	6063      	str	r3, [r4, #4]
 8003d16:	bf04      	itt	eq
 8003d18:	1809      	addeq	r1, r1, r0
 8003d1a:	6021      	streq	r1, [r4, #0]
 8003d1c:	6054      	str	r4, [r2, #4]
 8003d1e:	e7ca      	b.n	8003cb6 <_free_r+0x22>
 8003d20:	bd38      	pop	{r3, r4, r5, pc}
 8003d22:	bf00      	nop
 8003d24:	20000b10 	.word	0x20000b10

08003d28 <malloc>:
 8003d28:	4b02      	ldr	r3, [pc, #8]	@ (8003d34 <malloc+0xc>)
 8003d2a:	4601      	mov	r1, r0
 8003d2c:	6818      	ldr	r0, [r3, #0]
 8003d2e:	f000 b825 	b.w	8003d7c <_malloc_r>
 8003d32:	bf00      	nop
 8003d34:	20000024 	.word	0x20000024

08003d38 <sbrk_aligned>:
 8003d38:	b570      	push	{r4, r5, r6, lr}
 8003d3a:	4e0f      	ldr	r6, [pc, #60]	@ (8003d78 <sbrk_aligned+0x40>)
 8003d3c:	460c      	mov	r4, r1
 8003d3e:	6831      	ldr	r1, [r6, #0]
 8003d40:	4605      	mov	r5, r0
 8003d42:	b911      	cbnz	r1, 8003d4a <sbrk_aligned+0x12>
 8003d44:	f000 fe5e 	bl	8004a04 <_sbrk_r>
 8003d48:	6030      	str	r0, [r6, #0]
 8003d4a:	4621      	mov	r1, r4
 8003d4c:	4628      	mov	r0, r5
 8003d4e:	f000 fe59 	bl	8004a04 <_sbrk_r>
 8003d52:	1c43      	adds	r3, r0, #1
 8003d54:	d103      	bne.n	8003d5e <sbrk_aligned+0x26>
 8003d56:	f04f 34ff 	mov.w	r4, #4294967295
 8003d5a:	4620      	mov	r0, r4
 8003d5c:	bd70      	pop	{r4, r5, r6, pc}
 8003d5e:	1cc4      	adds	r4, r0, #3
 8003d60:	f024 0403 	bic.w	r4, r4, #3
 8003d64:	42a0      	cmp	r0, r4
 8003d66:	d0f8      	beq.n	8003d5a <sbrk_aligned+0x22>
 8003d68:	1a21      	subs	r1, r4, r0
 8003d6a:	4628      	mov	r0, r5
 8003d6c:	f000 fe4a 	bl	8004a04 <_sbrk_r>
 8003d70:	3001      	adds	r0, #1
 8003d72:	d1f2      	bne.n	8003d5a <sbrk_aligned+0x22>
 8003d74:	e7ef      	b.n	8003d56 <sbrk_aligned+0x1e>
 8003d76:	bf00      	nop
 8003d78:	20000b0c 	.word	0x20000b0c

08003d7c <_malloc_r>:
 8003d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d80:	1ccd      	adds	r5, r1, #3
 8003d82:	f025 0503 	bic.w	r5, r5, #3
 8003d86:	3508      	adds	r5, #8
 8003d88:	2d0c      	cmp	r5, #12
 8003d8a:	bf38      	it	cc
 8003d8c:	250c      	movcc	r5, #12
 8003d8e:	2d00      	cmp	r5, #0
 8003d90:	4606      	mov	r6, r0
 8003d92:	db01      	blt.n	8003d98 <_malloc_r+0x1c>
 8003d94:	42a9      	cmp	r1, r5
 8003d96:	d904      	bls.n	8003da2 <_malloc_r+0x26>
 8003d98:	230c      	movs	r3, #12
 8003d9a:	6033      	str	r3, [r6, #0]
 8003d9c:	2000      	movs	r0, #0
 8003d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003da2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003e78 <_malloc_r+0xfc>
 8003da6:	f000 f869 	bl	8003e7c <__malloc_lock>
 8003daa:	f8d8 3000 	ldr.w	r3, [r8]
 8003dae:	461c      	mov	r4, r3
 8003db0:	bb44      	cbnz	r4, 8003e04 <_malloc_r+0x88>
 8003db2:	4629      	mov	r1, r5
 8003db4:	4630      	mov	r0, r6
 8003db6:	f7ff ffbf 	bl	8003d38 <sbrk_aligned>
 8003dba:	1c43      	adds	r3, r0, #1
 8003dbc:	4604      	mov	r4, r0
 8003dbe:	d158      	bne.n	8003e72 <_malloc_r+0xf6>
 8003dc0:	f8d8 4000 	ldr.w	r4, [r8]
 8003dc4:	4627      	mov	r7, r4
 8003dc6:	2f00      	cmp	r7, #0
 8003dc8:	d143      	bne.n	8003e52 <_malloc_r+0xd6>
 8003dca:	2c00      	cmp	r4, #0
 8003dcc:	d04b      	beq.n	8003e66 <_malloc_r+0xea>
 8003dce:	6823      	ldr	r3, [r4, #0]
 8003dd0:	4639      	mov	r1, r7
 8003dd2:	4630      	mov	r0, r6
 8003dd4:	eb04 0903 	add.w	r9, r4, r3
 8003dd8:	f000 fe14 	bl	8004a04 <_sbrk_r>
 8003ddc:	4581      	cmp	r9, r0
 8003dde:	d142      	bne.n	8003e66 <_malloc_r+0xea>
 8003de0:	6821      	ldr	r1, [r4, #0]
 8003de2:	1a6d      	subs	r5, r5, r1
 8003de4:	4629      	mov	r1, r5
 8003de6:	4630      	mov	r0, r6
 8003de8:	f7ff ffa6 	bl	8003d38 <sbrk_aligned>
 8003dec:	3001      	adds	r0, #1
 8003dee:	d03a      	beq.n	8003e66 <_malloc_r+0xea>
 8003df0:	6823      	ldr	r3, [r4, #0]
 8003df2:	442b      	add	r3, r5
 8003df4:	6023      	str	r3, [r4, #0]
 8003df6:	f8d8 3000 	ldr.w	r3, [r8]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	bb62      	cbnz	r2, 8003e58 <_malloc_r+0xdc>
 8003dfe:	f8c8 7000 	str.w	r7, [r8]
 8003e02:	e00f      	b.n	8003e24 <_malloc_r+0xa8>
 8003e04:	6822      	ldr	r2, [r4, #0]
 8003e06:	1b52      	subs	r2, r2, r5
 8003e08:	d420      	bmi.n	8003e4c <_malloc_r+0xd0>
 8003e0a:	2a0b      	cmp	r2, #11
 8003e0c:	d917      	bls.n	8003e3e <_malloc_r+0xc2>
 8003e0e:	1961      	adds	r1, r4, r5
 8003e10:	42a3      	cmp	r3, r4
 8003e12:	6025      	str	r5, [r4, #0]
 8003e14:	bf18      	it	ne
 8003e16:	6059      	strne	r1, [r3, #4]
 8003e18:	6863      	ldr	r3, [r4, #4]
 8003e1a:	bf08      	it	eq
 8003e1c:	f8c8 1000 	streq.w	r1, [r8]
 8003e20:	5162      	str	r2, [r4, r5]
 8003e22:	604b      	str	r3, [r1, #4]
 8003e24:	4630      	mov	r0, r6
 8003e26:	f000 f82f 	bl	8003e88 <__malloc_unlock>
 8003e2a:	f104 000b 	add.w	r0, r4, #11
 8003e2e:	1d23      	adds	r3, r4, #4
 8003e30:	f020 0007 	bic.w	r0, r0, #7
 8003e34:	1ac2      	subs	r2, r0, r3
 8003e36:	bf1c      	itt	ne
 8003e38:	1a1b      	subne	r3, r3, r0
 8003e3a:	50a3      	strne	r3, [r4, r2]
 8003e3c:	e7af      	b.n	8003d9e <_malloc_r+0x22>
 8003e3e:	6862      	ldr	r2, [r4, #4]
 8003e40:	42a3      	cmp	r3, r4
 8003e42:	bf0c      	ite	eq
 8003e44:	f8c8 2000 	streq.w	r2, [r8]
 8003e48:	605a      	strne	r2, [r3, #4]
 8003e4a:	e7eb      	b.n	8003e24 <_malloc_r+0xa8>
 8003e4c:	4623      	mov	r3, r4
 8003e4e:	6864      	ldr	r4, [r4, #4]
 8003e50:	e7ae      	b.n	8003db0 <_malloc_r+0x34>
 8003e52:	463c      	mov	r4, r7
 8003e54:	687f      	ldr	r7, [r7, #4]
 8003e56:	e7b6      	b.n	8003dc6 <_malloc_r+0x4a>
 8003e58:	461a      	mov	r2, r3
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	42a3      	cmp	r3, r4
 8003e5e:	d1fb      	bne.n	8003e58 <_malloc_r+0xdc>
 8003e60:	2300      	movs	r3, #0
 8003e62:	6053      	str	r3, [r2, #4]
 8003e64:	e7de      	b.n	8003e24 <_malloc_r+0xa8>
 8003e66:	230c      	movs	r3, #12
 8003e68:	6033      	str	r3, [r6, #0]
 8003e6a:	4630      	mov	r0, r6
 8003e6c:	f000 f80c 	bl	8003e88 <__malloc_unlock>
 8003e70:	e794      	b.n	8003d9c <_malloc_r+0x20>
 8003e72:	6005      	str	r5, [r0, #0]
 8003e74:	e7d6      	b.n	8003e24 <_malloc_r+0xa8>
 8003e76:	bf00      	nop
 8003e78:	20000b10 	.word	0x20000b10

08003e7c <__malloc_lock>:
 8003e7c:	4801      	ldr	r0, [pc, #4]	@ (8003e84 <__malloc_lock+0x8>)
 8003e7e:	f7ff bed2 	b.w	8003c26 <__retarget_lock_acquire_recursive>
 8003e82:	bf00      	nop
 8003e84:	20000b08 	.word	0x20000b08

08003e88 <__malloc_unlock>:
 8003e88:	4801      	ldr	r0, [pc, #4]	@ (8003e90 <__malloc_unlock+0x8>)
 8003e8a:	f7ff becd 	b.w	8003c28 <__retarget_lock_release_recursive>
 8003e8e:	bf00      	nop
 8003e90:	20000b08 	.word	0x20000b08

08003e94 <__ssputs_r>:
 8003e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e98:	688e      	ldr	r6, [r1, #8]
 8003e9a:	461f      	mov	r7, r3
 8003e9c:	42be      	cmp	r6, r7
 8003e9e:	680b      	ldr	r3, [r1, #0]
 8003ea0:	4682      	mov	sl, r0
 8003ea2:	460c      	mov	r4, r1
 8003ea4:	4690      	mov	r8, r2
 8003ea6:	d82d      	bhi.n	8003f04 <__ssputs_r+0x70>
 8003ea8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003eac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003eb0:	d026      	beq.n	8003f00 <__ssputs_r+0x6c>
 8003eb2:	6965      	ldr	r5, [r4, #20]
 8003eb4:	6909      	ldr	r1, [r1, #16]
 8003eb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003eba:	eba3 0901 	sub.w	r9, r3, r1
 8003ebe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003ec2:	1c7b      	adds	r3, r7, #1
 8003ec4:	444b      	add	r3, r9
 8003ec6:	106d      	asrs	r5, r5, #1
 8003ec8:	429d      	cmp	r5, r3
 8003eca:	bf38      	it	cc
 8003ecc:	461d      	movcc	r5, r3
 8003ece:	0553      	lsls	r3, r2, #21
 8003ed0:	d527      	bpl.n	8003f22 <__ssputs_r+0x8e>
 8003ed2:	4629      	mov	r1, r5
 8003ed4:	f7ff ff52 	bl	8003d7c <_malloc_r>
 8003ed8:	4606      	mov	r6, r0
 8003eda:	b360      	cbz	r0, 8003f36 <__ssputs_r+0xa2>
 8003edc:	6921      	ldr	r1, [r4, #16]
 8003ede:	464a      	mov	r2, r9
 8003ee0:	f7ff feab 	bl	8003c3a <memcpy>
 8003ee4:	89a3      	ldrh	r3, [r4, #12]
 8003ee6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003eea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003eee:	81a3      	strh	r3, [r4, #12]
 8003ef0:	6126      	str	r6, [r4, #16]
 8003ef2:	6165      	str	r5, [r4, #20]
 8003ef4:	444e      	add	r6, r9
 8003ef6:	eba5 0509 	sub.w	r5, r5, r9
 8003efa:	6026      	str	r6, [r4, #0]
 8003efc:	60a5      	str	r5, [r4, #8]
 8003efe:	463e      	mov	r6, r7
 8003f00:	42be      	cmp	r6, r7
 8003f02:	d900      	bls.n	8003f06 <__ssputs_r+0x72>
 8003f04:	463e      	mov	r6, r7
 8003f06:	6820      	ldr	r0, [r4, #0]
 8003f08:	4632      	mov	r2, r6
 8003f0a:	4641      	mov	r1, r8
 8003f0c:	f000 fd3e 	bl	800498c <memmove>
 8003f10:	68a3      	ldr	r3, [r4, #8]
 8003f12:	1b9b      	subs	r3, r3, r6
 8003f14:	60a3      	str	r3, [r4, #8]
 8003f16:	6823      	ldr	r3, [r4, #0]
 8003f18:	4433      	add	r3, r6
 8003f1a:	6023      	str	r3, [r4, #0]
 8003f1c:	2000      	movs	r0, #0
 8003f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f22:	462a      	mov	r2, r5
 8003f24:	f000 fd85 	bl	8004a32 <_realloc_r>
 8003f28:	4606      	mov	r6, r0
 8003f2a:	2800      	cmp	r0, #0
 8003f2c:	d1e0      	bne.n	8003ef0 <__ssputs_r+0x5c>
 8003f2e:	6921      	ldr	r1, [r4, #16]
 8003f30:	4650      	mov	r0, sl
 8003f32:	f7ff feaf 	bl	8003c94 <_free_r>
 8003f36:	230c      	movs	r3, #12
 8003f38:	f8ca 3000 	str.w	r3, [sl]
 8003f3c:	89a3      	ldrh	r3, [r4, #12]
 8003f3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f42:	81a3      	strh	r3, [r4, #12]
 8003f44:	f04f 30ff 	mov.w	r0, #4294967295
 8003f48:	e7e9      	b.n	8003f1e <__ssputs_r+0x8a>
	...

08003f4c <_svfiprintf_r>:
 8003f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f50:	4698      	mov	r8, r3
 8003f52:	898b      	ldrh	r3, [r1, #12]
 8003f54:	061b      	lsls	r3, r3, #24
 8003f56:	b09d      	sub	sp, #116	@ 0x74
 8003f58:	4607      	mov	r7, r0
 8003f5a:	460d      	mov	r5, r1
 8003f5c:	4614      	mov	r4, r2
 8003f5e:	d510      	bpl.n	8003f82 <_svfiprintf_r+0x36>
 8003f60:	690b      	ldr	r3, [r1, #16]
 8003f62:	b973      	cbnz	r3, 8003f82 <_svfiprintf_r+0x36>
 8003f64:	2140      	movs	r1, #64	@ 0x40
 8003f66:	f7ff ff09 	bl	8003d7c <_malloc_r>
 8003f6a:	6028      	str	r0, [r5, #0]
 8003f6c:	6128      	str	r0, [r5, #16]
 8003f6e:	b930      	cbnz	r0, 8003f7e <_svfiprintf_r+0x32>
 8003f70:	230c      	movs	r3, #12
 8003f72:	603b      	str	r3, [r7, #0]
 8003f74:	f04f 30ff 	mov.w	r0, #4294967295
 8003f78:	b01d      	add	sp, #116	@ 0x74
 8003f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f7e:	2340      	movs	r3, #64	@ 0x40
 8003f80:	616b      	str	r3, [r5, #20]
 8003f82:	2300      	movs	r3, #0
 8003f84:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f86:	2320      	movs	r3, #32
 8003f88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003f8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f90:	2330      	movs	r3, #48	@ 0x30
 8003f92:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004130 <_svfiprintf_r+0x1e4>
 8003f96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003f9a:	f04f 0901 	mov.w	r9, #1
 8003f9e:	4623      	mov	r3, r4
 8003fa0:	469a      	mov	sl, r3
 8003fa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fa6:	b10a      	cbz	r2, 8003fac <_svfiprintf_r+0x60>
 8003fa8:	2a25      	cmp	r2, #37	@ 0x25
 8003faa:	d1f9      	bne.n	8003fa0 <_svfiprintf_r+0x54>
 8003fac:	ebba 0b04 	subs.w	fp, sl, r4
 8003fb0:	d00b      	beq.n	8003fca <_svfiprintf_r+0x7e>
 8003fb2:	465b      	mov	r3, fp
 8003fb4:	4622      	mov	r2, r4
 8003fb6:	4629      	mov	r1, r5
 8003fb8:	4638      	mov	r0, r7
 8003fba:	f7ff ff6b 	bl	8003e94 <__ssputs_r>
 8003fbe:	3001      	adds	r0, #1
 8003fc0:	f000 80a7 	beq.w	8004112 <_svfiprintf_r+0x1c6>
 8003fc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003fc6:	445a      	add	r2, fp
 8003fc8:	9209      	str	r2, [sp, #36]	@ 0x24
 8003fca:	f89a 3000 	ldrb.w	r3, [sl]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	f000 809f 	beq.w	8004112 <_svfiprintf_r+0x1c6>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8003fda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fde:	f10a 0a01 	add.w	sl, sl, #1
 8003fe2:	9304      	str	r3, [sp, #16]
 8003fe4:	9307      	str	r3, [sp, #28]
 8003fe6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003fea:	931a      	str	r3, [sp, #104]	@ 0x68
 8003fec:	4654      	mov	r4, sl
 8003fee:	2205      	movs	r2, #5
 8003ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ff4:	484e      	ldr	r0, [pc, #312]	@ (8004130 <_svfiprintf_r+0x1e4>)
 8003ff6:	f7fc f90b 	bl	8000210 <memchr>
 8003ffa:	9a04      	ldr	r2, [sp, #16]
 8003ffc:	b9d8      	cbnz	r0, 8004036 <_svfiprintf_r+0xea>
 8003ffe:	06d0      	lsls	r0, r2, #27
 8004000:	bf44      	itt	mi
 8004002:	2320      	movmi	r3, #32
 8004004:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004008:	0711      	lsls	r1, r2, #28
 800400a:	bf44      	itt	mi
 800400c:	232b      	movmi	r3, #43	@ 0x2b
 800400e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004012:	f89a 3000 	ldrb.w	r3, [sl]
 8004016:	2b2a      	cmp	r3, #42	@ 0x2a
 8004018:	d015      	beq.n	8004046 <_svfiprintf_r+0xfa>
 800401a:	9a07      	ldr	r2, [sp, #28]
 800401c:	4654      	mov	r4, sl
 800401e:	2000      	movs	r0, #0
 8004020:	f04f 0c0a 	mov.w	ip, #10
 8004024:	4621      	mov	r1, r4
 8004026:	f811 3b01 	ldrb.w	r3, [r1], #1
 800402a:	3b30      	subs	r3, #48	@ 0x30
 800402c:	2b09      	cmp	r3, #9
 800402e:	d94b      	bls.n	80040c8 <_svfiprintf_r+0x17c>
 8004030:	b1b0      	cbz	r0, 8004060 <_svfiprintf_r+0x114>
 8004032:	9207      	str	r2, [sp, #28]
 8004034:	e014      	b.n	8004060 <_svfiprintf_r+0x114>
 8004036:	eba0 0308 	sub.w	r3, r0, r8
 800403a:	fa09 f303 	lsl.w	r3, r9, r3
 800403e:	4313      	orrs	r3, r2
 8004040:	9304      	str	r3, [sp, #16]
 8004042:	46a2      	mov	sl, r4
 8004044:	e7d2      	b.n	8003fec <_svfiprintf_r+0xa0>
 8004046:	9b03      	ldr	r3, [sp, #12]
 8004048:	1d19      	adds	r1, r3, #4
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	9103      	str	r1, [sp, #12]
 800404e:	2b00      	cmp	r3, #0
 8004050:	bfbb      	ittet	lt
 8004052:	425b      	neglt	r3, r3
 8004054:	f042 0202 	orrlt.w	r2, r2, #2
 8004058:	9307      	strge	r3, [sp, #28]
 800405a:	9307      	strlt	r3, [sp, #28]
 800405c:	bfb8      	it	lt
 800405e:	9204      	strlt	r2, [sp, #16]
 8004060:	7823      	ldrb	r3, [r4, #0]
 8004062:	2b2e      	cmp	r3, #46	@ 0x2e
 8004064:	d10a      	bne.n	800407c <_svfiprintf_r+0x130>
 8004066:	7863      	ldrb	r3, [r4, #1]
 8004068:	2b2a      	cmp	r3, #42	@ 0x2a
 800406a:	d132      	bne.n	80040d2 <_svfiprintf_r+0x186>
 800406c:	9b03      	ldr	r3, [sp, #12]
 800406e:	1d1a      	adds	r2, r3, #4
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	9203      	str	r2, [sp, #12]
 8004074:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004078:	3402      	adds	r4, #2
 800407a:	9305      	str	r3, [sp, #20]
 800407c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004140 <_svfiprintf_r+0x1f4>
 8004080:	7821      	ldrb	r1, [r4, #0]
 8004082:	2203      	movs	r2, #3
 8004084:	4650      	mov	r0, sl
 8004086:	f7fc f8c3 	bl	8000210 <memchr>
 800408a:	b138      	cbz	r0, 800409c <_svfiprintf_r+0x150>
 800408c:	9b04      	ldr	r3, [sp, #16]
 800408e:	eba0 000a 	sub.w	r0, r0, sl
 8004092:	2240      	movs	r2, #64	@ 0x40
 8004094:	4082      	lsls	r2, r0
 8004096:	4313      	orrs	r3, r2
 8004098:	3401      	adds	r4, #1
 800409a:	9304      	str	r3, [sp, #16]
 800409c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040a0:	4824      	ldr	r0, [pc, #144]	@ (8004134 <_svfiprintf_r+0x1e8>)
 80040a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80040a6:	2206      	movs	r2, #6
 80040a8:	f7fc f8b2 	bl	8000210 <memchr>
 80040ac:	2800      	cmp	r0, #0
 80040ae:	d036      	beq.n	800411e <_svfiprintf_r+0x1d2>
 80040b0:	4b21      	ldr	r3, [pc, #132]	@ (8004138 <_svfiprintf_r+0x1ec>)
 80040b2:	bb1b      	cbnz	r3, 80040fc <_svfiprintf_r+0x1b0>
 80040b4:	9b03      	ldr	r3, [sp, #12]
 80040b6:	3307      	adds	r3, #7
 80040b8:	f023 0307 	bic.w	r3, r3, #7
 80040bc:	3308      	adds	r3, #8
 80040be:	9303      	str	r3, [sp, #12]
 80040c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040c2:	4433      	add	r3, r6
 80040c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80040c6:	e76a      	b.n	8003f9e <_svfiprintf_r+0x52>
 80040c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80040cc:	460c      	mov	r4, r1
 80040ce:	2001      	movs	r0, #1
 80040d0:	e7a8      	b.n	8004024 <_svfiprintf_r+0xd8>
 80040d2:	2300      	movs	r3, #0
 80040d4:	3401      	adds	r4, #1
 80040d6:	9305      	str	r3, [sp, #20]
 80040d8:	4619      	mov	r1, r3
 80040da:	f04f 0c0a 	mov.w	ip, #10
 80040de:	4620      	mov	r0, r4
 80040e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040e4:	3a30      	subs	r2, #48	@ 0x30
 80040e6:	2a09      	cmp	r2, #9
 80040e8:	d903      	bls.n	80040f2 <_svfiprintf_r+0x1a6>
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0c6      	beq.n	800407c <_svfiprintf_r+0x130>
 80040ee:	9105      	str	r1, [sp, #20]
 80040f0:	e7c4      	b.n	800407c <_svfiprintf_r+0x130>
 80040f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80040f6:	4604      	mov	r4, r0
 80040f8:	2301      	movs	r3, #1
 80040fa:	e7f0      	b.n	80040de <_svfiprintf_r+0x192>
 80040fc:	ab03      	add	r3, sp, #12
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	462a      	mov	r2, r5
 8004102:	4b0e      	ldr	r3, [pc, #56]	@ (800413c <_svfiprintf_r+0x1f0>)
 8004104:	a904      	add	r1, sp, #16
 8004106:	4638      	mov	r0, r7
 8004108:	f3af 8000 	nop.w
 800410c:	1c42      	adds	r2, r0, #1
 800410e:	4606      	mov	r6, r0
 8004110:	d1d6      	bne.n	80040c0 <_svfiprintf_r+0x174>
 8004112:	89ab      	ldrh	r3, [r5, #12]
 8004114:	065b      	lsls	r3, r3, #25
 8004116:	f53f af2d 	bmi.w	8003f74 <_svfiprintf_r+0x28>
 800411a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800411c:	e72c      	b.n	8003f78 <_svfiprintf_r+0x2c>
 800411e:	ab03      	add	r3, sp, #12
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	462a      	mov	r2, r5
 8004124:	4b05      	ldr	r3, [pc, #20]	@ (800413c <_svfiprintf_r+0x1f0>)
 8004126:	a904      	add	r1, sp, #16
 8004128:	4638      	mov	r0, r7
 800412a:	f000 f9bb 	bl	80044a4 <_printf_i>
 800412e:	e7ed      	b.n	800410c <_svfiprintf_r+0x1c0>
 8004130:	080052d2 	.word	0x080052d2
 8004134:	080052dc 	.word	0x080052dc
 8004138:	00000000 	.word	0x00000000
 800413c:	08003e95 	.word	0x08003e95
 8004140:	080052d8 	.word	0x080052d8

08004144 <__sfputc_r>:
 8004144:	6893      	ldr	r3, [r2, #8]
 8004146:	3b01      	subs	r3, #1
 8004148:	2b00      	cmp	r3, #0
 800414a:	b410      	push	{r4}
 800414c:	6093      	str	r3, [r2, #8]
 800414e:	da08      	bge.n	8004162 <__sfputc_r+0x1e>
 8004150:	6994      	ldr	r4, [r2, #24]
 8004152:	42a3      	cmp	r3, r4
 8004154:	db01      	blt.n	800415a <__sfputc_r+0x16>
 8004156:	290a      	cmp	r1, #10
 8004158:	d103      	bne.n	8004162 <__sfputc_r+0x1e>
 800415a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800415e:	f7ff bbc2 	b.w	80038e6 <__swbuf_r>
 8004162:	6813      	ldr	r3, [r2, #0]
 8004164:	1c58      	adds	r0, r3, #1
 8004166:	6010      	str	r0, [r2, #0]
 8004168:	7019      	strb	r1, [r3, #0]
 800416a:	4608      	mov	r0, r1
 800416c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004170:	4770      	bx	lr

08004172 <__sfputs_r>:
 8004172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004174:	4606      	mov	r6, r0
 8004176:	460f      	mov	r7, r1
 8004178:	4614      	mov	r4, r2
 800417a:	18d5      	adds	r5, r2, r3
 800417c:	42ac      	cmp	r4, r5
 800417e:	d101      	bne.n	8004184 <__sfputs_r+0x12>
 8004180:	2000      	movs	r0, #0
 8004182:	e007      	b.n	8004194 <__sfputs_r+0x22>
 8004184:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004188:	463a      	mov	r2, r7
 800418a:	4630      	mov	r0, r6
 800418c:	f7ff ffda 	bl	8004144 <__sfputc_r>
 8004190:	1c43      	adds	r3, r0, #1
 8004192:	d1f3      	bne.n	800417c <__sfputs_r+0xa>
 8004194:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004198 <_vfiprintf_r>:
 8004198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800419c:	460d      	mov	r5, r1
 800419e:	b09d      	sub	sp, #116	@ 0x74
 80041a0:	4614      	mov	r4, r2
 80041a2:	4698      	mov	r8, r3
 80041a4:	4606      	mov	r6, r0
 80041a6:	b118      	cbz	r0, 80041b0 <_vfiprintf_r+0x18>
 80041a8:	6a03      	ldr	r3, [r0, #32]
 80041aa:	b90b      	cbnz	r3, 80041b0 <_vfiprintf_r+0x18>
 80041ac:	f7ff fa8a 	bl	80036c4 <__sinit>
 80041b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80041b2:	07d9      	lsls	r1, r3, #31
 80041b4:	d405      	bmi.n	80041c2 <_vfiprintf_r+0x2a>
 80041b6:	89ab      	ldrh	r3, [r5, #12]
 80041b8:	059a      	lsls	r2, r3, #22
 80041ba:	d402      	bmi.n	80041c2 <_vfiprintf_r+0x2a>
 80041bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80041be:	f7ff fd32 	bl	8003c26 <__retarget_lock_acquire_recursive>
 80041c2:	89ab      	ldrh	r3, [r5, #12]
 80041c4:	071b      	lsls	r3, r3, #28
 80041c6:	d501      	bpl.n	80041cc <_vfiprintf_r+0x34>
 80041c8:	692b      	ldr	r3, [r5, #16]
 80041ca:	b99b      	cbnz	r3, 80041f4 <_vfiprintf_r+0x5c>
 80041cc:	4629      	mov	r1, r5
 80041ce:	4630      	mov	r0, r6
 80041d0:	f7ff fbc8 	bl	8003964 <__swsetup_r>
 80041d4:	b170      	cbz	r0, 80041f4 <_vfiprintf_r+0x5c>
 80041d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80041d8:	07dc      	lsls	r4, r3, #31
 80041da:	d504      	bpl.n	80041e6 <_vfiprintf_r+0x4e>
 80041dc:	f04f 30ff 	mov.w	r0, #4294967295
 80041e0:	b01d      	add	sp, #116	@ 0x74
 80041e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041e6:	89ab      	ldrh	r3, [r5, #12]
 80041e8:	0598      	lsls	r0, r3, #22
 80041ea:	d4f7      	bmi.n	80041dc <_vfiprintf_r+0x44>
 80041ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80041ee:	f7ff fd1b 	bl	8003c28 <__retarget_lock_release_recursive>
 80041f2:	e7f3      	b.n	80041dc <_vfiprintf_r+0x44>
 80041f4:	2300      	movs	r3, #0
 80041f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80041f8:	2320      	movs	r3, #32
 80041fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80041fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8004202:	2330      	movs	r3, #48	@ 0x30
 8004204:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80043b4 <_vfiprintf_r+0x21c>
 8004208:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800420c:	f04f 0901 	mov.w	r9, #1
 8004210:	4623      	mov	r3, r4
 8004212:	469a      	mov	sl, r3
 8004214:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004218:	b10a      	cbz	r2, 800421e <_vfiprintf_r+0x86>
 800421a:	2a25      	cmp	r2, #37	@ 0x25
 800421c:	d1f9      	bne.n	8004212 <_vfiprintf_r+0x7a>
 800421e:	ebba 0b04 	subs.w	fp, sl, r4
 8004222:	d00b      	beq.n	800423c <_vfiprintf_r+0xa4>
 8004224:	465b      	mov	r3, fp
 8004226:	4622      	mov	r2, r4
 8004228:	4629      	mov	r1, r5
 800422a:	4630      	mov	r0, r6
 800422c:	f7ff ffa1 	bl	8004172 <__sfputs_r>
 8004230:	3001      	adds	r0, #1
 8004232:	f000 80a7 	beq.w	8004384 <_vfiprintf_r+0x1ec>
 8004236:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004238:	445a      	add	r2, fp
 800423a:	9209      	str	r2, [sp, #36]	@ 0x24
 800423c:	f89a 3000 	ldrb.w	r3, [sl]
 8004240:	2b00      	cmp	r3, #0
 8004242:	f000 809f 	beq.w	8004384 <_vfiprintf_r+0x1ec>
 8004246:	2300      	movs	r3, #0
 8004248:	f04f 32ff 	mov.w	r2, #4294967295
 800424c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004250:	f10a 0a01 	add.w	sl, sl, #1
 8004254:	9304      	str	r3, [sp, #16]
 8004256:	9307      	str	r3, [sp, #28]
 8004258:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800425c:	931a      	str	r3, [sp, #104]	@ 0x68
 800425e:	4654      	mov	r4, sl
 8004260:	2205      	movs	r2, #5
 8004262:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004266:	4853      	ldr	r0, [pc, #332]	@ (80043b4 <_vfiprintf_r+0x21c>)
 8004268:	f7fb ffd2 	bl	8000210 <memchr>
 800426c:	9a04      	ldr	r2, [sp, #16]
 800426e:	b9d8      	cbnz	r0, 80042a8 <_vfiprintf_r+0x110>
 8004270:	06d1      	lsls	r1, r2, #27
 8004272:	bf44      	itt	mi
 8004274:	2320      	movmi	r3, #32
 8004276:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800427a:	0713      	lsls	r3, r2, #28
 800427c:	bf44      	itt	mi
 800427e:	232b      	movmi	r3, #43	@ 0x2b
 8004280:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004284:	f89a 3000 	ldrb.w	r3, [sl]
 8004288:	2b2a      	cmp	r3, #42	@ 0x2a
 800428a:	d015      	beq.n	80042b8 <_vfiprintf_r+0x120>
 800428c:	9a07      	ldr	r2, [sp, #28]
 800428e:	4654      	mov	r4, sl
 8004290:	2000      	movs	r0, #0
 8004292:	f04f 0c0a 	mov.w	ip, #10
 8004296:	4621      	mov	r1, r4
 8004298:	f811 3b01 	ldrb.w	r3, [r1], #1
 800429c:	3b30      	subs	r3, #48	@ 0x30
 800429e:	2b09      	cmp	r3, #9
 80042a0:	d94b      	bls.n	800433a <_vfiprintf_r+0x1a2>
 80042a2:	b1b0      	cbz	r0, 80042d2 <_vfiprintf_r+0x13a>
 80042a4:	9207      	str	r2, [sp, #28]
 80042a6:	e014      	b.n	80042d2 <_vfiprintf_r+0x13a>
 80042a8:	eba0 0308 	sub.w	r3, r0, r8
 80042ac:	fa09 f303 	lsl.w	r3, r9, r3
 80042b0:	4313      	orrs	r3, r2
 80042b2:	9304      	str	r3, [sp, #16]
 80042b4:	46a2      	mov	sl, r4
 80042b6:	e7d2      	b.n	800425e <_vfiprintf_r+0xc6>
 80042b8:	9b03      	ldr	r3, [sp, #12]
 80042ba:	1d19      	adds	r1, r3, #4
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	9103      	str	r1, [sp, #12]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	bfbb      	ittet	lt
 80042c4:	425b      	neglt	r3, r3
 80042c6:	f042 0202 	orrlt.w	r2, r2, #2
 80042ca:	9307      	strge	r3, [sp, #28]
 80042cc:	9307      	strlt	r3, [sp, #28]
 80042ce:	bfb8      	it	lt
 80042d0:	9204      	strlt	r2, [sp, #16]
 80042d2:	7823      	ldrb	r3, [r4, #0]
 80042d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80042d6:	d10a      	bne.n	80042ee <_vfiprintf_r+0x156>
 80042d8:	7863      	ldrb	r3, [r4, #1]
 80042da:	2b2a      	cmp	r3, #42	@ 0x2a
 80042dc:	d132      	bne.n	8004344 <_vfiprintf_r+0x1ac>
 80042de:	9b03      	ldr	r3, [sp, #12]
 80042e0:	1d1a      	adds	r2, r3, #4
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	9203      	str	r2, [sp, #12]
 80042e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80042ea:	3402      	adds	r4, #2
 80042ec:	9305      	str	r3, [sp, #20]
 80042ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80043c4 <_vfiprintf_r+0x22c>
 80042f2:	7821      	ldrb	r1, [r4, #0]
 80042f4:	2203      	movs	r2, #3
 80042f6:	4650      	mov	r0, sl
 80042f8:	f7fb ff8a 	bl	8000210 <memchr>
 80042fc:	b138      	cbz	r0, 800430e <_vfiprintf_r+0x176>
 80042fe:	9b04      	ldr	r3, [sp, #16]
 8004300:	eba0 000a 	sub.w	r0, r0, sl
 8004304:	2240      	movs	r2, #64	@ 0x40
 8004306:	4082      	lsls	r2, r0
 8004308:	4313      	orrs	r3, r2
 800430a:	3401      	adds	r4, #1
 800430c:	9304      	str	r3, [sp, #16]
 800430e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004312:	4829      	ldr	r0, [pc, #164]	@ (80043b8 <_vfiprintf_r+0x220>)
 8004314:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004318:	2206      	movs	r2, #6
 800431a:	f7fb ff79 	bl	8000210 <memchr>
 800431e:	2800      	cmp	r0, #0
 8004320:	d03f      	beq.n	80043a2 <_vfiprintf_r+0x20a>
 8004322:	4b26      	ldr	r3, [pc, #152]	@ (80043bc <_vfiprintf_r+0x224>)
 8004324:	bb1b      	cbnz	r3, 800436e <_vfiprintf_r+0x1d6>
 8004326:	9b03      	ldr	r3, [sp, #12]
 8004328:	3307      	adds	r3, #7
 800432a:	f023 0307 	bic.w	r3, r3, #7
 800432e:	3308      	adds	r3, #8
 8004330:	9303      	str	r3, [sp, #12]
 8004332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004334:	443b      	add	r3, r7
 8004336:	9309      	str	r3, [sp, #36]	@ 0x24
 8004338:	e76a      	b.n	8004210 <_vfiprintf_r+0x78>
 800433a:	fb0c 3202 	mla	r2, ip, r2, r3
 800433e:	460c      	mov	r4, r1
 8004340:	2001      	movs	r0, #1
 8004342:	e7a8      	b.n	8004296 <_vfiprintf_r+0xfe>
 8004344:	2300      	movs	r3, #0
 8004346:	3401      	adds	r4, #1
 8004348:	9305      	str	r3, [sp, #20]
 800434a:	4619      	mov	r1, r3
 800434c:	f04f 0c0a 	mov.w	ip, #10
 8004350:	4620      	mov	r0, r4
 8004352:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004356:	3a30      	subs	r2, #48	@ 0x30
 8004358:	2a09      	cmp	r2, #9
 800435a:	d903      	bls.n	8004364 <_vfiprintf_r+0x1cc>
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0c6      	beq.n	80042ee <_vfiprintf_r+0x156>
 8004360:	9105      	str	r1, [sp, #20]
 8004362:	e7c4      	b.n	80042ee <_vfiprintf_r+0x156>
 8004364:	fb0c 2101 	mla	r1, ip, r1, r2
 8004368:	4604      	mov	r4, r0
 800436a:	2301      	movs	r3, #1
 800436c:	e7f0      	b.n	8004350 <_vfiprintf_r+0x1b8>
 800436e:	ab03      	add	r3, sp, #12
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	462a      	mov	r2, r5
 8004374:	4b12      	ldr	r3, [pc, #72]	@ (80043c0 <_vfiprintf_r+0x228>)
 8004376:	a904      	add	r1, sp, #16
 8004378:	4630      	mov	r0, r6
 800437a:	f3af 8000 	nop.w
 800437e:	4607      	mov	r7, r0
 8004380:	1c78      	adds	r0, r7, #1
 8004382:	d1d6      	bne.n	8004332 <_vfiprintf_r+0x19a>
 8004384:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004386:	07d9      	lsls	r1, r3, #31
 8004388:	d405      	bmi.n	8004396 <_vfiprintf_r+0x1fe>
 800438a:	89ab      	ldrh	r3, [r5, #12]
 800438c:	059a      	lsls	r2, r3, #22
 800438e:	d402      	bmi.n	8004396 <_vfiprintf_r+0x1fe>
 8004390:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004392:	f7ff fc49 	bl	8003c28 <__retarget_lock_release_recursive>
 8004396:	89ab      	ldrh	r3, [r5, #12]
 8004398:	065b      	lsls	r3, r3, #25
 800439a:	f53f af1f 	bmi.w	80041dc <_vfiprintf_r+0x44>
 800439e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80043a0:	e71e      	b.n	80041e0 <_vfiprintf_r+0x48>
 80043a2:	ab03      	add	r3, sp, #12
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	462a      	mov	r2, r5
 80043a8:	4b05      	ldr	r3, [pc, #20]	@ (80043c0 <_vfiprintf_r+0x228>)
 80043aa:	a904      	add	r1, sp, #16
 80043ac:	4630      	mov	r0, r6
 80043ae:	f000 f879 	bl	80044a4 <_printf_i>
 80043b2:	e7e4      	b.n	800437e <_vfiprintf_r+0x1e6>
 80043b4:	080052d2 	.word	0x080052d2
 80043b8:	080052dc 	.word	0x080052dc
 80043bc:	00000000 	.word	0x00000000
 80043c0:	08004173 	.word	0x08004173
 80043c4:	080052d8 	.word	0x080052d8

080043c8 <_printf_common>:
 80043c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043cc:	4616      	mov	r6, r2
 80043ce:	4698      	mov	r8, r3
 80043d0:	688a      	ldr	r2, [r1, #8]
 80043d2:	690b      	ldr	r3, [r1, #16]
 80043d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80043d8:	4293      	cmp	r3, r2
 80043da:	bfb8      	it	lt
 80043dc:	4613      	movlt	r3, r2
 80043de:	6033      	str	r3, [r6, #0]
 80043e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80043e4:	4607      	mov	r7, r0
 80043e6:	460c      	mov	r4, r1
 80043e8:	b10a      	cbz	r2, 80043ee <_printf_common+0x26>
 80043ea:	3301      	adds	r3, #1
 80043ec:	6033      	str	r3, [r6, #0]
 80043ee:	6823      	ldr	r3, [r4, #0]
 80043f0:	0699      	lsls	r1, r3, #26
 80043f2:	bf42      	ittt	mi
 80043f4:	6833      	ldrmi	r3, [r6, #0]
 80043f6:	3302      	addmi	r3, #2
 80043f8:	6033      	strmi	r3, [r6, #0]
 80043fa:	6825      	ldr	r5, [r4, #0]
 80043fc:	f015 0506 	ands.w	r5, r5, #6
 8004400:	d106      	bne.n	8004410 <_printf_common+0x48>
 8004402:	f104 0a19 	add.w	sl, r4, #25
 8004406:	68e3      	ldr	r3, [r4, #12]
 8004408:	6832      	ldr	r2, [r6, #0]
 800440a:	1a9b      	subs	r3, r3, r2
 800440c:	42ab      	cmp	r3, r5
 800440e:	dc26      	bgt.n	800445e <_printf_common+0x96>
 8004410:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004414:	6822      	ldr	r2, [r4, #0]
 8004416:	3b00      	subs	r3, #0
 8004418:	bf18      	it	ne
 800441a:	2301      	movne	r3, #1
 800441c:	0692      	lsls	r2, r2, #26
 800441e:	d42b      	bmi.n	8004478 <_printf_common+0xb0>
 8004420:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004424:	4641      	mov	r1, r8
 8004426:	4638      	mov	r0, r7
 8004428:	47c8      	blx	r9
 800442a:	3001      	adds	r0, #1
 800442c:	d01e      	beq.n	800446c <_printf_common+0xa4>
 800442e:	6823      	ldr	r3, [r4, #0]
 8004430:	6922      	ldr	r2, [r4, #16]
 8004432:	f003 0306 	and.w	r3, r3, #6
 8004436:	2b04      	cmp	r3, #4
 8004438:	bf02      	ittt	eq
 800443a:	68e5      	ldreq	r5, [r4, #12]
 800443c:	6833      	ldreq	r3, [r6, #0]
 800443e:	1aed      	subeq	r5, r5, r3
 8004440:	68a3      	ldr	r3, [r4, #8]
 8004442:	bf0c      	ite	eq
 8004444:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004448:	2500      	movne	r5, #0
 800444a:	4293      	cmp	r3, r2
 800444c:	bfc4      	itt	gt
 800444e:	1a9b      	subgt	r3, r3, r2
 8004450:	18ed      	addgt	r5, r5, r3
 8004452:	2600      	movs	r6, #0
 8004454:	341a      	adds	r4, #26
 8004456:	42b5      	cmp	r5, r6
 8004458:	d11a      	bne.n	8004490 <_printf_common+0xc8>
 800445a:	2000      	movs	r0, #0
 800445c:	e008      	b.n	8004470 <_printf_common+0xa8>
 800445e:	2301      	movs	r3, #1
 8004460:	4652      	mov	r2, sl
 8004462:	4641      	mov	r1, r8
 8004464:	4638      	mov	r0, r7
 8004466:	47c8      	blx	r9
 8004468:	3001      	adds	r0, #1
 800446a:	d103      	bne.n	8004474 <_printf_common+0xac>
 800446c:	f04f 30ff 	mov.w	r0, #4294967295
 8004470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004474:	3501      	adds	r5, #1
 8004476:	e7c6      	b.n	8004406 <_printf_common+0x3e>
 8004478:	18e1      	adds	r1, r4, r3
 800447a:	1c5a      	adds	r2, r3, #1
 800447c:	2030      	movs	r0, #48	@ 0x30
 800447e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004482:	4422      	add	r2, r4
 8004484:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004488:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800448c:	3302      	adds	r3, #2
 800448e:	e7c7      	b.n	8004420 <_printf_common+0x58>
 8004490:	2301      	movs	r3, #1
 8004492:	4622      	mov	r2, r4
 8004494:	4641      	mov	r1, r8
 8004496:	4638      	mov	r0, r7
 8004498:	47c8      	blx	r9
 800449a:	3001      	adds	r0, #1
 800449c:	d0e6      	beq.n	800446c <_printf_common+0xa4>
 800449e:	3601      	adds	r6, #1
 80044a0:	e7d9      	b.n	8004456 <_printf_common+0x8e>
	...

080044a4 <_printf_i>:
 80044a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044a8:	7e0f      	ldrb	r7, [r1, #24]
 80044aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80044ac:	2f78      	cmp	r7, #120	@ 0x78
 80044ae:	4691      	mov	r9, r2
 80044b0:	4680      	mov	r8, r0
 80044b2:	460c      	mov	r4, r1
 80044b4:	469a      	mov	sl, r3
 80044b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80044ba:	d807      	bhi.n	80044cc <_printf_i+0x28>
 80044bc:	2f62      	cmp	r7, #98	@ 0x62
 80044be:	d80a      	bhi.n	80044d6 <_printf_i+0x32>
 80044c0:	2f00      	cmp	r7, #0
 80044c2:	f000 80d2 	beq.w	800466a <_printf_i+0x1c6>
 80044c6:	2f58      	cmp	r7, #88	@ 0x58
 80044c8:	f000 80b9 	beq.w	800463e <_printf_i+0x19a>
 80044cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80044d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80044d4:	e03a      	b.n	800454c <_printf_i+0xa8>
 80044d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80044da:	2b15      	cmp	r3, #21
 80044dc:	d8f6      	bhi.n	80044cc <_printf_i+0x28>
 80044de:	a101      	add	r1, pc, #4	@ (adr r1, 80044e4 <_printf_i+0x40>)
 80044e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044e4:	0800453d 	.word	0x0800453d
 80044e8:	08004551 	.word	0x08004551
 80044ec:	080044cd 	.word	0x080044cd
 80044f0:	080044cd 	.word	0x080044cd
 80044f4:	080044cd 	.word	0x080044cd
 80044f8:	080044cd 	.word	0x080044cd
 80044fc:	08004551 	.word	0x08004551
 8004500:	080044cd 	.word	0x080044cd
 8004504:	080044cd 	.word	0x080044cd
 8004508:	080044cd 	.word	0x080044cd
 800450c:	080044cd 	.word	0x080044cd
 8004510:	08004651 	.word	0x08004651
 8004514:	0800457b 	.word	0x0800457b
 8004518:	0800460b 	.word	0x0800460b
 800451c:	080044cd 	.word	0x080044cd
 8004520:	080044cd 	.word	0x080044cd
 8004524:	08004673 	.word	0x08004673
 8004528:	080044cd 	.word	0x080044cd
 800452c:	0800457b 	.word	0x0800457b
 8004530:	080044cd 	.word	0x080044cd
 8004534:	080044cd 	.word	0x080044cd
 8004538:	08004613 	.word	0x08004613
 800453c:	6833      	ldr	r3, [r6, #0]
 800453e:	1d1a      	adds	r2, r3, #4
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	6032      	str	r2, [r6, #0]
 8004544:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004548:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800454c:	2301      	movs	r3, #1
 800454e:	e09d      	b.n	800468c <_printf_i+0x1e8>
 8004550:	6833      	ldr	r3, [r6, #0]
 8004552:	6820      	ldr	r0, [r4, #0]
 8004554:	1d19      	adds	r1, r3, #4
 8004556:	6031      	str	r1, [r6, #0]
 8004558:	0606      	lsls	r6, r0, #24
 800455a:	d501      	bpl.n	8004560 <_printf_i+0xbc>
 800455c:	681d      	ldr	r5, [r3, #0]
 800455e:	e003      	b.n	8004568 <_printf_i+0xc4>
 8004560:	0645      	lsls	r5, r0, #25
 8004562:	d5fb      	bpl.n	800455c <_printf_i+0xb8>
 8004564:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004568:	2d00      	cmp	r5, #0
 800456a:	da03      	bge.n	8004574 <_printf_i+0xd0>
 800456c:	232d      	movs	r3, #45	@ 0x2d
 800456e:	426d      	negs	r5, r5
 8004570:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004574:	4859      	ldr	r0, [pc, #356]	@ (80046dc <_printf_i+0x238>)
 8004576:	230a      	movs	r3, #10
 8004578:	e011      	b.n	800459e <_printf_i+0xfa>
 800457a:	6821      	ldr	r1, [r4, #0]
 800457c:	6833      	ldr	r3, [r6, #0]
 800457e:	0608      	lsls	r0, r1, #24
 8004580:	f853 5b04 	ldr.w	r5, [r3], #4
 8004584:	d402      	bmi.n	800458c <_printf_i+0xe8>
 8004586:	0649      	lsls	r1, r1, #25
 8004588:	bf48      	it	mi
 800458a:	b2ad      	uxthmi	r5, r5
 800458c:	2f6f      	cmp	r7, #111	@ 0x6f
 800458e:	4853      	ldr	r0, [pc, #332]	@ (80046dc <_printf_i+0x238>)
 8004590:	6033      	str	r3, [r6, #0]
 8004592:	bf14      	ite	ne
 8004594:	230a      	movne	r3, #10
 8004596:	2308      	moveq	r3, #8
 8004598:	2100      	movs	r1, #0
 800459a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800459e:	6866      	ldr	r6, [r4, #4]
 80045a0:	60a6      	str	r6, [r4, #8]
 80045a2:	2e00      	cmp	r6, #0
 80045a4:	bfa2      	ittt	ge
 80045a6:	6821      	ldrge	r1, [r4, #0]
 80045a8:	f021 0104 	bicge.w	r1, r1, #4
 80045ac:	6021      	strge	r1, [r4, #0]
 80045ae:	b90d      	cbnz	r5, 80045b4 <_printf_i+0x110>
 80045b0:	2e00      	cmp	r6, #0
 80045b2:	d04b      	beq.n	800464c <_printf_i+0x1a8>
 80045b4:	4616      	mov	r6, r2
 80045b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80045ba:	fb03 5711 	mls	r7, r3, r1, r5
 80045be:	5dc7      	ldrb	r7, [r0, r7]
 80045c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80045c4:	462f      	mov	r7, r5
 80045c6:	42bb      	cmp	r3, r7
 80045c8:	460d      	mov	r5, r1
 80045ca:	d9f4      	bls.n	80045b6 <_printf_i+0x112>
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d10b      	bne.n	80045e8 <_printf_i+0x144>
 80045d0:	6823      	ldr	r3, [r4, #0]
 80045d2:	07df      	lsls	r7, r3, #31
 80045d4:	d508      	bpl.n	80045e8 <_printf_i+0x144>
 80045d6:	6923      	ldr	r3, [r4, #16]
 80045d8:	6861      	ldr	r1, [r4, #4]
 80045da:	4299      	cmp	r1, r3
 80045dc:	bfde      	ittt	le
 80045de:	2330      	movle	r3, #48	@ 0x30
 80045e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80045e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80045e8:	1b92      	subs	r2, r2, r6
 80045ea:	6122      	str	r2, [r4, #16]
 80045ec:	f8cd a000 	str.w	sl, [sp]
 80045f0:	464b      	mov	r3, r9
 80045f2:	aa03      	add	r2, sp, #12
 80045f4:	4621      	mov	r1, r4
 80045f6:	4640      	mov	r0, r8
 80045f8:	f7ff fee6 	bl	80043c8 <_printf_common>
 80045fc:	3001      	adds	r0, #1
 80045fe:	d14a      	bne.n	8004696 <_printf_i+0x1f2>
 8004600:	f04f 30ff 	mov.w	r0, #4294967295
 8004604:	b004      	add	sp, #16
 8004606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800460a:	6823      	ldr	r3, [r4, #0]
 800460c:	f043 0320 	orr.w	r3, r3, #32
 8004610:	6023      	str	r3, [r4, #0]
 8004612:	4833      	ldr	r0, [pc, #204]	@ (80046e0 <_printf_i+0x23c>)
 8004614:	2778      	movs	r7, #120	@ 0x78
 8004616:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800461a:	6823      	ldr	r3, [r4, #0]
 800461c:	6831      	ldr	r1, [r6, #0]
 800461e:	061f      	lsls	r7, r3, #24
 8004620:	f851 5b04 	ldr.w	r5, [r1], #4
 8004624:	d402      	bmi.n	800462c <_printf_i+0x188>
 8004626:	065f      	lsls	r7, r3, #25
 8004628:	bf48      	it	mi
 800462a:	b2ad      	uxthmi	r5, r5
 800462c:	6031      	str	r1, [r6, #0]
 800462e:	07d9      	lsls	r1, r3, #31
 8004630:	bf44      	itt	mi
 8004632:	f043 0320 	orrmi.w	r3, r3, #32
 8004636:	6023      	strmi	r3, [r4, #0]
 8004638:	b11d      	cbz	r5, 8004642 <_printf_i+0x19e>
 800463a:	2310      	movs	r3, #16
 800463c:	e7ac      	b.n	8004598 <_printf_i+0xf4>
 800463e:	4827      	ldr	r0, [pc, #156]	@ (80046dc <_printf_i+0x238>)
 8004640:	e7e9      	b.n	8004616 <_printf_i+0x172>
 8004642:	6823      	ldr	r3, [r4, #0]
 8004644:	f023 0320 	bic.w	r3, r3, #32
 8004648:	6023      	str	r3, [r4, #0]
 800464a:	e7f6      	b.n	800463a <_printf_i+0x196>
 800464c:	4616      	mov	r6, r2
 800464e:	e7bd      	b.n	80045cc <_printf_i+0x128>
 8004650:	6833      	ldr	r3, [r6, #0]
 8004652:	6825      	ldr	r5, [r4, #0]
 8004654:	6961      	ldr	r1, [r4, #20]
 8004656:	1d18      	adds	r0, r3, #4
 8004658:	6030      	str	r0, [r6, #0]
 800465a:	062e      	lsls	r6, r5, #24
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	d501      	bpl.n	8004664 <_printf_i+0x1c0>
 8004660:	6019      	str	r1, [r3, #0]
 8004662:	e002      	b.n	800466a <_printf_i+0x1c6>
 8004664:	0668      	lsls	r0, r5, #25
 8004666:	d5fb      	bpl.n	8004660 <_printf_i+0x1bc>
 8004668:	8019      	strh	r1, [r3, #0]
 800466a:	2300      	movs	r3, #0
 800466c:	6123      	str	r3, [r4, #16]
 800466e:	4616      	mov	r6, r2
 8004670:	e7bc      	b.n	80045ec <_printf_i+0x148>
 8004672:	6833      	ldr	r3, [r6, #0]
 8004674:	1d1a      	adds	r2, r3, #4
 8004676:	6032      	str	r2, [r6, #0]
 8004678:	681e      	ldr	r6, [r3, #0]
 800467a:	6862      	ldr	r2, [r4, #4]
 800467c:	2100      	movs	r1, #0
 800467e:	4630      	mov	r0, r6
 8004680:	f7fb fdc6 	bl	8000210 <memchr>
 8004684:	b108      	cbz	r0, 800468a <_printf_i+0x1e6>
 8004686:	1b80      	subs	r0, r0, r6
 8004688:	6060      	str	r0, [r4, #4]
 800468a:	6863      	ldr	r3, [r4, #4]
 800468c:	6123      	str	r3, [r4, #16]
 800468e:	2300      	movs	r3, #0
 8004690:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004694:	e7aa      	b.n	80045ec <_printf_i+0x148>
 8004696:	6923      	ldr	r3, [r4, #16]
 8004698:	4632      	mov	r2, r6
 800469a:	4649      	mov	r1, r9
 800469c:	4640      	mov	r0, r8
 800469e:	47d0      	blx	sl
 80046a0:	3001      	adds	r0, #1
 80046a2:	d0ad      	beq.n	8004600 <_printf_i+0x15c>
 80046a4:	6823      	ldr	r3, [r4, #0]
 80046a6:	079b      	lsls	r3, r3, #30
 80046a8:	d413      	bmi.n	80046d2 <_printf_i+0x22e>
 80046aa:	68e0      	ldr	r0, [r4, #12]
 80046ac:	9b03      	ldr	r3, [sp, #12]
 80046ae:	4298      	cmp	r0, r3
 80046b0:	bfb8      	it	lt
 80046b2:	4618      	movlt	r0, r3
 80046b4:	e7a6      	b.n	8004604 <_printf_i+0x160>
 80046b6:	2301      	movs	r3, #1
 80046b8:	4632      	mov	r2, r6
 80046ba:	4649      	mov	r1, r9
 80046bc:	4640      	mov	r0, r8
 80046be:	47d0      	blx	sl
 80046c0:	3001      	adds	r0, #1
 80046c2:	d09d      	beq.n	8004600 <_printf_i+0x15c>
 80046c4:	3501      	adds	r5, #1
 80046c6:	68e3      	ldr	r3, [r4, #12]
 80046c8:	9903      	ldr	r1, [sp, #12]
 80046ca:	1a5b      	subs	r3, r3, r1
 80046cc:	42ab      	cmp	r3, r5
 80046ce:	dcf2      	bgt.n	80046b6 <_printf_i+0x212>
 80046d0:	e7eb      	b.n	80046aa <_printf_i+0x206>
 80046d2:	2500      	movs	r5, #0
 80046d4:	f104 0619 	add.w	r6, r4, #25
 80046d8:	e7f5      	b.n	80046c6 <_printf_i+0x222>
 80046da:	bf00      	nop
 80046dc:	080052e3 	.word	0x080052e3
 80046e0:	080052f4 	.word	0x080052f4

080046e4 <__sflush_r>:
 80046e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80046e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046ec:	0716      	lsls	r6, r2, #28
 80046ee:	4605      	mov	r5, r0
 80046f0:	460c      	mov	r4, r1
 80046f2:	d454      	bmi.n	800479e <__sflush_r+0xba>
 80046f4:	684b      	ldr	r3, [r1, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	dc02      	bgt.n	8004700 <__sflush_r+0x1c>
 80046fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	dd48      	ble.n	8004792 <__sflush_r+0xae>
 8004700:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004702:	2e00      	cmp	r6, #0
 8004704:	d045      	beq.n	8004792 <__sflush_r+0xae>
 8004706:	2300      	movs	r3, #0
 8004708:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800470c:	682f      	ldr	r7, [r5, #0]
 800470e:	6a21      	ldr	r1, [r4, #32]
 8004710:	602b      	str	r3, [r5, #0]
 8004712:	d030      	beq.n	8004776 <__sflush_r+0x92>
 8004714:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004716:	89a3      	ldrh	r3, [r4, #12]
 8004718:	0759      	lsls	r1, r3, #29
 800471a:	d505      	bpl.n	8004728 <__sflush_r+0x44>
 800471c:	6863      	ldr	r3, [r4, #4]
 800471e:	1ad2      	subs	r2, r2, r3
 8004720:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004722:	b10b      	cbz	r3, 8004728 <__sflush_r+0x44>
 8004724:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004726:	1ad2      	subs	r2, r2, r3
 8004728:	2300      	movs	r3, #0
 800472a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800472c:	6a21      	ldr	r1, [r4, #32]
 800472e:	4628      	mov	r0, r5
 8004730:	47b0      	blx	r6
 8004732:	1c43      	adds	r3, r0, #1
 8004734:	89a3      	ldrh	r3, [r4, #12]
 8004736:	d106      	bne.n	8004746 <__sflush_r+0x62>
 8004738:	6829      	ldr	r1, [r5, #0]
 800473a:	291d      	cmp	r1, #29
 800473c:	d82b      	bhi.n	8004796 <__sflush_r+0xb2>
 800473e:	4a2a      	ldr	r2, [pc, #168]	@ (80047e8 <__sflush_r+0x104>)
 8004740:	410a      	asrs	r2, r1
 8004742:	07d6      	lsls	r6, r2, #31
 8004744:	d427      	bmi.n	8004796 <__sflush_r+0xb2>
 8004746:	2200      	movs	r2, #0
 8004748:	6062      	str	r2, [r4, #4]
 800474a:	04d9      	lsls	r1, r3, #19
 800474c:	6922      	ldr	r2, [r4, #16]
 800474e:	6022      	str	r2, [r4, #0]
 8004750:	d504      	bpl.n	800475c <__sflush_r+0x78>
 8004752:	1c42      	adds	r2, r0, #1
 8004754:	d101      	bne.n	800475a <__sflush_r+0x76>
 8004756:	682b      	ldr	r3, [r5, #0]
 8004758:	b903      	cbnz	r3, 800475c <__sflush_r+0x78>
 800475a:	6560      	str	r0, [r4, #84]	@ 0x54
 800475c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800475e:	602f      	str	r7, [r5, #0]
 8004760:	b1b9      	cbz	r1, 8004792 <__sflush_r+0xae>
 8004762:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004766:	4299      	cmp	r1, r3
 8004768:	d002      	beq.n	8004770 <__sflush_r+0x8c>
 800476a:	4628      	mov	r0, r5
 800476c:	f7ff fa92 	bl	8003c94 <_free_r>
 8004770:	2300      	movs	r3, #0
 8004772:	6363      	str	r3, [r4, #52]	@ 0x34
 8004774:	e00d      	b.n	8004792 <__sflush_r+0xae>
 8004776:	2301      	movs	r3, #1
 8004778:	4628      	mov	r0, r5
 800477a:	47b0      	blx	r6
 800477c:	4602      	mov	r2, r0
 800477e:	1c50      	adds	r0, r2, #1
 8004780:	d1c9      	bne.n	8004716 <__sflush_r+0x32>
 8004782:	682b      	ldr	r3, [r5, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0c6      	beq.n	8004716 <__sflush_r+0x32>
 8004788:	2b1d      	cmp	r3, #29
 800478a:	d001      	beq.n	8004790 <__sflush_r+0xac>
 800478c:	2b16      	cmp	r3, #22
 800478e:	d11e      	bne.n	80047ce <__sflush_r+0xea>
 8004790:	602f      	str	r7, [r5, #0]
 8004792:	2000      	movs	r0, #0
 8004794:	e022      	b.n	80047dc <__sflush_r+0xf8>
 8004796:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800479a:	b21b      	sxth	r3, r3
 800479c:	e01b      	b.n	80047d6 <__sflush_r+0xf2>
 800479e:	690f      	ldr	r7, [r1, #16]
 80047a0:	2f00      	cmp	r7, #0
 80047a2:	d0f6      	beq.n	8004792 <__sflush_r+0xae>
 80047a4:	0793      	lsls	r3, r2, #30
 80047a6:	680e      	ldr	r6, [r1, #0]
 80047a8:	bf08      	it	eq
 80047aa:	694b      	ldreq	r3, [r1, #20]
 80047ac:	600f      	str	r7, [r1, #0]
 80047ae:	bf18      	it	ne
 80047b0:	2300      	movne	r3, #0
 80047b2:	eba6 0807 	sub.w	r8, r6, r7
 80047b6:	608b      	str	r3, [r1, #8]
 80047b8:	f1b8 0f00 	cmp.w	r8, #0
 80047bc:	dde9      	ble.n	8004792 <__sflush_r+0xae>
 80047be:	6a21      	ldr	r1, [r4, #32]
 80047c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80047c2:	4643      	mov	r3, r8
 80047c4:	463a      	mov	r2, r7
 80047c6:	4628      	mov	r0, r5
 80047c8:	47b0      	blx	r6
 80047ca:	2800      	cmp	r0, #0
 80047cc:	dc08      	bgt.n	80047e0 <__sflush_r+0xfc>
 80047ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047d6:	81a3      	strh	r3, [r4, #12]
 80047d8:	f04f 30ff 	mov.w	r0, #4294967295
 80047dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047e0:	4407      	add	r7, r0
 80047e2:	eba8 0800 	sub.w	r8, r8, r0
 80047e6:	e7e7      	b.n	80047b8 <__sflush_r+0xd4>
 80047e8:	dfbffffe 	.word	0xdfbffffe

080047ec <_fflush_r>:
 80047ec:	b538      	push	{r3, r4, r5, lr}
 80047ee:	690b      	ldr	r3, [r1, #16]
 80047f0:	4605      	mov	r5, r0
 80047f2:	460c      	mov	r4, r1
 80047f4:	b913      	cbnz	r3, 80047fc <_fflush_r+0x10>
 80047f6:	2500      	movs	r5, #0
 80047f8:	4628      	mov	r0, r5
 80047fa:	bd38      	pop	{r3, r4, r5, pc}
 80047fc:	b118      	cbz	r0, 8004806 <_fflush_r+0x1a>
 80047fe:	6a03      	ldr	r3, [r0, #32]
 8004800:	b90b      	cbnz	r3, 8004806 <_fflush_r+0x1a>
 8004802:	f7fe ff5f 	bl	80036c4 <__sinit>
 8004806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d0f3      	beq.n	80047f6 <_fflush_r+0xa>
 800480e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004810:	07d0      	lsls	r0, r2, #31
 8004812:	d404      	bmi.n	800481e <_fflush_r+0x32>
 8004814:	0599      	lsls	r1, r3, #22
 8004816:	d402      	bmi.n	800481e <_fflush_r+0x32>
 8004818:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800481a:	f7ff fa04 	bl	8003c26 <__retarget_lock_acquire_recursive>
 800481e:	4628      	mov	r0, r5
 8004820:	4621      	mov	r1, r4
 8004822:	f7ff ff5f 	bl	80046e4 <__sflush_r>
 8004826:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004828:	07da      	lsls	r2, r3, #31
 800482a:	4605      	mov	r5, r0
 800482c:	d4e4      	bmi.n	80047f8 <_fflush_r+0xc>
 800482e:	89a3      	ldrh	r3, [r4, #12]
 8004830:	059b      	lsls	r3, r3, #22
 8004832:	d4e1      	bmi.n	80047f8 <_fflush_r+0xc>
 8004834:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004836:	f7ff f9f7 	bl	8003c28 <__retarget_lock_release_recursive>
 800483a:	e7dd      	b.n	80047f8 <_fflush_r+0xc>

0800483c <fiprintf>:
 800483c:	b40e      	push	{r1, r2, r3}
 800483e:	b503      	push	{r0, r1, lr}
 8004840:	4601      	mov	r1, r0
 8004842:	ab03      	add	r3, sp, #12
 8004844:	4805      	ldr	r0, [pc, #20]	@ (800485c <fiprintf+0x20>)
 8004846:	f853 2b04 	ldr.w	r2, [r3], #4
 800484a:	6800      	ldr	r0, [r0, #0]
 800484c:	9301      	str	r3, [sp, #4]
 800484e:	f7ff fca3 	bl	8004198 <_vfiprintf_r>
 8004852:	b002      	add	sp, #8
 8004854:	f85d eb04 	ldr.w	lr, [sp], #4
 8004858:	b003      	add	sp, #12
 800485a:	4770      	bx	lr
 800485c:	20000024 	.word	0x20000024

08004860 <__swhatbuf_r>:
 8004860:	b570      	push	{r4, r5, r6, lr}
 8004862:	460c      	mov	r4, r1
 8004864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004868:	2900      	cmp	r1, #0
 800486a:	b096      	sub	sp, #88	@ 0x58
 800486c:	4615      	mov	r5, r2
 800486e:	461e      	mov	r6, r3
 8004870:	da0d      	bge.n	800488e <__swhatbuf_r+0x2e>
 8004872:	89a3      	ldrh	r3, [r4, #12]
 8004874:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004878:	f04f 0100 	mov.w	r1, #0
 800487c:	bf14      	ite	ne
 800487e:	2340      	movne	r3, #64	@ 0x40
 8004880:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004884:	2000      	movs	r0, #0
 8004886:	6031      	str	r1, [r6, #0]
 8004888:	602b      	str	r3, [r5, #0]
 800488a:	b016      	add	sp, #88	@ 0x58
 800488c:	bd70      	pop	{r4, r5, r6, pc}
 800488e:	466a      	mov	r2, sp
 8004890:	f000 f896 	bl	80049c0 <_fstat_r>
 8004894:	2800      	cmp	r0, #0
 8004896:	dbec      	blt.n	8004872 <__swhatbuf_r+0x12>
 8004898:	9901      	ldr	r1, [sp, #4]
 800489a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800489e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80048a2:	4259      	negs	r1, r3
 80048a4:	4159      	adcs	r1, r3
 80048a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048aa:	e7eb      	b.n	8004884 <__swhatbuf_r+0x24>

080048ac <__smakebuf_r>:
 80048ac:	898b      	ldrh	r3, [r1, #12]
 80048ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048b0:	079d      	lsls	r5, r3, #30
 80048b2:	4606      	mov	r6, r0
 80048b4:	460c      	mov	r4, r1
 80048b6:	d507      	bpl.n	80048c8 <__smakebuf_r+0x1c>
 80048b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80048bc:	6023      	str	r3, [r4, #0]
 80048be:	6123      	str	r3, [r4, #16]
 80048c0:	2301      	movs	r3, #1
 80048c2:	6163      	str	r3, [r4, #20]
 80048c4:	b003      	add	sp, #12
 80048c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048c8:	ab01      	add	r3, sp, #4
 80048ca:	466a      	mov	r2, sp
 80048cc:	f7ff ffc8 	bl	8004860 <__swhatbuf_r>
 80048d0:	9f00      	ldr	r7, [sp, #0]
 80048d2:	4605      	mov	r5, r0
 80048d4:	4639      	mov	r1, r7
 80048d6:	4630      	mov	r0, r6
 80048d8:	f7ff fa50 	bl	8003d7c <_malloc_r>
 80048dc:	b948      	cbnz	r0, 80048f2 <__smakebuf_r+0x46>
 80048de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048e2:	059a      	lsls	r2, r3, #22
 80048e4:	d4ee      	bmi.n	80048c4 <__smakebuf_r+0x18>
 80048e6:	f023 0303 	bic.w	r3, r3, #3
 80048ea:	f043 0302 	orr.w	r3, r3, #2
 80048ee:	81a3      	strh	r3, [r4, #12]
 80048f0:	e7e2      	b.n	80048b8 <__smakebuf_r+0xc>
 80048f2:	89a3      	ldrh	r3, [r4, #12]
 80048f4:	6020      	str	r0, [r4, #0]
 80048f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048fa:	81a3      	strh	r3, [r4, #12]
 80048fc:	9b01      	ldr	r3, [sp, #4]
 80048fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004902:	b15b      	cbz	r3, 800491c <__smakebuf_r+0x70>
 8004904:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004908:	4630      	mov	r0, r6
 800490a:	f000 f86b 	bl	80049e4 <_isatty_r>
 800490e:	b128      	cbz	r0, 800491c <__smakebuf_r+0x70>
 8004910:	89a3      	ldrh	r3, [r4, #12]
 8004912:	f023 0303 	bic.w	r3, r3, #3
 8004916:	f043 0301 	orr.w	r3, r3, #1
 800491a:	81a3      	strh	r3, [r4, #12]
 800491c:	89a3      	ldrh	r3, [r4, #12]
 800491e:	431d      	orrs	r5, r3
 8004920:	81a5      	strh	r5, [r4, #12]
 8004922:	e7cf      	b.n	80048c4 <__smakebuf_r+0x18>

08004924 <_putc_r>:
 8004924:	b570      	push	{r4, r5, r6, lr}
 8004926:	460d      	mov	r5, r1
 8004928:	4614      	mov	r4, r2
 800492a:	4606      	mov	r6, r0
 800492c:	b118      	cbz	r0, 8004936 <_putc_r+0x12>
 800492e:	6a03      	ldr	r3, [r0, #32]
 8004930:	b90b      	cbnz	r3, 8004936 <_putc_r+0x12>
 8004932:	f7fe fec7 	bl	80036c4 <__sinit>
 8004936:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004938:	07d8      	lsls	r0, r3, #31
 800493a:	d405      	bmi.n	8004948 <_putc_r+0x24>
 800493c:	89a3      	ldrh	r3, [r4, #12]
 800493e:	0599      	lsls	r1, r3, #22
 8004940:	d402      	bmi.n	8004948 <_putc_r+0x24>
 8004942:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004944:	f7ff f96f 	bl	8003c26 <__retarget_lock_acquire_recursive>
 8004948:	68a3      	ldr	r3, [r4, #8]
 800494a:	3b01      	subs	r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	60a3      	str	r3, [r4, #8]
 8004950:	da05      	bge.n	800495e <_putc_r+0x3a>
 8004952:	69a2      	ldr	r2, [r4, #24]
 8004954:	4293      	cmp	r3, r2
 8004956:	db12      	blt.n	800497e <_putc_r+0x5a>
 8004958:	b2eb      	uxtb	r3, r5
 800495a:	2b0a      	cmp	r3, #10
 800495c:	d00f      	beq.n	800497e <_putc_r+0x5a>
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	1c5a      	adds	r2, r3, #1
 8004962:	6022      	str	r2, [r4, #0]
 8004964:	701d      	strb	r5, [r3, #0]
 8004966:	b2ed      	uxtb	r5, r5
 8004968:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800496a:	07da      	lsls	r2, r3, #31
 800496c:	d405      	bmi.n	800497a <_putc_r+0x56>
 800496e:	89a3      	ldrh	r3, [r4, #12]
 8004970:	059b      	lsls	r3, r3, #22
 8004972:	d402      	bmi.n	800497a <_putc_r+0x56>
 8004974:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004976:	f7ff f957 	bl	8003c28 <__retarget_lock_release_recursive>
 800497a:	4628      	mov	r0, r5
 800497c:	bd70      	pop	{r4, r5, r6, pc}
 800497e:	4629      	mov	r1, r5
 8004980:	4622      	mov	r2, r4
 8004982:	4630      	mov	r0, r6
 8004984:	f7fe ffaf 	bl	80038e6 <__swbuf_r>
 8004988:	4605      	mov	r5, r0
 800498a:	e7ed      	b.n	8004968 <_putc_r+0x44>

0800498c <memmove>:
 800498c:	4288      	cmp	r0, r1
 800498e:	b510      	push	{r4, lr}
 8004990:	eb01 0402 	add.w	r4, r1, r2
 8004994:	d902      	bls.n	800499c <memmove+0x10>
 8004996:	4284      	cmp	r4, r0
 8004998:	4623      	mov	r3, r4
 800499a:	d807      	bhi.n	80049ac <memmove+0x20>
 800499c:	1e43      	subs	r3, r0, #1
 800499e:	42a1      	cmp	r1, r4
 80049a0:	d008      	beq.n	80049b4 <memmove+0x28>
 80049a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80049aa:	e7f8      	b.n	800499e <memmove+0x12>
 80049ac:	4402      	add	r2, r0
 80049ae:	4601      	mov	r1, r0
 80049b0:	428a      	cmp	r2, r1
 80049b2:	d100      	bne.n	80049b6 <memmove+0x2a>
 80049b4:	bd10      	pop	{r4, pc}
 80049b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80049ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80049be:	e7f7      	b.n	80049b0 <memmove+0x24>

080049c0 <_fstat_r>:
 80049c0:	b538      	push	{r3, r4, r5, lr}
 80049c2:	4d07      	ldr	r5, [pc, #28]	@ (80049e0 <_fstat_r+0x20>)
 80049c4:	2300      	movs	r3, #0
 80049c6:	4604      	mov	r4, r0
 80049c8:	4608      	mov	r0, r1
 80049ca:	4611      	mov	r1, r2
 80049cc:	602b      	str	r3, [r5, #0]
 80049ce:	f7fc fc05 	bl	80011dc <_fstat>
 80049d2:	1c43      	adds	r3, r0, #1
 80049d4:	d102      	bne.n	80049dc <_fstat_r+0x1c>
 80049d6:	682b      	ldr	r3, [r5, #0]
 80049d8:	b103      	cbz	r3, 80049dc <_fstat_r+0x1c>
 80049da:	6023      	str	r3, [r4, #0]
 80049dc:	bd38      	pop	{r3, r4, r5, pc}
 80049de:	bf00      	nop
 80049e0:	20000b04 	.word	0x20000b04

080049e4 <_isatty_r>:
 80049e4:	b538      	push	{r3, r4, r5, lr}
 80049e6:	4d06      	ldr	r5, [pc, #24]	@ (8004a00 <_isatty_r+0x1c>)
 80049e8:	2300      	movs	r3, #0
 80049ea:	4604      	mov	r4, r0
 80049ec:	4608      	mov	r0, r1
 80049ee:	602b      	str	r3, [r5, #0]
 80049f0:	f7fc fc04 	bl	80011fc <_isatty>
 80049f4:	1c43      	adds	r3, r0, #1
 80049f6:	d102      	bne.n	80049fe <_isatty_r+0x1a>
 80049f8:	682b      	ldr	r3, [r5, #0]
 80049fa:	b103      	cbz	r3, 80049fe <_isatty_r+0x1a>
 80049fc:	6023      	str	r3, [r4, #0]
 80049fe:	bd38      	pop	{r3, r4, r5, pc}
 8004a00:	20000b04 	.word	0x20000b04

08004a04 <_sbrk_r>:
 8004a04:	b538      	push	{r3, r4, r5, lr}
 8004a06:	4d06      	ldr	r5, [pc, #24]	@ (8004a20 <_sbrk_r+0x1c>)
 8004a08:	2300      	movs	r3, #0
 8004a0a:	4604      	mov	r4, r0
 8004a0c:	4608      	mov	r0, r1
 8004a0e:	602b      	str	r3, [r5, #0]
 8004a10:	f7fc fc0c 	bl	800122c <_sbrk>
 8004a14:	1c43      	adds	r3, r0, #1
 8004a16:	d102      	bne.n	8004a1e <_sbrk_r+0x1a>
 8004a18:	682b      	ldr	r3, [r5, #0]
 8004a1a:	b103      	cbz	r3, 8004a1e <_sbrk_r+0x1a>
 8004a1c:	6023      	str	r3, [r4, #0]
 8004a1e:	bd38      	pop	{r3, r4, r5, pc}
 8004a20:	20000b04 	.word	0x20000b04

08004a24 <abort>:
 8004a24:	b508      	push	{r3, lr}
 8004a26:	2006      	movs	r0, #6
 8004a28:	f000 f85a 	bl	8004ae0 <raise>
 8004a2c:	2001      	movs	r0, #1
 8004a2e:	f7fc fb85 	bl	800113c <_exit>

08004a32 <_realloc_r>:
 8004a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a36:	4680      	mov	r8, r0
 8004a38:	4615      	mov	r5, r2
 8004a3a:	460c      	mov	r4, r1
 8004a3c:	b921      	cbnz	r1, 8004a48 <_realloc_r+0x16>
 8004a3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a42:	4611      	mov	r1, r2
 8004a44:	f7ff b99a 	b.w	8003d7c <_malloc_r>
 8004a48:	b92a      	cbnz	r2, 8004a56 <_realloc_r+0x24>
 8004a4a:	f7ff f923 	bl	8003c94 <_free_r>
 8004a4e:	2400      	movs	r4, #0
 8004a50:	4620      	mov	r0, r4
 8004a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a56:	f000 f85f 	bl	8004b18 <_malloc_usable_size_r>
 8004a5a:	4285      	cmp	r5, r0
 8004a5c:	4606      	mov	r6, r0
 8004a5e:	d802      	bhi.n	8004a66 <_realloc_r+0x34>
 8004a60:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004a64:	d8f4      	bhi.n	8004a50 <_realloc_r+0x1e>
 8004a66:	4629      	mov	r1, r5
 8004a68:	4640      	mov	r0, r8
 8004a6a:	f7ff f987 	bl	8003d7c <_malloc_r>
 8004a6e:	4607      	mov	r7, r0
 8004a70:	2800      	cmp	r0, #0
 8004a72:	d0ec      	beq.n	8004a4e <_realloc_r+0x1c>
 8004a74:	42b5      	cmp	r5, r6
 8004a76:	462a      	mov	r2, r5
 8004a78:	4621      	mov	r1, r4
 8004a7a:	bf28      	it	cs
 8004a7c:	4632      	movcs	r2, r6
 8004a7e:	f7ff f8dc 	bl	8003c3a <memcpy>
 8004a82:	4621      	mov	r1, r4
 8004a84:	4640      	mov	r0, r8
 8004a86:	f7ff f905 	bl	8003c94 <_free_r>
 8004a8a:	463c      	mov	r4, r7
 8004a8c:	e7e0      	b.n	8004a50 <_realloc_r+0x1e>

08004a8e <_raise_r>:
 8004a8e:	291f      	cmp	r1, #31
 8004a90:	b538      	push	{r3, r4, r5, lr}
 8004a92:	4605      	mov	r5, r0
 8004a94:	460c      	mov	r4, r1
 8004a96:	d904      	bls.n	8004aa2 <_raise_r+0x14>
 8004a98:	2316      	movs	r3, #22
 8004a9a:	6003      	str	r3, [r0, #0]
 8004a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004aa0:	bd38      	pop	{r3, r4, r5, pc}
 8004aa2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004aa4:	b112      	cbz	r2, 8004aac <_raise_r+0x1e>
 8004aa6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004aaa:	b94b      	cbnz	r3, 8004ac0 <_raise_r+0x32>
 8004aac:	4628      	mov	r0, r5
 8004aae:	f000 f831 	bl	8004b14 <_getpid_r>
 8004ab2:	4622      	mov	r2, r4
 8004ab4:	4601      	mov	r1, r0
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004abc:	f000 b818 	b.w	8004af0 <_kill_r>
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d00a      	beq.n	8004ada <_raise_r+0x4c>
 8004ac4:	1c59      	adds	r1, r3, #1
 8004ac6:	d103      	bne.n	8004ad0 <_raise_r+0x42>
 8004ac8:	2316      	movs	r3, #22
 8004aca:	6003      	str	r3, [r0, #0]
 8004acc:	2001      	movs	r0, #1
 8004ace:	e7e7      	b.n	8004aa0 <_raise_r+0x12>
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004ad6:	4620      	mov	r0, r4
 8004ad8:	4798      	blx	r3
 8004ada:	2000      	movs	r0, #0
 8004adc:	e7e0      	b.n	8004aa0 <_raise_r+0x12>
	...

08004ae0 <raise>:
 8004ae0:	4b02      	ldr	r3, [pc, #8]	@ (8004aec <raise+0xc>)
 8004ae2:	4601      	mov	r1, r0
 8004ae4:	6818      	ldr	r0, [r3, #0]
 8004ae6:	f7ff bfd2 	b.w	8004a8e <_raise_r>
 8004aea:	bf00      	nop
 8004aec:	20000024 	.word	0x20000024

08004af0 <_kill_r>:
 8004af0:	b538      	push	{r3, r4, r5, lr}
 8004af2:	4d07      	ldr	r5, [pc, #28]	@ (8004b10 <_kill_r+0x20>)
 8004af4:	2300      	movs	r3, #0
 8004af6:	4604      	mov	r4, r0
 8004af8:	4608      	mov	r0, r1
 8004afa:	4611      	mov	r1, r2
 8004afc:	602b      	str	r3, [r5, #0]
 8004afe:	f7fc fb0d 	bl	800111c <_kill>
 8004b02:	1c43      	adds	r3, r0, #1
 8004b04:	d102      	bne.n	8004b0c <_kill_r+0x1c>
 8004b06:	682b      	ldr	r3, [r5, #0]
 8004b08:	b103      	cbz	r3, 8004b0c <_kill_r+0x1c>
 8004b0a:	6023      	str	r3, [r4, #0]
 8004b0c:	bd38      	pop	{r3, r4, r5, pc}
 8004b0e:	bf00      	nop
 8004b10:	20000b04 	.word	0x20000b04

08004b14 <_getpid_r>:
 8004b14:	f7fc bafa 	b.w	800110c <_getpid>

08004b18 <_malloc_usable_size_r>:
 8004b18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b1c:	1f18      	subs	r0, r3, #4
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	bfbc      	itt	lt
 8004b22:	580b      	ldrlt	r3, [r1, r0]
 8004b24:	18c0      	addlt	r0, r0, r3
 8004b26:	4770      	bx	lr

08004b28 <_init>:
 8004b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b2a:	bf00      	nop
 8004b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b2e:	bc08      	pop	{r3}
 8004b30:	469e      	mov	lr, r3
 8004b32:	4770      	bx	lr

08004b34 <_fini>:
 8004b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b36:	bf00      	nop
 8004b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b3a:	bc08      	pop	{r3}
 8004b3c:	469e      	mov	lr, r3
 8004b3e:	4770      	bx	lr
